[
  {
    "content": "OP E R AT I NG SY S T E M S\nTH R EE EA SY PIEC ES\nRE M ZI H. A RPA CI -D U S S E A U\nANDRE A C. A RPA CI -D U S S E A U\nUNIV E RS IT Y OF WIS CONS IN \u2013M A DIS ON\n\n. .\nc\u20dd 2014 by Arpaci-Dusseau Books, Inc.\nAll rights reserved\n\ni\nT o V edat S. Arpaci, a lifelong inspiration\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\nPreface\nT o Everyone\nW elcome to this book! W e hope you\u2019ll enjoy reading it as much a s we enjoyed\nwriting it. The book is called Operating Systems: Three Easy Pieces , and the title\nis obviously an homage to one of the greatest sets of lecture n otes ever created, by\none Richard Feynman on the topic of Physics [F96]. While this book will undoubt-\nedly fall short of the high standard set by that famous physic ist, perhaps it will be\ngood enough for you in your quest to understand what operatin g systems (and\nmore generally , systems) are all about.\nThe three easy pieces refer to the three major thematic eleme nts the book is\norganized around: virtualization, concurrency, and persistence. In discussing\nthese concepts, we\u2019ll end up discussing most of the importan t things an operating\nsystem does; hopefully , you\u2019ll also have some fun along the w ay . Learning new\nthings is fun, right? At least, it should be.\nEach major concept is divided into a set of chapters, most of w hich present a\nparticular problem and then show how to solve it. The chapter s are short, and try\n(as best as possible) to reference the source material where the ideas really came\nfrom. One of our goals in writing this book is to make the paths of history as clear\nas possible, as we think that helps a student understand what is, what was, and\nwhat will be more clearly . In this case, seeing how the sausag e was made is nearly\nas important as understanding what the sausage is good for 1 .\nThere are a couple devices we use throughout the book which ar e probably\nworth introducing here. The \ufb01rst is the crux of the problem. Anytime we are\ntrying to solve a problem, we \ufb01rst try to state what the most im portant issue is;\nsuch a crux of the problem is explicitly called out in the text, and hopefully solved\nvia the techniques, algorithms, and ideas presented in the r est of the text.\nThere are also numerous asides and tips throughout the text, adding a little\ncolor to the mainline presentation. Asides tend to discuss s omething relevant (but\nperhaps not essential) to the main text; tips tend to be gener al lessons that can be\napplied to systems you build. An index at the end of the book li sts all of these tips\nand asides (as well as cruces, the odd plural of crux) for your convenience.\nW e use one of the oldest didactic methods, the dialogue, throughout the book,\nas a way of presenting some of the material in a different ligh t. These are used to\nintroduce the major thematic concepts (in a peachy way , as we will see), as well as\nto review material every now and then. They are also a chance t o write in a more\n1 Hint: eating! Or if you\u2019re a vegetarian, running away from.\niii\niv\nhumorous style. Whether you \ufb01nd them useful, or humorous, we ll, that\u2019s another\nmatter entirely .\nAt the beginning of each major section, we\u2019ll \ufb01rst present an abstraction that an\noperating system provides, and then work in subsequent chap ters on the mecha-\nnisms, policies, and other support needed to provide the abs traction. Abstractions\nare fundamental to all aspects of Computer Science, so it is p erhaps no surprise\nthat they are also essential in operating systems.\nThroughout the chapters, we try to use real code (not pseudocode) where pos-\nsible, so for virtually all examples, you should be able to ty pe them up yourself\nand run them. Running real code on real systems is the best way to learn about\noperating systems,"
  },
  {
    "content": " needed to provide the abs traction. Abstractions\nare fundamental to all aspects of Computer Science, so it is p erhaps no surprise\nthat they are also essential in operating systems.\nThroughout the chapters, we try to use real code (not pseudocode) where pos-\nsible, so for virtually all examples, you should be able to ty pe them up yourself\nand run them. Running real code on real systems is the best way to learn about\noperating systems, so we encourage you to do so when you can.\nIn various parts of the text, we have sprinkled in a few homeworks to ensure\nthat you are understanding what is going on. Many of these hom eworks are little\nsimulations of pieces of the operating system; you should download the ho me-\nworks, and run them to quiz yourself. The homework simulator s have the follow-\ning feature: by giving them a different random seed, you can g enerate a virtually\nin\ufb01nite set of problems; the simulators can also be told to so lve the problems for\nyou. Thus, you can test and re-test yourself until you have ac hieved a good level\nof understanding.\nThe most important addendum to this book is a set of projects in which you\nlearn about how real systems work by designing, implementin g, and testing your\nown code. All projects (as well as the code examples, mention ed above) are in\nthe C programming language [KR88]; C is a simple and powerful language that\nunderlies most operating systems, and thus worth adding to y our tool-chest of\nlanguages. T wo types of projects are available (see the onli ne appendix for ideas).\nThe \ufb01rst are systems programming projects; these projects are great for those who\nare new to C and U N I X and want to learn how to do low-level C programming.\nThe second type are based on a real operating system kernel de veloped at MIT\ncalled xv6 [CK+08]; these projects are great for students th at already have some C\nand want to get their hands dirty inside the OS. At W isconsin, we\u2019ve run the course\nin three different ways: either all systems programming, al l xv6 programming, or\na mix of both.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nv\nT o Educators\nIf you are an instructor or professor who wishes to use this bo ok, please feel\nfree to do so. As you may have noticed, they are free and availa ble on-line from\nthe following web page:\nhttp://www.ostep.org\nY ou can also purchase a printed copy from lulu.com. Look for it on the web\npage above.\nThe (current) proper citation for the book is as follows:\nOperating Systems: Three Easy Pieces\nRemzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau\nArpaci-Dusseau Books, Inc.\nMay , 2014 (V ersion 0.8)\nhttp://www.ostep.org\nThe course divides fairly well across a 15-week semester , in which you can\ncover most of the topics within at a reasonable level of depth . Cramming the\ncourse into a 10-week quarter probably requires dropping so me detail from each\nof the pieces. There are also a few chapters on virtual machin e monitors, which we\nusually squeeze in sometime during the semester , either rig ht at end of the large\nsection on virtualization, or near the end as an aside.\nOne slightly unusual aspect of the book is that concurrency , a topic at the front\nof many OS books, is pushed off herein until the student has bu ilt an understand-\ning of virtualization of the CPU and of memory . In our experie nce in teaching\nthis course for nearly 15 years, students have a hard time und erstanding how the\nconcurrency problem arises, or why they are trying to solve i t, if they don\u2019t yet un-\nderstand what an address space is, what a process is, or why co ntext switches can\noccur at arbitrary points in time. Once they do understand th ese concepts, how-\never , introducing the notion of threads and the problems tha t arise due to them\nbecomes rather easy , or at least, easier .\nY ou may have noticed there are no slides that go hand-in-hand with the"
  },
  {
    "content": ", if they don\u2019t yet un-\nderstand what an address space is, what a process is, or why co ntext switches can\noccur at arbitrary points in time. Once they do understand th ese concepts, how-\never , introducing the notion of threads and the problems tha t arise due to them\nbecomes rather easy , or at least, easier .\nY ou may have noticed there are no slides that go hand-in-hand with the book.\nThe major reason for this omission is that we believe in the mo st old-fashioned\nof teaching methods: chalk and a blackboard. Thus, when we te ach the course,\nwe come to class with a few major ideas and examples in mind and use the board\nto present them; handouts and live code demos sprinkled are a lso useful. In our\nexperience, using too many slides encourages students to \u201cc heck out\u201d of lecture\n(and log into facebook.com), as they know the material is the re for them to digest\nlater; using the blackboard makes lecture a \u201clive\u201d viewing e xperience and thus\n(hopefully) more interactive, dynamic, and enjoyable for t he students in your class.\nIf you\u2019d like a copy of the notes we use in preparation for clas s, please drop us\nan email. W e have already shared them with many others around the world.\nOne last request: if you use the free online chapters, please just link to them,\ninstead of making a local copy . This helps us track usage (ove r 1 million chapters\ndownloaded in the past few years!) and also ensures students get the latest and\ngreatest version.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\nvi\nT o Students\nIf you are a student reading this book, thank you! It is an hono r for us to\nprovide some material to help you in your pursuit of knowledg e about operating\nsystems. W e both think back fondly towards some textbooks of our undergraduate\ndays (e.g., Hennessy and Patterson [HP90], the classic book on computer architec-\nture) and hope this book will become one of those positive mem ories for you.\nY ou may have noticed this book is free and available online. T here is one major\nreason for this: textbooks are generally too expensive. Thi s book, we hope, is\nthe \ufb01rst of a new wave of free materials to help those in pursui t of their education,\nregardless of which part of the world they come from or how muc h they are willing\nto spend for a book. Failing that, it is one free book, which is better than none.\nW e also hope, where possible, to point you to the original sou rces of much\nof the material in the book: the great papers and persons who h ave shaped the\n\ufb01eld of operating systems over the years. Ideas are not pulle d out of the air; they\ncome from smart and hard-working people (including numerou s T uring-award\nwinners2 ), and thus we should strive to celebrate those ideas and peop le where\npossible. In doing so, we hopefully can better understand th e revolutions that\nhave taken place, instead of writing texts as if those though ts have always been\npresent [K62]. Further , perhaps such references will encou rage you to dig deeper\non your own; reading the famous papers of our \ufb01eld is certainl y one of the best\nways to learn.\n2 The T uring A ward is the highest award in Computer Science; it is like the Nobel Prize,\nexcept that you have never heard of it.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nvii\nAcknowledgments\nThis section will contain thanks to those who helped us put th e book together .\nThe important thing for now: your name could go here! But, you have to help. So\nsend us some feedback and help debug this book. And you could b e famous! Or ,\nat least, have your name in some book.\nThe people who have helped so far include: Abhirami Senthilk umaran*, Adam\nDrescher , Adam Eggum, Ahmed Fikri*, Ajaykrishna Raghavan, Alex Wyler , Anand\nM"
  },
  {
    "content": " now: your name could go here! But, you have to help. So\nsend us some feedback and help debug this book. And you could b e famous! Or ,\nat least, have your name in some book.\nThe people who have helped so far include: Abhirami Senthilk umaran*, Adam\nDrescher , Adam Eggum, Ahmed Fikri*, Ajaykrishna Raghavan, Alex Wyler , Anand\nMundada, B. Brahmananda Reddy (Minnesota), Bala Subrahman yam Kambala,\nBenita Bose, Biswajit Mazumder (Clemson), Bobby Jack, Bj \u00a8 o rn Lindberg, Bren-\nnan Payne, Brian Kroth, Cara Lauritzen, Charlotte Kissinge r , Chien-Chung Shen\n(Delaware)*, Cody Hanson, Dan Soendergaard (U. Aarhus), Da vid Hanle (Grin-\nnell), Deepika Muthukumar , Dorian Arnold (New Mexico), Dus tin Metzler , Dustin\nPassofaro, Emily Jacobson, Emmett W itchel (T exas), Ernst B iersack (France), Finn\nKuusisto*, Guilherme Baptista, Hamid Reza Ghasemi, Henry A bbey , Hrishikesh\nAmur , Huanchen Zhang*, Jake Gillberg, James Perry (U. Michi gan-Dearborn)*, Jay\nLim, Jerod W einman (Grinnell), Joel Sommers (Colgate), Jon athan Perry (MIT), Jun\nHe, Karl W allinger , Kaushik Kannan, Kevin Liu*, Lei Tian (U. Nebraska-Lincoln),\nLeslie Schultz, Lihao W ang, Martha Ferris, Masashi Kishika wa (Sony), Matt Rei-\nchoff, Matty W illiams, Meng Huang, Mike Griepentrog, Ming C hen (Stonybrook),\nMohammed Alali (Delaware), Murugan Kandaswamy , Natasha Ei lbert, Nathan\nDipiazza, Nathan Sullivan, Neeraj Badlani (N.C. State), Ne lson Gomez, Nghia\nHuynh (T exas), Patricio Jara, Radford Smith, Ripudaman Sin gh, Ross Aiken, Rus-\nlan Kiselev , Ryland Herrick, Samer Al-Kiswany , Sandeep Umm adi (Minnesota),\nSatish Chebrolu (NetApp), Satyanarayana Shanmugam*, Seth Pollen, Sharad Punuganti,\nShreevatsa R., Sivaraman Sivaraman*, Srinivasan Thirunar ayanan*, Suriyhaprakhas\nBalaram Sankari, Sy Jin Cheah, Thomas Griebel, T ongxin Zhen g, T ony Adkins,\nT orin Rudeen (Princeton), T uo W ang, V arun V ats, Xiang Peng, Xu Di, Y ue Zhuo\n(T exas A&M), Y ufui Ren, Zef RosnBrick, Zuyu Zhang. Special t hanks to those\nmarked with an asterisk above, who have gone above and beyond in their sugges-\ntions for improvement.\nSpecial thanks to Professor Joe Meehean (Lynchburg) for his detailed notes on\neach chapter , to Professor Jerod W einman (Grinnell) and his entire class for their\nincredible booklets, and to Professor Chien-Chung Shen (De laware) for his invalu-\nable and detailed reading and comments about the book. All th ree have helped\nthese authors immeasurably in the re\ufb01nement of the material s herein.\nAlso, many thanks to the hundreds of students who have taken 5 37 over the\nyears. In particular , the Fall \u201908 class who encouraged the \ufb01 rst written form of\nthese notes (they were sick of not having any kind of textbook to read \u2013 pushy\nstudents!), and then praised them enough for us to keep going (including one hi-\nlarious \u201cZOMG! Y ou should totally write a textbook!\u201d commen t in our course\nevaluations that year).\nA great debt of thanks is also owed to the brave few who took the xv6 project\nlab course, much of which is now incorporated into the main 53 7 course. From\nSpring \u201909: Justin Chern"
  },
  {
    "content": " \u2013 pushy\nstudents!), and then praised them enough for us to keep going (including one hi-\nlarious \u201cZOMG! Y ou should totally write a textbook!\u201d commen t in our course\nevaluations that year).\nA great debt of thanks is also owed to the brave few who took the xv6 project\nlab course, much of which is now incorporated into the main 53 7 course. From\nSpring \u201909: Justin Cherniak, Patrick Deline, Matt Czech, T o ny Gregerson, Michael\nGriepentrog, T yler Harter , Ryan Kroiss, Eric Radzikowski, W esley Reardan, Rajiv\nV aidyanathan, and Christopher W aclawik. From Fall \u201909: Nic k Bearson, Aaron\nBrown, Alex Bird, David Capel, Keith Gould, T om Grim, Jeffre y Hugo, Brandon\nJohnson, John Kjell, Boyan Li, James Loethen, W ill McCardel l, Ryan Szaroletta, Si-\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\nviii\nmon T so, and Ben Y ule. From Spring \u201910: Patrick Blesi, Aidan D ennis-Oehling,\nParas Doshi, Jake Friedman, Benjamin Frisch, Evan Hanson, P ikkili Hemanth,\nMichael Jeung, Alex Langenfeld, Scott Rick, Mike T reffert, Garret Staus, Brennan\nW all, Hans W erner , Soo-Y oung Y ang, and Carlos Grif\ufb01n (almos t).\nAlthough they do not directly help with the book, our graduat e students have\ntaught us much of what we know about systems. W e talk with them regularly\nwhile they are at W isconsin, but they do all the real work \u2013 and by telling us about\nwhat they are doing, we learn new things every week. This list includes the fol-\nlowing collection of current and former students with whom w e published pa-\npers; an asterisk marks those who received a Ph.D. under our g uidance: Abhishek\nRajimwale, Ao Ma, Brian Forney , Chris Dragga, Deepak Ramamu rthi, Florentina\nPopovici*, Haryadi S. Gunawi*, James Nugent, John Bent*, La nyue Lu, Lakshmi\nBairavasundaram*, Laxman V isampalli, Leo Arulraj, Meenal i Rungta, Muthian Si-\nvathanu*, Nathan Burnett*, Nitin Agrawal*, Sriram Subrama nian*, Stephen T odd\nJones*, Swaminathan Sundararaman*, Swetha Krishnan, Than h Do, Thanumalayan\nS. Pillai, Timothy Denehy*, T yler Harter , V enkat V enkatara mani, V ijay Chidambaram,\nV ijayan Prabhakaran*, Y iying Zhang*, Y upu Zhang*, Zev W eis s.\nA \ufb01nal debt of gratitude is also owed to Aaron Brown, who \ufb01rst t ook this course\nmany years ago (Spring \u201909), then took the xv6 lab course (Fal l \u201909), and \ufb01nally was\na graduate teaching assistant for the course for two years or so (Fall \u201910 through\nSpring \u201912). His tireless work has vastly improved the state of the projects (par-\nticularly those in xv6 land) and thus has helped better the le arning experience for\ncountless undergraduates and graduates here at W isconsin. As Aaron would say\n(in his usual succinct manner): \u201cThx.\u201d\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nix\nFinal W ords\nY eats famously said \u201cEducation is not the \ufb01lling of a pail but the lighting of a\n\ufb01re.\u201d He was right but wrong at the same time 3. Y ou do have to \u201c\ufb01ll the pail\u201d a bit,\nand these notes are certainly here to help with that part of yo ur education; after all,\nwhen you go to interview at Google, and they ask you"
  },
  {
    "content": "Final W ords\nY eats famously said \u201cEducation is not the \ufb01lling of a pail but the lighting of a\n\ufb01re.\u201d He was right but wrong at the same time 3. Y ou do have to \u201c\ufb01ll the pail\u201d a bit,\nand these notes are certainly here to help with that part of yo ur education; after all,\nwhen you go to interview at Google, and they ask you a trick que stion about how\nto use semaphores, it might be good to actually know what a sem aphore is, right?\nBut Y eats\u2019s larger point is obviously on the mark: the real po int of education\nis to get you interested in something, to learn something mor e about the subject\nmatter on your own and not just what you have to digest to get a g ood grade in\nsome class. As one of our fathers (Remzi\u2019s dad, V edat Arpaci) used to say , \u201cLearn\nbeyond the classroom\u201d.\nW e created these notes to spark your interest in operating sy stems, to read more\nabout the topic on your own, to talk to your professor about al l the exciting re-\nsearch that is going on in the \ufb01eld, and even to get involved wi th that research. It\nis a great \ufb01eld(!), full of exciting and wonderful ideas that have shaped computing\nhistory in profound and important ways. And while we underst and this \ufb01re won\u2019t\nlight for all of you, we hope it does for many , or even a few . Bec ause once that \ufb01re\nis lit, well, that is when you truly become capable of doing so mething great. And\nthus the real point of the educational process: to go forth, t o study many new and\nfascinating topics, to learn, to mature, and most important ly , to \ufb01nd something\nthat lights a \ufb01re for you.\nAndrea and Remzi\nMarried couple\nProfessors of Computer Science at the University of Wiscons in\nChief Lighters of Fires, hopefully 4\n3 If he actually said this; as with many famous quotes, the hist ory of this gem is murky .\n4 If this sounds like we are admitting some past history as arso nists, you are probably\nmissing the point. Probably . If this sounds cheesy , well, th at\u2019s because it is, but you\u2019ll just have\nto forgive us for that.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\nx\nReferences\n[CK+08] \u201cThe xv6 Operating System\u201d\nRuss Cox, Frans Kaashoek, Robert Morris, Nickolai Zeldovic h\nFrom: http://pdos.csail.mit.edu/6.828/2008/index.htm l\nxv6 was developed as a port of the original UNIX version 6 and represents a beautiful, clean, and simple\nway to understand a modern operating system.\n[F96] \u201cSix Easy Pieces: Essentials Of Physics Explained By I ts Most Brilliant T eacher \u201d\nRichard P . Feynman\nBasic Books, 1996\nThis book reprints the six easiest chapters of Feynman\u2019s Lec tures on Physics, from 1963. If you like\nPhysics, it is a fantastic read.\n[HP90] \u201cComputer Architecture a Quantitative Approach\u201d (1 st ed.)\nDavid A. Patterson and John L. Hennessy\nMorgan-Kaufman, 1990\nA book that encouraged each of us at our undergraduate instit utions to pursue graduate studies; we later\nboth had the pleasure of working with Patterson, who greatly shaped the foundations of our research\ncareers.\n[KR88] \u201cThe C Programming Language\u201d\nBrian Kernighan and Dennis Ritchie\nPrentice-Hall, April 1988\nThe C programming reference that everyone should have, by th e people who invented the language.\n[K62] \u201cThe Structure of Scienti\ufb01c Revolutions\u201d\nThomas S. Kuhn\nUniversity of Chicago Press, 1962\nA great and famous read about the fundamentals of the scienti \ufb01c process. Mop-up work, anomaly, crisis,\nand revolution. We are mostly destined to do mop-up work, ala s.\nOP E R AT I N G\nSY S T E M S\n[V E"
  },
  {
    "content": "[K62] \u201cThe Structure of Scienti\ufb01c Revolutions\u201d\nThomas S. Kuhn\nUniversity of Chicago Press, 1962\nA great and famous read about the fundamentals of the scienti \ufb01c process. Mop-up work, anomaly, crisis,\nand revolution. We are mostly destined to do mop-up work, ala s.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nContents\nT o Everyone . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . iii\nT o Educators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . v\nT o Students . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . vi\nAcknowledgments . . . . . . . . . . . . . . . . . . . . . . . . . . . vii\nFinal W ords . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ix\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . x\n1 A Dialogue on the Book 1\n2 Introduction to Operating Systems 3\n2.1 Virtualizing the CPU . . . . . . . . . . . . . . . . . . . . . . 5\n2.2 Virtualizing Memory . . . . . . . . . . . . . . . . . . . . . . 7\n2.3 Concurrency . . . . . . . . . . . . . . . . . . . . . . . . . . . 8\n2.4 Persistence . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n2.5 Design Goals . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n2.6 Some History . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n2.7 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19\nI Virtualization 21\n3 A Dialogue on Virtualization 23\n4 The Abstraction: The Process 25\n4.1 The Abstraction: A Process . . . . . . . . . . . . . . . . . . . 26\n4.2 Process API . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\n4.3 Process Creation: A Little More Detail . . . . . . . . . . . . 28\n4.4 Process States . . . . . . . . . . . . . . . . . . . . . . . . . . 29\n4.5 Data Structures . . . . . . . . . . . . . . . . . . . . . . . . . 30\n4.6 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33\nxi\nxii CO N T E N T S\n5 Interlude: Process API 35\n5.1 The fork() System Call . . . . . . . . . . . . . . . . . . . . 35\n5.2 Adding wait() System Call . . . . . . . . . . . . . . . . . . 37\n5.3 Finally , the exec() System Call . . . . . . . . . . . . . . . . 38\n5.4 Why? Motivating the API . . . . . . . . . . . . . . . . . . . 39\n5"
  },
  {
    "content": " . . . . . . . . . . . 35\n5.2 Adding wait() System Call . . . . . . . . . . . . . . . . . . 37\n5.3 Finally , the exec() System Call . . . . . . . . . . . . . . . . 38\n5.4 Why? Motivating the API . . . . . . . . . . . . . . . . . . . 39\n5.5 Other Parts of the API . . . . . . . . . . . . . . . . . . . . . . 42\n5.6 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\n6 Mechanism: Limited Direct Execution 45\n6.1 Basic T echnique: Limited Direct Execution . . . . . . . . . . 45\n6.2 Problem #1: Restricted Operations . . . . . . . . . . . . . . . 46\n6.3 Problem #2: Switching Between Processes . . . . . . . . . . 50\n6.4 W orried About Concurrency? . . . . . . . . . . . . . . . . . 54\n6.5 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57\nHomework (Measurement) . . . . . . . . . . . . . . . . . . . . . . 58\n7 Scheduling: Introduction 59\n7.1 W orkload Assumptions . . . . . . . . . . . . . . . . . . . . . 59\n7.2 Scheduling Metrics . . . . . . . . . . . . . . . . . . . . . . . 60\n7.3 First In, First Out (FIFO) . . . . . . . . . . . . . . . . . . . . 60\n7.4 Shortest Job First (SJF) . . . . . . . . . . . . . . . . . . . . . 62\n7.5 Shortest Time-to-Completion First (STCF) . . . . . . . . . . 63\n7.6 Round Robin . . . . . . . . . . . . . . . . . . . . . . . . . . . 65\n7.7 Incorporating I/O . . . . . . . . . . . . . . . . . . . . . . . . 66\n7.8 No More Oracle . . . . . . . . . . . . . . . . . . . . . . . . . 68\n7.9 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69\nHomework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70\n8 Scheduling:The Multi-Level Feedback Queue 71\n8.1 MLFQ: Basic Rules . . . . . . . . . . . . . . . . . . . . . . . 72\n8.2 Attempt #1: How to Change Priority . . . . . . . . . . . . . 73\n8.3 Attempt #2: The Priority Boost . . . . . . . . . . . . . . . . . 76\n8.4 Attempt #3: Better Accounting . . . . . . . . . . . . . . . . . 77\n8.5 T uning MLFQ And Other Issues . . . . . . . . . . . . . . . . 78\n8.6 MLFQ: Summary . . . . . . . . . . . . . . . . . . . . . . . . 79\nReferences . . . . . . . . . . . . . . . . ."
  },
  {
    "content": " . . . . . . . . . . . . . . . . 77\n8.5 T uning MLFQ And Other Issues . . . . . . . . . . . . . . . . 78\n8.6 MLFQ: Summary . . . . . . . . . . . . . . . . . . . . . . . . 79\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81\nHomework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82\n9 Scheduling: Proportional Share 83\n9.1 Basic Concept: Tickets Represent Y our Share . . . . . . . . . 83\n9.2 Ticket Mechanisms . . . . . . . . . . . . . . . . . . . . . . . 85\n9.3 Implementation . . . . . . . . . . . . . . . . . . . . . . . . . 86\n9.4 An Example . . . . . . . . . . . . . . . . . . . . . . . . . . . 87\n9.5 How T o Assign Tickets? . . . . . . . . . . . . . . . . . . . . . 88\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N T E N T S xiii\n9.6 Why Not Deterministic? . . . . . . . . . . . . . . . . . . . . 88\n9.7 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\nHomework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92\n10 Multiprocessor Scheduling (Advanced) 93\n10.1 Background: Multiprocessor Architecture . . . . . . . . . . 94\n10.2 Don\u2019t Forget Synchronization . . . . . . . . . . . . . . . . . 96\n10.3 One Final Issue: Cache Af\ufb01nity . . . . . . . . . . . . . . . . 97\n10.4 Single-Queue Scheduling . . . . . . . . . . . . . . . . . . . . 97\n10.5 Multi-Queue Scheduling . . . . . . . . . . . . . . . . . . . . 99\n10.6 Linux Multiprocessor Schedulers . . . . . . . . . . . . . . . 102\n10.7 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103\n11 Summary Dialogue on CPU Virtualization 105\n12 A Dialogue on Memory Virtualization 107\n13 The Abstraction: Address Spaces 109\n13.1 Early Systems . . . . . . . . . . . . . . . . . . . . . . . . . . 109\n13.2 Multiprogramming and Time Sharing . . . . . . . . . . . . . 110\n13.3 The Address Space . . . . . . . . . . . . . . . . . . . . . . . 111\n13.4 Goals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113\n13.5 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116\n14 Interlude: Memory API 119\n14.1 T ypes of Memory . . . . . . . ."
  },
  {
    "content": " . . . . . 113\n13.5 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116\n14 Interlude: Memory API 119\n14.1 T ypes of Memory . . . . . . . . . . . . . . . . . . . . . . . . 119\n14.2 The malloc() Call . . . . . . . . . . . . . . . . . . . . . . . 120\n14.3 The free() Call . . . . . . . . . . . . . . . . . . . . . . . . 122\n14.4 Common Errors . . . . . . . . . . . . . . . . . . . . . . . . . 122\n14.5 Underlying OS Support . . . . . . . . . . . . . . . . . . . . . 125\n14.6 Other Calls . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125\n14.7 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127\n15 Mechanism: Address T ranslation 129\n15.1 Assumptions . . . . . . . . . . . . . . . . . . . . . . . . . . . 130\n15.2 An Example . . . . . . . . . . . . . . . . . . . . . . . . . . . 130\n15.3 Dynamic (Hardware-based) Relocation . . . . . . . . . . . . 133\n15.4 OS Issues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136\n15.5 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139\nHomework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140\n16 Segmentation 141\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\nxiv CO N T E N T S\n16.1 Segmentation: Generalized Base/Bounds . . . . . . . . . . 141\n16.2 Which Segment Are W e Referring T o? . . . . . . . . . . . . . 144\n16.3 What About The Stack? . . . . . . . . . . . . . . . . . . . . . 145\n16.4 Support for Sharing . . . . . . . . . . . . . . . . . . . . . . . 146\n16.5 Fine-grained vs. Coarse-grained Segmentation . . . . . . . 147\n16.6 OS Support . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147\n16.7 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150\nHomework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152\n17 Free-Space Management 153\n17.1 Assumptions . . . . . . . . . . . . . . . . . . . . . . . . . . . 154\n17.2 Low-level Mechanisms . . . . . . . . . . . . . . . . . . . . . 155\n"
  },
  {
    "content": " . . . . . . . . . . . . . . . . . . . . . . . . . 152\n17 Free-Space Management 153\n17.1 Assumptions . . . . . . . . . . . . . . . . . . . . . . . . . . . 154\n17.2 Low-level Mechanisms . . . . . . . . . . . . . . . . . . . . . 155\n17.3 Basic Strategies . . . . . . . . . . . . . . . . . . . . . . . . . 163\n17.4 Other Approaches . . . . . . . . . . . . . . . . . . . . . . . . 165\n17.5 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168\n18 Paging: Introduction 169\n18.1 Where Are Page T ables Stored? . . . . . . . . . . . . . . . . 172\n18.2 What\u2019s Actually In The Page T able? . . . . . . . . . . . . . . 173\n18.3 Paging: Also T oo Slow . . . . . . . . . . . . . . . . . . . . . 174\n18.4 A Memory T race . . . . . . . . . . . . . . . . . . . . . . . . . 176\n18.5 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180\nHomework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181\n19 Paging: Faster T ranslations (TLBs) 183\n19.1 TLB Basic Algorithm . . . . . . . . . . . . . . . . . . . . . . 183\n19.2 Example: Accessing An Array . . . . . . . . . . . . . . . . . 185\n19.3 Who Handles The TLB Miss? . . . . . . . . . . . . . . . . . . 187\n19.4 TLB Contents: What\u2019s In There? . . . . . . . . . . . . . . . . 189\n19.5 TLB Issue: Context Switches . . . . . . . . . . . . . . . . . . 190\n19.6 Issue: Replacement Policy . . . . . . . . . . . . . . . . . . . 192\n19.7 A Real TLB Entry . . . . . . . . . . . . . . . . . . . . . . . . 193\n19.8 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195\nHomework (Measurement) . . . . . . . . . . . . . . . . . . . . . . 197\n20 Paging: Smaller T ables 201\n20.1 Simple Solution: Bigger Pages . . . . . . . . . . . . . . . . . 201\n20.2 Hybrid Approach: Paging and Segments . . . . . . . . . . . 202\n20.3 Multi-level Page T ables . . . . . . . . . . . . . . . . . . . . . 205\n20.4 Inverted Page T ables . . . . . . . . . . . . . . . . . . . . . . 212\n20.5 Swapping the Page T ables to Disk . . . . . . . . . . . . . . . 213\n20.6 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213\nReferences . . . . ."
  },
  {
    "content": " Inverted Page T ables . . . . . . . . . . . . . . . . . . . . . . 212\n20.5 Swapping the Page T ables to Disk . . . . . . . . . . . . . . . 213\n20.6 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N T E N T S xv\nHomework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215\n21 Beyond Physical Memory: Mechanisms 217\n21.1 Swap Space . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218\n21.2 The Present Bit . . . . . . . . . . . . . . . . . . . . . . . . . . 219\n21.3 The Page Fault . . . . . . . . . . . . . . . . . . . . . . . . . . 220\n21.4 What If Memory Is Full? . . . . . . . . . . . . . . . . . . . . 221\n21.5 Page Fault Control Flow . . . . . . . . . . . . . . . . . . . . 222\n21.6 When Replacements Really Occur . . . . . . . . . . . . . . . 223\n21.7 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225\n22 Beyond Physical Memory: Policies 227\n22.1 Cache Management . . . . . . . . . . . . . . . . . . . . . . . 227\n22.2 The Optimal Replacement Policy . . . . . . . . . . . . . . . 228\n22.3 A Simple Policy: FIFO . . . . . . . . . . . . . . . . . . . . . 230\n22.4 Another Simple Policy: Random . . . . . . . . . . . . . . . . 232\n22.5 Using History: LRU . . . . . . . . . . . . . . . . . . . . . . . 233\n22.6 W orkload Examples . . . . . . . . . . . . . . . . . . . . . . . 234\n22.7 Implementing Historical Algorithms . . . . . . . . . . . . . 237\n22.8 Approximating LRU . . . . . . . . . . . . . . . . . . . . . . 238\n22.9 Considering Dirty Pages . . . . . . . . . . . . . . . . . . . . 239\n22.10 Other VM Policies . . . . . . . . . . . . . . . . . . . . . . . . 240\n22.11 Thrashing . . . . . . . . . . . . . . . . . . . . . . . . . . . . 240\n22.12 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 241\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242\nHomework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 244\n23 The V AX/VMS Virtual Memory System 245\n23.1 Background . . . . . . . . . . . . . . . . . . . . . . . . . . . 245\n23.2 Memory Management Hardware . . . . . . . . . . . . . . . 246\n23.3 A Real Address Space ."
  },
  {
    "content": " . . . . . . . . . . . . . . . . . . . . . . 244\n23 The V AX/VMS Virtual Memory System 245\n23.1 Background . . . . . . . . . . . . . . . . . . . . . . . . . . . 245\n23.2 Memory Management Hardware . . . . . . . . . . . . . . . 246\n23.3 A Real Address Space . . . . . . . . . . . . . . . . . . . . . . 247\n23.4 Page Replacement . . . . . . . . . . . . . . . . . . . . . . . . 249\n23.5 Other Neat VM T ricks . . . . . . . . . . . . . . . . . . . . . . 250\n23.6 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 252\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253\n24 Summary Dialogue on Memory Virtualization 255\nII Concurrency 259\n25 A Dialogue on Concurrency 261\n26 Concurrency: An Introduction 263\n26.1 An Example: Thread Creation . . . . . . . . . . . . . . . . . 264\n26.2 Why It Gets W orse: Shared Data . . . . . . . . . . . . . . . . 267\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\nxvi CO N T E N T S\n26.3 The Heart of the Problem: Uncontrolled Scheduling . . . . 269\n26.4 The Wish For Atomicity . . . . . . . . . . . . . . . . . . . . . 271\n26.5 One More Problem: W aiting For Another . . . . . . . . . . . 273\n26.6 Summary: Why in OS Class? . . . . . . . . . . . . . . . . . . 273\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275\nHomework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 276\n27 Interlude: Thread API 279\n27.1 Thread Creation . . . . . . . . . . . . . . . . . . . . . . . . . 279\n27.2 Thread Completion . . . . . . . . . . . . . . . . . . . . . . . 280\n27.3 Locks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283\n27.4 Condition V ariables . . . . . . . . . . . . . . . . . . . . . . . 285\n27.5 Compiling and Running . . . . . . . . . . . . . . . . . . . . 287\n27.6 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 287\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 289\n28 Locks 291\n28.1 Locks: The Basic Idea . . . . . . . . . . . . . . . . . . . . . . 291\n28.2 Pthread Locks . . . . . . . . . . . . . . . . . . . . . . . . . . 292\n28.3 Building A Lock . . . . . . . . . . . . . . . . . . . . . . . . . 293\n28.4 Evaluating Locks . . . . . . . . . . . . . . . . . . . . . . . . 293\n28.5 Controlling Interrupts . . . . . . . . . . . . . . . . . . . . . . 294\n28.6 T est And Set (Atomic Exchange) . . . . . . . . . . . . . ."
  },
  {
    "content": " . . . . . . . 293\n28.4 Evaluating Locks . . . . . . . . . . . . . . . . . . . . . . . . 293\n28.5 Controlling Interrupts . . . . . . . . . . . . . . . . . . . . . . 294\n28.6 T est And Set (Atomic Exchange) . . . . . . . . . . . . . . . . 295\n28.7 Building A W orking Spin Lock . . . . . . . . . . . . . . . . . 297\n28.8 Evaluating Spin Locks . . . . . . . . . . . . . . . . . . . . . 299\n28.9 Compare-And-Swap . . . . . . . . . . . . . . . . . . . . . . 299\n28.10 Load-Linked and Store-Conditional . . . . . . . . . . . . . . 300\n28.11 Fetch-And-Add . . . . . . . . . . . . . . . . . . . . . . . . . 302\n28.12 Summary: So Much Spinning . . . . . . . . . . . . . . . . . 303\n28.13 A Simple Approach: Just Yield, Baby . . . . . . . . . . . . . 304\n28.14 Using Queues: Sleeping Instead Of Spinning . . . . . . . . . 305\n28.15 Different OS, Different Support . . . . . . . . . . . . . . . . 307\n28.16 T wo-Phase Locks . . . . . . . . . . . . . . . . . . . . . . . . 307\n28.17 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309\n29 Lock-based Concurrent Data Structures 311\n29.1 Concurrent Counters . . . . . . . . . . . . . . . . . . . . . . 311\n29.2 Concurrent Linked Lists . . . . . . . . . . . . . . . . . . . . 316\n29.3 Concurrent Queues . . . . . . . . . . . . . . . . . . . . . . . 319\n29.4 Concurrent Hash T able . . . . . . . . . . . . . . . . . . . . . 320\n29.5 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323\n30 Condition V ariables 325\n30.1 De\ufb01nition and Routines . . . . . . . . . . . . . . . . . . . . . 326\n30.2 The Producer/Consumer (Bound Buffer) Problem . . . . . . 329\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N T E N T S xvii\n30.3 Covering Conditions . . . . . . . . . . . . . . . . . . . . . . 337\n30.4 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 338\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 339\n31 Semaphores 341\n31.1 Semaphores: A De\ufb01nition . . . . . . . . . . . . . . . . . . . 341\n31.2 Binary Semaphores (Locks) . . . . . . . . . . . . . . . . . . . 343\n31.3 Semaphores As Condition V ariables . . . . . . . . . . . . . . 344\n31.4 The Producer/Consumer (Bounded-Buffer"
  },
  {
    "content": " A De\ufb01nition . . . . . . . . . . . . . . . . . . . 341\n31.2 Binary Semaphores (Locks) . . . . . . . . . . . . . . . . . . . 343\n31.3 Semaphores As Condition V ariables . . . . . . . . . . . . . . 344\n31.4 The Producer/Consumer (Bounded-Buffer) Problem . . . . 346\n31.5 Reader-W riter Locks . . . . . . . . . . . . . . . . . . . . . . 350\n31.6 The Dining Philosophers . . . . . . . . . . . . . . . . . . . . 352\n31.7 How T o Implement Semaphores . . . . . . . . . . . . . . . . 355\n31.8 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 356\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 357\n32 Common Concurrency Problems 359\n32.1 What T ypes Of Bugs Exist? . . . . . . . . . . . . . . . . . . . 359\n32.2 Non-Deadlock Bugs . . . . . . . . . . . . . . . . . . . . . . . 360\n32.3 Deadlock Bugs . . . . . . . . . . . . . . . . . . . . . . . . . . 363\n32.4 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 370\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 371\n33 Event-based Concurrency (Advanced) 373\n33.1 The Basic Idea: An Event Loop . . . . . . . . . . . . . . . . . 373\n33.2 An Important API: select() (or poll()) . . . . . . . . . 374\n33.3 Using select() . . . . . . . . . . . . . . . . . . . . . . . . 375\n33.4 Why Simpler? No Locks Needed . . . . . . . . . . . . . . . 376\n33.5 A Problem: Blocking System Calls . . . . . . . . . . . . . . . 377\n33.6 A Solution: Asynchronous I/O . . . . . . . . . . . . . . . . 377\n33.7 Another Problem: State Management . . . . . . . . . . . . . 380\n33.8 What Is Still Dif\ufb01cult With Events . . . . . . . . . . . . . . . 381\n33.9 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 381\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 382\n34 Summary Dialogue on Concurrency 383\nIII Persistence 385\n35 A Dialogue on Persistence 387\n36 I/O Devices 389\n36.1 System Architecture . . . . . . . . . . . . . . . . . . . . . . . 389\n36.2 A Canonical Device . . . . . . . . . . . . . . . . . . . . . . . 390\n36.3 The Canonical Protocol . . . . . . . . . . . . . . . . . . . . . 391\n36.4 Lowering CPU Overhead With Interrupts . . . . . . . . . . 392\n36.5 More Ef\ufb01cient Data Movement With DMA . . . . . . . . . . 393\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\nxviii CO N T E N T S\n36.6 Methods Of Device Interaction . . . . . . . . . . . . . . . . . 394\n36"
  },
  {
    "content": " More Ef\ufb01cient Data Movement With DMA . . . . . . . . . . 393\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\nxviii CO N T E N T S\n36.6 Methods Of Device Interaction . . . . . . . . . . . . . . . . . 394\n36.7 Fitting Into The OS: The Device Driver . . . . . . . . . . . . 395\n36.8 Case Study: A Simple IDE Disk Driver . . . . . . . . . . . . 396\n36.9 Historical Notes . . . . . . . . . . . . . . . . . . . . . . . . . 399\n36.10 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 399\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 400\n37 Hard Disk Drives 403\n37.1 The Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . 403\n37.2 Basic Geometry . . . . . . . . . . . . . . . . . . . . . . . . . 404\n37.3 A Simple Disk Drive . . . . . . . . . . . . . . . . . . . . . . 404\n37.4 I/O Time: Doing The Math . . . . . . . . . . . . . . . . . . . 408\n37.5 Disk Scheduling . . . . . . . . . . . . . . . . . . . . . . . . . 412\n37.6 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 417\nHomework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 418\n38 Redundant Arrays of Inexpensive Disks (RAIDs) 421\n38.1 Interface And RAID Internals . . . . . . . . . . . . . . . . . 422\n38.2 Fault Model . . . . . . . . . . . . . . . . . . . . . . . . . . . 423\n38.3 How T o Evaluate A RAID . . . . . . . . . . . . . . . . . . . 423\n38.4 RAID Level 0: Striping . . . . . . . . . . . . . . . . . . . . . 424\n38.5 RAID Level 1: Mirroring . . . . . . . . . . . . . . . . . . . . 427\n38.6 RAID Level 4: Saving Space With Parity . . . . . . . . . . . 430\n38.7 RAID Level 5: Rotating Parity . . . . . . . . . . . . . . . . . 434\n38.8 RAID Comparison: A Summary . . . . . . . . . . . . . . . . 435\n38.9 Other Interesting RAID Issues . . . . . . . . . . . . . . . . . 436\n38.10 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 436\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 437\nHomework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 439\n39 Interlude: File and Directories 441\n39.1 Files and Directories . . . . . . . . . . . . . . . . . . . . . . . 441\n39.2 The File System Interface . . . . . . . . . . . . . . . . . . . . 443\n39.3 Creating Files . . . . . . . . . . ."
  },
  {
    "content": " . . . . . . . . 439\n39 Interlude: File and Directories 441\n39.1 Files and Directories . . . . . . . . . . . . . . . . . . . . . . . 441\n39.2 The File System Interface . . . . . . . . . . . . . . . . . . . . 443\n39.3 Creating Files . . . . . . . . . . . . . . . . . . . . . . . . . . 443\n39.4 Reading and W riting Files . . . . . . . . . . . . . . . . . . . 444\n39.5 Reading And W riting, But Not Sequentially . . . . . . . . . 446\n39.6 W riting Immediately with fsync() . . . . . . . . . . . . . 447\n39.7 Renaming Files . . . . . . . . . . . . . . . . . . . . . . . . . 448\n39.8 Getting Information About Files . . . . . . . . . . . . . . . . 449\n39.9 Removing Files . . . . . . . . . . . . . . . . . . . . . . . . . 450\n39.10 Making Directories . . . . . . . . . . . . . . . . . . . . . . . 450\n39.11 Reading Directories . . . . . . . . . . . . . . . . . . . . . . . 451\n39.12 Deleting Directories . . . . . . . . . . . . . . . . . . . . . . . 452\n39.13 Hard Links . . . . . . . . . . . . . . . . . . . . . . . . . . . . 452\n39.14 Symbolic Links . . . . . . . . . . . . . . . . . . . . . . . . . 454\n39.15 Making and Mounting a File System . . . . . . . . . . . . . 456\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N T E N T S xix\n39.16 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 457\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 458\nHomework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 459\n40 File System Implementation 461\n40.1 The W ay T o Think . . . . . . . . . . . . . . . . . . . . . . . . 461\n40.2 Overall Organization . . . . . . . . . . . . . . . . . . . . . . 462\n40.3 File Organization: The Inode . . . . . . . . . . . . . . . . . . 464\n40.4 Directory Organization . . . . . . . . . . . . . . . . . . . . . 469\n40.5 Free Space Management . . . . . . . . . . . . . . . . . . . . 469\n40.6 Access Paths: Reading and W riting . . . . . . . . . . . . . . 470\n40.7 Caching and Buffering . . . . . . . . . . . . . . . . . . . . . 474\n40.8 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 475\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 476\nHomework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 477\n41 Locality and The Fast File System 479\n41.1 The Problem: Poor Performance . . . . . . . . . . . . . . . ."
  },
  {
    "content": " . . . . . . . . . . . . . . . . . . . . . . . . . . 476\nHomework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 477\n41 Locality and The Fast File System 479\n41.1 The Problem: Poor Performance . . . . . . . . . . . . . . . . 479\n41.2 FFS: Disk A wareness Is The Solution . . . . . . . . . . . . . 481\n41.3 Organizing Structure: The Cylinder Group . . . . . . . . . . 481\n41.4 Policies: How T o Allocate Files and Directories . . . . . . . 482\n41.5 Measuring File Locality . . . . . . . . . . . . . . . . . . . . . 483\n41.6 The Large-File Exception . . . . . . . . . . . . . . . . . . . . 484\n41.7 A Few Other Things About FFS . . . . . . . . . . . . . . . . 486\n41.8 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 488\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 489\n42 Crash Consistency: FSCK and Journaling 491\n42.1 A Detailed Example . . . . . . . . . . . . . . . . . . . . . . . 492\n42.2 Solution #1: The File System Checker . . . . . . . . . . . . . 495\n42.3 Solution #2: Journaling (or W rite-Ahead Logging) . . . . . . 497\n42.4 Solution #3: Other Approaches . . . . . . . . . . . . . . . . 507\n42.5 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 508\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 509\n43 Log-structured File Systems 511\n43.1 W riting T o Disk Sequentially . . . . . . . . . . . . . . . . . . 512\n43.2 W riting Sequentially And Effectively . . . . . . . . . . . . . 513\n43.3 How Much T o Buffer? . . . . . . . . . . . . . . . . . . . . . . 514\n43.4 Problem: Finding Inodes . . . . . . . . . . . . . . . . . . . . 515\n43.5 Solution Through Indirection: The Inode Map . . . . . . . . 515\n43.6 The Checkpoint Region . . . . . . . . . . . . . . . . . . . . . 516\n43.7 Reading A File From Disk: A Recap . . . . . . . . . . . . . . 517\n43.8 What About Directories? . . . . . . . . . . . . . . . . . . . . 517\n43.9 A New Problem: Garbage Collection . . . . . . . . . . . . . 518\n43.10 Determining Block Liveness . . . . . . . . . . . . . . . . . . 520\n43.11 A Policy Question: Which Blocks T o Clean, And When? . . 521\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\nxx CO N T E N T S\n43.12 Crash Recovery And The Log . . . . . . . . . . . . . . . . . 521\n43.13 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 522\nReferences . . . . . . . . . . . . . . . . . . . . ."
  },
  {
    "content": " E C E S\nxx CO N T E N T S\n43.12 Crash Recovery And The Log . . . . . . . . . . . . . . . . . 521\n43.13 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 522\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 524\n44 Data Integrity and Protection 527\n44.1 Disk Failure Modes . . . . . . . . . . . . . . . . . . . . . . . 527\n44.2 Handling Latent Sector Errors . . . . . . . . . . . . . . . . . 529\n44.3 Detecting Corruption: The Checksum . . . . . . . . . . . . . 530\n44.4 Using Checksums . . . . . . . . . . . . . . . . . . . . . . . . 533\n44.5 A New Problem: Misdirected W rites . . . . . . . . . . . . . 534\n44.6 One Last Problem: Lost W rites . . . . . . . . . . . . . . . . . 535\n44.7 Scrubbing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 535\n44.8 Overheads Of Checksumming . . . . . . . . . . . . . . . . . 536\n44.9 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 536\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 537\n45 Summary Dialogue on Persistence 539\n46 A Dialogue on Distribution 541\n47 Distributed Systems 543\n47.1 Communication Basics . . . . . . . . . . . . . . . . . . . . . 544\n47.2 Unreliable Communication Layers . . . . . . . . . . . . . . 545\n47.3 Reliable Communication Layers . . . . . . . . . . . . . . . . 547\n47.4 Communication Abstractions . . . . . . . . . . . . . . . . . 549\n47.5 Remote Procedure Call (RPC) . . . . . . . . . . . . . . . . . 551\n47.6 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 556\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 557\n48 Sun\u2019s Network File System (NFS) 559\n48.1 A Basic Distributed File System . . . . . . . . . . . . . . . . 560\n48.2 On T o NFS . . . . . . . . . . . . . . . . . . . . . . . . . . . . 561\n48.3 Focus: Simple and Fast Server Crash Recovery . . . . . . . . 561\n48.4 Key T o Fast Crash Recovery: Statelessness . . . . . . . . . . 562\n48.5 The NFSv2 Protocol . . . . . . . . . . . . . . . . . . . . . . . 563\n48.6 From Protocol to Distributed File System . . . . . . . . . . . 565\n48.7 Handling Server Failure with Idempotent Operations . . . . 567\n48.8 Improving Performance: Client-side Caching . . . . . . . . 569\n48.9 The Cache Consistency Problem . . . . . . . . . . . . . . . . 569\n48.10 Assessing NFS Cache Consistency . . . . . . . . . . . . . . . 571\n48.11 Implications on Server-Side W rite Buffering . . . . . . . . . 571\n48.12 Summary . . . . . . . . . . . . . . . . ."
  },
  {
    "content": " The Cache Consistency Problem . . . . . . . . . . . . . . . . 569\n48.10 Assessing NFS Cache Consistency . . . . . . . . . . . . . . . 571\n48.11 Implications on Server-Side W rite Buffering . . . . . . . . . 571\n48.12 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 573\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 574\n49 The Andrew File System (AFS) 575\n49.1 AFS V ersion 1 . . . . . . . . . . . . . . . . . . . . . . . . . . 575\n49.2 Problems with V ersion 1 . . . . . . . . . . . . . . . . . . . . 576\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N T E N T S xxi\n49.3 Improving the Protocol . . . . . . . . . . . . . . . . . . . . . 578\n49.4 AFS V ersion 2 . . . . . . . . . . . . . . . . . . . . . . . . . . 578\n49.5 Cache Consistency . . . . . . . . . . . . . . . . . . . . . . . 580\n49.6 Crash Recovery . . . . . . . . . . . . . . . . . . . . . . . . . 582\n49.7 Scale And Performance Of AFSv2 . . . . . . . . . . . . . . . 582\n49.8 AFS: Other Improvements . . . . . . . . . . . . . . . . . . . 584\n49.9 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 585\nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 587\n50 Summary Dialogue on Distribution 589\nGeneral Index 591\nAsides 601\nTips 603\nCruces 605\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\nList of Figures\n2.1 Simple Example: Code That Loops and Prints . . . . . . . . . 5\n2.2 Running Many Programs At Once . . . . . . . . . . . . . . . . 6\n2.3 A Program that Accesses Memory . . . . . . . . . . . . . . . . 7\n2.4 Running The Memory Program Multiple Times . . . . . . . . 8\n2.5 A Multi-threaded Program . . . . . . . . . . . . . . . . . . . . 9\n2.6 A Program That Does I/O . . . . . . . . . . . . . . . . . . . . . 11\n4.1 Loading: From Program T o Process . . . . . . . . . . . . . . . . 28\n4.2 Process: State T ransitions . . . . . . . . . . . . . . . . . . . . . 30\n4.3 The xv6 Proc Structure . . . . . . . . . . . . . . . . . . . . . . . 31\n5.1 p1.c: Calling fork() . . . . . . . . . . . . . . . . . . . . . . . 36\n5.2 p2.c: Calling fork() And wait() . . . . . . . . . . . . . . . 37\n5.3 p3.c: Calling fork(), wait(), And exec() . . . . . . . . . 39\n5.4 p4.c: All Of The Above With Redirection . . . . . . . . . . . 41\n6.1 The xv6 Context Switch Code"
  },
  {
    "content": " . . 36\n5.2 p2.c: Calling fork() And wait() . . . . . . . . . . . . . . . 37\n5.3 p3.c: Calling fork(), wait(), And exec() . . . . . . . . . 39\n5.4 p4.c: All Of The Above With Redirection . . . . . . . . . . . 41\n6.1 The xv6 Context Switch Code . . . . . . . . . . . . . . . . . . . 54\n7.1 FIFO Simple Example . . . . . . . . . . . . . . . . . . . . . . . 61\n7.2 Why FIFO Is Not That Great . . . . . . . . . . . . . . . . . . . 61\n7.3 SJF Simple Example . . . . . . . . . . . . . . . . . . . . . . . . 62\n7.4 SJF With Late Arrivals From B and C . . . . . . . . . . . . . . . 63\n7.5 STCF Simple Example . . . . . . . . . . . . . . . . . . . . . . . 64\n7.6 SJF Again (Bad for Response Time) . . . . . . . . . . . . . . . 65\n7.7 Round Robin (Good for Response Time) . . . . . . . . . . . . 65\n7.8 Poor Use of Resources . . . . . . . . . . . . . . . . . . . . . . . 67\n7.9 Overlap Allows Better Use of Resources . . . . . . . . . . . . . 67\n8.1 MLFQ Example . . . . . . . . . . . . . . . . . . . . . . . . . . . 73\n8.2 Long-running Job Over Time . . . . . . . . . . . . . . . . . . . 74\n8.3 Along Came An Interactive Job . . . . . . . . . . . . . . . . . . 74\n8.4 A Mixed I/O-intensive and CPU-intensive W orkload . . . . . 75\n8.5 Without (Left) and With (Right) Priority Boost . . . . . . . . . 76\nxxiii\nxxiv LI S T O F FI G U R E S\n8.6 Without (Left) and With (Right) Gaming T olerance . . . . . . 77\n8.7 Lower Priority , Longer Quanta . . . . . . . . . . . . . . . . . . 78\n9.1 Lottery Scheduling Decision Code . . . . . . . . . . . . . . . . 86\n9.2 Lottery Fairness Study . . . . . . . . . . . . . . . . . . . . . . . 87\n10.1 Single CPU With Cache . . . . . . . . . . . . . . . . . . . . . . 94\n10.2 T wo CPUs With Caches Sharing Memory . . . . . . . . . . . . 95\n10.3 Simple List Delete Code . . . . . . . . . . . . . . . . . . . . . . 97\n13.1 Operating Systems: The Early Days . . . . . . . . . . . . . . . 109\n13.2 Three Processes: Sharing Memory . . . . . . . . . . . . . . . . 110\n13.3 An Example Address Space . . . . . . . . . . . . . . . . . . . . 111\n15.1 A Process And Its Address Space . . . . . . . . . . . . . . . . . 132\n15.2 Physical Memory with a Single Relocated Process . . . . . . . 133\n16.1 An Address Space (Again) . . . . . . . . . . . . . . . . . . . . . 142\n16.2 Placing Segments In Physical Memory . . . . . . . . . . . . . 143\n16.3 Non-compacted and Compacted Memory . . . . . . . . . . . . 148\n17.1 An Allocated Region Plus Header . . . . . . . . . . . . . . . . 157\n17.2 Speci\ufffd"
  },
  {
    "content": " . . . . . . . . . . . . . . . 142\n16.2 Placing Segments In Physical Memory . . . . . . . . . . . . . 143\n16.3 Non-compacted and Compacted Memory . . . . . . . . . . . . 148\n17.1 An Allocated Region Plus Header . . . . . . . . . . . . . . . . 157\n17.2 Speci\ufb01c Contents Of The Header . . . . . . . . . . . . . . . . . 157\n17.3 A Heap With One Free Chunk . . . . . . . . . . . . . . . . . . 159\n17.4 A Heap: After One Allocation . . . . . . . . . . . . . . . . . . . 159\n17.5 Free Space With Three Chunks Allocated . . . . . . . . . . . . 160\n17.6 Free Space With T wo Chunks Allocated . . . . . . . . . . . . . 161\n17.7 A Non-Coalesced Free List . . . . . . . . . . . . . . . . . . . . . 162\n18.1 A Simple 64-byte Address Space . . . . . . . . . . . . . . . . . 169\n18.2 64-Byte Address Space Placed In Physical Memory . . . . . . 170\n18.3 The Address T ranslation Process . . . . . . . . . . . . . . . . . 172\n18.4 Example: Page T able in Kernel Physical Memory . . . . . . . 173\n18.5 An x86 Page T able Entry (PTE) . . . . . . . . . . . . . . . . . . 174\n18.6 Accessing Memory With Paging . . . . . . . . . . . . . . . . . 175\n18.7 A Virtual (And Physical) Memory T race . . . . . . . . . . . . . 178\n19.1 TLB Control Flow Algorithm . . . . . . . . . . . . . . . . . . . 184\n19.2 Example: An Array In A Tiny Address Space . . . . . . . . . . 185\n19.3 TLB Control Flow Algorithm (OS Handled) . . . . . . . . . . 188\n19.4 A MIPS TLB Entry . . . . . . . . . . . . . . . . . . . . . . . . . 193\n19.5 Discovering TLB Sizes and Miss Costs . . . . . . . . . . . . . 198\n20.1 A 16-KB Address Space With 1-KB Pages . . . . . . . . . . . . 203\n20.2 Linear (Left) And Multi-Level (Right) Page T ables . . . . . . . 206\n20.3 A 16-KB Address Space With 64-byte Pages . . . . . . . . . . . 207\n20.4 Multi-level Page T able Control Flow . . . . . . . . . . . . . . . 212\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLI S T O F FI G U R E S xxv\n21.1 Physical Memory and Swap Space . . . . . . . . . . . . . . . . 219\n21.2 Page-Fault Control Flow Algorithm (Hardware) . . . . . . . . 222\n21.3 Page-Fault Control Flow Algorithm (Software) . . . . . . . . . 223\n22.1 Random Performance over 10,000 T rials . . . . . . . . . . . . . 232\n22.2 The No-Locality W orkload . . . . . . . . . . . . . . . . . . . . . 235\n22.3 The 80-20 W orkload . . . . . . . . . . . . . . . . . . . . . . . . . 236\n22.4 The Looping W orkload . . . . . . . . . . . . . . . . . . . . . . . 237\n22.5 The 80-20 W orkload With Clock . . . . ."
  },
  {
    "content": " . . . . . . . 235\n22.3 The 80-20 W orkload . . . . . . . . . . . . . . . . . . . . . . . . . 236\n22.4 The Looping W orkload . . . . . . . . . . . . . . . . . . . . . . . 237\n22.5 The 80-20 W orkload With Clock . . . . . . . . . . . . . . . . . 239\n23.1 The V AX/VMS Address Space . . . . . . . . . . . . . . . . . . 247\n26.1 A Single-Threaded Address Space . . . . . . . . . . . . . . . . 264\n26.2 Simple Thread Creation Code (t0.c) . . . . . . . . . . . . . . . 265\n26.3 Sharing Data: Oh Oh (t2) . . . . . . . . . . . . . . . . . . . . . 267\n27.1 Creating a Thread . . . . . . . . . . . . . . . . . . . . . . . . . . 281\n27.2 W aiting for Thread Completion . . . . . . . . . . . . . . . . . . 282\n27.3 Simpler Argument Passing to a Thread . . . . . . . . . . . . . 283\n27.4 An Example W rapper . . . . . . . . . . . . . . . . . . . . . . . . 285\n28.1 First Attempt: A Simple Flag . . . . . . . . . . . . . . . . . . . 296\n28.2 A Simple Spin Lock Using T est-and-set . . . . . . . . . . . . . 298\n28.3 Compare-and-swap . . . . . . . . . . . . . . . . . . . . . . . . . 299\n28.4 Load-linked And Store-conditional . . . . . . . . . . . . . . . 301\n28.5 Using LL/SC T o Build A Lock . . . . . . . . . . . . . . . . . . . 301\n28.6 Ticket Locks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303\n28.7 Lock With T est-and-set And Yield . . . . . . . . . . . . . . . . 304\n28.8 Lock With Queues, T est-and-set, Yield, And W akeup . . . . . 306\n28.9 Linux-based Futex Locks . . . . . . . . . . . . . . . . . . . . . . 308\n29.1 A Counter Without Locks . . . . . . . . . . . . . . . . . . . . . 312\n29.2 A Counter With Locks . . . . . . . . . . . . . . . . . . . . . . . 312\n29.3 Performance of T raditional vs. Sloppy Counters . . . . . . . . 313\n29.4 Sloppy Counter Implementation . . . . . . . . . . . . . . . . . 315\n29.5 Scaling Sloppy Counters . . . . . . . . . . . . . . . . . . . . . . 316\n29.6 Concurrent Linked List . . . . . . . . . . . . . . . . . . . . . . 317\n29.7 Concurrent Linked List: Rewritten . . . . . . . . . . . . . . . . 318\n29.8 Michael and Scott Concurrent Queue . . . . . . . . . . . . . . 320\n29.9 A Concurrent Hash T able . . . . . . . . . . . . . . . . . . . . . 321\n29.10 Scaling Hash T ables . . . . . . . . . . . . . . . . . . . . . . . . 321\n30.1 A Parent W aiting For Its Child . . . . . . . . . . . . . . . . . . 325\n30.2 Parent W aiting For Child: Spin-based Approach . . . . ."
  },
  {
    "content": " . . . . . . . . . . . . . 321\n29.10 Scaling Hash T ables . . . . . . . . . . . . . . . . . . . . . . . . 321\n30.1 A Parent W aiting For Its Child . . . . . . . . . . . . . . . . . . 325\n30.2 Parent W aiting For Child: Spin-based Approach . . . . . . . . 326\n30.3 Parent W aiting For Child: Use A Condition V ariable . . . . . 327\n30.4 The Put and Get Routines (V ersion 1) . . . . . . . . . . . . . . 330\n30.5 Producer/Consumer Threads (V ersion 1) . . . . . . . . . . . . 330\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\nxxvi LI S T O F FI G U R E S\n30.6 Producer/Consumer: Single CV and If Statement . . . . . . . 331\n30.7 Producer/Consumer: Single CV and While . . . . . . . . . . . 333\n30.8 Producer/Consumer: T wo CVs and While . . . . . . . . . . . . 335\n30.9 The Final Put and Get Routines . . . . . . . . . . . . . . . . . . 336\n30.10 The Final W orking Solution . . . . . . . . . . . . . . . . . . . . 336\n30.11 Covering Conditions: An Example . . . . . . . . . . . . . . . . 338\n31.1 Initializing A Semaphore . . . . . . . . . . . . . . . . . . . . . 342\n31.2 Semaphore: De\ufb01nitions of W ait and Post . . . . . . . . . . . . 342\n31.3 A Binary Semaphore, a.k.a. a Lock . . . . . . . . . . . . . . . . 343\n31.4 A Parent W aiting For Its Child . . . . . . . . . . . . . . . . . . 345\n31.5 The Put and Get Routines . . . . . . . . . . . . . . . . . . . . . 347\n31.6 Adding the Full and Empty Conditions . . . . . . . . . . . . . 347\n31.7 Adding Mutual Exclusion (Incorrectly) . . . . . . . . . . . . . 349\n31.8 Adding Mutual Exclusion (Correctly) . . . . . . . . . . . . . . 350\n31.9 A Simple Reader-W riter Lock . . . . . . . . . . . . . . . . . . . 351\n31.10 The Dining Philosophers . . . . . . . . . . . . . . . . . . . . . 353\n31.11 The getforks() and putforks() Routines . . . . . . . . . 354\n31.12 Implementing Zemaphores with Locks and CVs . . . . . . . . 355\n32.1 The Deadlock Dependency Graph . . . . . . . . . . . . . . . . 364\n33.1 Simple Code using select() . . . . . . . . . . . . . . . . . . 376\n36.1 Prototypical System Architecture . . . . . . . . . . . . . . . . . 390\n36.2 A Canonical Device . . . . . . . . . . . . . . . . . . . . . . . . . 391\n36.3 The File System Stack . . . . . . . . . . . . . . . . . . . . . . . 396\n36.4 The IDE Interface . . . . . . . . . . . . . . . . . . . . . . . . . . 397\n36.5 The xv6 IDE Disk Driver (Simpli\ufb01ed) . . . . . . . . . . . . . . 398\n37.1 A Disk With Just A Single T rack . . . . . . . . . . . . . . . . . 404"
  },
  {
    "content": "\n36.4 The IDE Interface . . . . . . . . . . . . . . . . . . . . . . . . . . 397\n36.5 The xv6 IDE Disk Driver (Simpli\ufb01ed) . . . . . . . . . . . . . . 398\n37.1 A Disk With Just A Single T rack . . . . . . . . . . . . . . . . . 404\n37.2 A Single T rack Plus A Head . . . . . . . . . . . . . . . . . . . . 405\n37.3 Three T racks Plus A Head (Right: With Seek) . . . . . . . . . 406\n37.4 Three T racks: T rack Skew Of 2 . . . . . . . . . . . . . . . . . . 407\n37.5 SSTF: Scheduling Requests 21 And 2 . . . . . . . . . . . . . . 412\n37.6 SSTF: Sometimes Not Good Enough . . . . . . . . . . . . . . . 414\n39.1 An Example Directory T ree . . . . . . . . . . . . . . . . . . . . 442\n41.1 FFS Locality For SEER T races . . . . . . . . . . . . . . . . . . . 483\n41.2 Amortization: How Big Do Chunks Have T o Be? . . . . . . . . 486\n41.3 FFS: Standard V ersus Parameterized Placement . . . . . . . . 487\n47.1 Example UDP/IP Client/Server Code . . . . . . . . . . . . . . . 545\n47.2 A Simple UDP Library . . . . . . . . . . . . . . . . . . . . . . . 546\n47.3 Message Plus Acknowledgment . . . . . . . . . . . . . . . . . 547\n47.4 Message Plus Acknowledgment: Dropped Request . . . . . . 548\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLI S T O F FI G U R E S xxvii\n47.5 Message Plus Acknowledgment: Dropped Reply . . . . . . . 549\n48.1 A Generic Client/Server System . . . . . . . . . . . . . . . . . 559\n48.2 Distributed File System Architecture . . . . . . . . . . . . . . 560\n48.3 Client Code: Reading From A File . . . . . . . . . . . . . . . . 562\n48.4 The NFS Protocol: Examples . . . . . . . . . . . . . . . . . . . 564\n48.5 The Three T ypes of Loss . . . . . . . . . . . . . . . . . . . . . . 568\n48.6 The Cache Consistency Problem . . . . . . . . . . . . . . . . . 570\n49.1 AFSv1 Protocol Highlights . . . . . . . . . . . . . . . . . . . . 576\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\nList of Tables\n6.1 Direction Execution Protocol (Without Limits) . . . . . . . . . 46\n6.2 Limited Direction Execution Protocol . . . . . . . . . . . . . . 49\n6.3 Limited Direction Execution Protocol (Timer Interrupt) . . . . 53\n9.1 Stride Scheduling: A T race . . . . . . . . . . . . . . . . . . . . 89\n16.1 Segment Register V alues . . . . . . . . . . . . . . . . . . . . . . 143\n16.2 Segment Registers (With Negative-Growth Support) . . . . . 146\n16.3 Segment Register V alues (with Protection) . . . . . . . . . . . 147\n20.1 A Page T able For 16-KB Address Space . . ."
  },
  {
    "content": " . 89\n16.1 Segment Register V alues . . . . . . . . . . . . . . . . . . . . . . 143\n16.2 Segment Registers (With Negative-Growth Support) . . . . . 146\n16.3 Segment Register V alues (with Protection) . . . . . . . . . . . 147\n20.1 A Page T able For 16-KB Address Space . . . . . . . . . . . . . 203\n20.2 A Page Directory , And Pieces Of Page T able . . . . . . . . . . 209\n22.1 T racing the Optimal Policy . . . . . . . . . . . . . . . . . . . . 229\n22.2 T racing the FIFO Policy . . . . . . . . . . . . . . . . . . . . . . 231\n22.3 T racing the Random Policy . . . . . . . . . . . . . . . . . . . . 232\n22.4 T racing the LRU Policy . . . . . . . . . . . . . . . . . . . . . . . 233\n26.1 Thread T race (1) . . . . . . . . . . . . . . . . . . . . . . . . . . . 266\n26.2 Thread T race (2) . . . . . . . . . . . . . . . . . . . . . . . . . . . 266\n26.3 Thread T race (3) . . . . . . . . . . . . . . . . . . . . . . . . . . . 266\n26.4 The Problem: Up Close and Personal . . . . . . . . . . . . . . 270\n28.1 T race: No Mutual Exclusion . . . . . . . . . . . . . . . . . . . . 296\n29.1 T racing the Sloppy Counters . . . . . . . . . . . . . . . . . . . 314\n30.1 Thread T race: Broken Solution (V ersion 1) . . . . . . . . . . . 332\n30.2 Thread T race: Broken Solution (V ersion 2) . . . . . . . . . . . 334\n31.1 Thread T race: Single Thread Using A Semaphore . . . . . . . 343\n31.2 Thread T race: T wo Threads Using A Semaphore . . . . . . . . 344\n31.3 Thread T race: Parent W aiting For Child (Case 1) . . . . . . . . 346\nxxix\nxxx LI S T O F TA B L E S\n31.4 Thread T race: Parent W aiting For Child (Case 2) . . . . . . . . 346\n32.1 Bugs In Modern Applications . . . . . . . . . . . . . . . . . . . 360\n37.1 Disk Drive Specs: SCSI V ersus SA T A . . . . . . . . . . . . . . 409\n37.2 Disk Drive Performance: SCSI V ersus SA T A . . . . . . . . . . 410\n38.1 RAID-0: Simple Striping . . . . . . . . . . . . . . . . . . . . . 424\n38.2 Striping with a Bigger Chunk Size . . . . . . . . . . . . . . . . 424\n38.3 Simple RAID-1: Mirroring . . . . . . . . . . . . . . . . . . . . 428\n38.4 Full-stripe W rites In RAID-4 . . . . . . . . . . . . . . . . . . . 432\n38.5 Example: W rites T o 4, 13, And Respective Parity Blocks . . . . 433\n38.6 RAID-5 With Rotated Parity . . . . . . . . . . . . . . . . . . . . 434\n38.7 RAID Capacity , Reliability , and Performance . . . . . . . . . . 435\n40.1 The ext2 inode . . . . . . . . . . . . . . . . . . . . . . . . . . . . 466\n40.2 File System Measurement Summary . . . . . . . . . ."
  },
  {
    "content": " . . . . . . . . . . . . . . . . . 434\n38.7 RAID Capacity , Reliability , and Performance . . . . . . . . . . 435\n40.1 The ext2 inode . . . . . . . . . . . . . . . . . . . . . . . . . . . . 466\n40.2 File System Measurement Summary . . . . . . . . . . . . . . . 468\n40.3 File Read Timeline (Time Increasing Downward) . . . . . . . 471\n40.4 File Creation Timeline (Time Increasing Downward) . . . . . 473\n42.1 Data Journaling Timeline . . . . . . . . . . . . . . . . . . . . . 506\n42.2 Metadata Journaling Timeline . . . . . . . . . . . . . . . . . . 507\n44.1 Frequency of LSEs and Block Corruption . . . . . . . . . . . . 528\n48.1 Reading A File: Client-side And File Server Actions . . . . . 566\n49.1 Reading A File: Client-side And File Server Actions . . . . . 579\n49.2 Cache Consistency Timeline . . . . . . . . . . . . . . . . . . . 581\n49.3 Comparison: AFS vs. NFS . . . . . . . . . . . . . . . . . . . . . 583\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n\n\n1\nA Dialogue on the Book\nProfessor: Welcome to this book! It\u2019s called Operating Systems in Three Easy\nPieces, and I am here to teach you the things you need to know about ope rating\nsystems. I am called \u201cProfessor\u201d; who are you?\nStudent: Hi Professor! I am called \u201cStudent\u201d, as you might have guesse d. And\nI am here and ready to learn!\nProfessor: Sounds good. Any questions?\nStudent: Sure! Why is it called \u201cThree Easy Pieces\u201d?\nProfessor: That\u2019s an easy one. Well, you see, there are these great lectu res on\nPhysics by Richard Feynman...\nStudent: Oh! The guy who wrote \u201cSurely Y ou\u2019re Joking, Mr . Feynman\u201d, ri ght?\nGreat book! Is this going to be hilarious like that book was?\nProfessor: Um... well, no. That book was great, and I\u2019m glad you\u2019ve read i t.\nHopefully this book is more like his notes on Physics. Some of the basics were\nsummed up in a book called \u201cSix Easy Pieces\u201d. He was talking ab out Physics;\nwe\u2019re going to do Three Easy Pieces on the \ufb01ne topic of Operati ng Systems. This\nis appropriate, as Operating Systems are about half as hard a s Physics.\nStudent: Well, I liked physics, so that is probably good. What are thos e pieces?\nProfessor: They are the three key ideas we\u2019re going to learn about: virtualiza-\ntion, concurrency, and persistence. In learning about these ideas, we\u2019ll learn\nall about how an operating system works, including how it dec ides what program\nto run next on a CPU, how it handles memory overload in a virtua l memory sys-\ntem, how virtual machine monitors work, how to manage inform ation on disks,\nand even a little about how to build a distributed system that works when parts\nhave failed. That sort of stuff.\nStudent: I have no idea what you\u2019re talking about, really.\nProfessor: Good! That means you are in the right class.\nStudent: I have another question: what\u2019s the best way to learn this stu ff?\nProfessor: Excellent query! Well, each person needs to \ufb01gure this out on their\n1\n2 A D I A L O G U E O N T H E BO O K\nown, of course, but here is what I would do: go to class, to hear the professor\nintroduce the material. Then, say at the end of every week, re ad these notes,\nto help the ideas sink into your head a bit better . Of course, s"
  },
  {
    "content": ": Excellent query! Well, each person needs to \ufb01gure this out on their\n1\n2 A D I A L O G U E O N T H E BO O K\nown, of course, but here is what I would do: go to class, to hear the professor\nintroduce the material. Then, say at the end of every week, re ad these notes,\nto help the ideas sink into your head a bit better . Of course, s ome time later\n(hint: before the exam!), read the notes again to \ufb01rm up your k nowledge. Of\ncourse, your professor will no doubt assign some homeworks a nd projects, so you\nshould do those; in particular , doing projects where you wri te real code to solve\nreal problems is the best way to put the ideas within these not es into action. As\nConfucius said...\nStudent: Oh, I know! \u2019I hear and I forget. I see and I remember . I do and I\nunderstand.\u2019 Or something like that.\nProfessor: (surprised) How did you know what I was going to say?!\nStudent: It seemed to follow. Also, I am a big fan of Confucius.\nProfessor: Well, I think we are going to get along just \ufb01ne! Just \ufb01ne indee d.\nStudent: Professor \u2013 just one more question, if I may. What are these di alogues\nfor? I mean, isn\u2019t this just supposed to be a book? Why not pres ent the material\ndirectly?\nProfessor: Ah, good question, good question! Well, I think it is sometim es\nuseful to pull yourself outside of a narrative and think a bit ; these dialogues are\nthose times. So you and I are going to work together to make sen se of all of these\npretty complex ideas. Are you up for it?\nStudent: So we have to think? Well, I\u2019m up for that. I mean, what else do I have\nto do anyhow? It\u2019s not like I have much of a life outside of this book.\nProfessor: Me neither , sadly. So let\u2019s get to work!\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n2\nIntroduction to Operating Systems\nIf you are taking an undergraduate operating systems course , you should\nalready have some idea of what a computer program does when it runs.\nIf not, this book (and the corresponding course) is going to b e dif\ufb01cult\n\u2013 so you should probably stop reading this book, or run to the n earest\nbookstore and quickly consume the necessary background mat erial be-\nfore continuing (both Patt/Patel [PP03] and particularly B ryant/O\u2019Hallaron\n[BOH10] are pretty great books).\nSo what happens when a program runs?\nW ell, a running program does one very simple thing: it execut es in-\nstructions. Many millions (and these days, even billions) o f times ev-\nery second, the processor fetches an instruction from memory , decodes\nit (i.e., \ufb01gures out which instruction this is), and executes it (i.e., it does\nthe thing that it is supposed to do, like add two numbers toget her , access\nmemory , check a condition, jump to a function, and so forth). After it is\ndone with this instruction, the processor moves on to the nex t instruction,\nand so on, and so on, until the program \ufb01nally completes 1.\nThus, we have just described the basics of the V on Neumann model of\ncomputing2 . Sounds simple, right? But in this class, we will be learning\nthat while a program runs, a lot of other wild things are going on with\nthe primary goal of making the system easy to use .\nThere is a body of software, in fact, that is responsible for m aking it\neasy to run programs (even allowing you to seemingly run many at the\nsame time), allowing programs to share memory , enabling pro grams to\ninteract with devices, and other fun stuff like that. That bo dy of software\n1 Of course, modern processors do many bizarre and frightenin g things underneath the\nhood to make programs run faster , e.g., executing multiple i nstructions at once, and even issu-\ning and completing them out of order! But that is"
  },
  {
    "content": " to run programs (even allowing you to seemingly run many at the\nsame time), allowing programs to share memory , enabling pro grams to\ninteract with devices, and other fun stuff like that. That bo dy of software\n1 Of course, modern processors do many bizarre and frightenin g things underneath the\nhood to make programs run faster , e.g., executing multiple i nstructions at once, and even issu-\ning and completing them out of order! But that is not our conce rn here; we are just concerned\nwith the simple model most programs assume: that instructio ns seemingly execute one at a\ntime, in an orderly and sequential fashion.\n2 V on Neumann was one of the early pioneers of computing system s. He also did pioneer-\ning work on game theory and atomic bombs, and played in the NBA for six years. OK, one of\nthose things isn\u2019t true.\n3\n4 IN T R O D U C T I O N TO OP E R AT I N G SY S T E M S\nTH E CR U X O F T H E PR O B L E M :\nHO W TO VI RT U A L I Z E RE S O U R C E S\nOne central question we will answer in this book is quite simp le: how\ndoes the operating system virtualize resources? This is the crux of our\nproblem. Why the OS does this is not the main question, as the answer\nshould be obvious: it makes the system easier to use. Thus, we focus on\nthe how: what mechanisms and policies are implemented by the OS to\nattain virtualization? How does the OS do so ef\ufb01ciently? Wha t hardware\nsupport is needed?\nW e will use the \u201ccrux of the problem\u201d, in shaded boxes such as t his one,\nas a way to call out speci\ufb01c problems we are trying to solve in b uilding\nan operating system. Thus, within a note on a particular topi c, you may\n\ufb01nd one or more cruces (yes, this is the proper plural) which highlight the\nproblem. The details within the chapter , of course, present the solution,\nor at least the basic parameters of a solution.\nis called the operating system (OS)3 , as it is in charge of making sure the\nsystem operates correctly and ef\ufb01ciently in an easy-to-use manner .\nThe primary way the OS does this is through a general techniqu e that\nwe call virtualization. That is, the OS takes a physical resource (such as\nthe processor , or memory , or a disk) and transforms it into a m ore gen-\neral, powerful, and easy-to-use virtual form of itself. Thus, we sometimes\nrefer to the operating system as a virtual machine .\nOf course, in order to allow users to tell the OS what to do and t hus\nmake use of the features of the virtual machine (such as runni ng a pro-\ngram, or allocating memory , or accessing a \ufb01le), the OS also p rovides\nsome interfaces (APIs) that you can call. A typical OS, in fac t, exports\na few hundred system calls that are available to applications. Because\nthe OS provides these calls to run programs, access memory an d devices,\nand other related actions, we also sometimes say that the OS p rovides a\nstandard library to applications.\nFinally , because virtualization allows many programs to ru n (thus shar-\ning the CPU), and many programs to concurrently access their own in-\nstructions and data (thus sharing memory), and many program s to access\ndevices (thus sharing disks and so forth), the OS is sometime s known as\na resource manager . Each of the CPU, memory , and disk is a resource\nof the system; it is thus the operating system\u2019s role to manage those re-\nsources, doing so ef\ufb01ciently or fairly or indeed with many ot her possible\ngoals in mind. T o understand the role of the OS a little bit bet ter , let\u2019s take\na look at some examples.\n3 Another early name for the OS was the supervisor or even the master control program .\nApparently , the latter sounded a little overzealous (see th e movie T ron for details) and thus,\nthankfully , \u201coperating system\u201d caught on instead.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E"
  },
  {
    "content": "a look at some examples.\n3 Another early name for the OS was the supervisor or even the master control program .\nApparently , the latter sounded a little overzealous (see th e movie T ron for details) and thus,\nthankfully , \u201coperating system\u201d caught on instead.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T R O D U C T I O N TO OP E R AT I N G SY S T E M S 5\n1 #include <stdio.h>\n2 #include <stdlib.h>\n3 #include <sys/time.h>\n4 #include <assert.h>\n5 #include \"common.h\"\n6\n7 int\n8 main(int argc, char *argv[])\n9 {\n10 if (argc != 2) {\n11 fprintf(stderr, \"usage: cpu <string>\\n\");\n12 exit(1);\n13 }\n14 char *str = argv[1];\n15 while (1) {\n16 Spin(1);\n17 printf(\"%s\\n\", str);\n18 }\n19 return 0;\n20 }\nFigure 2.1: Simple Example: Code That Loops and Prints\n2.1 Virtualizing the CPU\nFigure\n2.1 depicts our \ufb01rst program. It doesn\u2019t do much. In fact, all\nit does is call Spin(), a function that repeatedly checks the time and\nreturns once it has run for a second. Then, it prints out the st ring that the\nuser passed in on the command line, and repeats, forever .\nLet\u2019s say we save this \ufb01le as cpu.c and decide to compile and run it\non a system with a single processor (or CPU as we will sometimes call it).\nHere is what we will see:\nprompt> gcc -o cpu cpu.c -Wall\nprompt> ./cpu \"A\"\nA\nA\nA\nA\n\u02c6C\nprompt>\nNot too interesting of a run \u2013 the system begins running the pr ogram,\nwhich repeatedly checks the time until a second has elapsed. Once a sec-\nond has passed, the code prints the input string passed in by t he user\n(in this example, the letter \u201cA \u201d), and continues. Note the pr ogram will\nrun forever; only by pressing \u201cControl-c\u201d (which on U N I X-based systems\nwill terminate the program running in the foreground) can we halt the\nprogram.\nNow , let\u2019s do the same thing, but this time, let\u2019s run many dif ferent in-\nstances of this same program. Figure\n2.2 shows the results of this slightly\nmore complicated example.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n6 IN T R O D U C T I O N TO OP E R AT I N G SY S T E M S\nprompt> ./cpu A & ; ./cpu B & ; ./cpu C & ; ./cpu D &\n[1] 7353\n[2] 7354\n[3] 7355\n[4] 7356\nA\nB\nD\nC\nA\nB\nD\nC\nA\nC\nB\nD\n...\nFigure 2.2: Running Many Programs At Once\nW ell, now things are getting a little more interesting. Even though we\nhave only one processor , somehow all four of these programs s eem to be\nrunning at the same time! How does this magic happen? 4\nIt turns out that the operating system, with some help from th e hard-\nware, is in charge of this illusion, i.e., the illusion that the system has a\nvery large number of virtual CPUs. T urning a single CPU (or sm all set of\nthem) into a seemingly in\ufb01nite number of CPUs and thus allowi ng many\nprograms to seemingly run at once is what we call virtualizing the CPU ,\nthe focus of the \ufb01rst major part of this book.\nOf course, to run programs, and stop them, and otherwise tell the OS\nwhich programs to run, there need to be some interfaces (APIs ) that you\ncan use to communicate your desires to the OS. W e\u2019ll talk"
  },
  {
    "content": " in\ufb01nite number of CPUs and thus allowi ng many\nprograms to seemingly run at once is what we call virtualizing the CPU ,\nthe focus of the \ufb01rst major part of this book.\nOf course, to run programs, and stop them, and otherwise tell the OS\nwhich programs to run, there need to be some interfaces (APIs ) that you\ncan use to communicate your desires to the OS. W e\u2019ll talk abou t these\nAPIs throughout this book; indeed, they are the major way in w hich most\nusers interact with operating systems.\nY ou might also notice that the ability to run multiple progra ms at once\nraises all sorts of new questions. For example, if two progra ms want to\nrun at a particular time, which should run? This question is answered by\na policy of the OS; policies are used in many different places within a n\nOS to answer these types of questions, and thus we will study t hem as\nwe learn about the basic mechanisms that operating systems implement\n(such as the ability to run multiple programs at once). Hence the role of\nthe OS as a resource manager .\n4 Note how we ran four processes at the same time, by using the & symbol. Doing so runs a\njob in the background in the tcsh shell, which means that the user is able to immediately issue\ntheir next command, which in this case is another program to r un. The semi-colon between\ncommands allows us to run multiple programs at the same time i n tcsh. If you\u2019re using a\ndifferent shell (e.g., bash), it works slightly differently; read documentation onlin e for details.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T R O D U C T I O N TO OP E R AT I N G SY S T E M S 7\n1 #include <unistd.h>\n2 #include <stdio.h>\n3 #include <stdlib.h>\n4 #include \"common.h\"\n5\n6 int\n7 main(int argc, char *argv[])\n8 {\n9 int *p = malloc(sizeof(int)); // a1\n10 assert(p != NULL);\n11 printf(\"(%d) address of p: %08x\\n\",\n12 getpid(), (unsigned) p); // a2\n13 *p = 0; // a3\n14 while (1) {\n15 Spin(1);\n16 *p = *p + 1;\n17 printf(\"(%d) p: %d\\n\", getpid(), *p); // a4\n18 }\n19 return 0;\n20 }\nFigure 2.3: A Program that Accesses Memory\n2.2 Virtualizing Memory\nNow let\u2019s consider memory . The model of physical memory pre-\nsented by modern machines is very simple. Memory is just an ar ray of\nbytes; to read memory , one must specify an address to be able to access\nthe data stored there; to write (or update) memory , one must also specify\nthe data to be written to the given address.\nMemory is accessed all the time when a program is running. A pr o-\ngram keeps all of its data structures in memory , and accesses them through\nvarious instructions, like loads and stores or other explic it instructions\nthat access memory in doing their work. Don\u2019t forget that eac h instruc-\ntion of the program is in memory too; thus memory is accessed o n each\ninstruction fetch.\nLet\u2019s take a look at a program (in Figure\n2.3) that allocates some mem-\nory by calling malloc(). The output of this program can be found here:\nprompt> ./mem\n(2134) memory address of p: 00200000\n(2134) p: 1\n(2134) p: 2\n(2134) p: 3\n(2134) p: 4\n(2134) p: 5\n\u02c6C\nThe program does a couple of things. First, it allocates some memory\n(line a1). Then, it prints out the address of the memory (a2), and then\nputs the number zero into the \ufb01rst slot of the newly allocated memory\n(a3). Finally , it loops, delaying for a second and increment ing the value\nstored at the address held in p"
  },
  {
    "content": " p: 4\n(2134) p: 5\n\u02c6C\nThe program does a couple of things. First, it allocates some memory\n(line a1). Then, it prints out the address of the memory (a2), and then\nputs the number zero into the \ufb01rst slot of the newly allocated memory\n(a3). Finally , it loops, delaying for a second and increment ing the value\nstored at the address held in p. With every print statement, it also prints\nout what is called the process identi\ufb01er (the PID) of the runn ing program.\nThis PID is unique per running process.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n8 IN T R O D U C T I O N TO OP E R AT I N G SY S T E M S\nprompt> ./mem &; ./mem &\n[1] 24113\n[2] 24114\n(24113) memory address of p: 00200000\n(24114) memory address of p: 00200000\n(24113) p: 1\n(24114) p: 1\n(24114) p: 2\n(24113) p: 2\n(24113) p: 3\n(24114) p: 3\n(24113) p: 4\n(24114) p: 4\n...\nFigure 2.4: Running The Memory Program Multiple Times\nAgain, this \ufb01rst result is not too interesting. The newly all ocated mem-\nory is at address 00200000. As the program runs, it slowly updates the\nvalue and prints out the result.\nNow , we again run multiple instances of this same program to s ee\nwhat happens (Figure\n2.4). W e see from the example that each running\nprogram has allocated memory at the same address ( 00200000), and yet\neach seems to be updating the value at 00200000 independently! It is as\nif each running program has its own private memory , instead o f sharing\nthe same physical memory with other running programs 5.\nIndeed, that is exactly what is happening here as the OS is virtualiz-\ning memory . Each process accesses its own private virtual address space\n(sometimes just called its address space ), which the OS somehow maps\nonto the physical memory of the machine. A memory reference w ithin\none running program does not affect the address space of othe r processes\n(or the OS itself); as far as the running program is concerned , it has phys-\nical memory all to itself. The reality , however , is that phys ical memory is\na shared resource, managed by the operating system. Exactly how all of\nthis is accomplished is also the subject of the \ufb01rst part of th is book, on the\ntopic of virtualization.\n2.3 Concurrency\nAnother main theme of this book is concurrency. W e use this concep-\ntual term to refer to a host of problems that arise, and must be addressed,\nwhen working on many things at once (i.e., concurrently) in t he same\nprogram. The problems of concurrency arose \ufb01rst within the o perating\nsystem itself; as you can see in the examples above on virtual ization, the\nOS is juggling many things at once, \ufb01rst running one process, then an-\nother , and so forth. As it turns out, doing so leads to some dee p and\ninteresting problems.\n5 For this example to work, you need to make sure address-space randomization is dis-\nabled; randomization, as it turns out, can be a good defense a gainst certain kinds of security\n\ufb02aws. Read more about it on your own, especially if you want to learn how to break into\ncomputer systems via stack-smashing attacks. Not that we wo uld recommend such a thing...\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T R O D U C T I O N TO OP E R AT I N G SY S T E M S 9\n1 #include <stdio.h>\n2 #include <stdlib.h>\n3 #include \"common.h\"\n4\n5 volatile int counter = 0;\n6 int loops;\n7\n8 void *worker(void *arg) {\n9 int i;\n10 for (i = 0; i"
  },
  {
    "content": " R G\nIN T R O D U C T I O N TO OP E R AT I N G SY S T E M S 9\n1 #include <stdio.h>\n2 #include <stdlib.h>\n3 #include \"common.h\"\n4\n5 volatile int counter = 0;\n6 int loops;\n7\n8 void *worker(void *arg) {\n9 int i;\n10 for (i = 0; i < loops; i++) {\n11 counter++;\n12 }\n13 return NULL;\n14 }\n15\n16 int\n17 main(int argc, char *argv[])\n18 {\n19 if (argc != 2) {\n20 fprintf(stderr, \"usage: threads <value>\\n\");\n21 exit(1);\n22 }\n23 loops = atoi(argv[1]);\n24 pthread_t p1, p2;\n25 printf(\"Initial value : %d\\n\", counter);\n26\n27 Pthread_create(&p1, NULL, worker, NULL);\n28 Pthread_create(&p2, NULL, worker, NULL);\n29 Pthread_join(p1, NULL);\n30 Pthread_join(p2, NULL);\n31 printf(\"Final value : %d\\n\", counter);\n32 return 0;\n33 }\nFigure 2.5: A Multi-threaded Program\nUnfortunately , the problems of concurrency are no longer li mited just\nto the OS itself. Indeed, modern multi-threaded programs exhibit the\nsame problems. Let us demonstrate with an example of a multi-threaded\nprogram (Figure\n2.5).\nAlthough you might not understand this example fully at the m oment\n(and we\u2019ll learn a lot more about it in later chapters, in the s ection of the\nbook on concurrency), the basic idea is simple. The main prog ram creates\ntwo threads using Pthread create()6. Y ou can think of a thread as a\nfunction running within the same memory space as other funct ions, with\nmore than one of them active at a time. In this example, each th read starts\nrunning in a routine called worker(), in which it simply increments a\ncounter in a loop for loops number of times.\nBelow is a transcript of what happens when we run this program with\nthe input value for the variable loops set to 1000. The value of loops\n6 The actual call should be to lower-case pthread create(); the upper-case version is\nour own wrapper that calls pthread create() and makes sure that the return code indicates\nthat the call succeeded. See the code for details.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n10 IN T R O D U C T I O N TO OP E R AT I N G SY S T E M S\nTH E CR U X O F T H E PR O B L E M :\nHO W TO BU I L D CO R R E C T CO N C U R R E N T PR O G R A M S\nWhen there are many concurrently executing threads within t he same\nmemory space, how can we build a correctly working program? W hat\nprimitives are needed from the OS? What mechanisms should be pro-\nvided by the hardware? How can we use them to solve the problem s of\nconcurrency?\ndetermines how many times each of the two workers will increm ent the\nshared counter in a loop. When the program is run with the valu e of\nloops set to 1000, what do you expect the \ufb01nal value of counter to be?\nprompt> gcc -o thread thread.c -Wall -pthread\nprompt> ./thread 1000\nInitial value : 0\nFinal value : 2000\nAs you probably guessed, when the two threads are \ufb01nished, th e \ufb01nal\nvalue of the counter is 2000, as each thread incremented the c ounter 1000\ntimes. Indeed, when the input value of loops is set to N , we would\nexpect the \ufb01nal output of the program to be 2N . But life is not so simple,\nas it turns out. Let\u2019s run the same program, but with higher va lues for\nloops, and see what happens:\nprompt> ./thread 100000\nInitial value : 0\nFinal value : 143012 // huh??\nprompt> ./thread 100000\nInitial value : 0\n"
  },
  {
    "content": " is set to N , we would\nexpect the \ufb01nal output of the program to be 2N . But life is not so simple,\nas it turns out. Let\u2019s run the same program, but with higher va lues for\nloops, and see what happens:\nprompt> ./thread 100000\nInitial value : 0\nFinal value : 143012 // huh??\nprompt> ./thread 100000\nInitial value : 0\nFinal value : 137298 // what the??\nIn this run, when we gave an input value of 100,000, instead of getting\na \ufb01nal value of 200,000, we instead \ufb01rst get 143,012. Then, wh en we run\nthe program a second time, we not only again get the wrong value, but\nalso a different value than the last time. In fact, if you run the program\nover and over with high values of loops, you may \ufb01nd that sometimes\nyou even get the right answer! So why is this happening?\nAs it turns out, the reason for these odd and unusual outcomes relate\nto how instructions are executed, which is one at a time. Unfo rtunately , a\nkey part of the program above, where the shared counter is inc remented,\ntakes three instructions: one to load the value of the counte r from mem-\nory into a register , one to increment it, and one to store it ba ck into mem-\nory . Because these three instructions do not execute atomically (all at\nonce), strange things can happen. It is this problem of concurrency that\nwe will address in great detail in the second part of this book .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T R O D U C T I O N TO OP E R AT I N G SY S T E M S 11\n1 #include <stdio.h>\n2 #include <unistd.h>\n3 #include <assert.h>\n4 #include <fcntl.h>\n5 #include <sys/types.h>\n6\n7 int\n8 main(int argc, char *argv[])\n9 {\n10 int fd = open(\"/tmp/file\", O_WRONLY | O_CREAT | O_TRUNC, S_IRWXU);\n11 assert(fd > -1);\n12 int rc = write(fd, \"hello world\\n\", 13);\n13 assert(rc == 13);\n14 close(fd);\n15 return 0;\n16 }\nFigure 2.6: A Program That Does I/O\n2.4 Persistence\nThe third major theme of the course is persistence. In system memory ,\ndata can be easily lost, as devices such as DRAM store values i n a volatile\nmanner; when power goes away or the system crashes, any data i n mem-\nory is lost. Thus, we need hardware and software to be able to s tore data\npersistently; such storage is thus critical to any system as users care a\ngreat deal about their data.\nThe hardware comes in the form of some kind of input/output or I/O\ndevice; in modern systems, a hard drive is a common repository for long-\nlived information, although solid-state drives (SSDs) are making head-\nway in this arena as well.\nThe software in the operating system that usually manages th e disk is\ncalled the \ufb01le system ; it is thus responsible for storing any \ufb01les the user\ncreates in a reliable and ef\ufb01cient manner on the disks of the s ystem.\nUnlike the abstractions provided by the OS for the CPU and mem ory ,\nthe OS does not create a private, virtualized disk for each ap plication.\nRather , it is assumed that often times, users will want to share informa-\ntion that is in \ufb01les. For example, when writing a C program, yo u might\n\ufb01rst use an editor (e.g., Emacs 7 ) to create and edit the C \ufb01le ( emacs -nw\nmain.c). Once done, you might use the compiler to turn the source cod e\ninto an executable (e.g., gcc -o main main.c). When you\u2019re \ufb01nished,\nyou might run the new executable (e.g., ./main). Thus, you can"
  },
  {
    "content": " u might\n\ufb01rst use an editor (e.g., Emacs 7 ) to create and edit the C \ufb01le ( emacs -nw\nmain.c). Once done, you might use the compiler to turn the source cod e\ninto an executable (e.g., gcc -o main main.c). When you\u2019re \ufb01nished,\nyou might run the new executable (e.g., ./main). Thus, you can see how\n\ufb01les are shared across different processes. First, Emacs cr eates a \ufb01le that\nserves as input to the compiler; the compiler uses that input \ufb01le to create\na new executable \ufb01le (in many steps \u2013 take a compiler course fo r details);\n\ufb01nally , the new executable is then run. And thus a new program is born!\nT o understand this better , let\u2019s look at some code. Figure\n2.6 presents\ncode to create a \ufb01le ( /tmp/file) that contains the string \u201chello world\u201d.\n7 Y ou should be using Emacs. If you are using vi, there is probab ly something wrong with\nyou. If you are using something that is not a real code editor , that is even worse.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n12 IN T R O D U C T I O N TO OP E R AT I N G SY S T E M S\nTH E CR U X O F T H E PR O B L E M :\nHO W TO STO R E DATA PE R S I S T E N T LY\nThe \ufb01le system is the part of the OS in charge of managing persi stent data.\nWhat techniques are needed to do so correctly? What mechanis ms and\npolicies are required to do so with high performance? How is r eliability\nachieved, in the face of failures in hardware and software?\nT o accomplish this task, the program makes three calls into t he oper-\nating system. The \ufb01rst, a call to open(), opens the \ufb01le and creates it; the\nsecond, write(), writes some data to the \ufb01le; the third, close(), sim-\nply closes the \ufb01le thus indicating the program won\u2019t be writi ng any more\ndata to it. These system calls are routed to the part of the operating sys-\ntem called the \ufb01le system , which then handles the requests and returns\nsome kind of error code to the user .\nY ou might be wondering what the OS does in order to actually wr ite\nto disk. W e would show you but you\u2019d have to promise to close yo ur\neyes \ufb01rst; it is that unpleasant. The \ufb01le system has to do a fai r bit of work:\n\ufb01rst \ufb01guring out where on disk this new data will reside, and t hen keep-\ning track of it in various structures the \ufb01le system maintain s. Doing so\nrequires issuing I/O requests to the underlying storage dev ice, to either\nread existing structures or update (write) them. As anyone w ho has writ-\nten a device driver 8 knows, getting a device to do something on your\nbehalf is an intricate and detailed process. It requires a de ep knowledge\nof the low-level device interface and its exact semantics. F ortunately , the\nOS provides a standard and simple way to access devices throu gh its sys-\ntem calls. Thus, the OS is sometimes seen as a standard library .\nOf course, there are many more details in how devices are acce ssed,\nand how \ufb01le systems manage data persistently atop said devic es. For\nperformance reasons, most \ufb01le systems \ufb01rst delay such write s for a while,\nhoping to batch them into larger groups. T o handle the proble ms of sys-\ntem crashes during writes, most \ufb01le systems incorporate som e kind of\nintricate write protocol, such as journaling or copy-on-write, carefully\nordering writes to disk to ensure that if a failure occurs dur ing the write\nsequence, the system can recover to reasonable state afterw ards. T o make\ndifferent common operations ef\ufb01cient, \ufb01le systems employ m any differ-\nent data structures and access methods, from simple lists to complex b"
  },
  {
    "content": ", most \ufb01le systems incorporate som e kind of\nintricate write protocol, such as journaling or copy-on-write, carefully\nordering writes to disk to ensure that if a failure occurs dur ing the write\nsequence, the system can recover to reasonable state afterw ards. T o make\ndifferent common operations ef\ufb01cient, \ufb01le systems employ m any differ-\nent data structures and access methods, from simple lists to complex b-\ntrees. If all of this doesn\u2019t make sense yet, good! W e\u2019ll be ta lking about\nall of this quite a bit more in the third part of this book on persistence,\nwhere we\u2019ll discuss devices and I/O in general, and then disk s, RAIDs,\nand \ufb01le systems in great detail.\n8 A device driver is some code in the operating system that know s how to deal with a\nspeci\ufb01c device. W e will talk more about devices and device dr ivers later .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T R O D U C T I O N TO OP E R AT I N G SY S T E M S 13\n2.5 Design Goals\nSo now you have some idea of what an OS actually does: it takes p hys-\nical resources, such as a CPU, memory , or disk, and virtualizes them. It\nhandles tough and tricky issues related to concurrency. And it stores \ufb01les\npersistently, thus making them safe over the long-term. Given that we\nwant to build such a system, we want to have some goals in mind t o help\nfocus our design and implementation and make trade-offs as n ecessary;\n\ufb01nding the right set of trade-offs is a key to building system s.\nOne of the most basic goals is to build up some abstractions in order\nto make the system convenient and easy to use. Abstractions a re fun-\ndamental to everything we do in computer science. Abstracti on makes\nit possible to write a large program by dividing it into small and under-\nstandable pieces, to write such a program in a high-level lan guage like\nC9 without thinking about assembly , to write code in assembly w ithout\nthinking about logic gates, and to build a processor out of ga tes without\nthinking too much about transistors. Abstraction is so fund amental that\nsometimes we forget its importance, but we won\u2019t here; thus, in each sec-\ntion, we\u2019ll discuss some of the major abstractions that have developed\nover time, giving you a way to think about pieces of the OS.\nOne goal in designing and implementing an operating system i s to\nprovide high performance; another way to say this is our goal is to mini-\nmize the overheads of the OS. Virtualization and making the system easy\nto use are well worth it, but not at any cost; thus, we must stri ve to pro-\nvide virtualization and other OS features without excessiv e overheads.\nThese overheads arise in a number of forms: extra time (more i nstruc-\ntions) and extra space (in memory or on disk). W e\u2019ll seek solu tions that\nminimize one or the other or both, if possible. Perfection, h owever , is not\nalways attainable, something we will learn to notice and (wh ere appro-\npriate) tolerate.\nAnother goal will be to provide protection between applications, as\nwell as between the OS and applications. Because we wish to al low\nmany programs to run at the same time, we want to make sure that the\nmalicious or accidental bad behavior of one does not harm oth ers; we\ncertainly don\u2019t want an application to be able to harm the OS i tself (as\nthat would affect all programs running on the system). Protection is at\nthe heart of one of the main principles underlying an operati ng system,\nwhich is that of isolation; isolating processes from one another is the key\nto protection and thus underlies much of what an OS must do.\nThe operating system must also run non-stop; when it fails, all appli-\ncations running on the system fail as well. Because of this de pendence,\noperating systems often strive to provide a high degree of reliability. As\noperating systems grow ever"
  },
  {
    "content": " of the main principles underlying an operati ng system,\nwhich is that of isolation; isolating processes from one another is the key\nto protection and thus underlies much of what an OS must do.\nThe operating system must also run non-stop; when it fails, all appli-\ncations running on the system fail as well. Because of this de pendence,\noperating systems often strive to provide a high degree of reliability. As\noperating systems grow evermore complex (sometimes contai ning mil-\nlions of lines of code), building a reliable operating syste m is quite a chal-\n9 Some of you might object to calling C a high-level language. R emember this is an OS\ncourse, though, where we\u2019re simply happy not to have to code i n assembly all the time!\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n14 IN T R O D U C T I O N TO OP E R AT I N G SY S T E M S\nlenge \u2013 and indeed, much of the on-going research in the \ufb01eld ( including\nsome of our own work [BS+09, SS+10]) focuses on this exact pro blem.\nOther goals make sense: energy-ef\ufb01ciency is important in our increas-\ningly green world; security (an extension of protection, really) against\nmalicious applications is critical, especially in these hi ghly-networked\ntimes; mobility is increasingly important as OSes are run on smaller and\nsmaller devices. Depending in how the system is used, the OS w ill have\ndifferent goals and thus likely be implemented in at least sl ightly differ-\nent ways. However , as we will see, many of the principles we wi ll present\non how to build operating systems are useful in the range of di fferent de-\nvices.\n2.6 Some History\nBefore closing this introduction, let us present a brief his tory of how\noperating systems developed. Like any system built by human s, good\nideas accumulated in operating systems over time, as engine ers learned\nwhat was important in their design. Here, we discuss a few maj or devel-\nopments. For a richer treatment, see Brinch Hansen\u2019s excell ent history of\noperating systems [BH00].\nEarly Operating Systems: Just Libraries\nIn the beginning, the operating system didn\u2019t do too much. Ba sically ,\nit was just a set of libraries of commonly-used functions; fo r example,\ninstead of having each programmer of the system write low-le vel I/O\nhandling code, the \u201cOS\u201d would provide such APIs, and thus mak e life\neasier for the developer .\nUsually , on these old mainframe systems, one program ran at a time,\nas controlled by a human operator . Much of what you think a mod ern\nOS would do (e.g., deciding what order to run jobs in) was perf ormed by\nthis operator . If you were a smart developer , you would be nic e to this\noperator , so that they might move your job to the front of the q ueue.\nThis mode of computing was known as batch processing, as a number\nof jobs were set up and then run in a \u201cbatch\u201d by the operator . Co mputers,\nas of that point, were not used in an interactive manner , beca use of cost:\nit was simply too costly to let a user sit in front of the comput er and use it,\nas most of the time it would just sit idle then, costing the fac ility hundreds\nof thousands of dollars per hour [BH00].\nBeyond Libraries: Protection\nIn moving beyond being a simple library of commonly-used ser vices, op-\nerating systems took on a more central role in managing machi nes. One\nimportant aspect of this was the realization that code run on behalf of the\nOS was special; it had control of devices and thus should be tr eated dif-\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T R O D U C T I O N TO OP E R AT I N G SY S T E M S 15\nferently than normal application code. Why is this? W ell, im agine if you\nallowed any application to read from anywhere on the"
  },
  {
    "content": "-\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T R O D U C T I O N TO OP E R AT I N G SY S T E M S 15\nferently than normal application code. Why is this? W ell, im agine if you\nallowed any application to read from anywhere on the disk; th e notion of\nprivacy goes out the window , as any program could read any \ufb01le . Thus,\nimplementing a \ufb01le system (to manage your \ufb01les) as a library makes little\nsense. Instead, something else was needed.\nThus, the idea of a system call was invented, pioneered by the Atlas\ncomputing system [K+61,L78]. Instead of providing OS routi nes as a li-\nbrary (where you just make a procedure call to access them), the idea here\nwas to add a special pair of hardware instructions and hardwa re state to\nmake the transition into the OS a more formal, controlled pro cess.\nThe key difference between a system call and a procedure call is that\na system call transfers control (i.e., jumps) into the OS whi le simultane-\nously raising the hardware privilege level . User applications run in what\nis referred to as user mode which means the hardware restricts what ap-\nplications can do; for example, an application running in us er mode can\u2019t\ntypically initiate an I/O request to the disk, access any phy sical memory\npage, or send a packet on the network. When a system call is ini tiated\n(usually through a special hardware instruction called a trap), the hard-\nware transfers control to a pre-speci\ufb01ed trap handler (that the OS set up\npreviously) and simultaneously raises the privilege level to kernel mode .\nIn kernel mode, the OS has full access to the hardware of the sy stem and\nthus can do things like initiate an I/O request or make more me mory\navailable to a program. When the OS is done servicing the requ est, it\npasses control back to the user via a special return-from-trap instruction,\nwhich reverts to user mode while simultaneously passing con trol back to\nwhere the application left off.\nThe Era of Multiprogramming\nWhere operating systems really took off was in the era of comp uting be-\nyond the mainframe, that of the minicomputer. Classic machines like\nthe PDP family from Digital Equipment made computers hugely more\naffordable; thus, instead of having one mainframe per large organization,\nnow a smaller collection of people within an organization co uld likely\nhave their own computer . Not surprisingly , one of the major i mpacts of\nthis drop in cost was an increase in developer activity; more smart people\ngot their hands on computers and thus made computer systems d o more\ninteresting and beautiful things.\nIn particular , multiprogramming became commonplace due to the de-\nsire to make better use of machine resources. Instead of just running one\njob at a time, the OS would load a number of jobs into memory and switch\nrapidly between them, thus improving CPU utilization. This switching\nwas particularly important because I/O devices were slow; h aving a pro-\ngram wait on the CPU while its I/O was being serviced was a wast e of\nCPU time. Instead, why not switch to another job and run it for a while?\nThe desire to support multiprogramming and overlap in the pr esence\nof I/O and interrupts forced innovation in the conceptual de velopment of\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n16 IN T R O D U C T I O N TO OP E R AT I N G SY S T E M S\noperating systems along a number of directions. Issues such as memory\nprotection became important; we wouldn\u2019t want one program to be able\nto access the memory of another program. Understanding how t o deal\nwith the concurrency issues introduced by multiprogramming was also\ncritical; making sure the OS was behaving correctly despite the presence\nof interrupts is a great challenge. W e will study these issue s and related\ntopics later in the book.\nOne of the major practical advances of the time was the introd uction\nof the U N I X operating system, primarily thanks to Ken Thompson (and\nDennis Ritchie) at"
  },
  {
    "content": " of another program. Understanding how t o deal\nwith the concurrency issues introduced by multiprogramming was also\ncritical; making sure the OS was behaving correctly despite the presence\nof interrupts is a great challenge. W e will study these issue s and related\ntopics later in the book.\nOne of the major practical advances of the time was the introd uction\nof the U N I X operating system, primarily thanks to Ken Thompson (and\nDennis Ritchie) at Bell Labs (yes, the phone company). U N I X took many\ngood ideas from different operating systems (particularly from Multics\n[O72], and some from systems like TENEX [B+72] and the Berkel ey Time-\nSharing System [S+68]), but made them simpler and easier to u se. Soon\nthis team was shipping tapes containing U N I X source code to people\naround the world, many of whom then got involved and added to t he\nsystem themselves; see the Aside (next page) for more detail 10 .\nThe Modern Era\nBeyond the minicomputer came a new type of machine, cheaper , faster ,\nand for the masses: the personal computer , or PC as we call it today . Led\nby Apple\u2019s early machines (e.g., the Apple II) and the IBM PC, this new\nbreed of machine would soon become the dominant force in comp uting,\nas their low-cost enabled one machine per desktop instead of a shared\nminicomputer per workgroup.\nUnfortunately , for operating systems, the PC at \ufb01rst repres ented a\ngreat leap backwards, as early systems forgot (or never knew of) the\nlessons learned in the era of minicomputers. For example, ea rly operat-\ning systems such as DOS (the Disk Operating System , from Microsoft)\ndidn\u2019t think memory protection was important; thus, a malic ious (or per-\nhaps just a poorly-programmed) application could scribble all over mem-\nory . The \ufb01rst generations of the Mac OS (v9 and earlier) took a coopera-\ntive approach to job scheduling; thus, a thread that acciden tally got stuck\nin an in\ufb01nite loop could take over the entire system, forcing a reboot. The\npainful list of OS features missing in this generation of sys tems is long,\ntoo long for a full discussion here.\nFortunately , after some years of suffering, the old feature s of minicom-\nputer operating systems started to \ufb01nd their way onto the des ktop. For\nexample, Mac OS X has U N I X at its core, including all of the features\none would expect from such a mature system. Windows has simil arly\nadopted many of the great ideas in computing history , starti ng in partic-\nular with Windows NT , a great leap forward in Microsoft OS tec hnology .\nEven today\u2019s cell phones run operating systems (such as Linu x) that are\n10 W e\u2019ll use asides and other related text boxes to call attenti on to various items that don\u2019t\nquite \ufb01t the main \ufb02ow of the text. Sometimes, we\u2019ll even use th em just to make a joke, because\nwhy not have a little fun along the way? Y es, many of the jokes a re bad.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T R O D U C T I O N TO OP E R AT I N G SY S T E M S 17\nAS I D E : TH E IM P O RTA N C E O F UN I X\nIt is dif\ufb01cult to overstate the importance of U N I X in the history of oper-\nating systems. In\ufb02uenced by earlier systems (in particular , the famous\nMultics system from MIT), U N I X brought together many great ideas and\nmade a system that was both simple and powerful.\nUnderlying the original \u201cBell Labs\u201d U N I X was the unifying principle of\nbuilding small powerful programs that could be connected to gether to\nform larger work\ufb02ows. The shell, where you type commands, provided\nprimitives such as pipes to enable such meta-level programming, and\nthus it became easy to string together programs to accomplis h a big-\nger task. For example, to \ufb01nd lines of"
  },
  {
    "content": " and powerful.\nUnderlying the original \u201cBell Labs\u201d U N I X was the unifying principle of\nbuilding small powerful programs that could be connected to gether to\nform larger work\ufb02ows. The shell, where you type commands, provided\nprimitives such as pipes to enable such meta-level programming, and\nthus it became easy to string together programs to accomplis h a big-\nger task. For example, to \ufb01nd lines of a text \ufb01le that have the w ord\n\u201cfoo\u201d in them, and then to count how many such lines exist, you would\ntype: grep foo file.txt|wc -l, thus using the grep and wc (word\ncount) programs to achieve your task.\nThe U N I X environment was friendly for programmers and developers\nalike, also providing a compiler for the new C programming language .\nMaking it easy for programmers to write their own programs, a s well as\nshare them, made U N I X enormously popular . And it probably helped a\nlot that the authors gave out copies for free to anyone who ask ed, an early\nform of open-source software .\nAlso of critical importance was the accessibility and reada bility of the\ncode. Having a beautiful, small kernel written in C invited o thers to play\nwith the kernel, adding new and cool features. For example, a n enter-\nprising group at Berkeley , led by Bill Joy , made a wonderful distribution\n(the Berkeley Systems Distribution , or BSD) which had some advanced\nvirtual memory , \ufb01le system, and networking subsystems. Joy later co-\nfounded Sun Microsystems .\nUnfortunately , the spread of U N I X was slowed a bit as companies tried to\nassert ownership and pro\ufb01t from it, an unfortunate (but comm on) result\nof lawyers getting involved. Many companies had their own va riants:\nSunOS from Sun Microsystems, AIX from IBM, HPUX (a.k.a. \u201cH-Pucks\u201d)\nfrom HP , and IRIX from SGI. The legal wrangling among A T&T/Bell\nLabs and these other players cast a dark cloud over U N I X, and many\nwondered if it would survive, especially as Windows was intr oduced and\ntook over much of the PC market...\nmuch more like what a minicomputer ran in the 1970s than what a PC\nran in the 1980s (thank goodness); it is good to see that the go od ideas de-\nveloped in the heyday of OS development have found their way i nto the\nmodern world. Even better is that these ideas continue to dev elop, pro-\nviding more features and making modern systems even better f or users\nand applications.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n18 IN T R O D U C T I O N TO OP E R AT I N G SY S T E M S\nAS I D E : AN D TH E N CA M E LI N U X\nFortunately for U N I X, a young Finnish hacker named Linus T orvalds de-\ncided to write his own version of U N I X which borrowed heavily on the\nprinciples and ideas behind the original system, but not fro m the code\nbase, thus avoiding issues of legality . He enlisted help fro m many oth-\ners around the world, and soon Linux was born (as well as the modern\nopen-source software movement).\nAs the internet era came into place, most companies (such as G oogle,\nAmazon, Facebook, and others) chose to run Linux, as it was fr ee and\ncould be readily modi\ufb01ed to suit their needs; indeed, it is ha rd to imag-\nine the success of these new companies had such a system not ex isted.\nAs smart phones became a dominant user-facing platform, Lin ux found\na stronghold there too (via Android), for many of the same rea sons. And\nSteve Jobs took his U N I X-based NeXTStep operating environment with\nhim to Apple, thus making U N I X popular on desktops (though many\nusers of Apple technology are probably not even aware of this fact). And\nthus U N I X lives on, more important today than ever before. The comput-\ning gods, if you believe in them, should be thanked for this wo nderful\noutcome.\n2.7 Summary"
  },
  {
    "content": " sons. And\nSteve Jobs took his U N I X-based NeXTStep operating environment with\nhim to Apple, thus making U N I X popular on desktops (though many\nusers of Apple technology are probably not even aware of this fact). And\nthus U N I X lives on, more important today than ever before. The comput-\ning gods, if you believe in them, should be thanked for this wo nderful\noutcome.\n2.7 Summary\nThus, we have an introduction to the OS. T oday\u2019s operating sy stems\nmake systems relatively easy to use, and virtually all opera ting systems\nyou use today have been in\ufb02uenced by the developments we will discuss\nthroughout the book.\nUnfortunately , due to time constraints, there are a number o f parts of\nthe OS we won\u2019t cover in the book. For example, there is a lot of net-\nworking code in the operating system; we leave it to you to take the net -\nworking class to learn more about that. Similarly , graphics devices are\nparticularly important; take the graphics course to expand your knowl-\nedge in that direction. Finally , some operating system book s talk a great\ndeal about security; we will do so in the sense that the OS must provide\nprotection between running programs and give users the abil ity to pro-\ntect their \ufb01les, but we won\u2019t delve into deeper security issu es that one\nmight \ufb01nd in a security course.\nHowever , there are many important topics that we will cover , includ-\ning the basics of virtualization of the CPU and memory , concu rrency , and\npersistence via devices and \ufb01le systems. Don\u2019t worry! While there is a\nlot of ground to cover , most of it is quite cool, and at the end o f the road,\nyou\u2019ll have a new appreciation for how computer systems real ly work.\nNow get to work!\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T R O D U C T I O N TO OP E R AT I N G SY S T E M S 19\nReferences\n[BS+09] \u201cT olerating File-System Mistakes with EnvyFS\u201d\nLakshmi N. Bairavasundaram, Swaminathan Sundararaman, An drea C. Arpaci-Dusseau, Remzi\nH. Arpaci-Dusseau\nUSENIX \u201909, San Diego, CA, June 2009\nA fun paper about using multiple \ufb01le systems at once to tolera te a mistake in any one of them.\n[BH00] \u201cThe Evolution of Operating Systems\u201d\nP . Brinch Hansen\nIn Classic Operating Systems: From Batch Processing to Dist ributed Systems\nSpringer-V erlag, New Y ork, 2000\nThis essay provides an intro to a wonderful collection of pap ers about historically signi\ufb01cant systems.\n[B+72] \u201cTENEX, A Paged Time Sharing System for the PDP-10\u201d\nDaniel G. Bobrow , Jerry D. Burch\ufb01el, Daniel L. Murphy , Raymo nd S. T omlinson\nCACM, V olume 15, Number 3, March 1972\nTENEX has much of the machinery found in modern operating sys tems; read more about it to see how\nmuch innovation was already in place in the early 1970\u2019s.\n[B75] \u201cThe Mythical Man-Month\u201d\nFred Brooks\nAddison-W esley , 1975\nA classic text on software engineering; well worth the read.\n[BOH10] \u201cComputer Systems: A Programmer \u2019s Perspective\u201d\nRandal E. Bryant and David R. O\u2019Hallaron\nAddison-W esley , 2010\nAnother great intro to how computer systems work. Has a littl e bit of overlap with this book \u2013 so if you\u2019d\nlike, you can skip the last few chapters of that book, or simpl y read them to get a different perspective\non some of the same material. After all, one good way to build u p your own knowledge is to hear as\nmany other perspectives as possible, and then develop your o wn opinion and thoughts on the matter .\nY ou know, by thinking!\n[K+61] \u201cOne"
  },
  {
    "content": " of overlap with this book \u2013 so if you\u2019d\nlike, you can skip the last few chapters of that book, or simpl y read them to get a different perspective\non some of the same material. After all, one good way to build u p your own knowledge is to hear as\nmany other perspectives as possible, and then develop your o wn opinion and thoughts on the matter .\nY ou know, by thinking!\n[K+61] \u201cOne-Level Storage System\u201d\nT . Kilburn, D.B.G. Edwards, M.J. Lanigan, F .H. Sumner\nIRE T ransactions on Electronic Computers, April 1962\nThe Atlas pioneered much of what you see in modern systems. Ho wever , this paper is not the best read.\nIf you were to only read one, you might try the historical pers pective below [L78].\n[L78] \u201cThe Manchester Mark I and Atlas: A Historical Perspec tive\u201d\nS. H. Lavington\nCommunications of the ACM archive\nV olume 21, Issue 1 (January 1978), pages 4-12\nA nice piece of history on the early development of computer s ystems and the pioneering efforts of the\nAtlas. Of course, one could go back and read the Atlas papers t hemselves, but this paper provides a great\noverview and adds some historical perspective.\n[O72] \u201cThe Multics System: An Examination of its Structure\u201d\nElliott Organick, 1972\nA great overview of Multics. So many good ideas, and yet it was an over-designed system, shooting for\ntoo much, and thus never really worked as expected. A classic example of what Fred Brooks would call\nthe \u201csecond-system effect\u201d [B75].\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n20 IN T R O D U C T I O N TO OP E R AT I N G SY S T E M S\n[PP03] \u201cIntroduction to Computing Systems:\nFrom Bits and Gates to C and Beyond\u201d\nY ale N. Patt and Sanjay J. Patel\nMcGraw-Hill, 2003\nOne of our favorite intro to computing systems books. Starts at transistors and gets you all the way up\nto C; the early material is particularly great.\n[RT74] \u201cThe U NIX Time-Sharing System\u201d\nDennis M. Ritchie and Ken Thompson\nCACM, V olume 17, Number 7, July 1974, pages 365-375\nA great summary of UNIX written as it was taking over the world of computing, by the pe ople who\nwrote it.\n[S68] \u201cSDS 940 Time-Sharing System\u201d\nScienti\ufb01c Data Systems Inc.\nTECHNICAL MANUAL, SDS 90 11168 August 1968\nA vailable: http://goo.gl/EN0Zrn\nY es, a technical manual was the best we could \ufb01nd. But it is fas cinating to read these old system\ndocuments, and see how much was already in place in the late 19 60\u2019s. One of the minds behind the\nBerkeley Time-Sharing System (which eventually became the SDS system) was Butler Lampson, who\nlater won a T uring award for his contributions in systems.\n[SS+10] \u201cMembrane: Operating System Support for Restartab le File Systems\u201d\nSwaminathan Sundararaman, Sriram Subramanian, Abhishek R ajimwale,\nAndrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau, Michae l M. Swift\nF AST \u201910, San Jose, CA, February 2010\nThe great thing about writing your own class notes: you can ad vertise your own research. But this\npaper is actually pretty neat \u2013 when a \ufb01le system hits a bug and crashes, Membrane auto-magically\nrestarts it, all without applications or the rest of the syst em being affected.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPart I\nVirtualization\n21\n\n3\nA Dialogue on Virtualization\nProfessor: And thus we reach the \ufb01rst of our three pieces on operating"
  },
  {
    "content": " auto-magically\nrestarts it, all without applications or the rest of the syst em being affected.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPart I\nVirtualization\n21\n\n3\nA Dialogue on Virtualization\nProfessor: And thus we reach the \ufb01rst of our three pieces on operating sys tems:\nvirtualization.\nStudent: But what is virtualization, oh noble professor?\nProfessor: Imagine we have a peach.\nStudent: A peach? (incredulous)\nProfessor: Y es, a peach. Let us call that the physical peach. But we have many\neaters who would like to eat this peach. What we would like to p resent to each\neater is their own peach, so that they can be happy. We call the peach we give\neaters virtual peaches; we somehow create many of these virtual peaches out of\nthe one physical peach. And the important thing: in this illu sion, it looks to each\neater like they have a physical peach, but in reality they don \u2019t.\nStudent: So you are sharing the peach, but you don\u2019t even know it?\nProfessor: Right! Exactly.\nStudent: But there\u2019s only one peach.\nProfessor: Y es. And...?\nStudent: Well, if I was sharing a peach with somebody else, I think I wou ld\nnotice.\nProfessor: Ah yes! Good point. But that is the thing with many eaters; mos t\nof the time they are napping or doing something else, and thus , you can snatch\nthat peach away and give it to someone else for a while. And thu s we create the\nillusion of many virtual peaches, one peach for each person!\nStudent: Sounds like a bad campaign slogan. Y ou are talking about comp uters,\nright Professor?\nProfessor: Ah, young grasshopper , you wish to have a more concrete examp le.\nGood idea! Let us take the most basic of resources, the CPU. As sume there is one\nphysical CPU in a system (though now there are often two or fou r or more). What\nvirtualization does is take that single CPU and make it look l ike many virtual\nCPUs to the applications running on the system. Thus, while e ach applications\n23\n24 A D I A L O G U E O N VI RT U A L I Z AT IO N\nthinks it has its own CPU to use, there is really only one. And t hus the OS has\ncreated a beautiful illusion: it has virtualized the CPU.\nStudent: Wow! That sounds like magic. T ell me more! How does that work?\nProfessor: In time, young student, in good time. Sounds like you are read y to\nbegin.\nStudent: I am! Well, sort of. I must admit, I\u2019m a little worried you are g oing to\nstart talking about peaches again.\nProfessor: Don\u2019t worry too much; I don\u2019t even like peaches. And thus we be -\ngin...\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n4\nThe Abstraction: The Process\nIn this note, we discuss one of the most fundamental abstract ions that the\nOS provides to users: the process. The de\ufb01nition of a process, informally ,\nis quite simple: it is a running program [V+65,B70]. The program itself is\na lifeless thing: it just sits there on the disk, a bunch of ins tructions (and\nmaybe some static data), waiting to spring into action. It is the operating\nsystem that takes these bytes and gets them running, transfo rming the\nprogram into something useful.\nIt turns out that one often wants to run more than one program a t\nonce; for example, consider your desktop or laptop where you might like\nto run a web browser , mail program, a game, a music player , and so forth.\nIn fact, a typical system may be seemingly running tens or eve n hundreds\nof processes at the same time. Doing so makes the system easy t o use, as\none never need be concerned with whether a CPU is available; o ne simply\nruns programs. Hence our challenge:\nTH E CR U X O F T H E PR O B L E M"
  },
  {
    "content": " you might like\nto run a web browser , mail program, a game, a music player , and so forth.\nIn fact, a typical system may be seemingly running tens or eve n hundreds\nof processes at the same time. Doing so makes the system easy t o use, as\none never need be concerned with whether a CPU is available; o ne simply\nruns programs. Hence our challenge:\nTH E CR U X O F T H E PR O B L E M :\nHO W TO PR O V I D E TH E IL L U S I O N OF MA N Y CPU S?\nAlthough there are only a few physical CPUs available, how ca n the\nOS provide the illusion of a nearly-endless supply of said CP Us?\nThe OS creates this illusion by virtualizing the CPU. By running one\nprocess, then stopping it and running another , and so forth, the OS can\npromote the illusion that many virtual CPUs exist when in fac t there is\nonly one physical CPU (or a few). This basic technique, known as time\nsharing of the CPU, allows users to run as many concurrent processes a s\nthey would like; the potential cost is performance, as each w ill run more\nslowly if the CPU(s) must be shared.\nT o implement virtualization of the CPU, and to implement it w ell, the\nOS will need both some low-level machinery as well as some hig h-level\nintelligence. W e call the low-level machinery mechanisms; mechanisms\nare low-level methods or protocols that implement a needed p iece of\n25\n26 TH E AB S T R A C T I O N : T H E PR O C E S S\nTI P : U S E TI M E SH A R I N G (A N D SPA C E SH A R I N G )\nTime sharing is one of the most basic techniques used by an OS to share\na resource. By allowing the resource to be used for a little wh ile by one\nentity , and then a little while by another , and so forth, the r esource in\nquestion (e.g., the CPU, or a network link) can be shared by ma ny . The\nnatural counterpart of time sharing is space sharing , where a resource is\ndivided (in space) among those who wish to use it. For example , disk\nspace is naturally a space-shared resource, as once a block i s assigned to\na \ufb01le, it is not likely to be assigned to another \ufb01le until the u ser deletes it.\nfunctionality . For example, we\u2019ll learn below how to implem ent a con-\ntext switch , which gives the OS the ability to stop running one program\nand start running another on a given CPU; this time-sharing mechanism\nis employed by all modern OSes.\nOn top of these mechanisms resides some of the intelligence i n the\nOS, in the form of policies. Policies are algorithms for making some\nkind of decision within the OS. For example, given a number of possi-\nble programs to run on a CPU, which program should the OS run? A\nscheduling policy in the OS will make this decision, likely using histori-\ncal information (e.g., which program has run more over the la st minute?),\nworkload knowledge (e.g., what types of programs are run), a nd perfor-\nmance metrics (e.g., is the system optimizing for interacti ve performance,\nor throughput?) to make its decision.\n4.1 The Abstraction: A Process\nThe abstraction provided by the OS of a running program is som ething\nwe will call a process. As we said above, a process is simply a running\nprogram; at any instant in time, we can summarize a process by taking an\ninventory of the different pieces of the system it accesses o r affects during\nthe course of its execution.\nT o understand what constitutes a process, we thus have to und erstand\nits machine state : what a program can read or update when it is running.\nAt any given time, what parts of the machine are important to t he execu-\ntion of this program?\nOne obvious component of machine state that comprises a proc ess is\nits memory. Instructions lie in memory; the data that the running pro-\ngram reads and writes sits in memory as well. Thus the memory t hat the\nprocess can address (called its address space ) is part of the process.\nAlso part of the process\u2019s machine state are registers; many instructions\nexplicitly read or update registers and thus clearly they ar e important to\nthe"
  },
  {
    "content": " of this program?\nOne obvious component of machine state that comprises a proc ess is\nits memory. Instructions lie in memory; the data that the running pro-\ngram reads and writes sits in memory as well. Thus the memory t hat the\nprocess can address (called its address space ) is part of the process.\nAlso part of the process\u2019s machine state are registers; many instructions\nexplicitly read or update registers and thus clearly they ar e important to\nthe execution of the process.\nNote that there are some particularly special registers tha t form part\nof this machine state. For example, the program counter (PC) (sometimes\ncalled the instruction pointer or IP) tells us which instruction of the pro-\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E AB S T R A C T I O N : T H E PR O C E S S 27\nTI P : S E PA R AT E PO L I C Y AN D ME C H A N I S M\nIn many operating systems, a common design paradigm is to sep arate\nhigh-level policies from their low-level mechanisms [L+75 ]. Y ou can\nthink of the mechanism as providing the answer to a how question about\na system; for example, how does an operating system perform a context\nswitch? The policy provides the answer to a which question; for example,\nwhich process should the operating system run right now? Separati ng the\ntwo allows one easily to change policies without having to re think the\nmechanism and is thus a form of modularity, a general software design\nprinciple.\ngram is currently being executed; similarly a stack pointer and associated\nframe pointer are used to manage the stack for function parameters, local\nvariables, and return addresses.\nFinally , programs often access persistent storage devices too. Such I/O\ninformation might include a list of the \ufb01les the process currently has ope n.\n4.2 Process API\nThough we defer discussion of a real process API until a subse quent\nchapter , here we \ufb01rst give some idea of what must be included i n any\ninterface of an operating system. These APIs, in some form, a re available\non any modern operating system.\n\u2022 Create: An operating system must include some method to cre-\nate new processes. When you type a command into the shell, or\ndouble-click on an application icon, the OS is invoked to cre ate a\nnew process to run the program you have indicated.\n\u2022 Destroy: As there is an interface for process creation, systems also\nprovide an interface to destroy processes forcefully . Of co urse, many\nprocesses will run and just exit by themselves when complete ; when\nthey don\u2019t, however , the user may wish to kill them, and thus a n in-\nterface to halt a runaway process is quite useful.\n\u2022 W ait: Sometimes it is useful to wait for a process to stop running;\nthus some kind of waiting interface is often provided.\n\u2022 Miscellaneous Control: Other than killing or waiting for a process,\nthere are sometimes other controls that are possible. For ex ample,\nmost operating systems provide some kind of method to suspen d a\nprocess (stop it from running for a while) and then resume it ( con-\ntinue it running).\n\u2022 Status: There are usually interfaces to get some status information\nabout a process as well, such as how long it has run for , or what\nstate it is in.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n28 TH E AB S T R A C T I O N : T H E PR O C E S S\nMemoryCPU\nDisk\ncode\nstatic data\nheap\nstack\nProcess\ncode\nstatic data\nProgram Loading:\nTakes on-disk program\nand reads it into the\naddress space of process\nFigure 4.1: Loading: From Program T o Process\n4.3 Process Creation: A Little More Detail\nOne mystery that we should unmask a bit is how programs are tra ns-\nformed into processes. Speci\ufb01cally , how does the OS get a pro gram up\nand running? How does process creation actually work?\nThe \ufb01rst thing that the OS must do to run a program is to load its code\nand any static data (e.g., initialized variables) into memo ry , into the ad"
  },
  {
    "content": " Process Creation: A Little More Detail\nOne mystery that we should unmask a bit is how programs are tra ns-\nformed into processes. Speci\ufb01cally , how does the OS get a pro gram up\nand running? How does process creation actually work?\nThe \ufb01rst thing that the OS must do to run a program is to load its code\nand any static data (e.g., initialized variables) into memo ry , into the ad-\ndress space of the process. Programs initially reside on disk (or , in some\nmodern systems, \ufb02ash-based SSDs ) in some kind of executable format ;\nthus, the process of loading a program and static data into me mory re-\nquires the OS to read those bytes from disk and place them in me mory\nsomewhere (as shown in Figure 4.1).\nIn early (or simple) operating systems, the loading process is done ea-\ngerly, i.e., all at once before running the program; modern OSes pe rform\nthe process lazily, i.e., by loading pieces of code or data only as they are\nneeded during program execution. T o truly understand how la zy loading\nof pieces of code and data works, you\u2019ll have to understand mo re about\nthe machinery of paging and swapping, topics we\u2019ll cover in the future\nwhen we discuss the virtualization of memory . For now , just r emember\nthat before running anything, the OS clearly must do some wor k to get\nthe important program bits from disk into memory .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E AB S T R A C T I O N : T H E PR O C E S S 29\nOnce the code and static data are loaded into memory , there ar e a few\nother things the OS needs to do before running the process. So me mem-\nory must be allocated for the program\u2019s run-time stack (or just stack).\nAs you should likely already know , C programs use the stack fo r local\nvariables, function parameters, and return addresses; the OS allocates\nthis memory and gives it to the process. The OS will also likel y initial-\nize the stack with arguments; speci\ufb01cally , it will \ufb01ll in the parameters to\nthe main() function, i.e., argc and the argv array .\nThe OS may also create some initial memory for the program\u2019s heap.\nIn C programs, the heap is used for explicitly requested dyna mically-\nallocated data; programs request such space by calling malloc() and\nfree it explicitly by calling free(). The heap is needed for data struc-\ntures such as linked lists, hash tables, trees, and other int eresting data\nstructures. The heap will be small at \ufb01rst; as the program run s, and re-\nquests more memory via the malloc() library API, the OS may get in-\nvolved and allocate more memory to the process to help satisf y such calls.\nThe OS will also do some other initialization tasks, particu larly as re-\nlated to input/output (I/O). For example, in U N I X systems, each process\nby default has three open \ufb01le descriptors , for standard input, output, and\nerror; these descriptors let programs easily read input fro m the terminal\nas well as print output to the screen. W e\u2019ll learn more about I /O, \ufb01le\ndescriptors, and the like in the third part of the book on persistence.\nBy loading the code and static data into memory , by creating a nd ini-\ntializing a stack, and by doing other work as related to I/O se tup, the OS\nhas now (\ufb01nally) set the stage for program execution. It thus has one last\ntask: to start the program running at the entry point, namely main(). By\njumping to the main() routine (through a specialized mechanism that\nwe will discuss next chapter), the OS transfers control of th e CPU to the\nnewly-created process, and thus the program begins its exec ution.\n4.4 Process States\nNow that we have some idea of what a process is (though we will\ncontinue to re\ufb01ne this notion), and (roughly) how it is creat ed, let us talk\n"
  },
  {
    "content": " namely main(). By\njumping to the main() routine (through a specialized mechanism that\nwe will discuss next chapter), the OS transfers control of th e CPU to the\nnewly-created process, and thus the program begins its exec ution.\n4.4 Process States\nNow that we have some idea of what a process is (though we will\ncontinue to re\ufb01ne this notion), and (roughly) how it is creat ed, let us talk\nabout the different states a process can be in at a given time. The notion\nthat a process can be in one of these states arose in early comp uter systems\n[V+65,DV66]. In a simpli\ufb01ed view , a process can be in one of th ree states:\n\u2022 Running: In the running state, a process is running on a processor .\nThis means it is executing instructions.\n\u2022 Ready: In the ready state, a process is ready to run but for some\nreason the OS has chosen not to run it at this given moment.\n\u2022 Blocked: In the blocked state, a process has performed some kind\nof operation that makes it not ready to run until some other ev ent\ntakes place. A common example: when a process initiates an I/ O\nrequest to a disk, it becomes blocked and thus some other proc ess\ncan use the processor .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n30 TH E AB S T R A C T I O N : T H E PR O C E S S\nRunning Ready\nBlocked\nDescheduled\nScheduled\nI/O: initiate I/O: done\nFigure 4.2: Process: State T ransitions\nIf we were to map these states to a graph, we would arrive at the di-\nagram in Figure 4.2. As you can see in the diagram, a process can be\nmoved between the ready and running states at the discretion of the OS.\nBeing moved from ready to running means the process has been sched-\nuled; being moved from running to ready means the process has been\ndescheduled. Once a process has become blocked (e.g., by initiating an\nI/O operation), the OS will keep it as such until some event oc curs (e.g.,\nI/O completion); at that point, the process moves to the read y state again\n(and potentially immediately to running again, if the OS so d ecides).\n4.5 Data Structures\nThe OS is a program, and like any program, it has some key data s truc-\ntures that track various relevant pieces of information. T o track the state\nof each process, for example, the OS likely will keep some kin d of process\nlist for all processes that are ready , as well as some additional i nforma-\ntion to track which process is currently running. The OS must also track,\nin some way , blocked processes; when an I/O event completes, the OS\nshould make sure to wake the correct process and ready it to ru n again.\nFigure 4.3 shows what type of information an OS needs to track about\neach process in the xv6 kernel [CK+08]. Similar process stru ctures exist\nin \u201creal\u201d operating systems such as Linux, Mac OS X, or Window s; look\nthem up and see how much more complex they are.\nFrom the \ufb01gure, you can see a couple of important pieces of inf orma-\ntion the OS tracks about a process. The register context will hold, for\na stopped process, the contents of its register state. When a process is\nstopped, its register state will be saved to this memory loca tion; by restor-\ning these registers (i.e., placing their values back into th e actual physical\nregisters), the OS can resume running the process. W e\u2019ll lea rn more about\nthis technique known as a context switch in future chapters.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E AB S T R A C T I O N : T H E PR O C E S S 31\n// the registers xv6 will save and restore\n// to stop and subsequently restart a process\nstruct context {\nint eip;\nint esp;\nint ebx;\nint ecx;\nint edx;\nint es"
  },
  {
    "content": "[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E AB S T R A C T I O N : T H E PR O C E S S 31\n// the registers xv6 will save and restore\n// to stop and subsequently restart a process\nstruct context {\nint eip;\nint esp;\nint ebx;\nint ecx;\nint edx;\nint esi;\nint edi;\nint ebp;\n};\n// the different states a process can be in\nenum proc_state { UNUSED, EMBRYO, SLEEPING,\nRUNNABLE, RUNNING, ZOMBIE };\n// the information xv6 tracks about each process\n// including its register context and state\nstruct proc {\nchar *mem; // Start of process memory\nuint sz; // Size of process memory\nchar *kstack; // Bottom of kernel stack\n// for this process\nenum proc_state state; // Process state\nint pid; // Process ID\nstruct proc *parent; // Parent process\nvoid *chan; // If non-zero, sleeping on chan\nint killed; // If non-zero, have been killed\nstruct file *ofile[NOFILE]; // Open files\nstruct inode *cwd; // Current directory\nstruct context context; // Switch here to run process\nstruct trapframe *tf; // Trap frame for the\n// current interrupt\n};\nFigure 4.3: The xv6 Proc Structure\nY ou can also see from the \ufb01gure that there are some other state s a pro-\ncess can be in, beyond running, ready , and blocked. Sometime s a system\nwill have an initial state that the process is in when it is being created.\nAlso, a process could be placed in a \ufb01nal state where it has exited but\nhas not yet been cleaned up (in UNIX-based systems, this is ca lled the\nzombie state1 ). This \ufb01nal state can be useful as it allows other processes\n(usually the parent that created the process) to examine the return code\nof the process and see if it the just-\ufb01nished process execute d successfully\n(usually , programs return zero in U N I X-based systems when they have\naccomplished a task successfully , and non-zero otherwise) . When \ufb01n-\nished, the parent will make one \ufb01nal call (e.g., wait()) to wait for the\ncompletion of the child, and to also indicate to the OS that it can clean up\nany relevant data structures that referred to the now-extin ct process.\n1 Y es, the zombie state. Just like real zombies, these zombies are relatively easy to kill.\nHowever , different techniques are usually recommended.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n32 TH E AB S T R A C T I O N : T H E PR O C E S S\nAS I D E : DATA ST R U C T U R E \u2013 T H E PR O C E S S LI S T\nOperating systems are replete with various important data structures\nthat we will discuss in these notes. The process list is the \ufb01rst such struc-\nture. It is one of the simpler ones, but certainly any OS that h as the ability\nto run multiple programs at once will have something akin to t his struc-\nture in order to keep track of all the running programs in the s ystem.\nSometimes people refer to the individual structure that sto res informa-\ntion about a process as a Process Control Block (PCB), a fancy way of\ntalking about a C structure that contains information about each process.\n4.6 Summary\nW e have introduced the most basic abstraction of the OS: the p rocess.\nIt is quite simply viewed as a running program. With this conc eptual\nview in mind, we will now move on to the nitty-gritty: the low- level\nmechanisms needed to implement processes, and the higher-l evel poli-\ncies required to schedule them in an intelligent way . By comb ining mech-\nanisms and policies, we will build up our understanding of ho w an oper-\nating system virtualizes the CPU.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80"
  },
  {
    "content": " the nitty-gritty: the low- level\nmechanisms needed to implement processes, and the higher-l evel poli-\ncies required to schedule them in an intelligent way . By comb ining mech-\nanisms and policies, we will build up our understanding of ho w an oper-\nating system virtualizes the CPU.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E AB S T R A C T I O N : T H E PR O C E S S 33\nReferences\n[CK+08] \u201cThe xv6 Operating System\u201d\nRuss Cox, Frans Kaashoek, Robert Morris, Nickolai Zeldovic h\nFrom: http://pdos.csail.mit.edu/6.828/2008/index.htm l\nThe coolest real and little OS in the world. Download and play with it to learn more about the details of\nhow operating systems actually work.\n[DV66] \u201cProgramming Semantics for Multiprogrammed Comput ations\u201d\nJack B. Dennis and Earl C. V an Horn\nCommunications of the ACM, V olume 9, Number 3, March 1966\nThis paper de\ufb01ned many of the early terms and concepts around building multiprogrammed systems.\n[H70] \u201cThe Nucleus of a Multiprogramming System\u201d\nPer Brinch Hansen\nCommunications of the ACM, V olume 13, Number 4, April 1970\nThis paper introduces one of the \ufb01rst microkernels in operating systems history, called Nucleus. The\nidea of smaller , more minimal systems is a theme that rears it s head repeatedly in OS history; it all began\nwith Brinch Hansen\u2019s work described herein.\n[L+75] \u201cPolicy/mechanism separation in Hydra\u201d\nR. Levin, E. Cohen, W . Corwin, F . Pollack, W . Wulf\nSOSP 1975\nAn early paper about how to structure operating systems in a r esearch OS known as Hydra. While\nHydra never became a mainstream OS, some of its ideas in\ufb02uenc ed OS designers.\n[V+65] \u201cStructure of the Multics Supervisor \u201d\nV .A. V yssotsky , F . J. Corbato, R. M. Graham\nFall Joint Computer Conference, 1965\nAn early paper on Multics, which described many of the basic i deas and terms that we \ufb01nd in modern\nsystems. Some of the vision behind computing as a utility are \ufb01nally being realized in modern cloud\nsystems.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n5\nInterlude: Process API\nAS I D E : IN T E R L U D E S\nInterludes will cover more practical aspects of systems, in cluding a par-\nticular focus on operating system APIs and how to use them. If you don\u2019t\nlike practical things, you could skip these interludes. But you should like\npractical things, because, well, they are generally useful in real life; com-\npanies, for example, don\u2019t usually hire you for your non-pra ctical skills.\nIn this interlude, we discuss process creation in U N I X systems. U N I X\npresents one of the most intriguing ways to create a new proce ss with\na pair of system calls: fork() and exec(). A third routine, wait(),\ncan be used by a process wishing to wait for a process it has cre ated to\ncomplete. W e now present these interfaces in more detail, wi th a few\nsimple examples to motivate us. And thus, our problem:\nCR U X : H O W TO CR E AT E AN D CO N T R O L PR O C E S S E S\nWhat interfaces should the OS present for process creation a nd con-\ntrol? How should these interfaces be designed to enable ease of use as\nwell as utility?\n5.1 The fork() System Call\nThe fork() system call is used to create a new process [C63]. How-\never , be forewarned: it is certainly the strangest routine y ou will ever\ncall1 . More speci\ufb01cally , you have a running program"
  },
  {
    "content": " interfaces should the OS present for process creation a nd con-\ntrol? How should these interfaces be designed to enable ease of use as\nwell as utility?\n5.1 The fork() System Call\nThe fork() system call is used to create a new process [C63]. How-\never , be forewarned: it is certainly the strangest routine y ou will ever\ncall1 . More speci\ufb01cally , you have a running program whose code loo ks\nlike what you see in Figure 5.1; examine the code, or better yet, type it in\nand run it yourself!\n1 W ell, OK, we admit that we don\u2019t know that for sure; who knows w hat routines you\ncall when no one is looking? But fork() is pretty odd, no matter how unusual your routine-\ncalling patterns are.\n35\n36 IN T E R L U D E : P R O C E S S API\n1 #include <stdio.h>\n2 #include <stdlib.h>\n3 #include <unistd.h>\n4\n5 int\n6 main(int argc, char *argv[])\n7 {\n8 printf(\"hello world (pid:%d)\\n\", (int) getpid());\n9 int rc = fork();\n10 if (rc < 0) { // fork failed; exit\n11 fprintf(stderr, \"fork failed\\n\");\n12 exit(1);\n13 } else if (rc == 0) { // child (new process)\n14 printf(\"hello, I am child (pid:%d)\\n\", (int) getpid());\n15 } else { // parent goes down this path (main)\n16 printf(\"hello, I am parent of %d (pid:%d)\\n\",\n17 rc, (int) getpid());\n18 }\n19 return 0;\n20 }\nFigure 5.1: p1.c: Calling fork()\nWhen you run this program (called p1.c), you\u2019ll see the following:\nprompt> ./p1\nhello world (pid:29146)\nhello, I am parent of 29147 (pid:29146)\nhello, I am child (pid:29147)\nprompt>\nLet us understand what happened in more detail in p1.c. When it\n\ufb01rst started running, the process prints out a hello world me ssage; in-\ncluded in that message is its process identi\ufb01er , also known as a PID. The\nprocess has a PID of 29146; in U N I X systems, the PID is used to name\nthe process if one wants to do something with the process, suc h as (for\nexample) stop it from running. So far , so good.\nNow the interesting part begins. The process calls the fork() system\ncall, which the OS provides as a way to create a new process. Th e odd\npart: the process that is created is an (almost) exact copy of the calling pro-\ncess. That means that to the OS, it now looks like there are two copi es of\nthe program p1 running, and both are about to return from the fork()\nsystem call. The newly-created process (called the child, in contrast to the\ncreating parent) doesn\u2019t start running at main(), like you might expect\n(note, the \u201chello, world\u201d message only got printed out once) ; rather , it\njust comes into life as if it had called fork() itself.\nY ou might have noticed: the child isn\u2019t an exact copy . Speci\ufb01cally , al-\nthough it now has its own copy of the address space (i.e., its o wn private\nmemory), its own registers, its own PC, and so forth, the valu e it returns\nto the caller of fork() is different. Speci\ufb01cally , while the parent receives\nthe PID of the newly-created child, the child is simply retur ned a 0. This\ndifferentiation is useful, because it is simple then to writ e the code that\nhandles the two different cases (as above).\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : P R O C E S S API 37\n1 #include <stdio.h>\n2 #include <stdlib."
  },
  {
    "content": " because it is simple then to writ e the code that\nhandles the two different cases (as above).\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : P R O C E S S API 37\n1 #include <stdio.h>\n2 #include <stdlib.h>\n3 #include <unistd.h>\n4 #include <sys/wait.h>\n5\n6 int\n7 main(int argc, char *argv[])\n8 {\n9 printf(\"hello world (pid:%d)\\n\", (int) getpid());\n10 int rc = fork();\n11 if (rc < 0) { // fork failed; exit\n12 fprintf(stderr, \"fork failed\\n\");\n13 exit(1);\n14 } else if (rc == 0) { // child (new process)\n15 printf(\"hello, I am child (pid:%d)\\n\", (int) getpid());\n16 } else { // parent goes down this path (main)\n17 int wc = wait(NULL);\n18 printf(\"hello, I am parent of %d (wc:%d) (pid:%d)\\n\",\n19 rc, wc, (int) getpid());\n20 }\n21 return 0;\n22 }\nFigure 5.2: p2.c: Calling fork() And wait()\nY ou might also have noticed: the output is not deterministic. When\nthe child process is created, there are now two active proces ses in the sys-\ntem that we care about: the parent and the child. Assuming we a re run-\nning on a system with a single CPU (for simplicity), then eith er the child\nor the parent might run at that point. In our example (above), the parent\ndid and thus printed out its message \ufb01rst. In other cases, the opposite\nmight happen, as we show in this output trace:\nprompt> ./p1\nhello world (pid:29146)\nhello, I am child (pid:29147)\nhello, I am parent of 29147 (pid:29146)\nprompt>\nThe CPU scheduler, a topic we\u2019ll discuss in great detail soon, deter-\nmines which process runs at a given moment in time; because th e sched-\nuler is complex, we cannot usually make strong assumptions a bout what\nit will choose to do, and hence which process will run \ufb01rst. Th is non-\ndeterminism, as it turns out, leads to some interesting problems, par-\nticularly in multi-threaded programs ; hence, we\u2019ll see a lot more non-\ndeterminism when we study concurrency in the second part of the book.\n5.2 Adding wait() System Call\nSo far , we haven\u2019t done much: just created a child that prints out a\nmessage and exits. Sometimes, as it turns out, it is quite use ful for a\nparent to wait for a child process to \ufb01nish what it has been doi ng. This\ntask is accomplished with the wait() system call (or its more complete\nsibling waitpid()); see Figure\n5.2 for details.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n38 IN T E R L U D E : P R O C E S S API\nIn this example ( p2.c), the parent process calls wait() to delay its\nexecution until the child \ufb01nishes executing. When the child is done,\nwait() returns to the parent.\nAdding a wait() call to the code above makes the output determin-\nistic. Can you see why? Go ahead, think about it.\n(waiting for you to think .... and done)\nNow that you have thought a bit, here is the output:\nprompt> ./p2\nhello world (pid:29266)\nhello, I am child (pid:29267)\nhello, I am parent of 29267 (wc:29267) (pid:29266)\nprompt>\nWith this code, we now know that the child will always print \ufb01r st.\nWhy do we know that? W ell, it might simply run \ufb01rst, as before, and\nthus"
  },
  {
    "content": "\nprompt> ./p2\nhello world (pid:29266)\nhello, I am child (pid:29267)\nhello, I am parent of 29267 (wc:29267) (pid:29266)\nprompt>\nWith this code, we now know that the child will always print \ufb01r st.\nWhy do we know that? W ell, it might simply run \ufb01rst, as before, and\nthus print before the parent. However , if the parent does hap pen to run\n\ufb01rst, it will immediately call wait(); this system call won\u2019t return until\nthe child has run and exited 2. Thus, even when the parent runs \ufb01rst, it\npolitely waits for the child to \ufb01nish running, then wait() returns, and\nthen the parent prints its message.\n5.3 Finally , the exec() System Call\nA \ufb01nal and important piece of the process creation API is the exec()\nsystem call 3 . This system call is useful when you want to run a program\nthat is different from the calling program. For example, cal ling fork()\nin p2.c is only useful if you want to keep running copies of the same\nprogram. However , often you want to run a different program; exec()\ndoes just that (Figure\n5.3).\nIn this example, the child process calls execvp() in order to run the\nprogram wc, which is the word counting program. In fact, it runs wc on\nthe source \ufb01le p3.c, thus telling us how many lines, words, and bytes are\nfound in the \ufb01le:\nprompt> ./p3\nhello world (pid:29383)\nhello, I am child (pid:29384)\n29 107 1030 p3.c\nhello, I am parent of 29384 (wc:29384) (pid:29383)\nprompt>\n2 There are a few cases where wait() returns before the child exits; read the man page\nfor more details, as always. And beware of any absolute and un quali\ufb01ed statements this book\nmakes, such as \u201cthe child will always print \ufb01rst\u201d or \u201cU NIX is the best thing in the world, even\nbetter than ice cream.\u201d\n3 Actually , there are six variants of exec(): execl(), execle(), execlp(), execv(),\nand execvp(). Read the man pages to learn more.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : P R O C E S S API 39\n1 #include <stdio.h>\n2 #include <stdlib.h>\n3 #include <unistd.h>\n4 #include <string.h>\n5 #include <sys/wait.h>\n6\n7 int\n8 main(int argc, char *argv[])\n9 {\n10 printf(\"hello world (pid:%d)\\n\", (int) getpid());\n11 int rc = fork();\n12 if (rc < 0) { // fork failed; exit\n13 fprintf(stderr, \"fork failed\\n\");\n14 exit(1);\n15 } else if (rc == 0) { // child (new process)\n16 printf(\"hello, I am child (pid:%d)\\n\", (int) getpid());\n17 char *myargs[3];\n18 myargs[0] = strdup(\"wc\"); // program: \"wc\" (word count)\n19 myargs[1] = strdup(\"p3.c\"); // argument: file to count\n20 myargs[2] = NULL; // marks end of array\n21 execvp(myargs[0], myargs); // runs word count\n22 printf(\"this shouldn\u2019t print out\");\n23 } else { // parent goes down this path (main)\n24 int wc = wait(NULL);\n25 printf(\"hello, I am parent of %d (wc:%d) (pid:%d)\\n\",\n26 rc, wc, (int) getpid());\n27 }\n28 return 0;\n29 }\nFigure 5.3: p3.c: Calling fork(), wait(), And exec()\nIf fork() was strange, exec() is not so"
  },
  {
    "content": " parent goes down this path (main)\n24 int wc = wait(NULL);\n25 printf(\"hello, I am parent of %d (wc:%d) (pid:%d)\\n\",\n26 rc, wc, (int) getpid());\n27 }\n28 return 0;\n29 }\nFigure 5.3: p3.c: Calling fork(), wait(), And exec()\nIf fork() was strange, exec() is not so normal either . What it does:\ngiven the name of an executable (e.g., wc), and some arguments (e.g.,\np3.c), it loads code (and static data) from that executable and over-\nwrites its current code segment (and current static data) wi th it; the heap\nand stack and other parts of the memory space of the program ar e re-\ninitialized. Then the OS simply runs that program, passing i n any argu-\nments as the argv of that process. Thus, it does not create a new process;\nrather , it transforms the currently running program (forme rly p3) into a\ndifferent running program ( wc). After the exec() in the child, it is al-\nmost as if p3.c never ran; a successful call to exec() never returns.\n5.4 Why? Motivating the API\nOf course, one big question you might have: why would we build\nsuch an odd interface to what should be the simple act of creat ing a new\nprocess? W ell, as it turns out, the separation of fork() and exec() is\nessential in building a U N I X shell, because it lets the shell run code after\nthe call to fork() but before the call to exec(); this code can alter the\nenvironment of the about-to-be-run program, and thus enabl es a variety\nof interesting features to be readily built.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n40 IN T E R L U D E : P R O C E S S API\nTI P : G E T T I N G IT RI G H T (L A M P S O N \u2019 S LAW )\nAs Lampson states in his well-regarded \u201cHints for Computer S ystems\nDesign\u201d [L83], \u201c Get it right . Neither abstraction nor simplicity is a substi-\ntute for getting it right.\u201d Sometimes, you just have to do the right thing,\nand when you do, it is way better than the alternatives. There are lots\nof ways to design APIs for process creation; however , the com bination\nof fork() and exec() are simple and immensely powerful. Here, the\nUN I X designers simply got it right. And because Lampson so often \u201c got\nit right\u201d, we name the law in his honor .\nThe shell is just a user program 4. It shows you a prompt and then\nwaits for you to type something into it. Y ou then type a comman d (i.e.,\nthe name of an executable program, plus any arguments) into i t; in most\ncases, the shell then \ufb01gures out where in the \ufb01le system the ex ecutable\nresides, calls fork() to create a new child process to run the command,\ncalls some variant of exec() to run the command, and then waits for the\ncommand to complete by calling wait(). When the child completes, the\nshell returns from wait() and prints out a prompt again, ready for your\nnext command.\nThe separation of fork() and exec() allows the shell to do a whole\nbunch of useful things rather easily . For example:\nprompt> wc p3.c > newfile.txt\nIn the example above, the output of the program wc is redirected into\nthe output \ufb01le newfile.txt (the greater-than sign is how said redirec-\ntion is indicated). The way the shell accomplishes this task is quite sim-\nple: when the child is created, before calling exec(), the shell closes\nstandard output and opens the \ufb01le newfile.txt. By doing so, any out-\nput from the soon-to-be-running program wc are sent to the \ufb01le instead\nof the screen.\nFigure\n5.4 shows a program that does exactly this. The reason this redi-\nrection works is due to an assumption about how the operating system\nmanages \ufffd"
  },
  {
    "content": " the child is created, before calling exec(), the shell closes\nstandard output and opens the \ufb01le newfile.txt. By doing so, any out-\nput from the soon-to-be-running program wc are sent to the \ufb01le instead\nof the screen.\nFigure\n5.4 shows a program that does exactly this. The reason this redi-\nrection works is due to an assumption about how the operating system\nmanages \ufb01le descriptors. Speci\ufb01cally , U N I X systems start looking for free\n\ufb01le descriptors at zero. In this case, STDOUT FILENO will be the \ufb01rst\navailable one and thus get assigned when open() is called. Subsequent\nwrites by the child process to the standard output \ufb01le descri ptor , for ex-\nample by routines such as printf(), will then be routed transparently\nto the newly-opened \ufb01le instead of the screen.\nHere is the output of running the p4.c program:\nprompt> ./p4\nprompt> cat p4.output\n32 109 846 p4.c\nprompt>\n4 And there are lots of shells; tcsh, bash, and zsh to name a few . Y ou should pick one,\nread its man pages, and learn more about it; all U NIX experts do.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : P R O C E S S API 41\n1 #include <stdio.h>\n2 #include <stdlib.h>\n3 #include <unistd.h>\n4 #include <string.h>\n5 #include <fcntl.h>\n6 #include <sys/wait.h>\n7\n8 int\n9 main(int argc, char *argv[])\n10 {\n11 int rc = fork();\n12 if (rc < 0) { // fork failed; exit\n13 fprintf(stderr, \"fork failed\\n\");\n14 exit(1);\n15 } else if (rc == 0) { // child: redirect standard output to a file\n16 close(STDOUT_FILENO);\n17 open(\"./p4.output\", O_CREAT|O_WRONLY|O_TRUNC, S_IRWXU);\n18\n19 // now exec \"wc\"...\n20 char *myargs[3];\n21 myargs[0] = strdup(\"wc\"); // program: \"wc\" (word count)\n22 myargs[1] = strdup(\"p4.c\"); // argument: file to count\n23 myargs[2] = NULL; // marks end of array\n24 execvp(myargs[0], myargs); // runs word count\n25 } else { // parent goes down this path (main)\n26 int wc = wait(NULL);\n27 }\n28 return 0;\n29 }\nFigure 5.4: p4.c: All Of The Above With Redirection\nY ou\u2019ll notice (at least) two interesting tidbits about this output. First,\nwhen p4 is run, it looks as if nothing has happened; the shell just pri nts\nthe command prompt and is immediately ready for your next com mand.\nHowever , that is not the case; the program p4 did indeed call fork() to\ncreate a new child, and then run the wc program via a call to execvp().\nY ou don\u2019t see any output printed to the screen because it has b een redi-\nrected to the \ufb01le p4.output. Second, you can see that when we cat the\noutput \ufb01le, all the expected output from running wc is found. Cool, right?\nUN I X pipes are implemented in a similar way , but with the pipe()\nsystem call. In this case, the output of one process is connec ted to an in-\nkernel pipe (i.e., queue), and the input of another process is connected\nto that same pipe; thus, the output of one process seamlessly is used as\ninput to the next, and long and useful chains of commands can b e strung\ntogether . As a simple example, consider the looking for a wor d in a \ufb01le,\nand then counting how many times said word"
  },
  {
    "content": " this case, the output of one process is connec ted to an in-\nkernel pipe (i.e., queue), and the input of another process is connected\nto that same pipe; thus, the output of one process seamlessly is used as\ninput to the next, and long and useful chains of commands can b e strung\ntogether . As a simple example, consider the looking for a wor d in a \ufb01le,\nand then counting how many times said word occurs; with pipes and the\nutilities grep and wc, it is easy \u2013 just type grep foo file | wc -l\ninto the command prompt and marvel at the result.\nFinally , while we just have sketched out the process API at a h igh level,\nthere is a lot more detail about these calls out there to be lea rned and\ndigested; we\u2019ll learn more, for example, about \ufb01le descript ors when we\ntalk about \ufb01le systems in the third part of the book. For now , s uf\ufb01ce it\nto say that the fork()/exec() combination is a powerful way to create\nand manipulate processes.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n42 IN T E R L U D E : P R O C E S S API\nAS I D E : RTF M \u2013 R E A D TH E MA N PA G E S\nMany times in this book, when referring to a particular syste m call or\nlibrary call, we\u2019ll tell you to read the manual pages , or man pages for\nshort. Man pages are the original form of documentation that exist on\nUN I X systems; realize that they were created before the thing cal led the\nweb existed.\nSpending some time reading man pages is a key step in the growt h of\na systems programmer; there are tons of useful tidbits hidde n in those\npages. Some particularly useful pages to read are the man pag es for\nwhichever shell you are using (e.g., tcsh, or bash), and certainly for any\nsystem calls your program makes (in order to see what return v alues and\nerror conditions exist).\nFinally , reading the man pages can save you some embarrassme nt. When\nyou ask colleagues about some intricacy of fork(), they may simply\nreply: \u201cRTFM.\u201d This is your colleagues\u2019 way of gently urging you to Read\nThe Man pages. The F in RTFM just adds a little color to the phra se...\n5.5 Other Parts of the API\nBeyond fork(), exec(), and wait(), there are a lot of other inter-\nfaces for interacting with processes in U N I X systems. For example, the\nkill() system call is used to send signals to a process, including direc-\ntives to go to sleep, die, and other useful imperatives. In fa ct, the entire\nsignals subsystem provides a rich infrastructure to delive r external events\nto processes, including ways to receive and process those si gnals.\nThere are many command-line tools that are useful as well. Fo r exam-\nple, using the ps command allows you to see which processes are run-\nning; read the man pages for some useful \ufb02ags to pass to ps. The tool\ntop is also quite helpful, as it displays the processes of the sys tem and\nhow much CPU and other resources they are eating up. Humorous ly ,\nmany times when you run it, top claims it is the top resource hog; per-\nhaps it is a bit of an egomaniac. Finally , there are many diffe rent kinds of\nCPU meters you can use to get a quick glance understanding of t he load\non your system; for example, we always keep MenuMeters (from Raging\nMenace software) running on our Macintosh toolbars, so we ca n see how\nmuch CPU is being utilized at any moment in time. In general, t he more\ninformation about what is going on, the better .\n5.6 Summary\nW e have introduced some of the APIs dealing with U N I X process cre-\nation: fork(), exec(), and wait(). However , we have just skimmed\nthe surface. For more detail, read Stevens and Rago [SR05], o f course,\nparticularly the chapters on Process Control, Process Rela tionships, and\nSignals. There is much to extract from the wisdom therein.\nOP E R AT I N G\nSY S T E M"
  },
  {
    "content": "\nW e have introduced some of the APIs dealing with U N I X process cre-\nation: fork(), exec(), and wait(). However , we have just skimmed\nthe surface. For more detail, read Stevens and Rago [SR05], o f course,\nparticularly the chapters on Process Control, Process Rela tionships, and\nSignals. There is much to extract from the wisdom therein.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : P R O C E S S API 43\nReferences\n[C63] \u201cA Multiprocessor System Design\u201d\nMelvin E. Conway\nAFIPS \u201963 Fall Joint Computer Conference\nNew Y ork, USA 1963\nAn early paper on how to design multiprocessing systems; may be the \ufb01rst place the term fork() was\nused in the discussion of spawning new processes.\n[DV66] \u201cProgramming Semantics for Multiprogrammed Comput ations\u201d\nJack B. Dennis and Earl C. V an Horn\nCommunications of the ACM, V olume 9, Number 3, March 1966\nA classic paper that outlines the basics of multiprogrammed computer systems. Undoubtedly had great\nin\ufb02uence on Project MAC, Multics, and eventually UNIX .\n[L83] \u201cHints for Computer Systems Design\u201d\nButler Lampson\nACM Operating Systems Review , 15:5, October 1983\nLampson\u2019s famous hints on how to design computer systems. Y o u should read it at some point in your\nlife, and probably at many points in your life.\n[SR05] \u201cAdvanced Programming in the U NIX Environment\u201d\nW . Richard Stevens and Stephen A. Rago\nAddison-W esley , 2005\nAll nuances and subtleties of using UNIX APIs are found herein. Buy this book! Read it! And most\nimportantly, live it.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n6\nMechanism: Limited Direct Execution\nIn order to virtualize the CPU, the operating system needs to somehow\nshare the physical CPU among many jobs running seemingly at t he same\ntime. The basic idea is simple: run one process for a little wh ile, then\nrun another one, and so forth. By time sharing the CPU in this manner ,\nvirtualization is achieved.\nThere are a few challenges, however , in building such virtua lization\nmachinery . The \ufb01rst is performance: how can we implement virtualiza-\ntion without adding excessive overhead to the system? The se cond is\ncontrol: how can we run processes ef\ufb01ciently while retaining contro l over\nthe CPU? Control is particularly important to the OS, as it is in charge of\nresources; without control, a process could simply run fore ver and take\nover the machine, or access information that it should not be allowed to\naccess. Attaining performance while maintaining control i s thus one of\nthe central challenges in building an operating system.\nTH E CR U X :\nHO W TO EFFI C I E N T LY VI RT U A L I Z E TH E CPU W I T H CO N T R O L\nThe OS must virtualize the CPU in an ef\ufb01cient manner , but whil e re-\ntaining control over the system. T o do so, both hardware and o perating\nsystems support will be required. The OS will often use a judi cious bit of\nhardware support in order to accomplish its work effectivel y .\n6.1 Basic T echnique: Limited Direct Execution\nT o make a program run as fast as one might expect, not surprisi ngly\nOS developers came up with a technique, which we call limited direct\nexecution. The \u201cdirect execution\u201d part of the idea is simple: just run t he\nprogram directly on the CPU. Thus, when the OS wishes to start a pro-\ngram running, it creates a process entry for it in a process li st, allocates\nsome memory pages for it, loads the program code into memory ( from\n45\n46 ME C H A N I S M : L I M I T E D DI R E C T EX E C U T I O N\nOS Program\nCreate entry for process list\nAll"
  },
  {
    "content": " just run t he\nprogram directly on the CPU. Thus, when the OS wishes to start a pro-\ngram running, it creates a process entry for it in a process li st, allocates\nsome memory pages for it, loads the program code into memory ( from\n45\n46 ME C H A N I S M : L I M I T E D DI R E C T EX E C U T I O N\nOS Program\nCreate entry for process list\nAllocate memory for program\nLoad program into memory\nSet up stack with argc/argv\nClear registers\nExecute call main()\nRun main()\nExecute return from main\nFree memory of process\nRemove from process list\nT able 6.1: Direction Execution Protocol (Without Limits)\ndisk), locates its entry point (i.e., the main() routine or something simi-\nlar), jumps to it, and starts running the user \u2019s code. T able\n6.1 shows this\nbasic direct execution protocol (without any limits, yet), using a normal\ncall and return to jump to the program\u2019s main() and later to get back\ninto the kernel.\nSounds simple, no? But this approach gives rise to a few probl ems\nin our quest to virtualize the CPU. The \ufb01rst is simple: if we ju st run a\nprogram, how can the OS make sure the program doesn\u2019t do anyth ing\nthat we don\u2019t want it to do, while still running it ef\ufb01ciently ? The second:\nwhen we are running a process, how does the operating system s top it\nfrom running and switch to another process, thus implementi ng the time\nsharing we require to virtualize the CPU?\nIn answering these questions below , we\u2019ll get a much better s ense of\nwhat is needed to virtualize the CPU. In developing these tec hniques,\nwe\u2019ll also see where the \u201climited\u201d part of the name arises fro m; without\nlimits on running programs, the OS wouldn\u2019t be in control of a nything\nand thus would be \u201cjust a library\u201d \u2013 a very sad state of affairs for an\naspiring operating system!\n6.2 Problem #1: Restricted Operations\nDirect execution has the obvious advantage of being fast; th e program\nruns natively on the hardware CPU and thus executes as quickl y as one\nwould expect. But running on the CPU introduces a problem: wh at if\nthe process wishes to perform some kind of restricted operat ion, such\nas issuing an I/O request to a disk, or gaining access to more s ystem\nresources such as CPU or memory?\nTH E CR U X : H O W TO PE R F O R M RE S T R I C T E D OP E R AT I O N S\nA process must be able to perform I/O and some other restricte d oper-\nations, but without giving the process complete control ove r the system.\nHow can the OS and hardware work together to do so?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nME C H A N I S M : L I M I T E D DI R E C T EX E C U T I O N 47\nTI P : U S E PR O T E C T E D CO N T R O L TR A N S F E R\nThe hardware assists the OS by providing different modes of e xecution.\nIn user mode , applications do not have full access to hardware resources .\nIn kernel mode , the OS has access to the full resources of the machine.\nSpecial instructions to trap into the kernel and return-from-trap back to\nuser-mode programs are also provided, as well instructions that allow the\nOS to tell the hardware where the trap table resides in memory .\nOne approach would simply be to let any process do whatever it wants\nin terms of I/O and other related operations. However , doing so would\nprevent the construction of many kinds of systems that are de sirable. For\nexample, if we wish to build a \ufb01le system that checks permissi ons before\ngranting access to a \ufb01le, we can\u2019t simply let any user process issue I/Os\nto the disk; if we did, a process could simply read or write the entire disk\nand thus all protections would be lost.\nThus, the approach we take is to introduce a new processor mod e"
  },
  {
    "content": " kinds of systems that are de sirable. For\nexample, if we wish to build a \ufb01le system that checks permissi ons before\ngranting access to a \ufb01le, we can\u2019t simply let any user process issue I/Os\nto the disk; if we did, a process could simply read or write the entire disk\nand thus all protections would be lost.\nThus, the approach we take is to introduce a new processor mod e,\nknown as user mode ; code that runs in user mode is restricted in what it\ncan do. For example, when running in user mode, a process can\u2019 t issue\nI/O requests; doing so would result in the processor raising an exception;\nthe OS would then likely kill the process.\nIn contrast to user mode is kernel mode , which the operating system\n(or kernel) runs in. In this mode, code that runs can do what it likes, in-\ncluding privileged operations such as issuing I/O requests and executing\nall types of restricted instructions.\nW e are still left with a challenge, however: what should a use r pro-\ncess do when it wishes to perform some kind of privileged oper ation,\nsuch as reading from disk? T o enable this, virtually all mode rn hard-\nware provides the ability for user programs to perform a system call .\nPioneered on ancient machines such as the Atlas [K+61,L78], system calls\nallow the kernel to carefully expose certain key pieces of fu nctionality to\nuser programs, such as accessing the \ufb01le system, creating an d destroy-\ning processes, communicating with other processes, and all ocating more\nmemory . Most operating systems provide a few hundred calls ( see the\nPOSIX standard for details [P10]); early Unix systems expos ed a more\nconcise subset of around twenty calls.\nT o execute a system call, a program must execute a special trap instruc-\ntion. This instruction simultaneously jumps into the kerne l and raises the\nprivilege level to kernel mode; once in the kernel, the syste m can now per-\nform whatever privileged operations are needed (if allowed ), and thus do\nthe required work for the calling process. When \ufb01nished, the OS calls a\nspecial return-from-trap instruction, which, as you might expect, returns\ninto the calling user program while simultaneously reducin g the privi-\nlege level back to user mode.\nThe hardware needs to be a bit careful when executing a trap, i n that\nit must make sure to save enough of the caller \u2019s register stat e in order\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n48 ME C H A N I S M : L I M I T E D DI R E C T EX E C U T I O N\nAS I D E : WH Y SY S T E M CA L L S LO O K LI K E PR O C E D U R E CA L L S\nY ou may wonder why a call to a system call, such as open() or read(),\nlooks exactly like a typical procedure call in C; that is, if i t looks just like\na procedure call, how does the system know it\u2019s a system call, and do all\nthe right stuff? The simple reason: it is a procedure call, but hidden in-\nside that procedure call is the famous trap instruction. Mor e speci\ufb01cally ,\nwhen you call open() (for example), you are executing a procedure call\ninto the C library . Therein, whether for open() or any of the other sys-\ntem calls provided, the library uses an agreed-upon calling convention\nwith the kernel to put the arguments to open in well-known loc ations\n(e.g., on the stack, or in speci\ufb01c registers), puts the syste m-call number\ninto a well-known location as well (again, onto the stack or a register),\nand then executes the aforementioned trap instruction. The code in the\nlibrary after the trap unpacks return values and returns con trol to the\nprogram that issued the system call. Thus, the parts of the C l ibrary that\nmake system calls are hand-coded in assembly , as they need to carefully\nfollow convention in order to process arguments and return v alues cor-\nrectly , as well as execute the hardware-speci\ufb01c trap instru ction. And now\nyou know why you personally don\u2019t have"
  },
  {
    "content": " after the trap unpacks return values and returns con trol to the\nprogram that issued the system call. Thus, the parts of the C l ibrary that\nmake system calls are hand-coded in assembly , as they need to carefully\nfollow convention in order to process arguments and return v alues cor-\nrectly , as well as execute the hardware-speci\ufb01c trap instru ction. And now\nyou know why you personally don\u2019t have to write assembly code to trap\ninto an OS; somebody has already written that assembly for yo u.\nto be able to return correctly when the OS issues the return-f rom-trap\ninstruction. On x86, for example, the processor will push th e program\ncounter , \ufb02ags, and a few other registers onto a per-process kernel stack ;\nthe return-from-trap will pop these values off the stack and resume exe-\ncution of the user-mode program (see the Intel systems manua ls [I11] for\ndetails). Other hardware systems use different convention s, but the basic\nconcepts are similar across platforms.\nThere is one important detail left out of this discussion: ho w does the\ntrap know which code to run inside the OS? Clearly , the callin g process\ncan\u2019t specify an address to jump to (as you would when making a pro-\ncedure call); doing so would allow programs to jump anywhere into the\nkernel which clearly is a bad idea (imagine jumping into code to access\na \ufb01le, but just after a permission check; in fact, it is likely such ability\nwould enable a wily programmer to get the kernel to run arbitr ary code\nsequences [S07]). Thus the kernel must carefully control wh at code exe-\ncutes upon a trap.\nThe kernel does so by setting up a trap table at boot time. When the\nmachine boots up, it does so in privileged (kernel) mode, and thus is\nfree to con\ufb01gure machine hardware as need be. One of the \ufb01rst t hings\nthe OS thus does is to tell the hardware what code to run when ce rtain\nexceptional events occur . For example, what code should run when a\nhard-disk interrupt takes place, when a keyboard interrupt occurs, or\nwhen program makes a system call? The OS informs the hardware of\nthe locations of these trap handlers , usually with some kind of special\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nME C H A N I S M : L I M I T E D DI R E C T EX E C U T I O N 49\nOS @ boot Hardware\n(kernel mode)\ninitialize trap table\nremember address of...\nsyscall handler\nOS @ run Hardware Program\n(kernel mode) (user mode)\nCreate entry for process list\nAllocate memory for program\nLoad program into memory\nSetup user stack with argv\nFill kernel stack with reg/PC\nreturn-from-trap\nrestore regs from kernel stack\nmove to user mode\njump to main\nRun main()\n...\nCall system call\ntrap into OS\nsave regs to kernel stack\nmove to kernel mode\njump to trap handler\nHandle trap\nDo work of syscall\nreturn-from-trap\nrestore regs from kernel stack\nmove to user mode\njump to PC after trap\n...\nreturn from main\ntrap (via exit())\nFree memory of process\nRemove from process list\nT able 6.2: Limited Direction Execution Protocol\ninstruction. Once the hardware is informed, it remembers th e location of\nthese handlers until the machine is next rebooted, and thus t he hardware\nknows what to do (i.e., what code to jump to) when system calls and other\nexceptional events take place.\nOne last aside: being able to execute the instruction to tell the hard-\nware where the trap tables are is a very powerful capability . Thus, as you\nmight have guessed, it is also a privileged operation. If you try to exe-\ncute this instruction in user mode, the hardware won\u2019t let yo u, and you\ncan probably guess what will happen (hint: adios, offending program).\nPoint to ponder: what horrible things could you do to a system if you\ncould install your own trap table? Could you take over the mac hine?\nThe timeline (with time increasing downward, in T able\n6.2) summa-\nri"
  },
  {
    "content": " If you try to exe-\ncute this instruction in user mode, the hardware won\u2019t let yo u, and you\ncan probably guess what will happen (hint: adios, offending program).\nPoint to ponder: what horrible things could you do to a system if you\ncould install your own trap table? Could you take over the mac hine?\nThe timeline (with time increasing downward, in T able\n6.2) summa-\nrizes the protocol. W e assume each process has a kernel stack where reg-\nisters (including general purpose registers and the progra m counter) are\nsaved to and restored from (by the hardware) when transition ing into and\nout of the kernel.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n50 ME C H A N I S M : L I M I T E D DI R E C T EX E C U T I O N\nThere are two phases in the LDE protocol. In the \ufb01rst (at boot t ime),\nthe kernel initializes the trap table, and the CPU remembers its location\nfor subsequent use. The kernel does so via a privileged instr uction (all\nprivileged instructions are highlighted in bold).\nIn the second (when running a process), the kernel sets up a fe w things\n(e.g., allocating a node on the process list, allocating mem ory) before us-\ning a return-from-trap instruction to start the execution o f the process;\nthis switches the CPU to user mode and begins running the proc ess.\nWhen the process wishes to issue a system call, it traps back i nto the OS,\nwhich handles it and once again returns control via a return- from-trap\nto the process. The process then completes its work, and retu rns from\nmain(); this usually will return into some stub code which will prop erly\nexit the program (say , by calling the exit() system call, which traps into\nthe OS). At this point, the OS cleans up and we are done.\n6.3 Problem #2: Switching Between Processes\nThe next problem with direct execution is achieving a switch between\nprocesses. Switching between processes should be simple, r ight? The\nOS should just decide to stop one process and start another . W hat\u2019s the\nbig deal? But it actually is a little bit tricky: speci\ufb01cally , if a process is\nrunning on the CPU, this by de\ufb01nition means the OS is not running. If\nthe OS is not running, how can it do anything at all? (hint: it c an\u2019t) While\nthis sounds almost philosophical, it is a real problem: ther e is clearly no\nway for the OS to take an action if it is not running on the CPU. T hus we\narrive at the crux of the problem.\nTH E CR U X : H O W TO RE G A I N CO N T R O L OF TH E CPU\nHow can the operating system regain control of the CPU so that it can\nswitch between processes?\nA Cooperative Approach: W ait For System Calls\nOne approach that some systems have taken in the past (for exa mple,\nearly versions of the Macintosh operating system [M11], or t he old Xerox\nAlto system [A79]) is known as the cooperative approach. In this style,\nthe OS trusts the processes of the system to behave reasonably . Processes\nthat run for too long are assumed to periodically give up the C PU so that\nthe OS can decide to run some other task.\nThus, you might ask, how does a friendly process give up the CP U in\nthis utopian world? Most processes, as it turns out, transfe r control of\nthe CPU to the OS quite frequently by making system calls , for example,\nto open a \ufb01le and subsequently read it, or to send a message to a nother\nmachine, or to create a new process. Systems like this often i nclude an\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nME C H A N I S M : L I M I T E D DI R E C T EX E C U T I O N 51\nTI P : D E A L I N G WI T H AP P L I C AT I O N MI S B E H AV I O"
  },
  {
    "content": " R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nME C H A N I S M : L I M I T E D DI R E C T EX E C U T I O N 51\nTI P : D E A L I N G WI T H AP P L I C AT I O N MI S B E H AV I O R\nOperating systems often have to deal with misbehaving proce sses, those\nthat either through design (maliciousness) or accident (bu gs) attempt to\ndo something that they shouldn\u2019t. In modern systems, the way the OS\ntries to handle such malfeasance is to simply terminate the o ffender . One\nstrike and you\u2019re out! Perhaps brutal, but what else should t he OS do\nwhen you try to access memory illegally or execute an illegal instruction?\nexplicit yield system call, which does nothing except to transfer control\nto the OS so it can run other processes.\nApplications also transfer control to the OS when they do som ething\nillegal. For example, if an application divides by zero, or t ries to access\nmemory that it shouldn\u2019t be able to access, it will generate a trap to the\nOS. The OS will then have control of the CPU again (and likely t erminate\nthe offending process).\nThus, in a cooperative scheduling system, the OS regains con trol of\nthe CPU by waiting for a system call or an illegal operation of some kind\nto take place. Y ou might also be thinking: isn\u2019t this passive approach less\nthan ideal? What happens, for example, if a process (whether malicious,\nor just full of bugs) ends up in an in\ufb01nite loop, and never make s a system\ncall? What can the OS do then?\nA Non-Cooperative Approach: The OS T akes Control\nWithout some additional help from the hardware, it turns out the OS can\u2019t\ndo much at all when a process refuses to make system calls (or m istakes)\nand thus return control to the OS. In fact, in the cooperative approach,\nyour only recourse when a process gets stuck in an in\ufb01nite loo p is to\nresort to the age-old solution to all problems in computer sy stems: reboot\nthe machine . Thus, we again arrive at a subproblem of our general quest\nto gain control of the CPU.\nTH E CR U X : H O W TO GA I N CO N T R O L WI T H O U T CO O P E R AT I O N\nHow can the OS gain control of the CPU even if processes are not being\ncooperative? What can the OS do to ensure a rogue process does not take\nover the machine?\nThe answer turns out to be simple and was discovered by a numbe r\nof people building computer systems many years ago: a timer interrupt\n[M+63]. A timer device can be programmed to raise an interrup t every\nso many milliseconds; when the interrupt is raised, the curr ently running\nprocess is halted, and a pre-con\ufb01gured interrupt handler in the OS runs.\nAt this point, the OS has regained control of the CPU, and thus can do\nwhat it pleases: stop the current process, and start a differ ent one.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n52 ME C H A N I S M : L I M I T E D DI R E C T EX E C U T I O N\nTI P : U S E TH E TI M E R IN T E R R U P T TO RE G A I N CO N T R O L\nThe addition of a timer interrupt gives the OS the ability to run again\non a CPU even if processes act in a non-cooperative fashion. T hus, this\nhardware feature is essential in helping the OS maintain con trol of the\nmachine.\nAs we discussed before with system calls, the OS must inform t he\nhardware of which code to run when the timer interrupt occurs ; thus,\nat boot time, the OS does exactly that. Second, also during th e boot\nsequence, the OS must start the timer , which is of course a pri vileged\noperation. Once the timer has begun, the OS can thus feel safe in that\ncontrol will eventually be returned to it, and thus the OS is f"
  },
  {
    "content": ".\nAs we discussed before with system calls, the OS must inform t he\nhardware of which code to run when the timer interrupt occurs ; thus,\nat boot time, the OS does exactly that. Second, also during th e boot\nsequence, the OS must start the timer , which is of course a pri vileged\noperation. Once the timer has begun, the OS can thus feel safe in that\ncontrol will eventually be returned to it, and thus the OS is f ree to run\nuser programs. The timer can also be turned off (also a privil eged opera-\ntion), something we will discuss later when we understand co ncurrency\nin more detail.\nNote that the hardware has some responsibility when an inter rupt oc-\ncurs, in particular to save enough of the state of the program that was\nrunning when the interrupt occurred such that a subsequent r eturn-from-\ntrap instruction will be able to resume the running program c orrectly .\nThis set of actions is quite similar to the behavior of the har dware during\nan explicit system-call trap into the kernel, with various r egisters thus\ngetting saved (e.g., onto a kernel stack) and thus easily res tored by the\nreturn-from-trap instruction.\nSaving and Restoring Context\nNow that the OS has regained control, whether cooperatively via a sys-\ntem call, or more forcefully via a timer interrupt, a decisio n has to be\nmade: whether to continue running the currently-running pr ocess, or\nswitch to a different one. This decision is made by a part of th e operating\nsystem known as the scheduler; we will discuss scheduling policies in\ngreat detail in the next few chapters.\nIf the decision is made to switch, the OS then executes a low-l evel\npiece of code which we refer to as a context switch . A context switch is\nconceptually simple: all the OS has to do is save a few registe r values\nfor the currently-executing process (onto its kernel stack , for example)\nand restore a few for the soon-to-be-executing process (fro m its kernel\nstack). By doing so, the OS thus ensures that when the return- from-trap\ninstruction is \ufb01nally executed, instead of returning to the process that was\nrunning, the system resumes execution of another process.\nT o save the context of the currently-running process, the OS will exe-\ncute some low-level assembly code to save the general purpos e registers,\nPC, as well as the kernel stack pointer of the currently-runn ing process,\nand then restore said registers, PC, and switch to the kernel stack for the\nsoon-to-be-executing process. By switching stacks, the ke rnel enters the\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nME C H A N I S M : L I M I T E D DI R E C T EX E C U T I O N 53\nOS @ boot Hardware\n(kernel mode)\ninitialize trap table\nremember addresses of...\nsyscall handler\ntimer handler\nstart interrupt timer\nstart timer\ninterrupt CPU in X ms\nOS @ run Hardware Program\n(kernel mode) (user mode)\nProcess A\n...\ntimer interrupt\nsave regs(A) to k-stack(A)\nmove to kernel mode\njump to trap handler\nHandle the trap\nCall switch() routine\nsave regs(A) to proc-struct(A)\nrestore regs(B) from proc-struct(B)\nswitch to k-stack(B)\nreturn-from-trap (into B)\nrestore regs(B) from k-stack(B)\nmove to user mode\njump to B\u2019s PC\nProcess B\n...\nT able 6.3: Limited Direction Execution Protocol (Timer Interrupt)\ncall to the switch code in the context of one process (the one t hat was in-\nterrupted) and returns in the context of another (the soon-t o-be-executing\none). When the OS then \ufb01nally executes a return-from-trap in struction,\nthe soon-to-be-executing process becomes the currently-r unning process.\nAnd thus the context switch is complete.\nA timeline of the entire process is shown in T able\n6.3. In this exam-\nple, Process A is running and then is interrupted by"
  },
  {
    "content": " the context of another (the soon-t o-be-executing\none). When the OS then \ufb01nally executes a return-from-trap in struction,\nthe soon-to-be-executing process becomes the currently-r unning process.\nAnd thus the context switch is complete.\nA timeline of the entire process is shown in T able\n6.3. In this exam-\nple, Process A is running and then is interrupted by the timer interrupt.\nThe hardware saves its state (onto its kernel stack) and ente rs the kernel\n(switching to kernel mode). In the timer interrupt handler , the OS decides\nto switch from running Process A to Process B. At that point, i t calls the\nswitch() routine, which carefully saves current register values (in to the\nprocess structure of A), restores the registers of Process B (from its process\nstructure entry), and then switches contexts , speci\ufb01cally by changing the\nstack pointer to use B\u2019s kernel stack (and not A \u2019s). Finally , the OS returns-\nfrom-trap, which restores B\u2019s register state and starts run ning it.\nNote that there are two types of register saves/restores tha t happen\nduring this protocol. The \ufb01rst is when the timer interrupt oc curs; in this\ncase, the user register state of the running process is implicitly saved by\nthe hardware, using the kernel stack of that process. The second is when\nthe OS decides to switch from A to B; in this case, the kernel register state\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n54 ME C H A N I S M : L I M I T E D DI R E C T EX E C U T I O N\n1 # void swtch(struct context **old, struct context *new);\n2 #\n3 # Save current register context in old\n4 # and then load register context from new.\n5 .globl swtch\n6 swtch:\n7 # Save old registers\n8 movl 4(%esp), %eax # put old ptr into eax\n9 popl 0(%eax) # save the old IP\n10 movl %esp, 4(%eax) # and stack\n11 movl %ebx, 8(%eax) # and other registers\n12 movl %ecx, 12(%eax)\n13 movl %edx, 16(%eax)\n14 movl %esi, 20(%eax)\n15 movl %edi, 24(%eax)\n16 movl %ebp, 28(%eax)\n17\n18 # Load new registers\n19 movl 4(%esp), %eax # put new ptr into eax\n20 movl 28(%eax), %ebp # restore other registers\n21 movl 24(%eax), %edi\n22 movl 20(%eax), %esi\n23 movl 16(%eax), %edx\n24 movl 12(%eax), %ecx\n25 movl 8(%eax), %ebx\n26 movl 4(%eax), %esp # stack is switched here\n27 pushl 0(%eax) # return addr put in place\n28 ret # finally return into new ctxt\nFigure 6.1: The xv6 Context Switch Code\nis explicitly saved by the software (i.e., the OS), but this time into memory\nin the process structure of the process. The latter action mo ves the system\nfrom running as if it just trapped into the kernel from A to as i f it just\ntrapped into the kernel from B.\nT o give you a better sense of how such a switch is enacted, Figu re\n6.1\nshows the context switch code for xv6. See if you can make sens e of it\n(you\u2019ll have to know a bit of x86, as well as some xv6, to do so). The\ncontext structures old and new are found the old and new process\u2019s\nprocess structures, respectively .\n6.4 W orried About Concurrency?\nSome of you, as attentive and thoughtful readers, may be now t hink-\ning: \u201cHmm... what happens when, during a system call, a timer interrupt\noccurs?\u201d or \u201cWhat happens when you\u2019re handling one interrup t and an-\nother one happens?"
  },
  {
    "content": " The\ncontext structures old and new are found the old and new process\u2019s\nprocess structures, respectively .\n6.4 W orried About Concurrency?\nSome of you, as attentive and thoughtful readers, may be now t hink-\ning: \u201cHmm... what happens when, during a system call, a timer interrupt\noccurs?\u201d or \u201cWhat happens when you\u2019re handling one interrup t and an-\nother one happens? Doesn\u2019t that get hard to handle in the kern el?\u201d Good\nquestions \u2013 we really have some hope for you yet!\nThe answer is yes, the OS does indeed need to be concerned as to what\nhappens if, during interrupt or trap handling, another inte rrupt occurs.\nThis, in fact, is the exact topic of the entire second piece of this book, on\nconcurrency; we\u2019ll defer a detailed discussion until then.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nME C H A N I S M : L I M I T E D DI R E C T EX E C U T I O N 55\nAS I D E : HO W LO N G CO N T E X T SW I T C H E S TA K E\nA natural question you might have is: how long does something like a\ncontext switch take? Or even a system call? For those of you th at are cu-\nrious, there is a tool called lmbench [MS96] that measures exactly those\nthings, as well as a few other performance measures that migh t be rele-\nvant.\nResults have improved quite a bit over time, roughly trackin g processor\nperformance. For example, in 1996 running Linux 1.3.37 on a 2 00-MHz\nP6 CPU, system calls took roughly 4 microseconds, and a conte xt switch\nroughly 6 microseconds [MS96]. Modern systems perform almo st an or-\nder of magnitude better , with sub-microsecond results on sy stems with\n2- or 3-GHz processors.\nIt should be noted that not all operating-system actions tra ck CPU per-\nformance. As Ousterhout observed, many OS operations are me mory\nintensive, and memory bandwidth has not improved as dramati cally as\nprocessor speed over time [O90]. Thus, depending on your wor kload,\nbuying the latest and greatest processor may not speed up you r OS as\nmuch as you might hope.\nT o whet your appetite, we\u2019ll just sketch some basics of how th e OS\nhandles these tricky situations. One simple thing an OS migh t do is dis-\nable interrupts during interrupt processing; doing so ensures that when\none interrupt is being handled, no other one will be delivere d to the CPU.\nOf course, the OS has to be careful in doing so; disabling inte rrupts for\ntoo long could lead to lost interrupts, which is (in technica l terms) bad.\nOperating systems also have developed a number of sophistic ated\nlocking schemes to protect concurrent access to internal data struc tures.\nThis enables multiple activities to be on-going within the k ernel at the\nsame time, particularly useful on multiprocessors. As we\u2019l l see in the\nnext piece of this book on concurrency , though, such locking can be com-\nplicated and lead to a variety of interesting and hard-to-\ufb01n d bugs.\n6.5 Summary\nW e have described some key low-level mechanisms to implemen t CPU\nvirtualization, a set of techniques which we collectively r efer to as limited\ndirect execution . The basic idea is straightforward: just run the program\nyou want to run on the CPU, but \ufb01rst make sure to set up the hardw are\nso as to limit what the process can do without OS assistance.\nThis general approach is taken in real life as well. For examp le, those\nof you who have children, or , at least, have heard of children , may be\nfamiliar with the concept of baby proo\ufb01ng a room: locking cabinets con-\ntaining dangerous stuff and covering electrical sockets. W hen the room is\nthus readied, you can let your baby roam freely , secure in the knowledge\nthat the most dangerous aspects of the room have been restric ted.\nc\u20dd 2014, A R PA C I-D U S S E A"
  },
  {
    "content": " children, or , at least, have heard of children , may be\nfamiliar with the concept of baby proo\ufb01ng a room: locking cabinets con-\ntaining dangerous stuff and covering electrical sockets. W hen the room is\nthus readied, you can let your baby roam freely , secure in the knowledge\nthat the most dangerous aspects of the room have been restric ted.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n56 ME C H A N I S M : L I M I T E D DI R E C T EX E C U T I O N\nTI P : R E B O O T IS US E F U L\nEarlier on, we noted that the only solution to in\ufb01nite loops ( and similar\nbehaviors) under cooperative preemption is to reboot the machine. While\nyou may scoff at this hack, researchers have shown that reboo t (or in gen-\neral, starting over some piece of software) can be a hugely us eful tool in\nbuilding robust systems [C+04].\nSpeci\ufb01cally , reboot is useful because it moves software bac k to a known\nand likely more tested state. Reboots also reclaim stale or l eaked re-\nsources (e.g., memory) which may otherwise be hard to handle . Finally ,\nreboots are easy to automate. For all of these reasons, it is n ot uncommon\nin large-scale cluster Internet services for system manage ment software\nto periodically reboot sets of machines in order to reset the m and thus\nobtain the advantages listed above.\nThus, next time you reboot, you are not just enacting some ugl y hack.\nRather , you are using a time-tested approach to improving th e behavior\nof a computer system. W ell done!\nIn an analogous manner , the OS \u201cbaby proofs\u201d the CPU, by \ufb01rst ( dur-\ning boot time) setting up the trap handlers and starting an in terrupt timer ,\nand then by only running processes in a restricted mode. By do ing so, the\nOS can feel quite assured that processes can run ef\ufb01ciently , only requir-\ning OS intervention to perform privileged operations or whe n they have\nmonopolized the CPU for too long and thus need to be switched o ut.\nW e thus have the basic mechanisms for virtualizing the CPU in place.\nBut a major question is left unanswered: which process shoul d we run at\na given time? It is this question that the scheduler must answ er , and thus\nthe next topic of our study .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nME C H A N I S M : L I M I T E D DI R E C T EX E C U T I O N 57\nReferences\n[A79] \u201cAlto User \u2019s Handbook\u201d\nXerox Palo Alto Research Center , September 1979\nA vailable: http://history-computer.com/Library/AltoUsersHandbook.pdf\nAn amazing system, way ahead of its time. Became famous becau se Steve Jobs visited, took notes, and\nbuilt Lisa and eventually Mac.\n[C+04] \u201cMicroreboot \u2013 A T echnique for Cheap Recovery\u201d\nGeorge Candea, Shinichi Kawamoto, Y uichi Fujiki, Greg Frie dman, Armando Fox\nOSDI \u201904, San Francisco, CA, December 2004\nAn excellent paper pointing out how far one can go with reboot in building more robust systems.\n[I11] \u201cIntel 64 and IA-32 Architectures Software Developer \u2019s Manual\u201d\nV olume 3A and 3B: System Programming Guide\nIntel Corporation, January 2011\n[K+61] \u201cOne-Level Storage System\u201d\nT . Kilburn, D.B.G. Edwards, M.J. Lanigan, F .H. Sumner\nIRE T ransactions on Electronic Computers, April 1962\nThe Atlas pioneered much of what you see in modern systems. Ho wever , this paper is not the best one\nto read. If you were to only read one, you might try the histori cal perspective below [L78].\n[L78] \u201cThe Manchester Mark I and Atlas: A Historical Perspec tive\u201d\nS. H. Lavington\nCommunications of the AC"
  },
  {
    "content": " Sumner\nIRE T ransactions on Electronic Computers, April 1962\nThe Atlas pioneered much of what you see in modern systems. Ho wever , this paper is not the best one\nto read. If you were to only read one, you might try the histori cal perspective below [L78].\n[L78] \u201cThe Manchester Mark I and Atlas: A Historical Perspec tive\u201d\nS. H. Lavington\nCommunications of the ACM, 21:1, January 1978\nA history of the early development of computers and the pione ering efforts of Atlas.\n[M+63] \u201cA Time-Sharing Debugging System for a Small Compute r \u201d\nJ. McCarthy , S. Boilen, E. Fredkin, J. C. R. Licklider\nAFIPS \u201963 (Spring), May , 1963, New Y ork, USA\nAn early paper about time-sharing that refers to using a time r interrupt; the quote that discusses it:\n\u201cThe basic task of the channel 17 clock routine is to decide wh ether to remove the current user from core\nand if so to decide which user program to swap in as he goes out. \u201d\n[MS96] \u201clmbench: Portable tools for performance analysis\u201d\nLarry McV oy and Carl Staelin\nUSENIX Annual T echnical Conference, January 1996\nA fun paper about how to measure a number of different things a bout your OS and its performance.\nDownload lmbench and give it a try.\n[M11] \u201cMac OS 9\u201d\nJanuary 2011\nA vailable: http://en.wikipedia.org/wiki/Mac\nOS 9\n[O90] \u201cWhy Aren\u2019t Operating Systems Getting Faster as Fast a s Hardware?\u201d\nJ. Ousterhout\nUSENIX Summer Conference, June 1990\nA classic paper on the nature of operating system performanc e.\n[P10] \u201cThe Single UNIX Speci\ufb01cation, V ersion 3\u201d\nThe Open Group, May 2010\nA vailable: http://www.unix.org/version3/\nThis is hard and painful to read, so probably avoid it if you ca n.\n[S07] \u201cThe Geometry of Innocent Flesh on the Bone:\nReturn-into-libc without Function Calls (on the x86)\u201d\nHovav Shacham\nCCS \u201907, October 2007\nOne of those awesome, mind-blowing ideas that you\u2019ll see in r esearch from time to time. The author\nshows that if you can jump into code arbitrarily, you can esse ntially stitch together any code sequence\nyou like (given a large code base) \u2013 read the paper for the deta ils. The technique makes it even harder to\ndefend against malicious attacks, alas.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n58 ME C H A N I S M : L I M I T E D DI R E C T EX E C U T I O N\nHomework (Measurement)\nAS I D E : ME A S U R E M EN T HO M E W O R K S\nMeasurement homeworks are small exercises where you write c ode to\nrun on a real machine, in order to measure some aspect of OS or h ardware\nperformance. The idea behind such homeworks is to give you a l ittle bit\nof hands-on experience with a real operating system.\nIn this homework, you\u2019ll measure the costs of a system call an d context\nswitch. Measuring the cost of a system call is relatively eas y . For example,\nyou could repeatedly call a simple system call (e.g., perfor ming a 0-byte\nread), and time how long it takes; dividing the time by the num ber of\niterations gives you an estimate of the cost of a system call.\nOne thing you\u2019ll have to take into account is the precision an d accu-\nracy of your timer . A typical timer that you can use is gettimeofday();\nread the man page for details. What you\u2019ll see there is that gettimeofday()\nreturns the time in microseconds since 1970; however , this d oes not mean\nthat the timer is precise to the microsecond. Measure back-t o-back calls\nto gettimeofday() to learn something about how precise the timer re-\nally is;"
  },
  {
    "content": "racy of your timer . A typical timer that you can use is gettimeofday();\nread the man page for details. What you\u2019ll see there is that gettimeofday()\nreturns the time in microseconds since 1970; however , this d oes not mean\nthat the timer is precise to the microsecond. Measure back-t o-back calls\nto gettimeofday() to learn something about how precise the timer re-\nally is; this will tell you how many iterations of your null sy stem-call\ntest you\u2019ll have to run in order to get a good measurement resu lt. If\ngettimeofday() is not precise enough for you, you might look into\nusing the rdtsc instruction available on x86 machines.\nMeasuring the cost of a context switch is a little trickier . T he lmbench\nbenchmark does so by running two processes on a single CPU, an d set-\nting up two U N I X pipes between them; a pipe is just one of many ways\nprocesses in a U N I X system can communicate with one another . The \ufb01rst\nprocess then issues a write to the \ufb01rst pipe, and waits for a re ad on the\nsecond; upon seeing the \ufb01rst process waiting for something t o read from\nthe second pipe, the OS puts the \ufb01rst process in the blocked st ate, and\nswitches to the other process, which reads from the \ufb01rst pipe and then\nwrites to the second. When the second process tries to read fr om the \ufb01rst\npipe again, it blocks, and thus the back-and-forth cycle of c ommunication\ncontinues. By measuring the cost of communicating like this repeatedly ,\nlmbench can make a good estimate of the cost of a context switc h. Y ou\ncan try to re-create something similar here, using pipes, or perhaps some\nother communication mechanism such as U N I X sockets.\nOne dif\ufb01culty in measuring context-switch cost arises in sy stems with\nmore than one CPU; what you need to do on such a system is ensure that\nyour context-switching processes are located on the same pr ocessor . For-\ntunately , most operating systems have calls to bind a proces s to a partic-\nular processor; on Linux, for example, the sched setaffinity() call\nis what you\u2019re looking for . By ensuring both processes are on the same\nprocessor , you are making sure to measure the cost of the OS st opping\none process and restoring another on the same CPU.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n7\nScheduling: Introduction\nBy now low-level mechanisms of running processes (e.g., context switch-\ning) should be clear; if they are not, go back a chapter or two, and read the\ndescription of how that stuff works again. However , we have y et to un-\nderstand the high-level policies that an OS scheduler employs. W e will\nnow do just that, presenting a series of scheduling policies (sometimes\ncalled disciplines) that various smart and hard-working people have de-\nveloped over the years.\nThe origins of scheduling, in fact, predate computer system s; early\napproaches were taken from the \ufb01eld of operations managemen t and ap-\nplied to computers. This reality should be no surprise: asse mbly lines\nand many other human endeavors also require scheduling, and many of\nthe same concerns exist therein, including a laser-like des ire for ef\ufb01ciency .\nAnd thus, our problem:\nTH E CR U X : H O W TO DE V E L O P SC H E D U L I N G PO L I C Y\nHow should we develop a basic framework for thinking about\nscheduling policies? What are the key assumptions? What met rics are\nimportant? What basic approaches have been used in the earli est of com-\nputer systems?\n7.1 W orkload Assumptions\nBefore getting into the range of possible policies, let us \ufb01r st make a\nnumber of simplifying assumptions about the processes runn ing in the\nsystem, sometimes collectively called the workload. Determining the\nworkload is a critical part of building policies, and the mor e you know\nabout workload, the more \ufffd"
  },
  {
    "content": " What basic approaches have been used in the earli est of com-\nputer systems?\n7.1 W orkload Assumptions\nBefore getting into the range of possible policies, let us \ufb01r st make a\nnumber of simplifying assumptions about the processes runn ing in the\nsystem, sometimes collectively called the workload. Determining the\nworkload is a critical part of building policies, and the mor e you know\nabout workload, the more \ufb01ne-tuned your policy can be.\nThe workload assumptions we make here are clearly unrealist ic, but\nthat is alright (for now), because we will relax them as we go, and even-\ntually develop what we will refer to as ... (dramatic pause) ...\n59\n60 SC H E D U L I N G : I N T R O D U C T I O N\na fully-operational scheduling discipline 1 .\nW e will make the following assumptions about the processes, some-\ntimes called jobs, that are running in the system:\n1. Each job runs for the same amount of time.\n2. All jobs arrive at the same time.\n3. All jobs only use the CPU (i.e., they perform no I/O)\n4. The run-time of each job is known.\nW e said all of these assumptions were unrealistic, but just a s some an-\nimals are more equal than others in Orwell\u2019s Animal Farm [O45], some\nassumptions are more unrealistic than others in this chapte r . In particu-\nlar , it might bother you that the run-time of each job is known : this would\nmake the scheduler omniscient, which, although it would be g reat (prob-\nably), is not likely to happen anytime soon.\n7.2 Scheduling Metrics\nBeyond making workload assumptions, we also need one more th ing\nto enable us to compare different scheduling policies: a scheduling met-\nric. A metric is just something that we use to measure something, and\nthere are a number of different metrics that make sense in sch eduling.\nFor now , however , let us also simplify our life by simply havi ng a sin-\ngle metric: turnaround time . The turnaround time of a job is de\ufb01ned\nas the time at which the job completes minus the time at which t he job\narrived in the system. More formally , the turnaround time Tturnaround is:\nTturnaround = Tcompletion \u2212 Tarrival (7.1)\nBecause we have assumed that all jobs arrive at the same time, for now\nTarrival = 0 and hence Tturnaround = Tcompletion. This fact will change\nas we relax the aforementioned assumptions.\nY ou should note that turnaround time is a performance metric, which\nwill be our primary focus this chapter . Another metric of int erest is fair-\nness, as measured (for example) by Jain\u2019s Fairness Index [J91]. Perfor-\nmance and fairness are often at odds in scheduling; a schedul er , for ex-\nample, may optimize performance but at the cost of preventin g a few jobs\nfrom running, thus decreasing fairness. This conundrum sho ws us that\nlife isn\u2019t always perfect.\n7.3 First In, First Out (FIFO)\nThe most basic algorithm a scheduler can implement is known a s First\nIn, First Out (FIFO) scheduling or sometimes First Come, First Served\n1 Said in the same way you would say \u201cA fully-operational Death Star .\u201d\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSC H E D U L I N G : I N T R O D U C T I O N 61\n(FCFS). FIFO has a number of positive properties: it is clearly ver y simple\nand thus easy to implement. Given our assumptions, it works p retty well.\nLet\u2019s do a quick example together . Imagine three jobs arrive in the\nsystem, A, B, and C, at roughly the same time ( Tarrival = 0 ). Because\nFIFO has to put some job \ufb01rst, let\u2019s assume that while they all arrived\nsimultaneously , A arrived just a hair before B which arrived just a hair\nbefore C. Assume also that each job runs for 10 seconds. What w ill the\naverage turnaround time be for these jobs?\n0 20"
  },
  {
    "content": " three jobs arrive in the\nsystem, A, B, and C, at roughly the same time ( Tarrival = 0 ). Because\nFIFO has to put some job \ufb01rst, let\u2019s assume that while they all arrived\nsimultaneously , A arrived just a hair before B which arrived just a hair\nbefore C. Assume also that each job runs for 10 seconds. What w ill the\naverage turnaround time be for these jobs?\n0 20 40 60 80 100 120\nTime\nA B C\nFigure 7.1: FIFO Simple Example\nFrom Figure 7.1, you can see that A \ufb01nished at 10, B at 20, and C at 30.\nThus, the average turnaround time for the three jobs is simpl y 10+20+30\n3 =\n20. Computing turnaround time is as easy as that.\nNow let\u2019s relax one of our assumptions. In particular , let\u2019s relax as-\nsumption 1, and thus no longer assume that each job runs for th e same\namount of time. How does FIFO perform now? What kind of worklo ad\ncould you construct to make FIFO perform poorly?\n(think about this before reading on ... keep thinking ... got it?!)\nPresumably you\u2019ve \ufb01gured this out by now , but just in case, le t\u2019s do\nan example to show how jobs of different lengths can lead to tr ouble for\nFIFO scheduling. In particular , let\u2019s again assume three jo bs (A, B, and\nC), but this time A runs for 100 seconds while B and C run for 10 e ach.\n0 20 40 60 80 100 120\nTime\nA B C\nFigure 7.2: Why FIFO Is Not That Great\nAs you can see in Figure 7.2, Job A runs \ufb01rst for the full 100 seconds\nbefore B or C even get a chance to run. Thus, the average turnar ound\ntime for the system is high: a painful 110 seconds ( 100+110+120\n3 = 110).\nThis problem is generally referred to as the convoy effect [B+79], where\na number of relatively-short potential consumers of a resou rce get queued\nbehind a heavyweight resource consumer . This scheduling sc enario might\nremind you of a single line at a grocery store and what you feel like when\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n62 SC H E D U L I N G : I N T R O D U C T I O N\nTI P : T H E PR I N C I P L E O F SJF\nShortest Job First represents a general scheduling princip le that can be\napplied to any system where the perceived turnaround time pe r customer\n(or , in our case, a job) matters. Think of any line you have wai ted in: if\nthe establishment in question cares about customer satisfa ction, it is likely\nthey have taken SJF into account. For example, grocery store s commonly\nhave a \u201cten-items-or-less\u201d line to ensure that shoppers wit h only a few\nthings to purchase don\u2019t get stuck behind the family prepari ng for some\nupcoming nuclear winter .\nyou see the person in front of you with three carts full of prov isions and\na checkbook out; it\u2019s going to be a while 2 .\nSo what should we do? How can we develop a better algorithm to\ndeal with our new reality of jobs that run for different amoun ts of time?\nThink about it \ufb01rst; then read on.\n7.4 Shortest Job First (SJF)\nIt turns out that a very simple approach solves this problem; in fact\nit is an idea stolen from operations research [C54,PV56] and applied to\nscheduling of jobs in computer systems. This new scheduling discipline\nis known as Shortest Job First (SJF) , and the name should be easy to\nremember because it describes the policy quite completely: it runs the\nshortest job \ufb01rst, then the next shortest, and so on.\n0 20 40 60 80 100 120\nTime\nB C A\nFigure 7.3: SJF Simple Example\nLet\u2019s take our example above but with SJF as our scheduling po licy .\nFigure 7.3 shows the results of running A, B, and C. Hopefully the dia-\n"
  },
  {
    "content": " to\nremember because it describes the policy quite completely: it runs the\nshortest job \ufb01rst, then the next shortest, and so on.\n0 20 40 60 80 100 120\nTime\nB C A\nFigure 7.3: SJF Simple Example\nLet\u2019s take our example above but with SJF as our scheduling po licy .\nFigure 7.3 shows the results of running A, B, and C. Hopefully the dia-\ngram makes it clear why SJF performs much better with regards to aver-\nage turnaround time. Simply by running B and C before A, SJF re duces\naverage turnaround from 110 seconds to 50 ( 10+20+120\n3 = 50), more than\na factor of two improvement.\nIn fact, given our assumptions about jobs all arriving at the same time,\nwe could prove that SJF is indeed an optimal scheduling algorithm. How-\n2 Recommended action in this case: either quickly switch to a d ifferent line, or take a long,\ndeep, and relaxing breath. That\u2019s right, breathe in, breath e out. It will be OK, don\u2019t worry .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSC H E D U L I N G : I N T R O D U C T I O N 63\nAS I D E : PR E E M P T I V E SC H E D U L E R S\nIn the old days of batch computing, a number of non-preemptive sched-\nulers were developed; such systems would run each job to comp letion\nbefore considering whether to run a new job. Virtually all mo dern sched-\nulers are preemptive, and quite willing to stop one process from run-\nning in order to run another . This implies that the scheduler employs the\nmechanisms we learned about previously; in particular , the scheduler can\nperform a context switch , stopping one running process temporarily and\nresuming (or starting) another .\never , you are in a systems class, not theory or operations res earch; no\nproofs are allowed.\nThus we arrive upon a good approach to scheduling with SJF , bu t our\nassumptions are still fairly unrealistic. Let\u2019s relax anot her . In particular ,\nwe can target assumption 2, and now assume that jobs can arriv e at any\ntime instead of all at once. What problems does this lead to?\n(Another pause to think ... are you thinking? Come on, you can do it)\nHere we can illustrate the problem again with an example. Thi s time,\nassume A arrives at t = 0 and needs to run for 100 seconds, whereas B\nand C arrive at t = 10 and each need to run for 10 seconds. With pure\nSJF , we\u2019d get the schedule seen in Figure\n7.4.\n0 20 40 60 80 100 120\nTime\nA B C\n[B,C arrive]\nFigure 7.4: SJF With Late Arrivals From B and C\nAs you can see from the \ufb01gure, even though B and C arrived short ly\nafter A, they still are forced to wait until A has completed, a nd thus suffer\nthe same convoy problem. A verage turnaround time for these t hree jobs\nis 103.33 seconds ( 100+(110\u221210)+(120\u221210)\n3 ). What can a scheduler do?\n7.5 Shortest Time-to-Completion First (STCF)\nAs you might have guessed, given our previous discussion abo ut mech-\nanisms such as timer interrupts and context switching, the s cheduler can\ncertainly do something else when B and C arrive: it can preempt job A\nand decide to run another job, perhaps continuing A later . SJ F by our de\ufb01-\nnition is a non-preemptive scheduler , and thus suffers from the problems\ndescribed above.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n64 SC H E D U L I N G : I N T R O D U C T I O N\n0 20 40 60 80 100 120\nTime\nA B C A\n[B,C arrive]\nFigure 7.5: STCF Simple Example\nFortunately , there is a scheduler which does exactly that: a dd preemp-\ntion to SJ"
  },
  {
    "content": "D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n64 SC H E D U L I N G : I N T R O D U C T I O N\n0 20 40 60 80 100 120\nTime\nA B C A\n[B,C arrive]\nFigure 7.5: STCF Simple Example\nFortunately , there is a scheduler which does exactly that: a dd preemp-\ntion to SJF , known as the Shortest Time-to-Completion First (STCF) or\nPreemptive Shortest Job First (PSJF) scheduler [CK68]. Any time a new\njob enters the system, it determines of the remaining jobs an d new job,\nwhich has the least time left, and then schedules that one. Th us, in our\nexample, STCF would preempt A and run B and C to completion; on ly\nwhen they are \ufb01nished would A \u2019s remaining time be scheduled. Figure\n7.5 shows an example.\nThe result is a much-improved average turnaround time: 50 se conds\n( (120\u22120)+(20\u221210)+(30\u221210)\n3 ). And as before, given our new assumptions,\nSTCF is provably optimal; given that SJF is optimal if all job s arrive at\nthe same time, you should probably be able to see the intuitio n behind\nthe optimality of STCF .\nThus, if we knew that job lengths, and jobs only used the CPU, a nd our\nonly metric was turnaround time, STCF would be a great policy . In fact,\nfor a number of early batch computing systems, these types of scheduling\nalgorithms made some sense. However , the introduction of ti me-shared\nmachines changed all that. Now users would sit at a terminal a nd de-\nmand interactive performance from the system as well. And th us, a new\nmetric was born: response time .\nResponse time is de\ufb01ned as the time from when the job arrives i n a\nsystem to the \ufb01rst time it is scheduled. More formally:\nTresponse = Tf irstrun \u2212 Tarrival (7.2)\nFor example, if we had the schedule above (with A arriving at t ime 0,\nand B and C at time 10), the response time of each job is as follo ws: 0 for\njob A, 0 for B, and 10 for C (average: 3.33).\nAs you might be thinking, STCF and related disciplines are no t par-\nticularly good for response time. If three jobs arrive at the same time,\nfor example, the third job has to wait for the previous two job s to run in\ntheir entirety before being scheduled just once. While great for turnaroun d\ntime, this approach is quite bad for response time and intera ctivity . In-\ndeed, imagine sitting at a terminal, typing, and having to wa it 10 seconds\nto see a response from the system just because some other job g ot sched-\nuled in front of yours: not too pleasant.\nThus, we are left with another problem: how can we build a sche duler\nthat is sensitive to response time?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSC H E D U L I N G : I N T R O D U C T I O N 65\n0 5 10 15 20 25 30\nTime\nA B C\nFigure 7.6: SJF Again (Bad for Response Time)\n0 5 10 15 20 25 30\nTime\nABCABCABCABCABC\nFigure 7.7: Round Robin (Good for Response Time)\n7.6 Round Robin\nT o solve this problem, we will introduce a new scheduling alg orithm.\nThis approach is classically known as Round-Robin (RR) scheduling [K64].\nThe basic idea is simple: instead of running jobs to completi on, RR runs\na job for a time slice (sometimes called a scheduling quantum ) and then\nswitches to the next job in the run queue. It repeatedly does s o un-\ntil the jobs are \ufb01nished. For this reason, RR is sometimes cal led time-\nslicing. Note that the length of a time slice must be a multiple of the\ntimer-interrupt period; thus if the timer interrupts every 10 milliseconds,\nthe time slice could be 10, 20, or"
  },
  {
    "content": " for a time slice (sometimes called a scheduling quantum ) and then\nswitches to the next job in the run queue. It repeatedly does s o un-\ntil the jobs are \ufb01nished. For this reason, RR is sometimes cal led time-\nslicing. Note that the length of a time slice must be a multiple of the\ntimer-interrupt period; thus if the timer interrupts every 10 milliseconds,\nthe time slice could be 10, 20, or any other multiple of 10 ms.\nT o understand RR in more detail, let\u2019s look at an example. Ass ume\nthree jobs A, B, and C arrive at the same time in the system, and that\nthey each wish to run for 5 seconds. An SJF scheduler runs each job to\ncompletion before running another (Figure 7.6). In contrast, RR with a\ntime-slice of 1 second would cycle through the jobs quickly ( Figure 7.7).\nThe average response time of RR is: 0+1+2\n3 = 1 ; for SJF , average re-\nsponse time is: 0+5+10\n3 = 5.\nAs you can see, the length of the time slice is critical for RR. The shorter\nit is, the better the performance of RR under the response-ti me metric.\nHowever , making the time slice too short is problematic: sud denly the\ncost of context switching will dominate overall performanc e. Thus, de-\nciding on the length of the time slice presents a trade-off to a system de-\nsigner , making it long enough to amortize the cost of switching without\nmaking it so long that the system is no longer responsive.\nNote that the cost of context switching does not arise solely from the\nOS actions of saving and restoring a few registers. When prog rams run,\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n66 SC H E D U L I N G : I N T R O D U C T I O N\nTI P : A M O RT I Z AT I O N CA N RE D U C E CO S T S\nThe general technique of amortization is commonly used in systems\nwhen there is a \ufb01xed cost to some operation. By incurring that cost less\noften (i.e., by performing the operation fewer times), the t otal cost to the\nsystem is reduced. For example, if the time slice is set to 10 m s, and the\ncontext-switch cost is 1 ms, roughly 10% of time is spent cont ext switch-\ning and is thus wasted. If we want to amortize this cost, we can increase\nthe time slice, e.g., to 100 ms. In this case, less than 1% of ti me is spent\ncontext switching, and thus the cost of time-slicing has bee n amortized.\nthey build up a great deal of state in CPU caches, TLBs, branch predictors,\nand other on-chip hardware. Switching to another job causes this state\nto be \ufb02ushed and new state relevant to the currently-running job to be\nbrought in, which may exact a noticeable performance cost [M B91].\nRR, with a reasonable time slice, is thus an excellent schedu ler if re-\nsponse time is our only metric. But what about our old friend t urnaround\ntime? Let\u2019s look at our example above again. A, B, and C, each w ith run-\nning times of 5 seconds, arrive at the same time, and RR is the s cheduler\nwith a (long) 1-second time slice. W e can see from the picture above that\nA \ufb01nishes at 13, B at 14, and C at 15, for an average of 14. Pretty awful!\nIt is not surprising, then, that RR is indeed one of the worst policies if\nturnaround time is our metric. Intuitively , this should mak e sense: what\nRR is doing is stretching out each job as long as it can, by only running\neach job for a short bit before moving to the next. Because tur naround\ntime only cares about when jobs \ufb01nish, RR is nearly pessimal, even worse\nthan simple FIFO in many cases.\nMore generally , any policy (such as RR) that is fair, i.e., that evenly di-\nvides the CPU among active processes on a small time scale, wi ll perform\npoorly"
  },
  {
    "content": " long as it can, by only running\neach job for a short bit before moving to the next. Because tur naround\ntime only cares about when jobs \ufb01nish, RR is nearly pessimal, even worse\nthan simple FIFO in many cases.\nMore generally , any policy (such as RR) that is fair, i.e., that evenly di-\nvides the CPU among active processes on a small time scale, wi ll perform\npoorly on metrics such as turnaround time. Indeed, this is an inherent\ntrade-off: if you are willing to be unfair , you can run shorte r jobs to com-\npletion, but at the cost of response time; if you instead valu e fairness,\nresponse time is lowered, but at the cost of turnaround time. This type of\ntrade-off is common in systems; you can\u2019t have your cake and eat it too.\nW e have developed two types of schedulers. The \ufb01rst type (SJF , STCF)\noptimizes turnaround time, but is bad for response time. The second type\n(RR) optimizes response time but is bad for turnaround. And w e still\nhave two assumptions which need to be relaxed: assumption 3 ( that jobs\ndo no I/O), and assumption 4 (that the run-time of each job is k nown).\nLet\u2019s tackle those assumptions next.\n7.7 Incorporating I/O\nFirst we will relax assumption 3 \u2013 of course all programs perf orm I/O.\nImagine a program that didn\u2019t take any input: it would produc e the same\noutput each time. Imagine one without output: it is the prove rbial tree\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSC H E D U L I N G : I N T R O D U C T I O N 67\nfalling in the forest, with no one to see it; it doesn\u2019t matter that it ran.\nA scheduler clearly has a decision to make when a job initiate s an I/O\nrequest, because the currently-running job won\u2019t be using t he CPU dur-\ning the I/O; it is blocked waiting for I/O completion. If the I/O is sent to\na hard disk drive, the process might be blocked for a few milli seconds or\nlonger , depending on the current I/O load of the drive. Thus, the sched-\nuler should probably schedule another job on the CPU at that t ime.\nThe scheduler also has to make a decision when the I/O complet es.\nWhen that occurs, an interrupt is raised, and the OS runs and m oves\nthe process that issued the I/O from blocked back to the ready state. Of\ncourse, it could even decide to run the job at that point. How s hould the\nOS treat each job?\nT o understand this issue better , let us assume we have two job s, A and\nB, which each need 50 ms of CPU time. However , there is one obvi ous\ndifference: A runs for 10 ms and then issues an I/O request (as sume here\nthat I/Os each take 10 ms), whereas B simply uses the CPU for 50 ms and\nperforms no I/O. The scheduler runs A \ufb01rst, then B after (Figu re 7.8).\n0 20 40 60 80 100 120 140\nTime\nA A A A A B B B B B\nCPU\nDisk\nFigure 7.8: Poor Use of Resources\nAssume we are trying to build a STCF scheduler . How should suc h a\nscheduler account for the fact that A is broken up into 5 10-ms sub-jobs,\nwhereas B is just a single 50-ms CPU demand? Clearly , just run ning one\njob and then the other without considering how to take I/O int o account\nmakes little sense.\n0 20 40 60 80 100 120 140\nTime\nA A A A AB B B B B\nCPU\nDisk\nFigure 7.9: Overlap Allows Better Use of Resources\nA common approach is to treat each 10-ms sub-job of A as an inde pen-\ndent job. Thus, when the system starts, its choice is whether to schedule\na 10-ms A or a 50-ms B. With STCF , the choice is clear: choose th e shorter\none, in this"
  },
  {
    "content": "\nTime\nA A A A AB B B B B\nCPU\nDisk\nFigure 7.9: Overlap Allows Better Use of Resources\nA common approach is to treat each 10-ms sub-job of A as an inde pen-\ndent job. Thus, when the system starts, its choice is whether to schedule\na 10-ms A or a 50-ms B. With STCF , the choice is clear: choose th e shorter\none, in this case A. Then, when the \ufb01rst sub-job of A has comple ted, only\nB is left, and it begins running. Then a new sub-job of A is subm itted,\nand it preempts B and runs for 10 ms. Doing so allows for overlap, with\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n68 SC H E D U L I N G : I N T R O D U C T I O N\nTI P : O V E R L A P EN A B L E S HI G H E R UT I L I Z AT I O N\nWhen possible, overlap operations to maximize the utilization of sys-\ntems. Overlap is useful in many different domains, includin g when per-\nforming disk I/O or sending messages to remote machines; in e ither case,\nstarting the operation and then switching to other work is a g ood idea,\nand improved the overall utilization and ef\ufb01ciency of the sy stem.\nthe CPU being used by one process while waiting for the I/O of a nother\nprocess to complete; the system is thus better utilized (see Figure 7.9).\nAnd thus we see how a scheduler might incorporate I/O. By trea ting\neach CPU burst as a job, the scheduler makes sure processes th at are \u201cin-\nteractive\u201d get run frequently . While those interactive job s are performing\nI/O, other CPU-intensive jobs run, thus better utilizing th e processor .\n7.8 No More Oracle\nWith a basic approach to I/O in place, we come to our \ufb01nal assum p-\ntion: that the scheduler knows the length of each job. As we sa id before,\nthis is likely the worst assumption we could make. In fact, in a general-\npurpose OS (like the ones we care about), the OS usually knows very little\nabout the length of each job. Thus, how can we build an approac h that be-\nhaves like SJF/STCF without such a priori knowledge? Further , how can\nwe incorporate some of the ideas we have seen with the RR sched uler so\nthat response time is also quite good?\n7.9 Summary\nW e have introduced the basic ideas behind scheduling and dev eloped\ntwo families of approaches. The \ufb01rst runs the shortest job re maining and\nthus optimizes turnaround time; the second alternates betw een all jobs\nand thus optimizes response time. Both are bad where the othe r is good,\nalas, an inherent trade-off common in systems. W e have also s een how we\nmight incorporate I/O into the picture, but have still not so lved the prob-\nlem of the fundamental inability of the OS to see into the futu re. Shortly ,\nwe will see how to overcome this problem, by building a schedu ler that\nuses the recent past to predict the future. This scheduler is known as the\nmulti-level feedback queue , and it is the topic of the next chapter .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSC H E D U L I N G : I N T R O D U C T I O N 69\nReferences\n[B+79] \u201cThe Convoy Phenomenon\u201d\nM. Blasgen, J. Gray , M. Mitoma, T . Price\nACM Operating Systems Review , 13:2, April 1979\nPerhaps the \ufb01rst reference to convoys, which occurs in datab ases as well as the OS.\n[C54] \u201cPriority Assignment in W aiting Line Problems\u201d\nA. Cobham\nJournal of Operations Research, 2:70, pages 70\u201376, 1954\nThe pioneering paper on using an SJF approach in scheduling t he repair of machines.\n[K64] \ufffd"
  },
  {
    "content": "M Operating Systems Review , 13:2, April 1979\nPerhaps the \ufb01rst reference to convoys, which occurs in datab ases as well as the OS.\n[C54] \u201cPriority Assignment in W aiting Line Problems\u201d\nA. Cobham\nJournal of Operations Research, 2:70, pages 70\u201376, 1954\nThe pioneering paper on using an SJF approach in scheduling t he repair of machines.\n[K64] \u201cAnalysis of a Time-Shared Processor \u201d\nLeonard Kleinrock\nNaval Research Logistics Quarterly , 11:1, pages 59\u201373, Mar ch 1964\nMay be the \ufb01rst reference to the round-robin scheduling algo rithm; certainly one of the \ufb01rst analyses of\nsaid approach to scheduling a time-shared system.\n[CK68] \u201cComputer Scheduling Methods and their Countermeas ures\u201d\nEdward G. Coffman and Leonard Kleinrock\nAFIPS \u201968 (Spring), April 1968\nAn excellent early introduction to and analysis of a number o f basic scheduling disciplines.\n[J91] \u201cThe Art of Computer Systems Performance Analysis:\nT echniques for Experimental Design, Measurement, Simulat ion, and Modeling\u201d\nR. Jain\nInterscience, New Y ork, April 1991\nThe standard text on computer systems measurement. A great r eference for your library, for sure.\n[O45] \u201cAnimal Farm\u201d\nGeorge Orwell\nSecker and W arburg (London), 1945\nA great but depressing allegorical book about power and its c orruptions. Some say it is a critique of\nStalin and the pre-WWII Stalin era in the U.S.S.R; we say it\u2019s a critique of pigs.\n[PV56] \u201cMachine Repair as a Priority W aiting-Line Problem\u201d\nThomas E. Phipps Jr . and W . R. V an V oorhis\nOperations Research, 4:1, pages 76\u201386, February 1956\nFollow-on work that generalizes the SJF approach to machine repair from Cobham\u2019s original work; also\npostulates the utility of an STCF approach in such an environ ment. Speci\ufb01cally, \u201cThere are certain\ntypes of repair work, ... involving much dismantling and cov ering the \ufb02oor with nuts and bolts, which\ncertainly should not be interrupted once undertaken; in oth er cases it would be inadvisable to continue\nwork on a long job if one or more short ones became available (p .81).\u201d\n[MB91] \u201cThe effect of context switches on cache performance \u201d\nJeffrey C. Mogul and Anita Borg\nASPLOS, 1991\nA nice study on how cache performance can be affected by conte xt switching; less of an issue in today\u2019s\nsystems where processors issue billions of instructions pe r second but context-switches still happen in\nthe millisecond time range.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n70 SC H E D U L I N G : I N T R O D U C T I O N\nHomework\nAS I D E : SI M U L AT I O N HO M E W O R K S\nSimulation homeworks come in the form of simulators you run t o\nmake sure you understand some piece of the material. The simu lators\nare generally python programs that enable you both to generate different\nproblems (using different random seeds) as well as to have th e program\nsolve the problem for you (with the -c \ufb02ag) so that you can check your\nanswers. Running any simulator with a -h or --help \ufb02ag will provide\nwith more information as to all the options the simulator giv es you.\nThis program, scheduler.py, allows you to see how different sched-\nulers perform under scheduling metrics such as response tim e, turnaround\ntime, and total wait time. See the README for details.\nQuestions\n1. Compute the response time and turnaround time when runnin g\nthree jobs of length 200 with the SJF and FIFO schedulers.\n2. Now do the same but with jobs of different lengths: 100, 200 , and\n300.\n3. Now do the same, but also with the RR scheduler and a time-sl ice\nof 1.\n4"
  },
  {
    "content": " turnaround\ntime, and total wait time. See the README for details.\nQuestions\n1. Compute the response time and turnaround time when runnin g\nthree jobs of length 200 with the SJF and FIFO schedulers.\n2. Now do the same but with jobs of different lengths: 100, 200 , and\n300.\n3. Now do the same, but also with the RR scheduler and a time-sl ice\nof 1.\n4. For what types of workloads does SJF deliver the same turna round\ntimes as FIFO?\n5. For what types of workloads and quantum lengths does SJF de liver\nthe same response times as RR?\n6. What happens to response time with SJF as job lengths incre ase?\nCan you use the simulator to demonstrate the trend?\n7. What happens to response time with RR as quantum lengths in -\ncrease? Can you write an equation that gives the worst-case r e-\nsponse time, given N jobs?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n8\nScheduling:\nThe Multi-Level Feedback Queue\nIn this chapter , we\u2019ll tackle the problem of developing one o f the most\nwell-known approaches to scheduling, known as the Multi-level Feed-\nback Queue (MLFQ) . The Multi-level Feedback Queue (MLFQ) sched-\nuler was \ufb01rst described by Corbato et al. in 1962 [C+62] in a sy stem\nknown as the Compatible Time-Sharing System (CTSS), and thi s work,\nalong with later work on Multics, led the ACM to award Corbato its\nhighest honor , the T uring A ward. The scheduler has subsequently been\nre\ufb01ned throughout the years to the implementations you will encounter\nin some modern systems.\nThe fundamental problem MLFQ tries to address is two-fold. F irst, it\nwould like to optimize turnaround time , which, as we saw in the previous\nnote, is done by running shorter jobs \ufb01rst; unfortunately , t he OS doesn\u2019t\ngenerally know how long a job will run for , exactly the knowle dge that\nalgorithms like SJF (or STCF) require. Second, MLFQ would li ke to make\na system feel responsive to interactive users (i.e., users s itting and staring\nat the screen, waiting for a process to \ufb01nish), and thus minim ize response\ntime; unfortunately , algorithms like Round Robin reduce respon se time\nbut are terrible for turnaround time. Thus, our problem: giv en that we\nin general do not know anything about a process, how can we bui ld a\nscheduler to achieve these goals? How can the scheduler lear n, as the\nsystem runs, the characteristics of the jobs it is running, a nd thus make\nbetter scheduling decisions?\nTH E CR U X :\nHO W TO SC H E D U L E WI T H O U T PE R F E C T KN O W L E D G E ?\nHow can we design a scheduler that both minimizes response ti me for\ninteractive jobs while also minimizing turnaround time wit hout a priori\nknowledge of job length?\n71\n72\nSC H E D U L I N G :\nTH E MU LT I -L E V EL FE E D B A C K QU E U E\nTI P : L E A R N FR O M HI S TO RY\nThe multi-level feedback queue is an excellent example of a s ystem that\nlearns from the past to predict the future. Such approaches a re com-\nmon in operating systems (and many other places in Computer S cience,\nincluding hardware branch predictors and caching algorith ms). Such\napproaches work when jobs have phases of behavior and are thu s pre-\ndictable; of course, one must be careful with such technique s, as they can\neasily be wrong and drive a system to make worse decisions tha n they\nwould have with no knowledge at all.\n8.1 MLFQ: Basic Rules\nT o build such a scheduler , in this chapter we will describe th e basic\nalgorithms behind a multi-level feedback queue; although t he speci\ufb01cs of\nmany implemented MLFQs differ [E95], most approaches are si milar .\nIn"
  },
  {
    "content": ", as they can\neasily be wrong and drive a system to make worse decisions tha n they\nwould have with no knowledge at all.\n8.1 MLFQ: Basic Rules\nT o build such a scheduler , in this chapter we will describe th e basic\nalgorithms behind a multi-level feedback queue; although t he speci\ufb01cs of\nmany implemented MLFQs differ [E95], most approaches are si milar .\nIn our treatment, the MLFQ has a number of distinct queues, each\nassigned a different priority level . At any given time, a job that is ready\nto run is on a single queue. MLFQ uses priorities to decide whi ch job\nshould run at a given time: a job with higher priority (i.e., a job on a\nhigher queue) is chosen to run.\nOf course, more than one job may be on a given queue, and thus ha ve\nthe same priority . In this case, we will just use round-robin schedul ing\namong those jobs.\nThus, the key to MLFQ scheduling lies in how the scheduler set s pri-\norities. Rather than giving a \ufb01xed priority to each job, MLFQ varies the\npriority of a job based on its observed behavior . If, for example, a job repeat-\nedly relinquishes the CPU while waiting for input from the ke yboard,\nMLFQ will keep its priority high, as this is how an interactiv e process\nmight behave. If, instead, a job uses the CPU intensively for long periods\nof time, MLFQ will reduce its priority . In this way , MLFQ will try to learn\nabout processes as they run, and thus use the history of the job to predict\nits future behavior .\nThus, we arrive at the \ufb01rst two basic rules for MLFQ:\n\u2022 Rule 1: If Priority(A) > Priority(B), A runs (B doesn\u2019t).\n\u2022 Rule 2: If Priority(A) = Priority(B), A & B run in RR.\nIf we were to put forth a picture of what the queues might look l ike at\na given instant, we might see something like the following (F igure 8.1).\nIn the \ufb01gure, two jobs (A and B) are at the highest priority lev el, while job\nC is in the middle and Job D is at the lowest priority . Given our current\nknowledge of how MLFQ works, the scheduler would just altern ate time\nslices between A and B because they are the highest priority j obs in the\nsystem; poor jobs C and D would never even get to run \u2013 an outrag e!\nOf course, just showing a static snapshot of some queues does not re-\nally give you an idea of how MLFQ works. What we need is to under -\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSC H E D U L I N G :\nTH E MU LT I -L E V EL FE E D B A C K QU E U E 73\nQ1\nQ2\nQ3\nQ4\nQ5\nQ6\nQ7\nQ8\n[Low Priority]\n[High Priority]\nD\nC\nA B\nFigure 8.1: MLFQ Example\nstand how job priority changes over time. And that, in a surprise only\nto those who are reading a chapter from this book for the \ufb01rst t ime, is\nexactly what we will do next.\n8.2 Attempt #1: How to Change Priority\nW e now must decide how MLFQ is going to change the priority lev el\nof a job (and thus which queue it is on) over the lifetime of a jo b. T o do\nthis, we must keep in mind our workload: a mix of interactive j obs that\nare short-running (and may frequently relinquish the CPU), and some\nlonger-running \u201cCPU-bound\u201d jobs that need a lot of CPU time b ut where\nresponse time isn\u2019t important. Here is our \ufb01rst attempt at a p riority-\nadjustment algorithm:\n\u2022 Rule 3: When a job enters the system, it is placed at the highest\npriority (the topmost queue).\n\u2022 Rule 4a: If a job uses up an entire time slice while running, its pri-\nority is reduced (i.e.,"
  },
  {
    "content": "bound\u201d jobs that need a lot of CPU time b ut where\nresponse time isn\u2019t important. Here is our \ufb01rst attempt at a p riority-\nadjustment algorithm:\n\u2022 Rule 3: When a job enters the system, it is placed at the highest\npriority (the topmost queue).\n\u2022 Rule 4a: If a job uses up an entire time slice while running, its pri-\nority is reduced (i.e., it moves down one queue).\n\u2022 Rule 4b: If a job gives up the CPU before the time slice is up, it stays\nat the same priority level.\nExample 1: A Single Long-Running Job\nLet\u2019s look at some examples. First, we\u2019ll look at what happen s when there\nhas been a long running job in the system. Figure\n8.2 shows what happens\nto this job over time in a three-queue scheduler .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n74\nSC H E D U L I N G :\nTH E MU LT I -L E V EL FE E D B A C K QU E U E\nQ2\nQ1\nQ0\n0 50 100 150 200\nFigure 8.2: Long-running Job Over Time\nAs you can see in the example, the job enters at the highest pri ority\n(Q2). After a single time-slice of 10 ms, the scheduler reduc es the job\u2019s\npriority by one, and thus the job is on Q1. After running at Q1 f or a time\nslice, the job is \ufb01nally lowered to the lowest priority in the system (Q0),\nwhere it remains. Pretty simple, no?\nExample 2: Along Came A Short Job\nNow let\u2019s look at a more complicated example, and hopefully s ee how\nMLFQ tries to approximate SJF . In this example, there are two jobs: A,\nwhich is a long-running CPU-intensive job, and B, which is a s hort-running\ninteractive job. Assume A has been running for some time, and then B ar-\nrives. What will happen? Will MLFQ approximate SJF for B?\nFigure\n8.3 plots the results of this scenario. A (shown in black) is run-\nning along in the lowest-priority queue (as would any long-r unning CPU-\nintensive jobs); B (shown in gray) arrives at time T = 100 , and thus is\nQ2\nQ1\nQ0\n0 50 100 150 200\nFigure 8.3: Along Came An Interactive Job\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSC H E D U L I N G :\nTH E MU LT I -L E V EL FE E D B A C K QU E U E 75\nQ2\nQ1\nQ0\n0 50 100 150 200\nFigure 8.4: A Mixed I/O-intensive and CPU-intensive W orkload\ninserted into the highest queue; as its run-time is short (on ly 20 ms), B\ncompletes before reaching the bottom queue, in two time slic es; then A\nresumes running (at low priority).\nFrom this example, you can hopefully understand one of the ma jor\ngoals of the algorithm: because it doesn\u2019t know whether a job will be a\nshort job or a long-running job, it \ufb01rst assumes it might be a short job, thus\ngiving the job high priority . If it actually is a short job, it will run quickly\nand complete; if it is not a short job, it will slowly move down the queues,\nand thus soon prove itself to be a long-running more batch-li ke process.\nIn this manner , MLFQ approximates SJF .\nExample 3: What About I/O?\nLet\u2019s now look at an example with some I/O. As Rule 4b states ab ove, if a\nprocess gives up the processor before using up its time slice , we keep it at\nthe same priority level. The intent of this rule is simple: if an interactive\njob, for example, is doing a lot of I/O (say by waiting for user input from\nthe keyboard or mouse), it will relinquish the CPU before its time slice is\ncomplete; in"
  },
  {
    "content": "\ufffds now look at an example with some I/O. As Rule 4b states ab ove, if a\nprocess gives up the processor before using up its time slice , we keep it at\nthe same priority level. The intent of this rule is simple: if an interactive\njob, for example, is doing a lot of I/O (say by waiting for user input from\nthe keyboard or mouse), it will relinquish the CPU before its time slice is\ncomplete; in such case, we don\u2019t wish to penalize the job and t hus simply\nkeep it at the same level.\nFigure\n8.4 shows an example of how this works, with an interactive job\nB (shown in gray) that needs the CPU only for 1 ms before perfor ming an\nI/O competing for the CPU with a long-running batch job A (sho wn in\nblack). The MLFQ approach keeps B at the highest priority bec ause B\nkeeps releasing the CPU; if B is an interactive job, MLFQ furt her achieves\nits goal of running interactive jobs quickly .\nProblems With Our Current MLFQ\nW e thus have a basic MLFQ. It seems to do a fairly good job, shar ing the\nCPU fairly between long-running jobs, and letting short or I /O-intensive\ninteractive jobs run quickly . Unfortunately , the approach we have devel-\noped thus far contains serious \ufb02aws. Can you think of any?\n(This is where you pause and think as deviously as you can)\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n76\nSC H E D U L I N G :\nTH E MU LT I -L E V EL FE E D B A C K QU E U E\nQ2\nQ1\nQ0\n0 50 100 150 200\nQ2\nQ1\nQ0\n0 50 100 150 200\nFigure 8.5: Without (Left) and With (Right) Priority Boost\nFirst, there is the problem of starvation: if there are \u201ctoo many\u201d in-\nteractive jobs in the system, they will combine to consume all CPU time,\nand thus long-running jobs will never receive any CPU time (they starve).\nW e\u2019d like to make some progress on these jobs even in this scen ario.\nSecond, a smart user could rewrite their program to game the sched-\nuler. Gaming the scheduler generally refers to the idea of doing s ome-\nthing sneaky to trick the scheduler into giving you more than your fair\nshare of the resource. The algorithm we have described is sus ceptible to\nthe following attack: before the time slice is over , issue an I/O operation\n(to some \ufb01le you don\u2019t care about) and thus relinquish the CPU ; doing so\nallows you to remain in the same queue, and thus gain a higher p ercent-\nage of CPU time. When done right (e.g., by running for 99% of a t ime slice\nbefore relinquishing the CPU), a job could nearly monopoliz e the CPU.\nFinally , a program may change its behavior over time; what was CPU-\nbound may transition to a phase of interactivity . With our cu rrent ap-\nproach, such a job would be out of luck and not be treated like t he other\ninteractive jobs in the system.\n8.3 Attempt #2: The Priority Boost\nLet\u2019s try to change the rules and see if we can avoid the proble m of\nstarvation. What could we do in order to guarantee that CPU-b ound jobs\nwill make some progress (even if it is not much?).\nThe simple idea here is to periodically boost the priority of all the jobs\nin system. There are many ways to achieve this, but let\u2019s just do some-\nthing simple: throw them all in the topmost queue; hence, a ne w rule:\n\u2022 Rule 5: After some time period S, move all the jobs in the system\nto the topmost queue.\nOur new rule solves two problems at once. First, processes ar e guar-\nanteed not to starve: by sitting in the top queue, a job will sh are the CPU\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSC H E D U L I N G :\nTH E MU LT I -L"
  },
  {
    "content": ".\nOur new rule solves two problems at once. First, processes ar e guar-\nanteed not to starve: by sitting in the top queue, a job will sh are the CPU\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSC H E D U L I N G :\nTH E MU LT I -L E V EL FE E D B A C K QU E U E 77\nQ2\nQ1\nQ0\n0 50 100 150 200\nQ2\nQ1\nQ0\n0 50 100 150 200\nFigure 8.6: Without (Left) and With (Right) Gaming T olerance\nwith other high-priority jobs in a round-robin fashion, and thus eventu-\nally receive service. Second, if a CPU-bound job has become i nteractive,\nthe scheduler treats it properly once it has received the pri ority boost.\nLet\u2019s see an example. In this scenario, we just show the behav ior of\na long-running job when competing for the CPU with two short- running\ninteractive jobs. T wo graphs are shown in Figure 8.5. On the left, there is\nno priority boost, and thus the long-running job gets starve d once the two\nshort jobs arrive; on the right, there is a priority boost eve ry 50 ms (which\nis likely too small of a value, but used here for the example), and thus\nwe at least guarantee that the long-running job will make som e progress,\ngetting boosted to the highest priority every 50 ms and thus g etting to\nrun periodically .\nOf course, the addition of the time period S leads to the obvious ques-\ntion: what should S be set to? John Ousterhout, a well-regarded systems\nresearcher [O11], used to call such values in systems voo-doo constants ,\nbecause they seemed to require some form of black magic to set them cor-\nrectly . Unfortunately , S has that \ufb02avor . If it is set too high, long-running\njobs could starve; too low , and interactive jobs may not get a proper share\nof the CPU.\n8.4 Attempt #3: Better Accounting\nW e now have one more problem to solve: how to prevent gaming of\nour scheduler? The real culprit here, as you might have guess ed, are\nRules 4a and 4b, which let a job retain its priority by relinqu ishing the\nCPU before the time slice expires. So what should we do?\nThe solution here is to perform better accounting of CPU time at each\nlevel of the MLFQ. Instead of forgetting how much of a time sli ce a pro-\ncess used at a given level, the scheduler should keep track; o nce a process\nhas used its allotment, it is demoted to the next priority que ue. Whether\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n78\nSC H E D U L I N G :\nTH E MU LT I -L E V EL FE E D B A C K QU E U E\nQ2\nQ1\nQ0\n0 50 100 150 200\nFigure 8.7: Lower Priority , Longer Quanta\nit uses the time slice in one long burst or many small ones does not matter .\nW e thus rewrite Rules 4a and 4b to the following single rule:\n\u2022 Rule 4: Once a job uses up its time allotment at a given level (re-\ngardless of how many times it has given up the CPU), its priori ty is\nreduced (i.e., it moves down one queue).\nLet\u2019s look at an example. Figure 8.6 shows what happens when a\nworkload tries to game the scheduler with the old Rules 4a and 4b (on\nthe left) as well the new anti-gaming Rule 4. Without any prot ection from\ngaming, a process can issue an I/O just before a time slice end s and thus\ndominate CPU time. With such protections in place, regardle ss of the\nI/O behavior of the process, it slowly moves down the queues, and thus\ncannot gain an unfair share of the CPU.\n8.5 T uning MLFQ And Other Issues\nA few other issues arise with MLFQ scheduling. One big questi on is\nhow to"
  },
  {
    "content": "\ngaming, a process can issue an I/O just before a time slice end s and thus\ndominate CPU time. With such protections in place, regardle ss of the\nI/O behavior of the process, it slowly moves down the queues, and thus\ncannot gain an unfair share of the CPU.\n8.5 T uning MLFQ And Other Issues\nA few other issues arise with MLFQ scheduling. One big questi on is\nhow to parameterize such a scheduler . For example, how many queues\nshould there be? How big should the time slice be per queue? Ho w often\nshould priority be boosted in order to avoid starvation and a ccount for\nchanges in behavior? There are no easy answers to these quest ions, and\nthus only some experience with workloads and subsequent tun ing of the\nscheduler will lead to a satisfactory balance.\nFor example, most MLFQ variants allow for varying time-slic e length\nacross different queues. The high-priority queues are usua lly given short\ntime slices; they are comprised of interactive jobs, after a ll, and thus\nquickly alternating between them makes sense (e.g., 10 or fe wer millisec-\nonds). The low-priority queues, in contrast, contain long- running jobs\nthat are CPU-bound; hence, longer time slices work well (e.g ., 100s of\nms). Figure 8.7 shows an example in which two long-running jobs run\nfor 10 ms at the highest queue, 20 in the middle, and 40 at the lo west.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSC H E D U L I N G :\nTH E MU LT I -L E V EL FE E D B A C K QU E U E 79\nTI P : A V O I D VO O -D O O CO N S TA N T S (O U S T E R H O U T \u2019 S LAW )\nA voiding voo-doo constants is a good idea whenever possible . Unfor-\ntunately , as in the example above, it is often dif\ufb01cult. One c ould try to\nmake the system learn a good value, but that too is not straigh tforward.\nThe frequent result: a con\ufb01guration \ufb01le \ufb01lled with default p arameter val-\nues that a seasoned administrator can tweak when something i sn\u2019t quite\nworking correctly . As you can imagine, these are often left u nmodi\ufb01ed,\nand thus we are left to hope that the defaults work well in the \ufb01 eld. This\ntip brought to you by our old OS professor , John Ousterhout, a nd hence\nwe call it Ousterhout\u2019s Law .\nThe Solaris MLFQ implementation \u2013 the Time-Sharing schedul ing class,\nor TS \u2013 is particularly easy to con\ufb01gure; it provides a set of t ables that\ndetermine exactly how the priority of a process is altered th roughout its\nlifetime, how long each time slice is, and how often to boost t he priority of\na job [AD00]; an administrator can muck with this table in ord er to make\nthe scheduler behave in different ways. Default values for t he table are\n60 queues, with slowly increasing time-slice lengths from 2 0 milliseconds\n(highest priority) to a few hundred milliseconds (lowest), and priorities\nboosted around every 1 second or so.\nOther MLFQ schedulers don\u2019t use a table or the exact rules des cribed\nin this chapter; rather they adjust priorities using mathem atical formu-\nlae. For example, the FreeBSD scheduler (version 4.3) uses a formula to\ncalculate the current priority level of a job, basing it on ho w much CPU\nthe process has used [LM+89]; in addition, usage is decayed o ver time,\nproviding the desired priority boost in a different manner t han described\nherein. See [E95] for an excellent overview of such decay-usage algo-\nrithms and their properties.\nFinally , many schedulers have a few other features that you m ight en-\ncounter . For example, some schedulers reserve the highest p riority levels\nfor operating system work; thus typical user jobs can never o btain the\nhighest levels of priority in the"
  },
  {
    "content": " desired priority boost in a different manner t han described\nherein. See [E95] for an excellent overview of such decay-usage algo-\nrithms and their properties.\nFinally , many schedulers have a few other features that you m ight en-\ncounter . For example, some schedulers reserve the highest p riority levels\nfor operating system work; thus typical user jobs can never o btain the\nhighest levels of priority in the system. Some systems also a llow some\nuser advice to help set priorities; for example, by using the command-li ne\nutility nice you can increase or decrease the priority of a job (somewhat)\nand thus increase or decrease its chances of running at any gi ven time.\nSee the man page for more.\n8.6 MLFQ: Summary\nW e have described a scheduling approach known as the Multi-L evel\nFeedback Queue (MLFQ). Hopefully you can now see why it is cal led\nthat: it has multiple levels of queues, and uses feedback to determine the\npriority of a given job. History is its guide: pay attention t o how jobs\nbehave over time and treat them accordingly .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n80\nSC H E D U L I N G :\nTH E MU LT I -L E V EL FE E D B A C K QU E U E\nTI P : U S E AD V I C E WH E R E PO S S I B L E\nAs the operating system rarely knows what is best for each and every\nprocess of the system, it is often useful to provide interfac es to allow users\nor administrators to provide some hints to the OS. W e often call such\nhints advice, as the OS need not necessarily pay attention to it, but rathe r\nmight take the advice into account in order to make a better de cision.\nSuch hints are useful in many parts of the OS, including the sc heduler\n(e.g., with nice), memory manager (e.g., madvise), and \ufb01le system (e.g.,\nTIP [P+95]).\nThe re\ufb01ned set of MLFQ rules, spread throughout the chapter , are re-\nproduced here for your viewing pleasure:\n\u2022 Rule 1: If Priority(A) > Priority(B), A runs (B doesn\u2019t).\n\u2022 Rule 2: If Priority(A) = Priority(B), A & B run in RR.\n\u2022 Rule 3: When a job enters the system, it is placed at the highest\npriority (the topmost queue).\n\u2022 Rule 4: Once a job uses up its time allotment at a given level (re-\ngardless of how many times it has given up the CPU), its priori ty is\nreduced (i.e., it moves down one queue).\n\u2022 Rule 5: After some time period S, move all the jobs in the system\nto the topmost queue.\nMLFQ is interesting because instead of demanding a priori knowledge\nof the nature of a job, it instead observes the execution of a j ob and pri-\noritizes it accordingly . In this way , it manages to achieve t he best of both\nworlds: it can deliver excellent overall performance (simi lar to SJF/STCF)\nfor short-running interactive jobs, and is fair and makes pr ogress for long-\nrunning CPU-intensive workloads. For this reason, many sys tems, in-\ncluding BSD U N I X derivatives [LM+89, B86], Solaris [M06], and Win-\ndows NT and subsequent Windows operating systems [CS97] use a form\nof MLFQ as their base scheduler .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSC H E D U L I N G :\nTH E MU LT I -L E V EL FE E D B A C K QU E U E 81\nReferences\n[AD00] \u201cMultilevel Feedback Queue Scheduling in Solaris\u201d\nAndrea Arpaci-Dusseau\nA vailable: http://www .cs.wisc.edu/\u02dcremzi/solaris-notes.pdf\nA great short set of notes by one of the authors on the details o f the Solaris scheduler . OK"
  },
  {
    "content": "L E V EL FE E D B A C K QU E U E 81\nReferences\n[AD00] \u201cMultilevel Feedback Queue Scheduling in Solaris\u201d\nAndrea Arpaci-Dusseau\nA vailable: http://www .cs.wisc.edu/\u02dcremzi/solaris-notes.pdf\nA great short set of notes by one of the authors on the details o f the Solaris scheduler . OK, we are\nprobably biased in this description, but the notes are prett y darn good.\n[B86] \u201cThe Design of the U NIX Operating System\u201d\nM.J. Bach\nPrentice-Hall, 1986\nOne of the classic old books on how a real UNIX operating system is built; a de\ufb01nite must-read for kernel\nhackers.\n[C+62] \u201cAn Experimental Time-Sharing System\u201d\nF . J. Corbato, M. M. Daggett, R. C. Daley\nIFIPS 1962\nA bit hard to read, but the source of many of the \ufb01rst ideas in mu lti-level feedback scheduling. Much\nof this later went into Multics, which one could argue was the most in\ufb02uential operating system of all\ntime.\n[CS97] \u201cInside Windows NT\u201d\nHelen Custer and David A. Solomon\nMicrosoft Press, 1997\nThe NT book, if you want to learn about something other than UNIX . Of course, why would you? OK,\nwe\u2019re kidding; you might actually work for Microsoft some da y you know.\n[E95] \u201cAn Analysis of Decay-Usage Scheduling in Multiproce ssors\u201d\nD.H.J. Epema\nSIGMETRICS \u201995\nA nice paper on the state of the art of scheduling back in the mi d 1990s, including a good overview of\nthe basic approach behind decay-usage schedulers.\n[LM+89] \u201cThe Design and Implementation of the 4.3BSD U NIX Operating System\u201d\nS.J. Lef\ufb02er , M.K. McKusick, M.J. Karels, J.S. Quarterman\nAddison-W esley , 1989\nAnother OS classic, written by four of the main people behind BSD. The later versions of this book,\nwhile more up to date, don\u2019t quite match the beauty of this one .\n[M06] \u201cSolaris Internals: Solaris 10 and OpenSolaris Kerne l Architecture\u201d\nRichard McDougall\nPrentice-Hall, 2006\nA good book about Solaris and how it works.\n[O11] \u201cJohn Ousterhout\u2019s Home Page\u201d\nJohn Ousterhout\nA vailable: http://www .stanford.edu/\u02dcouster/\nThe home page of the famous Professor Ousterhout. The two co- authors of this book had the pleasure of\ntaking graduate operating systems from Ousterhout while in graduate school; indeed, this is where the\ntwo co-authors got to know each other , eventually leading to marriage, kids, and even this book. Thus,\nyou really can blame Ousterhout for this entire mess you\u2019re i n.\n[P+95] \u201cInformed Prefetching and Caching\u201d\nR.H. Patterson, G.A. Gibson, E. Ginting, D. Stodolsky , J. Ze lenka\nSOSP \u201995\nA fun paper about some very cool ideas in \ufb01le systems, includi ng how applications can give the OS\nadvice about what \ufb01les it is accessing and how it plans to acce ss them.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n82\nSC H E D U L I N G :\nTH E MU LT I -L E V EL FE E D B A C K QU E U E\nHomework\nThis program, mlfq.py, allows you to see how the MLFQ scheduler\npresented in this chapter behaves. See the README for detail s.\nQuestions\n1. Run a few randomly-generated problems with just two jobs a nd\ntwo queues; compute the MLFQ execution trace for each. Make\nyour life easier by limiting the length of each job and turnin g off\nI/Os.\n2."
  },
  {
    "content": " U E\nHomework\nThis program, mlfq.py, allows you to see how the MLFQ scheduler\npresented in this chapter behaves. See the README for detail s.\nQuestions\n1. Run a few randomly-generated problems with just two jobs a nd\ntwo queues; compute the MLFQ execution trace for each. Make\nyour life easier by limiting the length of each job and turnin g off\nI/Os.\n2. How would you run the scheduler to reproduce each of the exa m-\nples in the chapter?\n3. How would you con\ufb01gure the scheduler parameters to behave just\nlike a round-robin scheduler?\n4. Craft a workload with two jobs and scheduler parameters so that\none job takes advantage of the older Rules 4a and 4b (turned on\nwith the -S \ufb02ag) to game the scheduler and obtain 99% of the CPU\nover a particular time interval.\n5. Given a system with a quantum length of 10 ms in its highest q ueue,\nhow often would you have to boost jobs back to the highest prio rity\nlevel (with the -B \ufb02ag) in order to guarantee that a single long-\nrunning (and potentially-starving) job gets at least 5% of t he CPU?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n9\nScheduling: Proportional Share\nIn this chapter , we\u2019ll examine a different type of scheduler known as a\nproportional-share scheduler , also sometimes referred to as a fair-share\nscheduler . Proportional-share is based around a simple con cept: instead\nof optimizing for turnaround or response time, a scheduler m ight instead\ntry to guarantee that each job obtain a certain percentage of CPU time.\nAn excellent modern example of proportional-share schedul ing is found\nin research by W aldspurger and W eihl [WW94], and is known as lottery\nscheduling; however , the idea is certainly much older [KL88]. The basic\nidea is quite simple: every so often, hold a lottery to determ ine which pro-\ncess should get to run next; processes that should run more of ten should\nbe given more chances to win the lottery . Easy , no? Now , onto t he details!\nBut not before our crux:\nCR U X : H O W TO SH A R E TH E CPU P R O P O RT I O N A L LY\nHow can we design a scheduler to share the CPU in a proportiona l\nmanner? What are the key mechanisms for doing so? How effecti ve are\nthey?\n9.1 Basic Concept: Tickets Represent Y our Share\nUnderlying lottery scheduling is one very basic concept: tickets, which\nare used to represent the share of a resource that a process (o r user or\nwhatever) should receive. The percent of tickets that a proc ess has repre-\nsents its share of the system resource in question.\nLet\u2019s look at an example. Imagine two processes, A and B, and f urther\nthat A has 75 tickets while B has only 25. Thus, what we would li ke is for\nA to receive 75% of the CPU and B the remaining 25%.\nLottery scheduling achieves this probabilistically (but n ot determinis-\ntically) by holding a lottery every so often (say , every time slice). Holding\na lottery is straightforward: the scheduler must know how ma ny total\ntickets there are (in our example, there are 100). The schedu ler then picks\n83\n84 SC H E D U L I N G : P R O P O RT I O N A L SH A R E\nTI P : U S E RA N D O M N E S S\nOne of the most beautiful aspects of lottery scheduling is it s use of ran-\ndomness. When you have to make a decision, using such a randomized\napproach is often a robust and simple way of doing so.\nRandom approaches has at least three advantages over more tr aditional\ndecisions. First, random often avoids strange corner-case behaviors that\na more traditional algorithm may have trouble handling. For example,\nconsider LRU page replacement (studied in more detail in a fu ture chap-\nter on virtual memory); while often a good replacement algor ithm, LRU\nperforms pessim"
  },
  {
    "content": " using such a randomized\napproach is often a robust and simple way of doing so.\nRandom approaches has at least three advantages over more tr aditional\ndecisions. First, random often avoids strange corner-case behaviors that\na more traditional algorithm may have trouble handling. For example,\nconsider LRU page replacement (studied in more detail in a fu ture chap-\nter on virtual memory); while often a good replacement algor ithm, LRU\nperforms pessimally for some cyclic-sequential workloads . Random, on\nthe other hand, has no such worst case.\nSecond, random also is lightweight, requiring little state to track alter-\nnatives. In a traditional fair-share scheduling algorithm , tracking how\nmuch CPU each process has received requires per-process acc ounting,\nwhich must be updated after running each process. Doing so ra ndomly\nnecessitates only the most minimal of per-process state (e. g., the number\nof tickets each has).\nFinally , random can be quite fast. As long as generating a ran dom num-\nber is quick, making the decision is also, and thus random can be used\nin a number of places where speed is required. Of course, the f aster the\nneed, the more random tends towards pseudo-random.\na winning ticket, which is a number from 0 to 99 1 . Assuming A holds\ntickets 0 through 74 and B 75 through 99, the winning ticket si mply de-\ntermines whether A or B runs. The scheduler then loads the sta te of that\nwinning process and runs it.\nHere is an example output of a lottery scheduler \u2019s winning ti ckets:\n63 85 70 39 76 17 29 41 36 39 10 99 68 83 63 62 43 0 49 49\nHere is the resulting schedule:\nA B A A B A A A A A A B A B A A A A A A\nAs you can see from the example, the use of randomness in lotte ry\nscheduling leads to a probabilistic correctness in meeting the desired pro-\nportion, but no guarantee. In our example above, B only gets t o run 4 out\nof 20 time slices (20%), instead of the desired 25% allocatio n. However ,\nthe longer these two jobs compete, the more likely they are to achieve the\ndesired percentages.\n1 Computer Scientists always start counting at 0. It is so odd t o non-computer-types that\nfamous people have felt obliged to write about why we do it thi s way [D82].\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSC H E D U L I N G : P R O P O RT I O N A L SH A R E 85\nTI P : U S E TI C K E T S TO RE P R E S E N T SH A R E S\nOne of the most powerful (and basic) mechanisms in the design of lottery\n(and stride) scheduling is that of the ticket. The ticket is used to represent\na process\u2019s share of the CPU in these examples, but can be appl ied much\nmore broadly . For example, in more recent work on virtual mem ory man-\nagement for hypervisors, W aldspurger shows how tickets can be used to\nrepresent a guest operating system\u2019s share of memory [W02]. Thus, if you\nare ever in need of a mechanism to represent a proportion of ow nership,\nthis concept just might be ... (wait for it) ... the ticket.\n9.2 Ticket Mechanisms\nLottery scheduling also provides a number of mechanisms to m anip-\nulate tickets in different and sometimes useful ways. One wa y is with\nthe concept of ticket currency . Currency allows a user with a set of tick-\nets to allocate tickets among their own jobs in whatever curr ency they\nwould like; the system then automatically converts said cur rency into the\ncorrect global value.\nFor example, assume users A and B have each been given 100 tick ets.\nUser A is running two jobs, A1 and A2, and gives them each 500 ti ckets\n(out of 1000 total) in User A \u2019s own currency . User B is running only 1 job\nand gives it 10 tickets (out of 10 total). The system will conv ert A1\u2019s and\nA2\u2019s allocation from 500 each in A \u2019s currency to 50 each in the global cur-\nrency; similarly , B1\u2019"
  },
  {
    "content": " is running two jobs, A1 and A2, and gives them each 500 ti ckets\n(out of 1000 total) in User A \u2019s own currency . User B is running only 1 job\nand gives it 10 tickets (out of 10 total). The system will conv ert A1\u2019s and\nA2\u2019s allocation from 500 each in A \u2019s currency to 50 each in the global cur-\nrency; similarly , B1\u2019s 10 tickets will be converted to 100 ti ckets. The lottery\nwill then be held over the global ticket currency (200 total) to determine\nwhich job runs.\nUser A -> 500 (A\u2019s currency) to A1 -> 50 (global currency)\n-> 500 (A\u2019s currency) to A2 -> 50 (global currency)\nUser B -> 10 (B\u2019s currency) to B1 -> 100 (global currency)\nAnother useful mechanism is ticket transfer . With transfers, a process\ncan temporarily hand off its tickets to another process. Thi s ability is\nespecially useful in a client/server setting, where a clien t process sends\na message to a server asking it to do some work on the client\u2019s b ehalf.\nT o speed up the work, the client can pass the tickets to the ser ver and\nthus try to maximize the performance of the server while the s erver is\nhandling the client\u2019s request. When \ufb01nished, the server the n transfers the\ntickets back to the client and all is as before.\nFinally , ticket in\ufb02ation can sometimes be a useful technique. With\nin\ufb02ation, a process can temporarily raise or lower the numbe r of tickets\nit owns. Of course, in a competitive scenario with processes that do not\ntrust one another , this makes little sense; one greedy proce ss could give\nitself a vast number of tickets and take over the machine. Rat her , in\ufb02ation\ncan be applied in an environment where a group of processes tr ust one\nanother; in such a case, if any one process knows it needs more CPU time,\nit can boost its ticket value as a way to re\ufb02ect that need to the system, all\nwithout communicating with any other processes.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n86 SC H E D U L I N G : P R O P O RT I O N A L SH A R E\n1 // counter: used to track if we\u2019ve found the winner yet\n2 int counter = 0;\n3\n4 // winner: use some call to a random number generator to\n5 // get a value, between 0 and the total # of tickets\n6 int winner = getrandom(0, totaltickets);\n7\n8 // current: use this to walk through the list of jobs\n9 node_t *current = head;\n10\n11 // loop until the sum of ticket values is > the winner\n12 while (current) {\n13 counter = counter + current->tickets;\n14 if (counter > winner)\n15 break; // found the winner\n16 current = current->next;\n17 }\n18 // \u2019current\u2019 is the winner: schedule it...\nFigure 9.1: Lottery Scheduling Decision Code\n9.3 Implementation\nProbably the most amazing thing about lottery scheduling is the sim-\nplicity of its implementation. All you need is a good random n umber\ngenerator to pick the winning ticket, a data structure to tra ck the pro-\ncesses of the system (e.g., a list), and the total number of ti ckets.\nLet\u2019s assume we keep the processes in a list. Here is an exampl e com-\nprised of three processes, A, B, and C, each with some number o f tickets.\nhead Job:A\nTix:100\nJob:B\nTix:50\nJob:C\nTix:250 NULL\nT o make a scheduling decision, we \ufb01rst have to pick a random nu mber\n(the winner) from the total number of tickets (400) 2 Let\u2019s say we pick the\nnumber 300. Then, we simply traverse the list, with a simple c ounter\nused to help us \ufb01nd the winner (Figure 9.1).\nThe code walks the list of processes, adding each ticket valu e to counter\nuntil the value exceeds winner. Once that is the case,"
  },
  {
    "content": "\ufffd\ufffdrst have to pick a random nu mber\n(the winner) from the total number of tickets (400) 2 Let\u2019s say we pick the\nnumber 300. Then, we simply traverse the list, with a simple c ounter\nused to help us \ufb01nd the winner (Figure 9.1).\nThe code walks the list of processes, adding each ticket valu e to counter\nuntil the value exceeds winner. Once that is the case, the current list el-\nement is the winner . With our example of the winning ticket be ing 300,\nthe following takes place. First, counter is incremented to 100 to ac-\ncount for A \u2019s tickets; because 100 is less than 300, the loop c ontinues.\nThen counter would be updated to 150 (B\u2019s tickets), still less than 300\nand thus again we continue. Finally , counter is updated to 400 (clearly\ngreater than 300), and thus we break out of the loop with current point-\ning at C (the winner).\nT o make this process most ef\ufb01cient, it might generally be bes t to or-\nganize the list in sorted order , from the highest number of ti ckets to the\n2 Surprisingly , as pointed out by Bj \u00a8 orn Lindberg, this can be challenging to do\ncorrectly; for more details, see http://stackoverflow.com/questions/2509679/\nhow-to-generate-a-random-number-from-within-a-range.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSC H E D U L I N G : P R O P O RT I O N A L SH A R E 87\n1 10 100 1000\n0.0\n0.2\n0.4\n0.6\n0.8\n1.0\nJob Length\nUnfairness (Average)\nFigure 9.2: Lottery Fairness Study\nlowest. The ordering does not affect the correctness of the a lgorithm;\nhowever , it does ensure in general that the fewest number of l ist itera-\ntions are taken, especially if there are a few processes that possess most\nof the tickets.\n9.4 An Example\nT o make the dynamics of lottery scheduling more understanda ble, we\nnow perform a brief study of the completion time of two jobs co mpeting\nagainst one another , each with the same number of tickets (10 0) and same\nrun time ( R, which we will vary).\nIn this scenario, we\u2019d like for each job to \ufb01nish at roughly th e same\ntime, but due to the randomness of lottery scheduling, somet imes one\njob \ufb01nishes before the other . T o quantify this difference, w e de\ufb01ne a\nsimple unfairness metric , U which is simply the time the \ufb01rst job com-\npletes divided by the time that the second job completes. For example,\nif R = 10, and the \ufb01rst job \ufb01nishes at time 10 (and the second job at 20),\nU = 10\n20 = 0. 5. When both jobs \ufb01nish at nearly the same time, U will be\nquite close to 1. In this scenario, that is our goal: a perfect ly fair scheduler\nwould achieve U = 1.\nFigure 9.2 plots the average unfairness as the length of the two jobs\n(R) is varied from 1 to 1000 over thirty trials (results are gene rated via the\nsimulator provided at the end of the chapter). As you can see f rom the\ngraph, when the job length is not very long, average unfairne ss can be\nquite severe. Only as the jobs run for a signi\ufb01cant number of t ime slices\ndoes the lottery scheduler approach the desired outcome.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n88 SC H E D U L I N G : P R O P O RT I O N A L SH A R E\n9.5 How T o Assign Tickets?\nOne problem we have not addressed with lottery scheduling is : how\nto assign tickets to jobs? This problem is a tough one, becaus e of course\nhow the system behaves is strongly dependent on how tickets a re allo-\ncated. One"
  },
  {
    "content": "EA S Y\nPI E C E S\n88 SC H E D U L I N G : P R O P O RT I O N A L SH A R E\n9.5 How T o Assign Tickets?\nOne problem we have not addressed with lottery scheduling is : how\nto assign tickets to jobs? This problem is a tough one, becaus e of course\nhow the system behaves is strongly dependent on how tickets a re allo-\ncated. One approach is to assume that the users know best; in s uch a\ncase, each user is handed some number of tickets, and a user ca n allocate\ntickets to any jobs they run as desired. However , this soluti on is a non-\nsolution: it really doesn\u2019t tell you what to do. Thus, given a set of jobs,\nthe \u201cticket-assignment problem\u201d remains open.\n9.6 Why Not Deterministic?\nY ou might also be wondering: why use randomness at all? As we s aw\nabove, while randomness gets us a simple (and approximately correct)\nscheduler , it occasionally will not deliver the exact right proportions, es-\npecially over short time scales. For this reason, W aldspurg er invented\nstride scheduling , a deterministic fair-share scheduler [W95].\nStride scheduling is also straightforward. Each job in the s ystem has\na stride, which is inverse in proportion to the number of tick ets it has. In\nour example above, with jobs A, B, and C, with 100, 50, and 250 t ickets,\nrespectively , we can compute the stride of each by dividing s ome large\nnumber by the number of tickets each process has been assigne d. For\nexample, if we divide 10,000 by each of those ticket values, w e obtain\nthe following stride values for A, B, and C: 100, 200, and 40. W e call\nthis value the stride of each process; every time a process runs, we will\nincrement a counter for it (called its pass value) by its stride to track its\nglobal progress.\nThe scheduler then uses the stride and pass to determine whic h pro-\ncess should run next. The basic idea is simple: at any given ti me, pick\nthe process to run that has the lowest pass value so far; when y ou run\na process, increment its pass counter by its stride. A pseudo code imple-\nmentation is provided by W aldspurger [W95]:\ncurrent = remove_min(queue); // pick client with minimum pa ss\nschedule(current); // use resource for quantum\ncurrent->pass += current->stride; // compute next pass using stride\ninsert(queue, current); // put back into the queue\nIn our example, we start with three processes (A, B, and C), wi th stride\nvalues of 100, 200, and 40, and all with pass values initially at 0. Thus, at\n\ufb01rst, any of the processes might run, as their pass values are equally low .\nAssume we pick A (arbitrarily; any of the processes with equa l low pass\nvalues can be chosen). A runs; when \ufb01nished with the time slic e, we\nupdate its pass value to 100. Then we run B, whose pass value is then\nset to 200. Finally , we run C, whose pass value is incremented to 40. At\nthis point, the algorithm will pick the lowest pass value, wh ich is C\u2019s, and\nrun it, updating its pass to 80 (C\u2019s stride is 40, as you recall ). Then C will\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSC H E D U L I N G : P R O P O RT I O N A L SH A R E 89\nPass(A) Pass(B) Pass(C) Who Runs?\n(stride=100) (stride=200) (stride=40)\n0 0 0 A\n100 0 0 B\n100 200 0 C\n100 200 40 C\n100 200 80 C\n100 200 120 A\n200 200 120 C\n200 200 160 C\n200 200 200 ...\nT able 9.1: Stride Scheduling: A T race\nrun again (still the lowest pass value), raising its pass to 1 20. A will run\nnow , updating its pass to 200 (now equal to B\u2019"
  },
  {
    "content": "stride=40)\n0 0 0 A\n100 0 0 B\n100 200 0 C\n100 200 40 C\n100 200 80 C\n100 200 120 A\n200 200 120 C\n200 200 160 C\n200 200 200 ...\nT able 9.1: Stride Scheduling: A T race\nrun again (still the lowest pass value), raising its pass to 1 20. A will run\nnow , updating its pass to 200 (now equal to B\u2019s). Then C will ru n twice\nmore, updating its pass to 160 then 200. At this point, all pas s values are\nequal again, and the process will repeat, ad in\ufb01nitum. T able 9.1 traces the\nbehavior of the scheduler over time.\nAs we can see from the table, C ran \ufb01ve times, A twice, and B just once,\nexactly in proportion to their ticket values of 250, 100, and 50. Lottery\nscheduling achieves the proportions probabilistically ov er time; stride\nscheduling gets them exactly right at the end of each schedul ing cycle.\nSo you might be wondering: given the precision of stride sche duling,\nwhy use lottery scheduling at all? W ell, lottery scheduling has one nice\nproperty that stride scheduling does not: no global state. I magine a new\njob enters in the middle of our stride scheduling example abo ve; what\nshould its pass value be? Should it be set to 0? If so, it will mo nopolize\nthe CPU. With lottery scheduling, there is no global state pe r process;\nwe simply add a new process with whatever tickets it has, upda te the\nsingle global variable to track how many total tickets we hav e, and go\nfrom there. In this way , lottery makes it much easier to incor porate new\nprocesses in a sensible manner .\n9.7 Summary\nW e have introduced the concept of proportional-share sched uling and\nbrie\ufb02y discussed two implementations: lottery and stride s cheduling.\nLottery uses randomness in a clever way to achieve proportio nal share;\nstride does so deterministically . Although both are concep tually inter-\nesting, they have not achieved wide-spread adoption as CPU s chedulers\nfor a variety of reasons. One is that such approaches do not pa rticularly\nmesh well with I/O [AC97]; another is that they leave open the hard prob-\nlem of ticket assignment, i.e., how do you know how many ticke ts your\nbrowser should be allocated? General-purpose schedulers ( such as the\nMLFQ we discussed previously , and other similar Linux sched ulers) do\nso more gracefully and thus are more widely deployed.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n90 SC H E D U L I N G : P R O P O RT I O N A L SH A R E\nAs a result, proportional-share schedulers are more useful in domains\nwhere some of these problems (such as assignment of shares) a re rela-\ntively easy to solve. For example, in a virtualized data center , where you\nmight like to assign one-quarter of your CPU cycles to the Win dows VM\nand the rest to your base Linux installation, proportional s haring can be\nsimple and effective. See W aldspurger [W02] for further det ails on how\nsuch a scheme is used to proportionally share memory in VMW ar e\u2019s ESX\nServer .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSC H E D U L I N G : P R O P O RT I O N A L SH A R E 91\nReferences\n[AC97] \u201cExtending Proportional-Share Scheduling to a Netw ork of W orkstations\u201d\nAndrea C. Arpaci-Dusseau and David E. Culler\nPDPT A \u201997, June 1997\nA paper by one of the authors on how to extend proportional-sh are scheduling to work better in a\nclustered environment.\n[D82] \u201cWhy Numbering Should Start At Zero\u201d\nEdsger Dijkstra, August 1982\nhttp://www .cs.utexas.edu/users/EWD/ew"
  },
  {
    "content": "rea C. Arpaci-Dusseau and David E. Culler\nPDPT A \u201997, June 1997\nA paper by one of the authors on how to extend proportional-sh are scheduling to work better in a\nclustered environment.\n[D82] \u201cWhy Numbering Should Start At Zero\u201d\nEdsger Dijkstra, August 1982\nhttp://www .cs.utexas.edu/users/EWD/ewd08xx/EWD831.PDF\nA short note from E. Dijkstra, one of the pioneers of computer science. We\u2019ll be hearing much more\non this guy in the section on Concurrency. In the meanwhile, e njoy this note, which includes this\nmotivating quote: \u201cOne of my colleagues \u2013 not a computing sci entist \u2013 accused a number of younger\ncomputing scientists of \u2019pedantry\u2019 because they started nu mbering at zero.\u201d The note explains why\ndoing so is logical.\n[KL88] \u201cA Fair Share Scheduler \u201d\nJ. Kay and P . Lauder\nCACM, V olume 31 Issue 1, January 1988\nAn early reference to a fair-share scheduler .\n[WW94] \u201cLottery Scheduling: Flexible Proportional-Share Resource Management\u201d\nCarl A. W aldspurger and William E. W eihl\nOSDI \u201994, November 1994\nThe landmark paper on lottery scheduling that got the system s community re-energized about schedul-\ning, fair sharing, and the power of simple randomized algori thms.\n[W95] \u201cLottery and Stride Scheduling: Flexible\nProportional-Share Resource Management\u201d\nCarl A. W aldspurger\nPh.D. Thesis, MIT , 1995\nThe award-winning thesis of Waldspurger\u2019s that outlines lo ttery and stride scheduling. If you\u2019re think-\ning of writing a Ph.D. dissertation at some point, you should always have a good example around, to\ngive you something to strive for: this is such a good one.\n[W02] \u201cMemory Resource Management in VMware ESX Server \u201d\nCarl A. W aldspurger\nOSDI \u201902, Boston, Massachusetts\nThe paper to read about memory management in VMMs (a.k.a., hy pervisors). In addition to being\nrelatively easy to read, the paper contains numerous cool id eas about this new type of VMM-level\nmemory management.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n92 SC H E D U L I N G : P R O P O RT I O N A L SH A R E\nHomework\nThis program, lottery.py, allows you to see how a lottery scheduler\nworks. See the README for details.\nQuestions\n1. Compute the solutions for simulations with 3 jobs and rand om seeds\nof 1, 2, and 3.\n2. Now run with two speci\ufb01c jobs: each of length 10, but one (jo b 0)\nwith just 1 ticket and the other (job 1) with 100 (e.g., -l 10:1,10:100).\nWhat happens when the number of tickets is so imbalanced? Wil l\njob 0 ever run before job 1 completes? How often? In general, w hat\ndoes such a ticket imbalance do to the behavior of lottery sch edul-\ning?\n3. When running with two jobs of length 100 and equal ticket al loca-\ntions of 100 ( -l 100:100,100:100), how unfair is the scheduler?\nRun with some different random seeds to determine the (proba bilis-\ntic) answer; let unfairness be determined by how much earlie r one\njob \ufb01nishes than the other .\n4. How does your answer to the previous question change as the quan-\ntum size ( -q) gets larger?\n5. Can you make a version of the graph that is found in the chapt er?\nWhat else would be worth exploring? How would the graph look\nwith a stride scheduler?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n10\nMultiprocessor Scheduling (Advanced)\nThis chapter will introduce the basics"
  },
  {
    "content": "5. Can you make a version of the graph that is found in the chapt er?\nWhat else would be worth exploring? How would the graph look\nwith a stride scheduler?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n10\nMultiprocessor Scheduling (Advanced)\nThis chapter will introduce the basics of multiprocessor scheduling . As\nthis topic is relatively advanced, it may be best to cover it after you have\nstudied the topic of concurrency in some detail (i.e., the se cond major\n\u201ceasy piece\u201d of the book).\nAfter years of existence only in the high-end of the computin g spec-\ntrum, multiprocessor systems are increasingly commonplace, and have\nfound their way into desktop machines, laptops, and even mob ile de-\nvices. The rise of the multicore processor , in which multiple CPU cores\nare packed onto a single chip, is the source of this prolifera tion; these\nchips have become popular as computer architects have had a d if\ufb01cult\ntime making a single CPU much faster without using (way) too m uch\npower . And thus we all now have a few CPUs available to us, whic h is a\ngood thing, right?\nOf course, there are many dif\ufb01culties that arise with the arr ival of more\nthan a single CPU. A primary one is that a typical application (i.e., some C\nprogram you wrote) only uses a single CPU; adding more CPUs do es not\nmake that single application run faster . T o remedy this prob lem, you\u2019ll\nhave to rewrite your application to run in parallel, perhaps using threads\n(as discussed in great detail in the second piece of this book ). Multi-\nthreaded applications can spread work across multiple CPUs and thus\nrun faster when given more CPU resources.\nAS I D E : AD VA N C E D CH A P T E R S\nAdvanced chapters require material from a broad swath of the book to\ntruly understand, while logically \ufb01tting into a section tha t is earlier than\nsaid set of prerequisite materials. For example, this chapt er on multipro-\ncessor scheduling makes much more sense if you\u2019ve \ufb01rst read t he middle\npiece on concurrency; however , it logically \ufb01ts into the par t of the book\non virtualization (generally) and CPU scheduling (speci\ufb01c ally). Thus, it\nis recommended such chapters be covered out of order; in this case, after\nthe second piece of the book.\n93\n94 MU LT I P R O C E S S O R SC H E D U L I N G (A D VA N C E D)\nMemory\nCPU\nCache\nFigure 10.1: Single CPU With Cache\nBeyond applications, a new problem that arises for the opera ting sys-\ntem is (not surprisingly!) that of multiprocessor scheduling . Thus far\nwe\u2019ve discussed a number of principles behind single-proce ssor schedul-\ning; how can we extend those ideas to work on multiple CPUs? Wh at\nnew problems must we overcome? And thus, our problem:\nCR U X : H O W TO SC H E D U L E JO B S ON MU LT I P L E CPU S\nHow should the OS schedule jobs on multiple CPUs? What new pro b-\nlems arise? Do the same old techniques work, or are new ideas r equired?\n10.1 Background: Multiprocessor Architecture\nT o understand the new issues surrounding multiprocessor sc hedul-\ning, we have to understand a new and fundamental difference b etween\nsingle-CPU hardware and multi-CPU hardware. This differen ce centers\naround the use of hardware caches (e.g., Figure 10.1), and exactly how\ndata is shared across multiple processors. W e now discuss th is issue fur-\nther , at a high level. Details are available elsewhere [CSG9 9], in particular\nin an upper-level or perhaps graduate computer architectur e course.\nIn a system with a single CPU, there are a hierarchy of hardware\ncaches that in general help the processor run programs faster . Cach es\nare small, fast memories that (in general) hold copies of popular data that\nis found in the main memory of the system. Main memory , in cont rast,\nholds all of the data, but access"
  },
  {
    "content": " [CSG9 9], in particular\nin an upper-level or perhaps graduate computer architectur e course.\nIn a system with a single CPU, there are a hierarchy of hardware\ncaches that in general help the processor run programs faster . Cach es\nare small, fast memories that (in general) hold copies of popular data that\nis found in the main memory of the system. Main memory , in cont rast,\nholds all of the data, but access to this larger memory is slower . By kee p-\ning frequently accessed data in a cache, the system can make t he large,\nslow memory appear to be a fast one.\nAs an example, consider a program that issues an explicit loa d instruc-\ntion to fetch a value from memory , and a simple system with onl y a single\nCPU; the CPU has a small cache (say 64 KB) and a large main memor y .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nMU LT I P R O C E S S O R SC H E D U L I N G (A D VA N C E D) 95\nMemory\nCPU CPU\nCache Cache\nBus\nFigure 10.2: T wo CPUs With Caches Sharing Memory\nThe \ufb01rst time a program issues this load, the data resides in m ain mem-\nory , and thus takes a long time to fetch (perhaps in the tens of nanosec-\nonds, or even hundreds). The processor , anticipating that t he data may\nbe reused, puts a copy of the loaded data into the CPU cache. If the pro-\ngram later fetches this same data item again, the CPU \ufb01rst che cks for it in\nthe cache; because it \ufb01nds it there, the data is fetched much m ore quickly\n(say , just a few nanoseconds), and thus the program runs fast er .\nCaches are thus based on the notion of locality, of which there are\ntwo kinds: temporal locality and spatial locality . The idea behind tem-\nporal locality is that when a piece of data is accessed, it is l ikely to be\naccessed again in the near future; imagine variables or even instructions\nthemselves being accessed over and over again in a loop. The i dea be-\nhind spatial locality is that if a program accesses a data ite m at address\nx, it is likely to access data items near x as well; here, think of a program\nstreaming through an array , or instructions being executed one after the\nother . Because locality of these types exist in many program s, hardware\nsystems can make good guesses about which data to put in a cach e and\nthus work well.\nNow for the tricky part: what happens when you have multiple p ro-\ncessors in a single system, with a single shared main memory , as we see\nin Figure 10.2?\nAs it turns out, caching with multiple CPUs is much more compl i-\ncated. Imagine, for example, that a program running on CPU 1 r eads\na data item (with value D) at address A; because the data is not in the\ncache on CPU 1, the system fetches it from main memory , and get s the\nvalue D. The program then modi\ufb01es the value at address A, just updat-\ning its cache with the new value D\u2032; writing the data through all the way\nto main memory is slow , so the system will (usually) do that la ter . Then\nassume the OS decides to stop running the program and move it t o CPU\n2. The program then re-reads the value at address A; there is no such data\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n96 MU LT I P R O C E S S O R SC H E D U L I N G (A D VA N C E D)\nCPU 2\u2019s cache, and thus the system fetches the value from main memory ,\nand gets the old value D instead of the correct value D\u2032. Oops!\nThis general problem is called the problem of cache coherence , and\nthere is a vast research literature that describes many diff erent subtleties\ninvolved with solving the problem [SHW11]. Here, we will ski p all of the\nnuance and make some major points; take a computer architect ure"
  },
  {
    "content": " 2\u2019s cache, and thus the system fetches the value from main memory ,\nand gets the old value D instead of the correct value D\u2032. Oops!\nThis general problem is called the problem of cache coherence , and\nthere is a vast research literature that describes many diff erent subtleties\ninvolved with solving the problem [SHW11]. Here, we will ski p all of the\nnuance and make some major points; take a computer architect ure class\n(or three) to learn more.\nThe basic solution is provided by the hardware: by monitorin g mem-\nory accesses, hardware can ensure that basically the \u201cright thing\u201d hap-\npens and that the view of a single shared memory is preserved. One way\nto do this on a bus-based system (as described above) is to use an old\ntechnique known as bus snooping [G83]; each cache pays attention to\nmemory updates by observing the bus that connects them to mai n mem-\nory . When a CPU then sees an update for a data item it holds in it s cache,\nit will notice the change and either invalidate its copy (i.e., remove it\nfrom its own cache) or update it (i.e., put the new value into its cache\ntoo). W rite-back caches, as hinted at above, make this more c omplicated\n(because the write to main memory isn\u2019t visible until later) , but you can\nimagine how the basic scheme might work.\n10.2 Don\u2019t Forget Synchronization\nGiven that the caches do all of this work to provide coherence , do pro-\ngrams (or the OS itself) have to worry about anything when the y access\nshared data? The answer , unfortunately , is yes, and is docum ented in\ngreat detail in the second piece of this book on the topic of co ncurrency .\nWhile we won\u2019t get into the details here, we\u2019ll sketch/revie w some of the\nbasic ideas here (assuming you\u2019re familiar with concurrenc y).\nWhen accessing (and in particular , updating) shared data it ems or\nstructures across CPUs, mutual exclusion primitives (such as locks) should\nlikely be used to guarantee correctness (other approaches, such as build-\ning lock-free data structures, are complex and only used on occasion;\nsee the chapter on deadlock in the piece on concurrency for de tails). For\nexample, assume we have a shared queue being accessed on mult iple\nCPUs concurrently . Without locks, adding or removing eleme nts from\nthe queue concurrently will not work as expected, even with t he under-\nlying coherence protocols; one needs locks to atomically up date the data\nstructure to its new state.\nT o make this more concrete, imagine this code sequence, whic h is used\nto remove an element from a shared linked list, as we see in Fig ure 10.3.\nImagine if threads on two CPUs enter this routine at the same t ime. If\nThread 1 executes the \ufb01rst line, it will have the current valu e of head\nstored in its tmp variable; if Thread 2 then executes the \ufb01rst line as well,\nit also will have the same value of head stored in its own private tmp\nvariable ( tmp is allocated on the stack, and thus each thread will have\nits own private storage for it). Thus, instead of each thread removing\nan element from the head of the list, each thread will try to re move the\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nMU LT I P R O C E S S O R SC H E D U L I N G (A D VA N C E D) 97\n1 typedef struct __Node_t {\n2 int value;\n3 struct __Node_t *next;\n4 } Node_t;\n5\n6 int List_Pop() {\n7 Node_t *tmp = head; // remember old head ...\n8 int value = head->value; // ... and its value\n9 head = head->next; // advance head to next pointer\n10 free(tmp); // free old head\n11 return value; // return value at head\n12 }\nFigure 10.3: Simple List Delete Code\nsame head element, leading to all sorts of problems (such as a n attempted\ndouble free of the head element at line 4, as well as potential"
  },
  {
    "content": " head; // remember old head ...\n8 int value = head->value; // ... and its value\n9 head = head->next; // advance head to next pointer\n10 free(tmp); // free old head\n11 return value; // return value at head\n12 }\nFigure 10.3: Simple List Delete Code\nsame head element, leading to all sorts of problems (such as a n attempted\ndouble free of the head element at line 4, as well as potential ly returning\nthe same data value twice).\nThe solution, of course, is to make such routines correct via lock-\ning. In this case, allocating a simple mutex (e.g., pthread\nmutex t\nm;) and then adding a lock(&m) at the beginning of the routine and\nan unlock(&m) at the end will solve the problem, ensuring that the code\nwill execute as desired. Unfortunately , as we will see, such an approach is\nnot without problems, in particular with regards to perform ance. Speci\ufb01-\ncally , as the number of CPUs grows, access to a synchronized s hared data\nstructure becomes quite slow .\n10.3 One Final Issue: Cache Af\ufb01nity\nOne \ufb01nal issue arises in building a multiprocessor cache sch eduler ,\nknown as cache af\ufb01nity . This notion is simple: a process, when run on a\nparticular CPU, builds up a fair bit of state in the caches (an d TLBs) of the\nCPU. The next time the process runs, it is often advantageous to run it on\nthe same CPU, as it will run faster if some of its state is alrea dy present in\nthe caches on that CPU. If, instead, one runs a process on a dif ferent CPU\neach time, the performance of the process will be worse, as it will have to\nreload the state each time it runs (note it will run correctly on a different\nCPU thanks to the cache coherence protocols of the hardware) . Thus, a\nmultiprocessor scheduler should consider cache af\ufb01nity wh en making its\nscheduling decisions, perhaps preferring to keep a process on the same\nCPU if at all possible.\n10.4 Single-Queue Scheduling\nWith this background in place, we now discuss how to build a sc hed-\nuler for a multiprocessor system. The most basic approach is to simply\nreuse the basic framework for single processor scheduling, by putting all\njobs that need to be scheduled into a single queue; we call thi s single-\nqueue multiprocessor scheduling or SQMS for short. This approach\nhas the advantage of simplicity; it does not require much wor k to take an\nexisting policy that picks the best job to run next and adapt i t to work on\nmore than one CPU (where it might pick the best two jobs to run, if there\nare two CPUs, for example).\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n98 MU LT I P R O C E S S O R SC H E D U L I N G (A D VA N C E D)\nHowever , SQMS has obvious shortcomings. The \ufb01rst problem is a lack\nof scalability. T o ensure the scheduler works correctly on multiple CPUs,\nthe developers will have inserted some form of locking into the code, as\ndescribed above. Locks ensure that when SQMS code accesses t he single\nqueue (say , to \ufb01nd the next job to run), the proper outcome ari ses.\nLocks, unfortunately , can greatly reduce performance, par ticularly as\nthe number of CPUs in the systems grows [A91]. As contention f or such\na single lock increases, the system spends more and more time in lock\noverhead and less time doing the work the system should be doi ng (note:\nit would be great to include a real measurement of this in here someday).\nThe second main problem with SQMS is cache af\ufb01nity . For examp le,\nlet us assume we have \ufb01ve jobs to run ( A, B, C, D, E) and four processors.\nOur scheduling queue thus looks like this:\nQueue A B C D E NULL\nOver time, assuming each job runs for a time slice and then ano ther\njob is chosen, here is a possible job schedule across CPUs:\nCPU 3\nCPU 2\nCPU 1\nCPU 0\nD C B A E\nC"
  },
  {
    "content": " examp le,\nlet us assume we have \ufb01ve jobs to run ( A, B, C, D, E) and four processors.\nOur scheduling queue thus looks like this:\nQueue A B C D E NULL\nOver time, assuming each job runs for a time slice and then ano ther\njob is chosen, here is a possible job schedule across CPUs:\nCPU 3\nCPU 2\nCPU 1\nCPU 0\nD C B A E\nC B A E D\nB A E D C\nA E D C B\n ... (repeat) ...\n ... (repeat) ...\n ... (repeat) ...\n ... (repeat) ...\nBecause each CPU simply picks the next job to run from the glob ally-\nshared queue, each job ends up bouncing around from CPU to CPU , thus\ndoing exactly the opposite of what would make sense from the s tand-\npoint of cache af\ufb01nity .\nT o handle this problem, most SQMS schedulers include some ki nd of\naf\ufb01nity mechanism to try to make it more likely that process w ill continue\nto run on the same CPU if possible. Speci\ufb01cally , one might pro vide af\ufb01n-\nity for some jobs, but move others around to balance load. For example,\nimagine the same \ufb01ve jobs scheduled as follows:\nCPU 3\nCPU 2\nCPU 1\nCPU 0\nD D D D E\nC C C E C\nB B E B B\nA E A A A\n ... (repeat) ...\n ... (repeat) ...\n ... (repeat) ...\n ... (repeat) ...\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nMU LT I P R O C E S S O R SC H E D U L I N G (A D VA N C E D) 99\nIn this arrangement, jobs A through D are not moved across proces-\nsors, with only job E migrating from CPU to CPU, thus preserving af\ufb01n-\nity for most. Y ou could then decide to migrate a different job the next\ntime through, thus achieving some kind of af\ufb01nity fairness a s well. Im-\nplementing such a scheme, however , can be complex.\nThus, we can see the SQMS approach has its strengths and weak-\nnesses. It is straightforward to implement given an existin g single-CPU\nscheduler , which by de\ufb01nition has only a single queue. Howev er , it does\nnot scale well (due to synchronization overheads), and it do es not readily\npreserve cache af\ufb01nity .\n10.5 Multi-Queue Scheduling\nBecause of the problems caused in single-queue schedulers, some sys-\ntems opt for multiple queues, e.g., one per CPU. W e call this a pproach\nmulti-queue multiprocessor scheduling (or MQMS).\nIn MQMS, our basic scheduling framework consists of multipl e schedul-\ning queues. Each queue will likely follow a particular sched uling disci-\npline, such as round robin, though of course any algorithm ca n be used.\nWhen a job enters the system, it is placed on exactly one sched uling\nqueue, according to some heuristic (e.g., random, or pickin g one with\nfewer jobs than others). Then it is scheduled essentially in dependently ,\nthus avoiding the problems of information sharing and synch ronization\nfound in the single-queue approach.\nFor example, assume we have a system where there are just two C PUs\n(labeled CPU 0 and CPU 1), and some number of jobs enter the sys tem:\nA, B, C, and D for example. Given that each CPU has a scheduling queue\nnow , the OS has to decide into which queue to place each job. It might do\nsomething like this:\nQ0 A C Q1 B D\nDepending on the queue scheduling policy , each CPU now has tw o\njobs to choose from when deciding what should run. For exampl e, with\nround robin , the system might produce a schedule that looks like this:\nCPU 1\nCPU 0 A A C C A A C C A A C C\nB B D D B B D D B B D D  ... \n ... \nMQMS has a distinct advantage of SQMS in that it should be inhe r-\nently more scalable."
  },
  {
    "content": " each CPU now has tw o\njobs to choose from when deciding what should run. For exampl e, with\nround robin , the system might produce a schedule that looks like this:\nCPU 1\nCPU 0 A A C C A A C C A A C C\nB B D D B B D D B B D D  ... \n ... \nMQMS has a distinct advantage of SQMS in that it should be inhe r-\nently more scalable. As the number of CPUs grows, so too does t he num-\nber of queues, and thus lock and cache contention should not b ecome a\ncentral problem. In addition, MQMS intrinsically provides cache af\ufb01nity;\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n100 MU LT I P R O C E S S O R SC H E D U L I N G (A D VA N C E D)\njobs stay on the same CPU and thus reap the advantage of reusin g cached\ncontents therein.\nBut, if you\u2019ve been paying attention, you might see that we ha ve a new\nproblem, which is fundamental in the multi-queue based appr oach: load\nimbalance. Let\u2019s assume we have the same set up as above (four jobs,\ntwo CPUs), but then one of the jobs (say C) \ufb01nishes. W e now have the\nfollowing scheduling queues:\nQ0 A Q1 B D\nIf we then run our round-robin policy on each queue of the syst em, we\nwill see this resulting schedule:\nCPU 1\nCPU 0 A A A A A A A A A A A A\nB B D D B B D D B B D D  ... \n ... \nAs you can see from this diagram, A gets twice as much CPU as B and\nD, which is not the desired outcome. Even worse, let\u2019s imagine that both\nA and C \ufb01nish, leaving just jobs B and D in the system. The scheduling\nqueues will look like this:\nQ0 Q1 B D\nAs a result, CPU 0 will be left idle! (insert dramatic and sinister music here)\nAnd hence our CPU usage timeline looks sad:\nCPU 0\nCPU 1\nB B D D B B D D B B D D  ... \nSo what should a poor multi-queue multiprocessor scheduler do? How\ncan we overcome the insidious problem of load imbalance and d efeat the\nevil forces of ... the Decepticons 1? How do we stop asking questions that\nare hardly relevant to this otherwise wonderful book?\n1 Little known fact is that the home planet of Cybertron was des troyed by bad CPU\nscheduling decisions. And now let that be the \ufb01rst and last re ference to T ransformers in this\nbook, for which we sincerely apologize.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nMU LT I P R O C E S S O R SC H E D U L I N G (A D VA N C E D) 101\nCR U X : H O W TO DE A L WI T H LO A D IM B A L A N C E\nHow should a multi-queue multiprocessor scheduler handle l oad im-\nbalance, so as to better achieve its desired scheduling goal s?\nThe obvious answer to this query is to move jobs around, a tech nique\nwhich we (once again) refer to as migration. By migrating a job from one\nCPU to another , true load balance can be achieved.\nLet\u2019s look at a couple of examples to add some clarity . Once ag ain, we\nhave a situation where one CPU is idle and the other has some jo bs.\nQ0 Q1 B D\nIn this case, the desired migration is easy to understand: th e OS should\nsimply move one of B or D to CPU 0. The result of this single job migra-\ntion is evenly balanced load and everyone is happy .\nA more tricky case arises in our earlier example, where A was left\nalone on CPU 0 and B and D were alternating on CPU 1:\nQ0 A Q1 B D\nIn this case, a single migration does not solve the problem. W hat\nwould you do in this case? The answer , alas, is continuous mig ration"
  },
  {
    "content": " one of B or D to CPU 0. The result of this single job migra-\ntion is evenly balanced load and everyone is happy .\nA more tricky case arises in our earlier example, where A was left\nalone on CPU 0 and B and D were alternating on CPU 1:\nQ0 A Q1 B D\nIn this case, a single migration does not solve the problem. W hat\nwould you do in this case? The answer , alas, is continuous mig ration\nof one or more jobs. One possible solution is to keep switchin g jobs, as\nwe see in the following timeline. In the \ufb01gure, \ufb01rst A is alone on CPU 0,\nand B and D alternate on CPU 1. After a few time slices, B is moved to\ncompete with A on CPU 0, while D enjoys a few time slices alone on CPU\n1. And thus load is balanced:\nCPU 0\nCPU 1\nA A A A B A B A B B B B\nB D B D D D D D A D A D  ... \n ... \nOf course, many other possible migration patterns exist. Bu t now for\nthe tricky part: how should the system decide to enact such a m igration?\nOne basic approach is to use a technique known as work stealing\n[FLR98]. With a work-stealing approach, a (source) queue th at is low\non jobs will occasionally peek at another (target) queue, to see how full\nit is. If the target queue is (notably) more full than the sour ce queue, the\nsource will \u201csteal\u201d one or more jobs from the target to help ba lance load.\nOf course, there is a natural tension in such an approach. If y ou look\naround at other queues too often, you will suffer from high ov erhead and\nhave trouble scaling, which was the entire purpose of implem enting the\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n102 MU LT I P R O C E S S O R SC H E D U L I N G (A D VA N C E D)\nmultiple queue scheduling in the \ufb01rst place! If, on the other hand, you\ndon\u2019t look at other queues very often, you are in danger of suf fering from\nsevere load balances. Finding the right threshold remains, as is common\nin system policy design, a black art.\n10.6 Linux Multiprocessor Schedulers\nInterestingly , in the Linux community , no common solution h as ap-\nproached to building a multiprocessor scheduler . Over time , three dif-\nferent schedulers arose: the O(1) scheduler , the Completel y Fair Sched-\nuler (CFS), and the BF Scheduler (BFS) 2 . See Meehean\u2019s dissertation for\nan excellent overview of the strengths and weaknesses of sai d schedulers\n[M11]; here we just summarize a few of the basics.\nBoth O(1) and CFS uses multiple queues, whereas BFS uses a sin gle\nqueue, showing that both approaches can be successful. Of co urse, there\nare many other details which separate these schedulers. For example, the\nO(1) scheduler is a priority-based scheduler (similar to th e MLFQ dis-\ncussed before), changing a process\u2019s priority over time and then schedul-\ning those with highest priority in order to meet various sche duling objec-\ntives; interactivity is a particular focus. CFS, in contras t, is a deterministic\nproportional-share approach (more like Stride scheduling , as discussed\nearlier). BFS, the only single-queue approach among the thr ee, is also\nproportional-share, but based on a more complicated scheme known as\nEarliest Eligible Virtual Deadline First (EEVDF) [SA96]. R ead more about\nthese modern algorithms on your own; you should be able to und erstand\nhow they work now!\n10.7 Summary\nW e have seen various approaches to multiprocessor scheduli ng. The\nsingle-queue approach (SQMS) is rather straightforward to build and bal-\nances load well but inherently has dif\ufb01culty with scaling to many pro-\ncessors and cache af\ufb01nity . The multiple-queue approach (MQ MS) scales\nbetter and handles cache"
  },
  {
    "content": " should be able to und erstand\nhow they work now!\n10.7 Summary\nW e have seen various approaches to multiprocessor scheduli ng. The\nsingle-queue approach (SQMS) is rather straightforward to build and bal-\nances load well but inherently has dif\ufb01culty with scaling to many pro-\ncessors and cache af\ufb01nity . The multiple-queue approach (MQ MS) scales\nbetter and handles cache af\ufb01nity well, but has trouble with l oad imbal-\nance and is more complicated. Whichever approach you take, t here is no\nsimple answer: building a general purpose scheduler remain s a daunting\ntask, as small code changes can lead to large behavioral diff erences. Only\nundertake such an exercise if you know exactly what you are do ing, or ,\nat least, are getting paid a large amount of money to do so.\n2 Look up what BF stands for on your own; be forewarned, it is not for the faint of heart.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nMU LT I P R O C E S S O R SC H E D U L I N G (A D VA N C E D) 103\nReferences\n[A90] \u201cThe Performance of Spin Lock Alternatives for Shared -Memory Multiprocessors\u201d\nThomas E. Anderson\nIEEE TPDS V olume 1:1, January 1990\nA classic paper on how different locking alternatives do and don\u2019t scale. By T om Anderson, very well\nknown researcher in both systems and networking. And author of a very \ufb01ne OS textbook, we must say.\n[B+10] \u201cAn Analysis of Linux Scalability to Many Cores Abstr act\u201d\nSilas Boyd-Wickizer , Austin T . Clements, Y andong Mao, Alek sey Pesterev , M. Frans Kaashoek,\nRobert Morris, Nickolai Zeldovich\nOSDI \u201910, V ancouver , Canada, October 2010\nA terri\ufb01c modern paper on the dif\ufb01culties of scaling Linux to many cores.\n[CSG99] \u201cParallel Computer Architecture: A Hardware/Soft ware Approach\u201d\nDavid E. Culler , Jaswinder Pal Singh, and Anoop Gupta\nMorgan Kaufmann, 1999\nA treasure \ufb01lled with details about parallel machines and al gorithms. As Mark Hill humorously ob-\nserves on the jacket, the book contains more information tha n most research papers.\n[FLR98] \u201cThe Implementation of the Cilk-5 Multithreaded La nguage\u201d\nMatteo Frigo, Charles E. Leiserson, Keith Randall\nPLDI \u201998, Montreal, Canada, June 1998\nCilk is a lightweight language and runtime for writing paral lel programs, and an excellent example of\nthe work-stealing paradigm.\n[G83] \u201cUsing Cache Memory T o Reduce Processor-Memory T raf\ufb01 c\u201d\nJames R. Goodman\nISCA \u201983, Stockholm, Sweden, June 1983\nThe pioneering paper on how to use bus snooping, i.e., paying attention to requests you see on the bus, to\nbuild a cache coherence protocol. Goodman\u2019s research over m any years at Wisconsin is full of cleverness,\nthis being but one example.\n[M11] \u201cT owards T ransparent CPU Scheduling\u201d\nJoseph T . Meehean\nDoctoral Dissertation at University of Wisconsin\u2013Madison , 2011\nA dissertation that covers a lot of the details of how modern L inux multiprocessor scheduling works.\nPretty awesome! But, as co-advisors of Joe\u2019s, we may be a bit b iased here.\n[SHW11] \u201cA Primer on Memory Consistency and Cache Coherence \u201d\nDaniel J. Sorin, Mark D. Hill, and David A. W ood\nSynthesis Lectures in Computer Architecture\nMorgan and Claypool Publishers, May 2011\nA de\ufb01nitive overview of memory consistency and multiproces sor caching. Required reading for anyone\nwho likes to know way too much about a given topic.\n[SA96] \u201cEarliest Eligible Virtual Deadline First: A Flexib le and Accurate Mechanism for Pro-\nportional Share"
  },
  {
    "content": " Sorin, Mark D. Hill, and David A. W ood\nSynthesis Lectures in Computer Architecture\nMorgan and Claypool Publishers, May 2011\nA de\ufb01nitive overview of memory consistency and multiproces sor caching. Required reading for anyone\nwho likes to know way too much about a given topic.\n[SA96] \u201cEarliest Eligible Virtual Deadline First: A Flexib le and Accurate Mechanism for Pro-\nportional Share Resource Allocation\u201d\nIon Stoica and Hussein Abdel-W ahab\nT echnical Report TR-95-22, Old Dominion University , 1996\nA tech report on this cool scheduling idea, from Ion Stoica, n ow a professor at U.C. Berkeley and world\nexpert in networking, distributed systems, and many other t hings.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n11\nSummary Dialogue on CPU Virtualization\nProfessor: So, Student, did you learn anything?\nStudent: Well, Professor , that seems like a loaded question. I think y ou only\nwant me to say \u201cyes.\u201d\nProfessor: That\u2019s true. But it\u2019s also still an honest question. Come on, give a\nprofessor a break, will you?\nStudent: OK, OK. I think I did learn a few things. First, I learned a litt le about\nhow the OS virtualizes the CPU. There are a bunch of important mechanisms\nthat I had to understand to make sense of this: traps and trap h andlers, timer\ninterrupts, and how the OS and the hardware have to carefully save and restore\nstate when switching between processes.\nProfessor: Good, good!\nStudent: All those interactions do seem a little complicated though; how can I\nlearn more?\nProfessor: Well, that\u2019s a good question. I think there is no substitute f or doing;\njust reading about these things doesn\u2019t quite give you the pr oper sense. Do the\nclass projects and I bet by the end it will all kind of make sens e.\nStudent: Sounds good. What else can I tell you?\nProfessor: Well, did you get some sense of the philosophy of the OS in your\nquest to understand its basic machinery?\nStudent: Hmm... I think so. It seems like the OS is fairly paranoid. It w ants\nto make sure it stays in charge of the machine. While it wants a program to run\nas ef\ufb01ciently as possible (and hence the whole reasoning beh ind limited direct\nexecution), the OS also wants to be able to say \u201cAh! Not so fast my friend\u201d\nin case of an errant or malicious process. Paranoia rules the day, and certainly\nkeeps the OS in charge of the machine. Perhaps that is why we th ink of the OS\nas a resource manager .\nProfessor: Y es indeed \u2013 sounds like you are starting to put it together! N ice.\nStudent: Thanks.\n105\n106 S U M M A RY DI A L O G U E O N CPU V I RT U A L I Z AT IO N\nProfessor: And what about the policies on top of those mechanisms \u2013 any in ter-\nesting lessons there?\nStudent: Some lessons to be learned there for sure. Perhaps a little ob vious, but\nobvious can be good. Like the notion of bumping short jobs to t he front of the\nqueue \u2013 I knew that was a good idea ever since the one time I was b uying some\ngum at the store, and the guy in front of me had a credit card tha t wouldn\u2019t work.\nHe was no short job, let me tell you.\nProfessor: That sounds oddly rude to that poor fellow. What else?\nStudent: Well, that you can build a smart scheduler that tries to be lik e SJF and\nRR all at once \u2013 that MLFQ was pretty neat. Building up a real sc heduler seems\ndif\ufb01cult.\nProfessor: Indeed it is. That\u2019s why there is still controversy to this da y over\nwhich scheduler to use; see the Linux battles between CFS, BF S, and the O(1)\nscheduler , for example. And no, I will not spell out the full n ame of BFS.\nStudent: And I won\u2019t ask you to! These policy battles seem like they cou ld rage\nforever; is there really a right answer?\nProfessor: Probably not."
  },
  {
    "content": "s why there is still controversy to this da y over\nwhich scheduler to use; see the Linux battles between CFS, BF S, and the O(1)\nscheduler , for example. And no, I will not spell out the full n ame of BFS.\nStudent: And I won\u2019t ask you to! These policy battles seem like they cou ld rage\nforever; is there really a right answer?\nProfessor: Probably not. After all, even our own metrics are at odds: if y our\nscheduler is good at turnaround time, it\u2019s bad at response ti me, and vice versa.\nAs Lampson said, perhaps the goal isn\u2019t to \ufb01nd the best soluti on, but rather to\navoid disaster .\nStudent: That\u2019s a little depressing.\nProfessor: Good engineering can be that way. And it can also be uplifting !\nIt\u2019s just your perspective on it, really. I personally think being pragmatic is a\ngood thing, and pragmatists realize that not all problems ha ve clean and easy\nsolutions. Anything else that caught your fancy?\nStudent: I really liked the notion of gaming the scheduler; it seems li ke that\nmight be something to look into when I\u2019m next running a job on A mazon\u2019s EC2\nservice. Maybe I can steal some cycles from some other unsusp ecting (and more\nimportantly, OS-ignorant) customer!\nProfessor: It looks like I might have created a monster! Professor Frank enstein\nis not what I\u2019d like to be called, you know.\nStudent: But isn\u2019t that the idea? T o get us excited about something, so much so\nthat we look into it on our own? Lighting \ufb01res and all that?\nProfessor: I guess so. But I didn\u2019t think it would work!\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n12\nA Dialogue on Memory Virtualization\nStudent: So, are we done with virtualization?\nProfessor: No!\nStudent: Hey, no reason to get so excited; I was just asking a question. Students\nare supposed to do that, right?\nProfessor: Well, professors do always say that, but really they mean thi s: ask\nquestions, if they are good questions, and you have actually put a little thought\ninto them.\nStudent: Well, that sure takes the wind out of my sails.\nProfessor: Mission accomplished. In any case, we are not nearly done wit h\nvirtualization! Rather , you have just seen how to virtualiz e the CPU, but really\nthere is a big monster waiting in the closet: memory. V irtual izing memory is\ncomplicated and requires us to understand many more intrica te details about\nhow the hardware and OS interact.\nStudent: That sounds cool. Why is it so hard?\nProfessor: Well, there are a lot of details, and you have to keep them stra ight\nin your head to really develop a mental model of what is going o n. We\u2019ll start\nsimple, with very basic techniques like base/bounds, and sl owly add complexity\nto tackle new challenges, including fun topics like TLBs and multi-level page\ntables. Eventually, we\u2019ll be able to describe the workings o f a fully-functional\nmodern virtual memory manager .\nStudent: Neat! Any tips for the poor student, inundated with all of thi s infor-\nmation and generally sleep-deprived?\nProfessor: For the sleep deprivation, that\u2019s easy: sleep more (and part y less).\nFor understanding virtual memory, start with this: every address generated\nby a user program is a virtual address. The OS is just providing an illusion\nto each process, speci\ufb01cally that it has its own large and pri vate memory; with\nsome hardware help, the OS will turn these pretend virtual ad dresses into real\nphysical addresses, and thus be able to locate the desired in formation.\n107\n108 A D I A L O G U E O N ME M O RY VI RT U A L I Z AT IO N\nStudent: OK, I think I can remember that... (to self) every address fro m a user\nprogram is virtual, every address from a user program is virt ual, every ...\nProfessor: What are you mumbling about?\nStudent: Oh nothing.... (awkward pause"
  },
  {
    "content": " thus be able to locate the desired in formation.\n107\n108 A D I A L O G U E O N ME M O RY VI RT U A L I Z AT IO N\nStudent: OK, I think I can remember that... (to self) every address fro m a user\nprogram is virtual, every address from a user program is virt ual, every ...\nProfessor: What are you mumbling about?\nStudent: Oh nothing.... (awkward pause) ... Anyway, why does the OS wa nt\nto provide this illusion again?\nProfessor: Mostly ease of use: the OS will give each program the view that it\nhas a large contiguous address space to put its code and data into; thus, as a\nprogrammer , you never have to worry about things like \u201cwhere should I store this\nvariable?\u201d because the virtual address space of the program is large and has lots\nof room for that sort of thing. Life, for a programmer , become s much more tricky\nif you have to worry about \ufb01tting all of your code data into a sm all, crowded\nmemory.\nStudent: Why else?\nProfessor: Well, isolation and protection are big deals, too. We don\u2019t want\none errant program to be able to read, or worse, overwrite, so me other program\u2019s\nmemory, do we?\nStudent: Probably not. Unless it\u2019s a program written by someone you do n\u2019t\nlike.\nProfessor: Hmmm.... I think we might need to add a class on morals and ethi cs\nto your schedule for next semester . Perhaps OS class isn\u2019t ge tting the right mes-\nsage across.\nStudent: Maybe we should. But remember , it\u2019s not me who taught us that t he\nproper OS response to errant process behavior is to kill the o ffending process!\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n13\nThe Abstraction: Address Spaces\nIn the early days, building computer systems was easy . Why , y ou ask?\nBecause users didn\u2019t expect much. It is those darned users wi th their\nexpectations of \u201cease of use\u201d, \u201chigh performance\u201d, \u201creliab ility\u201d, etc., that\nreally have led to all these headaches. Next time you meet one of those\ncomputer users, thank them for all the problems they have cau sed.\n13.1 Early Systems\nFrom the perspective of memory , early machines didn\u2019t provi de much\nof an abstraction to users. Basically , the physical memory o f the machine\nlooked something like what you see in Figure 13.1.\nThe OS was a set of routines (a library , really) that sat in mem ory (start-\ning at physical address 0 in this example), and there would be one run-\nning program (a process) that currently sat in physical memo ry (starting\nat physical address 64k in this example) and used the rest of m emory .\nThere were few illusions here, and the user didn\u2019t expect muc h from the\nOS. Life was sure easy for OS developers in those days, wasn\u2019t it?\nmax\n64KB\n0KB\nCurrent Program\n(code, data, etc.)\nOperating System\n(code, data, etc.)\nFigure 13.1: Operating Systems: The Early Days\n109\n110 TH E AB S T R A C T I O N : A D D R E S S SPA C E S\n512KB\n448KB\n384KB\n320KB\n256KB\n192KB\n128KB\n64KB\n0KB\n(free)\n(free)\n(free)\n(free)\nOperating System\n(code, data, etc.)\nProcess A\n(code, data, etc.)\nProcess B\n(code, data, etc.)\nProcess C\n(code, data, etc.)\nFigure 13.2: Three Processes: Sharing Memory\n13.2 Multiprogramming and Time Sharing\nAfter a time, because machines were expensive, people began to share\nmachines more effectively . Thus the era of multiprogramming was born\n[DV66], in which multiple processes were ready to run at a giv en time,\nand the OS would switch between them, for example when one dec ided\nto perform an I/O. Doing so increased the effective utilization of the\nCPU. Such"
  },
  {
    "content": " Sharing Memory\n13.2 Multiprogramming and Time Sharing\nAfter a time, because machines were expensive, people began to share\nmachines more effectively . Thus the era of multiprogramming was born\n[DV66], in which multiple processes were ready to run at a giv en time,\nand the OS would switch between them, for example when one dec ided\nto perform an I/O. Doing so increased the effective utilization of the\nCPU. Such increases in ef\ufb01ciency were particularly important in those\ndays where each machine cost hundreds of thousands or even mi llions of\ndollars (and you thought your Mac was expensive!).\nSoon enough, however , people began demanding more of machin es,\nand the era of time sharing was born [S59, L60, M62, M83]. Speci\ufb01cally ,\nmany realized the limitations of batch computing, particul arly on pro-\ngrammers themselves [CV65], who were tired of long (and henc e ineffec-\ntive) program-debug cycles. The notion of interactivity became impor-\ntant, as many users might be concurrently using a machine, ea ch waiting\nfor (or hoping for) a timely response from their currently-e xecuting tasks.\nOne way to implement time sharing would be to run one process f or\na short while, giving it full access to all memory (as in Figur e 13.1), then\nstop it, save all of its state to some kind of disk (including a ll of physical\nmemory), load some other process\u2019s state, run it for a while, and thus\nimplement some kind of crude sharing of the machine [M+63].\nUnfortunately , this approach has a big problem: it is way too slow , par-\nticularly as memory grew . While saving and restoring regist er-level state\n(e.g., the PC, general-purpose registers, etc.) is relativ ely fast, saving the\nentire contents of memory to disk is brutally non-performan t. Thus, what\nwe\u2019d rather do is leave processes in memory while switching b etween\nthem, allowing the OS to implement time sharing ef\ufb01ciently ( Figure 13.2).\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E AB S T R A C T I O N : A D D R E S S SPA C E S 111\n16KB\n15KB\n2KB\n1KB\n0KB\nStack\n(free)\nHeap\nProgram Code the code segment:\nwhere instructions live\nthe heap segment:\ncontains malloc\u2019d data\ndynamic data structures\n(it grows downward)\n(it grows upward)\nthe stack segment:\ncontains local variables\narguments to routines, \nreturn values, etc.\nFigure 13.3: An Example Address Space\nIn the diagram, there are three processes (A, B, and C) and eac h of\nthem have a small part of the 512-KB physical memory carved ou t for\nthem. Assuming a single CPU, the OS chooses to run one of the pr ocesses\n(say A), while the others (B and C) sit in the ready queue waiti ng to run.\nAs time sharing became more popular , you can probably guess t hat\nnew demands were placed on the operating system. In particul ar , allow-\ning multiple programs to reside concurrently in memory make s protec-\ntion an important issue; you don\u2019t want a process to be able to read , or\nworse, write some other process\u2019s memory .\n13.3 The Address Space\nHowever , we have to keep those pesky users in mind, and doing s o\nrequires the OS to create an easy to use abstraction of physical memory .\nW e call this abstraction the address space , and it is the running program\u2019s\nview of memory in the system. Understanding this fundamenta l OS ab-\nstraction of memory is key to understanding how memory is vir tualized.\nThe address space of a process contains all of the memory stat e of the\nrunning program. For example, the code of the program (the instruc-\ntions) have to live in memory somewhere, and thus they are in t he ad-\ndress space. The program, while it is running, uses a stack to keep track\nof where it is in the function call chain as well as to"
  },
  {
    "content": "raction of memory is key to understanding how memory is vir tualized.\nThe address space of a process contains all of the memory stat e of the\nrunning program. For example, the code of the program (the instruc-\ntions) have to live in memory somewhere, and thus they are in t he ad-\ndress space. The program, while it is running, uses a stack to keep track\nof where it is in the function call chain as well as to allocate local variables\nand pass parameters and return values to and from routines. F inally , the\nheap is used for dynamically-allocated, user-managed memory , s uch as\nthat you might receive from a call to malloc() in C or new in an object-\noriented language such as C++ or Java. Of course, there are ot her things\nin there too (e.g., statically-initialized variables), bu t for now let us just\nassume those three components: code, stack, and heap.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n112 TH E AB S T R A C T I O N : A D D R E S S SPA C E S\nIn the example in Figure 13.3, we have a tiny address space (only 16\nKB)1 . The program code lives at the top of the address space (start ing at\n0 in this example, and is packed into the \ufb01rst 1K of the address space).\nCode is static (and thus easy to place in memory), so we can pla ce it at\nthe top of the address space and know that it won\u2019t need any mor e space\nas the program runs.\nNext, we have the two regions of the address space that may gro w\n(and shrink) while the program runs. Those are the heap (at th e top) and\nthe stack (at the bottom). W e place them like this because eac h wishes to\nbe able to grow , and by putting them at opposite ends of the add ress\nspace, we can allow such growth: they just have to grow in oppo site\ndirections. The heap thus starts just after the code (at 1KB) and grows\ndownward (say when a user requests more memory via malloc()); the\nstack starts at 16KB and grows upward (say when a user makes a p roce-\ndure call). However , this placement of stack and heap is just a convention;\nyou could arrange the address space in a different way if you\u2019 d like (as\nwe\u2019ll see later , when multiple threads co-exist in an address space, no\nnice way to divide the address space like this works anymore, alas).\nOf course, when we describe the address space, what we are des crib-\ning is the abstraction that the OS is providing to the running program.\nThe program really isn\u2019t in memory at physical addresses 0 th rough 16KB;\nrather it is loaded at some arbitrary physical address(es). Examine pro-\ncesses A, B, and C in Figure 13.2; there you can see how each process is\nloaded into memory at a different address. And hence the prob lem:\nTH E CR U X : H O W TO VI RT U A L I Z E ME M O RY\nHow can the OS build this abstraction of a private, potential ly large\naddress space for multiple running processes (all sharing m emory) on\ntop of a single, physical memory?\nWhen the OS does this, we say the OS is virtualizing memory , because\nthe running program thinks it is loaded into memory at a parti cular ad-\ndress (say 0) and has a potentially very large address space ( say 32-bits or\n64-bits); the reality is quite different.\nWhen, for example, process A in Figure 13.2 tries to perform a load\nat address 0 (which we will call a virtual address ), somehow the OS, in\ntandem with some hardware support, will have to make sure the load\ndoesn\u2019t actually go to physical address 0 but rather to physi cal address\n320KB (where A is loaded into memory). This is the key to virtu alization\nof memory , which underlies every modern computer system in t he world.\n1 W e will often use small examples like this because it is a pain to represent a 32-bit address\nspace and the numbers start to become hard to handle.\nOP E R AT I N G\nSY S T E M S\n[V E R S"
  },
  {
    "content": " address 0 but rather to physi cal address\n320KB (where A is loaded into memory). This is the key to virtu alization\nof memory , which underlies every modern computer system in t he world.\n1 W e will often use small examples like this because it is a pain to represent a 32-bit address\nspace and the numbers start to become hard to handle.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E AB S T R A C T I O N : A D D R E S S SPA C E S 113\nTI P : T H E PR I N C I P L E O F IS O L AT I O N\nIsolation is a key principle in building reliable systems. I f two entities are\nproperly isolated from one another , this implies that one ca n fail with-\nout affecting the other . Operating systems strive to isolat e processes from\neach other and in this way prevent one from harming the other . By using\nmemory isolation, the OS further ensures that running progr ams cannot\naffect the operation of the underlying OS. Some modern OS\u2019s t ake iso-\nlation even further , by walling off pieces of the OS from othe r pieces of\nthe OS. Such microkernels [BH70, R+89, S+03] thus may provide greater\nreliability than typical monolithic kernel designs.\n13.4 Goals\nThus we arrive at the job of the OS in this set of notes: to virtu alize\nmemory . The OS will not only virtualize memory , though; it wi ll do so\nwith style. T o make sure the OS does so, we need some goals to gu ide us.\nW e have seen these goals before (think of the Introduction), and we\u2019ll see\nthem again, but they are certainly worth repeating.\nOne major goal of a virtual memory (VM) system is transparency2 .\nThe OS should implement virtual memory in a way that is invisi ble to\nthe running program. Thus, the program shouldn\u2019t be aware of the fact\nthat memory is virtualized; rather , the program behaves as i f it has its\nown private physical memory . Behind the scenes, the OS (and h ardware)\ndoes all the work to multiplex memory among many different jo bs, and\nhence implements the illusion.\nAnother goal of VM is ef\ufb01ciency . The OS should strive to make the\nvirtualization as ef\ufb01cient as possible, both in terms of time (i.e., not mak-\ning programs run much more slowly) and space (i.e., not using too much\nmemory for structures needed to support virtualization). I n implement-\ning time-ef\ufb01cient virtualization, the OS will have to rely o n hardware\nsupport, including hardware features such as TLBs (which we will learn\nabout in due course).\nFinally , a third VM goal is protection. The OS should make sure to\nprotect processes from one another as well as the OS itself from pro-\ncesses. When one process performs a load, a store, or an instr uction fetch,\nit should not be able to access or affect in any way the memory c ontents\nof any other process or the OS itself (that is, anything outside its address\nspace). Protection thus enables us to deliver the property o f isolation\namong processes; each process should be running in its own is olated co-\ncoon, safe from the ravages of other faulty or even malicious processes.\n2 This usage of transparency is sometimes confusing; some stu dents think that \u201cbeing\ntransparent\u201d means keeping everything out in the open, i.e. , what government should be like.\nHere, it means the opposite: that the illusion provided by th e OS should not be visible to ap-\nplications. Thus, in common usage, a transparent system is o ne that is hard to notice, not one\nthat responds to requests as stipulated by the Freedom of Inf ormation Act.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n114 TH E AB S T R A C T I O N : A D D R E S S SPA C E S\nAS I D E : EV E RY AD D R E S S YO U SE E IS VI RT U A L\nEver write a C program that prints out a"
  },
  {
    "content": ".\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n114 TH E AB S T R A C T I O N : A D D R E S S SPA C E S\nAS I D E : EV E RY AD D R E S S YO U SE E IS VI RT U A L\nEver write a C program that prints out a pointer? The value you see\n(some large number , often printed in hexadecimal), is a virtual address .\nEver wonder where the code of your program is found? Y ou can pr int\nthat out too, and yes, if you can print it, it also is a virtual a ddress. In\nfact, any address you can see as a programmer of a user-level p rogram\nis a virtual address. It\u2019s only the OS, through its tricky tec hniques of\nvirtualizing memory , that knows where in the physical memor y of the\nmachine these instructions and data values lie. So never for get: if you\nprint out an address in a program, it\u2019s a virtual one, an illus ion of how\nthings are laid out in memory; only the OS (and the hardware) k nows the\nreal truth.\nHere\u2019s a little program that prints out the locations of the main() rou-\ntine (where code lives), the value of a heap-allocated value returned from\nmalloc(), and the location of an integer on the stack:\n1 #include <stdio.h>\n2 #include <stdlib.h>\n3 int main(int argc, char *argv[]) {\n4 printf(\"location of code : %p\\n\", (void *) main);\n5 printf(\"location of heap : %p\\n\", (void *) malloc(1));\n6 int x = 3;\n7 printf(\"location of stack : %p\\n\", (void *) &x);\n8 return x;\n9 }\nWhen run on a 64-bit Mac OS X machine, we get the following outp ut:\nlocation of code : 0x1095afe50\nlocation of heap : 0x1096008c0\nlocation of stack : 0x7fff691aea64\nFrom this, you can see that code comes \ufb01rst in the address spac e, then\nthe heap, and the stack is all the way at the other end of this la rge virtual\nspace. All of these addresses are virtual, and will be transl ated by the OS\nand hardware in order to fetch values from their true physica l locations.\nIn the next chapters, we\u2019ll focus our exploration on the basi c mecha-\nnisms needed to virtualize memory , including hardware and operat ing\nsystems support. W e\u2019ll also investigate some of the more rel evant poli-\ncies that you\u2019ll encounter in operating systems, including how t o manage\nfree space and which pages to kick out of memory when you run lo w on\nspace. In doing so, we\u2019ll build up your understanding of how a modern\nvirtual memory system really works 3.\n3 Or , we\u2019ll convince you to drop the course. But hold on; if you m ake it through VM, you\u2019ll\nlikely make it all the way!\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E AB S T R A C T I O N : A D D R E S S SPA C E S 115\n13.5 Summary\nW e have seen the introduction of a major OS subsystem: virtua l mem-\nory . The VM system is responsible for providing the illusion of a large,\nsparse, private address space to programs, which hold all of their instruc-\ntions and data therein. The OS, with some serious hardware he lp, will\ntake each of these virtual memory references, and turn them i nto physi-\ncal addresses, which can be presented to the physical memory in order to\nfetch the desired information. The OS will do this for many pr ocesses at\nonce, making sure to protect programs from one another , as we ll as pro-\ntect the OS. The entire approach requires a great deal of mech anism (lots\nof low-level machinery) as well as some critical policies to work; we\u2019ll\nstart from the bottom up,"
  },
  {
    "content": "-\ncal addresses, which can be presented to the physical memory in order to\nfetch the desired information. The OS will do this for many pr ocesses at\nonce, making sure to protect programs from one another , as we ll as pro-\ntect the OS. The entire approach requires a great deal of mech anism (lots\nof low-level machinery) as well as some critical policies to work; we\u2019ll\nstart from the bottom up, describing the critical mechanism s \ufb01rst. And\nthus we proceed!\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n116 TH E AB S T R A C T I O N : A D D R E S S SPA C E S\nReferences\n[BH70] \u201cThe Nucleus of a Multiprogramming System\u201d\nPer Brinch Hansen\nCommunications of the ACM, 13:4, April 1970\nThe \ufb01rst paper to suggest that the OS, or kernel, should be a mi nimal and \ufb02exible substrate for building\ncustomized operating systems; this theme is revisited thro ughout OS research history.\n[CV65] \u201cIntroduction and Overview of the Multics System\u201d\nF . J. Corbato and V . A. V yssotsky\nFall Joint Computer Conference, 1965\nA great early Multics paper . Here is the great quote about tim e sharing: \u201cThe impetus for time-sharing\n\ufb01rst arose from professional programmers because of their c onstant frustration in debugging programs\nat batch processing installations. Thus, the original goal was to time-share computers to allow simulta-\nneous access by several persons while giving to each of them t he illusion of having the whole machine at\nhis disposal.\u201d\n[DV66] \u201cProgramming Semantics for Multiprogrammed Comput ations\u201d\nJack B. Dennis and Earl C. V an Horn\nCommunications of the ACM, V olume 9, Number 3, March 1966\nAn early paper (but not the \ufb01rst) on multiprogramming.\n[L60] \u201cMan-Computer Symbiosis\u201d\nJ. C. R. Licklider\nIRE T ransactions on Human Factors in Electronics, HFE-1:1, March 1960\nA funky paper about how computers and people are going to ente r into a symbiotic age; clearly well\nahead of its time but a fascinating read nonetheless.\n[M62] \u201cTime-Sharing Computer Systems\u201d\nJ. McCarthy\nManagement and the Computer of the Future, MIT Press, Cambri dge, Mass, 1962\nProbably McCarthy\u2019s earliest recorded paper on time sharin g. However , in another paper [M83], he\nclaims to have been thinking of the idea since 1957. McCarthy left the systems area and went on to be-\ncome a giant in Arti\ufb01cial Intelligence at Stanford, includi ng the creation of the LISP programming lan-\nguage. See McCarthy\u2019s home page for more info: http://www-formal.stanford.edu/jmc/\n[M+63] \u201cA Time-Sharing Debugging System for a Small Compute r \u201d\nJ. McCarthy , S. Boilen, E. Fredkin, J. C. R. Licklider\nAFIPS \u201963 (Spring), May , 1963, New Y ork, USA\nA great early example of a system that swapped program memory to the \u201cdrum\u201d when the program\nwasn\u2019t running, and then back into \u201ccore\u201d memory when it was a bout to be run.\n[M83] \u201cReminiscences on the History of Time Sharing\u201d\nJohn McCarthy\nWinter or Spring of 1983\nA vailable: http://www-formal.stanford.edu/jmc/histor y/timesharing/timesharing.html\nA terri\ufb01c historical note on where the idea of time-sharing m ight have come from, including some doubts\ntowards those who cite Strachey\u2019s work [S59] as the pioneeri ng work in this area.\n[R+89] \u201cMach: A System Software kernel\u201d\nRichard Rashid, Daniel Julin, Douglas Orr , Richard Sanzi, R obert Baron, Alessandro Forin,\nDavid Golub, Michael Jones\nCOMPCON 89,"
  },
  {
    "content": " the idea of time-sharing m ight have come from, including some doubts\ntowards those who cite Strachey\u2019s work [S59] as the pioneeri ng work in this area.\n[R+89] \u201cMach: A System Software kernel\u201d\nRichard Rashid, Daniel Julin, Douglas Orr , Richard Sanzi, R obert Baron, Alessandro Forin,\nDavid Golub, Michael Jones\nCOMPCON 89, February 1989\nAlthough not the \ufb01rst project on microkernels per se, the Mac h project at CMU was well-known and\nin\ufb02uential; it still lives today deep in the bowels of Mac OS X .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E AB S T R A C T I O N : A D D R E S S SPA C E S 117\n[S59] \u201cTime Sharing in Large Fast Computers\u201d\nC. Strachey\nProceedings of the International Conference on Informatio n Processing, UNESCO, June 1959\nOne of the earliest references on time sharing.\n[S+03] \u201cImproving the Reliability of Commodity Operating S ystems\u201d\nMichael M. Swift, Brian N. Bershad, Henry M. Levy\nSOSP 2003\nThe \ufb01rst paper to show how microkernel-like thinking can imp rove operating system reliability.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n14\nInterlude: Memory API\nIn this interlude, we discuss the memory allocation interfa ces in U N I X\nsystems. The interfaces provided are quite simple, and henc e the chapter\nis short and to the point 1 . The main problem we address is this:\nCR U X : H O W TO AL L O C AT E AN D MA N A G E ME M O RY\nIn U N I X/C programs, understanding how to allocate and manage\nmemory is critical in building robust and reliable software . What inter-\nfaces are commonly used? What mistakes should be avoided?\n14.1 T ypes of Memory\nIn running a C program, there are two types of memory that are a llo-\ncated. The \ufb01rst is called stack memory , and allocations and deallocations\nof it are managed implicitly by the compiler for you, the programmer; for\nthis reason it is sometimes called automatic memory .\nDeclaring memory on the stack in C is easy . For example, let\u2019s say you\nneed some space in a function func() for an integer , called x. T o declare\nsuch a piece of memory , you just do something like this:\nvoid func() {\nint x; // declares an integer on the stack\n...\n}\nThe compiler does the rest, making sure to make space on the st ack\nwhen you call into func(). When your return from the function, the\ncompiler deallocates the memory for you; thus, if you want so me infor-\nmation to live beyond the call invocation, you had better not leave that\ninformation on the stack.\nIt is this need for long-lived memory that gets us to the secon d type\nof memory , called heap memory , where all allocations and deallocations\n1 Indeed, we hope all chapters are! But this one is shorter and p ointier , we think.\n119\n120 IN T E R L U D E : M E M O RY API\nare explicitly handled by you, the programmer . A heavy responsibility ,\nno doubt! And certainly the cause of many bugs. But if you are c areful\nand pay attention, you will use such interfaces correctly an d without too\nmuch trouble. Here is an example of how one might allocate a po inter to\nan integer on the heap:\nvoid func() {\nint *x = (int *) malloc(sizeof(int));\n...\n}\nA couple of notes about this small code snippet. First, you mi ght no-\ntice that both stack and heap allocation occur on this line: \ufb01 rst the com-\npiler knows to make room for a pointer to an integer when it see s your\ndeclaration of said pointer ( int *x); subsequently , when the program\ncalls malloc(), it requests space for an integer on the heap; the routine\n"
  },
  {
    "content": "int));\n...\n}\nA couple of notes about this small code snippet. First, you mi ght no-\ntice that both stack and heap allocation occur on this line: \ufb01 rst the com-\npiler knows to make room for a pointer to an integer when it see s your\ndeclaration of said pointer ( int *x); subsequently , when the program\ncalls malloc(), it requests space for an integer on the heap; the routine\nreturns the address of such an integer (upon success, or NULL on failure),\nwhich is then stored on the stack for use by the program.\nBecause of its explicit nature, and because of its more varie d usage,\nheap memory presents more challenges to both users and syste ms. Thus,\nit is the focus of the remainder of our discussion.\n14.2 The malloc() Call\nThe malloc() call is quite simple: you pass it a size asking for some\nroom on the heap, and it either succeeds and gives you back a po inter to\nthe newly-allocated space, or fails and returns NULL2 .\nThe manual page shows what you need to do to use malloc; type man\nmalloc at the command line and you will see:\n#include <stdlib.h>\n...\nvoid *malloc(size_t size);\nFrom this information, you can see that all you need to do is in clude\nthe header \ufb01le stdlib.h to use malloc. In fact, you don\u2019t really need to\neven do this, as the C library , which all C programs link with b y default,\nhas the code for malloc() inside of it; adding the header just lets the\ncompiler check whether you are calling malloc() correctly (e.g., passing\nthe right number of arguments to it, of the right type).\nThe single parameter malloc() takes is of type size\nt which sim-\nply describes how many bytes you need. However , most program mers\ndo not type in a number here directly (such as 10); indeed, it w ould be\nconsidered poor form to do so. Instead, various routines and macros are\nutilized. For example, to allocate space for a double-preci sion \ufb02oating\npoint value, you simply do this:\ndouble *d = (double *) malloc(sizeof(double));\n2 Note that NULL in C isn\u2019t really anything special at all, just a macro for the value zero.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : M E M O RY API 121\nTI P : W H E N IN DO U B T, T RY IT OU T\nIf you aren\u2019t sure how some routine or operator you are using b ehaves,\nthere is no substitute for simply trying it out and making sur e it behaves\nas you expect. While reading the manual pages or other docume ntation\nis useful, how it works in practice is what matters. W rite som e code and\ntest it! That is no doubt the best way to make sure your code beh aves as\nyou desire. Indeed, that is what we did to double-check the th ings we\nwere saying about sizeof() were actually true!\nW ow , that\u2019s lot of double-ing! This invocation of malloc() uses the\nsizeof() operator to request the right amount of space; in C, this is\ngenerally thought of as a compile-time operator , meaning that the actual\nsize is known at compile time and thus a number (in this case, 8, for a\ndouble) is substituted as the argument to malloc(). For this reason,\nsizeof() is correctly thought of as an operator and not a function call\n(a function call would take place at run time).\nY ou can also pass in the name of a variable (and not just a type) to\nsizeof(), but in some cases you may not get the desired results, so be\ncareful. For example, let\u2019s look at the following code snipp et:\nint *x = malloc(10 * sizeof(int));\nprintf(\"%d\\n\", sizeof(x));\nIn the \ufb01rst line, we\u2019ve declared space for an array of 10 integ ers, which\nis \ufb01ne and dandy . However , when we use sizeof() in the next line,\nit"
  },
  {
    "content": " desired results, so be\ncareful. For example, let\u2019s look at the following code snipp et:\nint *x = malloc(10 * sizeof(int));\nprintf(\"%d\\n\", sizeof(x));\nIn the \ufb01rst line, we\u2019ve declared space for an array of 10 integ ers, which\nis \ufb01ne and dandy . However , when we use sizeof() in the next line,\nit returns a small value, such as 4 (on 32-bit machines) or 8 (o n 64-bit\nmachines). The reason is that in this case, sizeof() thinks we are sim-\nply asking how big a pointer to an integer is, not how much memory we\nhave dynamically allocated. However , sometimes sizeof() does work\nas you might expect:\nint x[10];\nprintf(\"%d\\n\", sizeof(x));\nIn this case, there is enough static information for the comp iler to\nknow that 40 bytes have been allocated.\nAnother place to be careful is with strings. When declaring s pace for a\nstring, use the following idiom: malloc(strlen(s) + 1), which gets\nthe length of the string using the function strlen(), and adds 1 to it\nin order to make room for the end-of-string character . Using sizeof()\nmay lead to trouble here.\nY ou might also notice that malloc() returns a pointer to type void.\nDoing so is just the way in C to pass back an address and let the p ro-\ngrammer decide what to do with it. The programmer further hel ps out\nby using what is called a cast; in our example above, the programmer\ncasts the return type of malloc() to a pointer to a double. Casting\ndoesn\u2019t really accomplish anything, other than tell the com piler and other\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n122 IN T E R L U D E : M E M O RY API\nprogrammers who might be reading your code: \u201cyeah, I know wha t I\u2019m\ndoing.\u201d By casting the result of malloc(), the programmer is just giving\nsome reassurance; the cast is not needed for the correctness .\n14.3 The free() Call\nAs it turns out, allocating memory is the easy part of the equa tion;\nknowing when, how , and even if to free memory is the hard part. T o free\nheap memory that is no longer in use, programmers simply call free():\nint *x = malloc(10 * sizeof(int));\n...\nfree(x);\nThe routine takes one argument, a pointer that was returned b y malloc().\nThus, you might notice, the size of the allocated region is no t passed in\nby the user , and must be tracked by the memory-allocation lib rary itself.\n14.4 Common Errors\nThere are a number of common errors that arise in the use of malloc()\nand free(). Here are some we\u2019ve seen over and over again in teaching\nthe undergraduate operating systems course. All of these ex amples com-\npile and run with nary a peep from the compiler; while compili ng a C\nprogram is necessary to build a correct C program, it is far fr om suf\ufb01-\ncient, as you will learn (often in the hard way).\nCorrect memory management has been such a problem, in fact, t hat\nmany newer languages have support for automatic memory manage-\nment. In such languages, while you call something akin to malloc()\nto allocate memory (usually new or something similar to allocate a new\nobject), you never have to call something to free space; rath er , a garbage\ncollector runs and \ufb01gures out what memory you no longer have refer-\nences to and frees it for you.\nForgetting T o Allocate Memory\nMany routines expect memory to be allocated before you call t hem. For\nexample, the routine strcpy(dst, src) copies a string from a source\npointer to a destination pointer . However , if you are not car eful, you\nmight do this:\nchar *src = \"hello\";\nchar *dst; // oops! unallocated\nstrcpy(dst, src); // segfault and die\nWhen you run this code, it will likely lead to a segmentation fault 3 ,\nwhich is a fancy term"
  },
  {
    "content": " strcpy(dst, src) copies a string from a source\npointer to a destination pointer . However , if you are not car eful, you\nmight do this:\nchar *src = \"hello\";\nchar *dst; // oops! unallocated\nstrcpy(dst, src); // segfault and die\nWhen you run this code, it will likely lead to a segmentation fault 3 ,\nwhich is a fancy term for YOU DID SOMETHING WRONG WITH\nMEMORY YOU FOOLISH PROGRAMMER AND I AM ANGRY .\n3 Although it sounds arcane, you will soon learn why such an ill egal memory access is\ncalled a segmentation fault; if that isn\u2019t incentive to read on, what is?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : M E M O RY API 123\nTI P : I T CO M P I L E D O R IT RA N \u0338= IT IS CO R R E C T\nJust because a program compiled(!) or even ran once or many ti mes cor-\nrectly does not mean the program is correct. Many events may h ave con-\nspired to get you to a point where you believe it works, but the n some-\nthing changes and it stops. A common student reaction is to sa y (or yell)\n\u201cBut it worked before!\u201d and then blame the compiler , operati ng system,\nhardware, or even (dare we say it) the professor . But the prob lem is usu-\nally right where you think it would be, in your code. Get to wor k and\ndebug it before you blame those other components.\nIn this case, the proper code might instead look like this:\nchar *src = \"hello\";\nchar *dst = (char *) malloc(strlen(src) + 1);\nstrcpy(dst, src); // work properly\nAlternately , you could use strdup() and make your life even easier .\nRead the strdup man page for more information.\nNot Allocating Enough Memory\nA related error is not allocating enough memory , sometimes c alled a buffer\nover\ufb02ow . In the example above, a common error is to make almost enough\nroom for the destination buffer .\nchar *src = \"hello\";\nchar *dst = (char *) malloc(strlen(src)); // too small!\nstrcpy(dst, src); // work properly\nOddly enough, depending on how malloc is implemented and man y\nother details, this program will often run seemingly correc tly . In some\ncases, when the string copy executes, it writes one byte too f ar past the\nend of the allocated space, but in some cases this is harmless , perhaps\noverwriting a variable that isn\u2019t used anymore. In some case s, these over-\n\ufb02ows can be incredibly harmful, and in fact are the source of m any secu-\nrity vulnerabilities in systems [W06]. In other cases, the m alloc library\nallocated a little extra space anyhow , and thus your program actually\ndoesn\u2019t scribble on some other variable\u2019s value and works qu ite \ufb01ne. In\neven other cases, the program will indeed fault and crash. An d thus we\nlearn another valuable lesson: even though it ran correctly once, doesn\u2019t\nmean it\u2019s correct.\nForgetting to Initialize Allocated Memory\nWith this error , you call malloc() properly , but forget to \ufb01ll in some val-\nues into your newly-allocated data type. Don\u2019t do this! If yo u do forget,\nyour program will eventually encounter an uninitialized read , where it\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n124 IN T E R L U D E : M E M O RY API\nreads from the heap some data of unknown value. Who knows what\nmight be in there? If you\u2019re lucky , some value such that the pr ogram still\nworks (e.g., zero). If you\u2019re not lucky , something random an d harmful.\nForgetting T o Free Memory\nAnother common error is known as a memory leak , and it occurs when\nyou forget"
  },
  {
    "content": " IN T E R L U D E : M E M O RY API\nreads from the heap some data of unknown value. Who knows what\nmight be in there? If you\u2019re lucky , some value such that the pr ogram still\nworks (e.g., zero). If you\u2019re not lucky , something random an d harmful.\nForgetting T o Free Memory\nAnother common error is known as a memory leak , and it occurs when\nyou forget to free memory . In long-running applications or s ystems (such\nas the OS itself), this is a huge problem, as slowly leaking me mory even-\ntually leads one to run out of memory , at which point a restart is required.\nThus, in general, when you are done with a chunk of memory , you should\nmake sure to free it. Note that using a garbage-collected lan guage doesn\u2019t\nhelp here: if you still have a reference to some chunk of memor y , no\ngarbage collector will ever free it, and thus memory leaks re main a prob-\nlem even in more modern languages.\nNote that not all memory need be freed, at least, in certain ca ses. For\nexample, when you write a short-lived program, you might all ocate some\nspace using malloc(). The program runs and is about to complete: is\nthere need to call free() a bunch of times just before exiting? While\nit seems wrong not to, it is in this case quite \ufb01ne to simply exi t. After\nall, when your program exits, the OS will clean up everything about this\nprocess, including any memory it has allocated. Calling free() a bunch\nof times and then exiting is thus pointless, and, if you do so i ncorrectly ,\nwill cause the program to crash. Just call exit and be happy in stead.\nFreeing Memory Before Y ou Are Done With It\nSometimes a program will free memory before it is \ufb01nished usi ng it; such\na mistake is called a dangling pointer , and it, as you can guess, is also a\nbad thing. The subsequent use can crash the program, or overw rite valid\nmemory (e.g., you called free(), but then called malloc() again to\nallocate something else, which then recycles the errantly- freed memory).\nFreeing Memory Repeatedly\nPrograms also sometimes free memory more than once; this is k nown as\nthe double free . The result of doing so is unde\ufb01ned. As you can imag-\nine, the memory-allocation library might get confused and d o all sorts of\nweird things; crashes are a common outcome.\nCalling free() Incorrectly\nOne last problem we discuss is the call of free() incorrectly . After all,\nfree() expects you only to pass to it one of the pointers you received\nfrom malloc() earlier . When you pass in some other value, bad things\ncan (and do) happen. Thus, such invalid frees are dangerous and of\ncourse should also be avoided.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : M E M O RY API 125\nSummary\nAs you can see, there are lots of ways to abuse memory . Because of fre-\nquent errors with memory , a whole ecosphere of tools have dev eloped to\nhelp \ufb01nd such problems in your code. Check out both purify [HJ92] and\nvalgrind [SN05]; both are excellent at helping you locate the source o f\nyour memory-related problems. Once you become accustomed t o using\nthese powerful tools, you will wonder how you survived witho ut them.\n14.5 Underlying OS Support\nY ou might have noticed that we haven\u2019t been talking about sys tem\ncalls when discussing malloc() and free(). The reason for this is sim-\nple: they are not system calls, but rather library calls. Thu s the malloc li-\nbrary manages space within your virtual address space, but i tself is built\non top of some system calls which call into the OS to ask for mor e mem-\nory or release some back to the system.\nOne such system call is called brk, which is used to change the loca-\ntion of the program\u2019s break: the location of the end of the heap. It takes\none argument (the address of the new break), and thus either"
  },
  {
    "content": "\nbrary manages space within your virtual address space, but i tself is built\non top of some system calls which call into the OS to ask for mor e mem-\nory or release some back to the system.\nOne such system call is called brk, which is used to change the loca-\ntion of the program\u2019s break: the location of the end of the heap. It takes\none argument (the address of the new break), and thus either i ncreases or\ndecreases the size of the heap based on whether the new break i s larger\nor smaller than the current break. An additional call sbrk is passed an\nincrement but otherwise serves a similar purpose.\nNote that you should never directly call either brk or sbrk. They\nare used by the memory-allocation library; if you try to use t hem, you\nwill likely make something go (horribly) wrong. Stick to malloc() and\nfree() instead.\nFinally , you can also obtain memory from the operating syste m via the\nmmap() call. By passing in the correct arguments, mmap() can create an\nanonymous memory region within your program \u2013 a region which is not\nassociated with any particular \ufb01le but rather with swap space , something\nwe\u2019ll discuss in detail later on in virtual memory . This memo ry can then\nalso be treated like a heap and managed as such. Read the manua l page\nof mmap() for more details.\n14.6 Other Calls\nThere are a few other calls that the memory-allocation libra ry sup-\nports. For example, calloc() allocates memory and also zeroes it be-\nfore returning; this prevents some errors where you assume t hat memory\nis zeroed and forget to initialize it yourself (see the parag raph on \u201cunini-\ntialized reads\u201d above). The routine realloc() can also be useful, when\nyou\u2019ve allocated space for something (say , an array), and th en need to\nadd something to it: realloc() makes a new larger region of memory ,\ncopies the old region into it, and returns the pointer to the n ew region.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n126 IN T E R L U D E : M E M O RY API\n14.7 Summary\nW e have introduced some of the APIs dealing with memory alloc ation.\nAs always, we have just covered the basics; more details are a vailable\nelsewhere. Read the C book [KR88] and Stevens [SR05] (Chapte r 7) for\nmore information. For a cool modern paper on how to detect and correct\nmany of these problems automatically , see Novark et al. [N+0 7]; this\npaper also contains a nice summary of common problems and som e neat\nideas on how to \ufb01nd and \ufb01x them.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : M E M O RY API 127\nReferences\n[HJ92] Purify: Fast Detection of Memory Leaks and Access Err ors\nR. Hastings and B. Joyce\nUSENIX Winter \u201992\nThe paper behind the cool Purify tool, now a commercial produ ct.\n[KR88] \u201cThe C Programming Language\u201d\nBrian Kernighan and Dennis Ritchie\nPrentice-Hall 1988\nThe C book, by the developers of C. Read it once, do some progra mming, then read it again, and then\nkeep it near your desk or wherever you program.\n[N+07] \u201cExterminator: Automatically Correcting Memory Er rors with High Probability\u201d\nGene Novark, Emery D. Berger , and Benjamin G. Zorn\nPLDI 2007\nA cool paper on \ufb01nding and correcting memory errors automati cally, and a great overview of many\ncommon errors in C and C++ programs.\n[SN05] \u201cUsing V algrind to Detect Unde\ufb01ned V alue Errors with Bit-precision\u201d\nJ. Seward and N. Nethercote\nUSENIX \u201905\nHow to use valgrind to \ufb01nd certain types of errors.\n[SR05] \ufffd"
  },
  {
    "content": "\ufffdnding and correcting memory errors automati cally, and a great overview of many\ncommon errors in C and C++ programs.\n[SN05] \u201cUsing V algrind to Detect Unde\ufb01ned V alue Errors with Bit-precision\u201d\nJ. Seward and N. Nethercote\nUSENIX \u201905\nHow to use valgrind to \ufb01nd certain types of errors.\n[SR05] \u201cAdvanced Programming in the U NIX Environment\u201d\nW . Richard Stevens and Stephen A. Rago\nAddison-W esley , 2005\nWe\u2019ve said it before, we\u2019ll say it again: read this book many t imes and use it as a reference whenever you\nare in doubt. The authors are always surprised at how each tim e they read something in this book, they\nlearn something new, even after many years of C programming.\n[W06] \u201cSurvey on Buffer Over\ufb02ow Attacks and Countermeasure s\u201d\nTim W erthman\nA vailable: www .nds.rub.de/lehre/seminar/SS06/W erthmann\nBufferOver\ufb02ow .pdf\nA nice survey of buffer over\ufb02ows and some of the security prob lems they cause. Refers to many of the\nfamous exploits.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n15\nMechanism: Address Translation\nIn developing the virtualization of the CPU, we focused on a g eneral\nmechanism known as limited direct execution (or LDE). The idea be-\nhind LDE is simple: for the most part, let the program run dire ctly on the\nhardware; however , at certain key points in time (such as whe n a process\nissues a system call, or a timer interrupt occurs), arrange s o that the OS\ngets involved and makes sure the \u201cright\u201d thing happens. Thus , the OS,\nwith a little hardware support, tries its best to get out of th e way of the\nrunning program, to deliver an ef\ufb01cient virtualization; however , by inter-\nposing at those critical points in time, the OS ensures that it maint ains\ncontrol over the hardware. Ef\ufb01ciency and control together are two of the\nmain goals of any modern operating system.\nIn virtualizing memory , we will pursue a similar strategy , a ttaining\nboth ef\ufb01ciency and control while providing the desired virt ualization. Ef-\n\ufb01ciency dictates that we make use of hardware support, which at \ufb01rst\nwill be quite rudimentary (e.g., just a few registers) but wi ll grow to be\nfairly complex (e.g., TLBs, page-table support, and so fort h, as you will\nsee). Control implies that the OS ensures that no applicatio n is allowed\nto access any memory but its own; thus, to protect applicatio ns from one\nanother , and the OS from applications, we will need help from the hard-\nware here too. Finally , we will need a little more from the VM s ystem, in\nterms of \ufb02exibility ; speci\ufb01cally , we\u2019d like for programs to be able to use\ntheir address spaces in whatever way they would like, thus ma king the\nsystem easier to program. And thus arrive at the re\ufb01ned crux:\nTH E CR U X :\nHO W TO EFFI C I E N T LY AN D FL E X I B LY VI RT U A L I Z E ME M O RY\nHow can we build an ef\ufb01cient virtualization of memory? How do\nwe provide the \ufb02exibility needed by applications? How do we m aintain\ncontrol over which memory locations an application can acce ss, and thus\nensure that application memory accesses are properly restr icted? How\ndo we do all of this ef\ufb01ciently?\n129\n130 ME C H A N I S M : A D D R E S S TR A N S L AT I O N\nThe generic technique we will use, which you can consider an a ddition\nto our general approach of limited direct execution, is some thing that is\nreferred to as hardware-based address translation , or just address trans-\nlation for short. With address translation, the"
  },
  {
    "content": "do we do all of this ef\ufb01ciently?\n129\n130 ME C H A N I S M : A D D R E S S TR A N S L AT I O N\nThe generic technique we will use, which you can consider an a ddition\nto our general approach of limited direct execution, is some thing that is\nreferred to as hardware-based address translation , or just address trans-\nlation for short. With address translation, the hardware transfor ms each\nmemory access (e.g., an instruction fetch, load, or store), changing the vir-\ntual address provided by the instruction to a physical address where the\ndesired information is actually located. Thus, on each and e very memory\nreference, an address translation is performed by the hardw are to redirect\napplication memory references to their actual locations in memory .\nOf course, the hardware alone cannot virtualize memory , as i t just pro-\nvides the low-level mechanism for doing so ef\ufb01ciently . The O S must get\ninvolved at key points to set up the hardware so that the corre ct trans-\nlations take place; it must thus manage memory , keeping track of which\nlocations are free and which are in use, and judiciously inte rvening to\nmaintain control over how memory is used.\nOnce again the goal of all of this work is to create a beautiful illu-\nsion: that the program has its own private memory , where its own co de\nand data reside. Behind that virtual reality lies the ugly ph ysical truth:\nthat many programs are actually sharing memory at the same ti me, as\nthe CPU (or CPUs) switches between running one program and th e next.\nThrough virtualization, the OS (with the hardware\u2019s help) t urns the ugly\nmachine reality into something that is a useful, powerful, a nd easy to use\nabstraction.\n15.1 Assumptions\nOur \ufb01rst attempts at virtualizing memory will be very simple , almost\nlaughably so. Go ahead, laugh all you want; pretty soon it wil l be the OS\nlaughing at you, when you try to understand the ins and outs of TLBs,\nmulti-level page tables, and other technical wonders. Don\u2019 t like the idea\nof the OS laughing at you? W ell, you may be out of luck then; tha t\u2019s just\nhow the OS rolls.\nSpeci\ufb01cally , we will assume for now that the user \u2019s address s pace must\nbe placed contiguously in physical memory . W e will also assume, for sim-\nplicity , that the size of the address space is not too big; spe ci\ufb01cally , that\nit is less than the size of physical memory . Finally , we will also assume that\neach address space is exactly the same size . Don\u2019t worry if these assump-\ntions sound unrealistic; we will relax them as we go, thus ach ieving a\nrealistic virtualization of memory .\n15.2 An Example\nT o understand better what we need to do to implement address t rans-\nlation, and why we need such a mechanism, let\u2019s look at a simpl e exam-\nple. Imagine there is a process whose address space as indica ted in Figure\n15.1. What we are going to examine here is a short code sequence tha t\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nME C H A N I S M : A D D R E S S TR A N S L AT I O N 131\nTI P : I N T E R P O S I T I O N IS PO W E R F U L\nInterposition is a generic and powerful technique that is of ten used to\ngreat effect in computer systems. In virtualizing memory , t he hardware\nwill interpose on each memory access, and translate each vir tual address\nissued by the process to a physical address where the desired informa-\ntion is actually stored. However , the general technique of i nterposition is\nmuch more broadly applicable; indeed, almost any well-de\ufb01n ed interface\ncan be interposed upon, to add new functionality or improve s ome other\naspect of the system. One of the usual bene\ufb01ts of such an appro ach is\ntransparency; the interposition often is done without changing the clien t\nof the interface"
  },
  {
    "content": " desired informa-\ntion is actually stored. However , the general technique of i nterposition is\nmuch more broadly applicable; indeed, almost any well-de\ufb01n ed interface\ncan be interposed upon, to add new functionality or improve s ome other\naspect of the system. One of the usual bene\ufb01ts of such an appro ach is\ntransparency; the interposition often is done without changing the clien t\nof the interface, thus requiring no changes to said client.\nloads a value from memory , increments it by three, and then st ores the\nvalue back into memory . Y ou can imagine the C-language repre sentation\nof this code might look like this:\nvoid func()\nint x;\n...\nx = x + 3; // this is the line of code we are interested in\nThe compiler turns this line of code into assembly , which mig ht look\nsomething like this (in x86 assembly). Use objdump on Linux or otool\non Mac OS X to disassemble it:\n128: movl 0x0(%ebx), %eax ;load 0+ebx into eax\n132: addl $0x03, %eax ;add 3 to eax register\n135: movl %eax, 0x0(%ebx) ;store eax back to mem\nThis code snippet is relatively straightforward; it presum es that the\naddress of x has been placed in the register ebx, and then loads the value\nat that address into the general-purpose register eax using the movl in-\nstruction (for \u201clongword\u201d move). The next instruction adds 3 to eax,\nand the \ufb01nal instruction stores the value in eax back into memory at that\nsame location.\nIn Figure\n15.1, you can see how both the code and data are laid out in\nthe process\u2019s address space; the three-instruction code se quence is located\nat address 128 (in the code section near the top), and the valu e of the\nvariable x at address 15 KB (in the stack near the bottom). In t he \ufb01gure,\nthe initial value of x is 3000, as shown in its location on the s tack.\nWhen these instructions run, from the perspective of the pro cess, the\nfollowing memory accesses take place.\n\u2022 Fetch instruction at address 128\n\u2022 Execute this instruction (load from address 15 KB)\n\u2022 Fetch instruction at address 132\n\u2022 Execute this instruction (no memory reference)\n\u2022 Fetch the instruction at address 135\n\u2022 Execute this instruction (store to address 15 KB)\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n132 ME C H A N I S M : A D D R E S S TR A N S L AT I O N\n16KB\n15KB\n14KB\n4KB\n3KB\n2KB\n1KB\n0KB\nStack\n(free)\nHeap\nProgram Code\n128\n132\n135\nmovl 0x0(%ebx),%eax\naddl 0x03, %eax\nmovl %eax,0x0(%ebx)\n3000\nFigure 15.1: A Process And Its Address Space\nFrom the program\u2019s perspective, its address space starts at address 0\nand grows to a maximum of 16 KB; all memory references it gener ates\nshould be within these bounds. However , to virtualize memor y , the OS\nwants to place the process somewhere else in physical memory , not nec-\nessarily at address 0. Thus, we have the problem: how can we relocate\nthis process in memory in a way that is transparent to the process? How\ncan provide the illusion of a virtual address space starting at 0, when in\nreality the address space is located at some other physical a ddress?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nME C H A N I S M : A D D R E S S TR A N S L AT I O N 133\n64KB\n48KB\n32KB\n16KB\n0KB\n(not in use)\n(not in use)\nOperating System\nStack\nCode\nHeap\n(allocated but not in use)\nRelocated Process\nFigure 15.2: Physical Memory with a"
  },
  {
    "content": " W W.O S T E P.O R G\nME C H A N I S M : A D D R E S S TR A N S L AT I O N 133\n64KB\n48KB\n32KB\n16KB\n0KB\n(not in use)\n(not in use)\nOperating System\nStack\nCode\nHeap\n(allocated but not in use)\nRelocated Process\nFigure 15.2: Physical Memory with a Single Relocated Process\nAn example of what physical memory might look like once this p ro-\ncess\u2019s address space has been placed in memory is found in Fig ure 15.2.\nIn the \ufb01gure, you can see the OS using the \ufb01rst slot of physical memory\nfor itself, and that it has relocated the process from the exa mple above\ninto the slot starting at physical memory address 32 KB. The o ther two\nslots are free (16 KB-32 KB and 48 KB-64 KB).\n15.3 Dynamic (Hardware-based) Relocation\nT o gain some understanding of hardware-based address trans lation,\nwe\u2019ll \ufb01rst discuss its \ufb01rst incarnation. Introduced in the \ufb01 rst time-sharing\nmachines of the late 1950\u2019s is a simple idea referred to as base and bounds\n(the technique is also referred to as dynamic relocation ; we\u2019ll use both\nterms interchangeably) [SS74].\nSpeci\ufb01cally , we\u2019ll need two hardware registers within each CPU: one\nis called the base register , and the other the bounds (sometimes called a\nlimit register). This base-and-bounds pair is going to allow us to place the\naddress space anywhere we\u2019d like in physical memory , and do s o while\nensuring that the process can only access its own address spa ce.\nIn this setup, each program is written and compiled as if it is loaded at\naddress zero. However , when a program starts running, the OS decides\nwhere in physical memory it should be loaded and sets the base register\nto that value. In the example above, the OS decides to load the process at\nphysical address 32 KB and thus sets the base register to this value.\nInteresting things start to happen when the process is runni ng. Now ,\nwhen any memory reference is generated by the process, it is translated\nby the processor in the following manner:\nphysical address = virtual address + base\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n134 ME C H A N I S M : A D D R E S S TR A N S L AT I O N\nAS I D E : SO F T WA R E -B A SED RE L O C AT I O N\nIn the early days, before hardware support arose, some syste ms per-\nformed a crude form of relocation purely via software method s. The\nbasic technique is referred to as static relocation , in which a piece of soft-\nware known as the loader takes an executable that is about to be run and\nrewrites its addresses to the desired offset in physical mem ory .\nFor example, if an instruction was a load from address 1000 in to a reg-\nister (e.g., movl 1000, %eax), and the address space of the program\nwas loaded starting at address 3000 (and not 0, as the program thinks),\nthe loader would rewrite the instruction to offset each addr ess by 3000\n(e.g., movl 4000, %eax). In this way , a simple static relocation of the\nprocess\u2019s address space is achieved.\nHowever , static relocation has numerous problems. First an d most im-\nportantly , it does not provide protection, as processes can generate bad\naddresses and thus illegally access other process\u2019s or even OS memory; in\ngeneral, hardware support is likely needed for true protect ion [WL+93].\nA smaller negative is that once placed, it is dif\ufb01cult to late r relocate an\naddress space to another location [M65].\nEach memory reference generated by the process is a virtual address ;\nthe hardware in turn adds the contents of the base register to this address\nand the result is a physical address that can be issued to the memory\nsystem.\nT o understand this better , let\u2019s trace through what happens when a\nsingle instruction is executed. Speci\ufb01cally , let\u2019s look at one instruction\nfrom our earlier sequence"
  },
  {
    "content": "\naddress space to another location [M65].\nEach memory reference generated by the process is a virtual address ;\nthe hardware in turn adds the contents of the base register to this address\nand the result is a physical address that can be issued to the memory\nsystem.\nT o understand this better , let\u2019s trace through what happens when a\nsingle instruction is executed. Speci\ufb01cally , let\u2019s look at one instruction\nfrom our earlier sequence:\n128: movl 0x0(%ebx), %eax\nThe program counter (PC) is set to 128; when the hardware need s to\nfetch this instruction, it \ufb01rst adds the value to the the base register value\nof 32 KB (32768) to get a physical address of 32896; the hardwa re then\nfetches the instruction from that physical address. Next, t he processor\nbegins executing the instruction. At some point, the proces s then issues\nthe load from virtual address 15 KB, which the processor take s and again\nadds to the base register (32 KB), getting the \ufb01nal physical a ddress of\n47 KB and thus the desired contents.\nT ransforming a virtual address into a physical address is ex actly the\ntechnique we refer to as address translation ; that is, the hardware takes a\nvirtual address the process thinks it is referencing and tra nsforms it into\na physical address which is where the data actually resides. Because this\nrelocation of the address happens at runtime, and because we can move\naddress spaces even after the process has started running, t he technique\nis often referred to as dynamic relocation [M65].\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nME C H A N I S M : A D D R E S S TR A N S L AT I O N 135\nTI P : H A R D WA R E -B A S ED DY N A M I C RE L O C AT I O N\nWith dynamic relocation, we can see how a little hardware goe s a long\nway . Namely , a base register is used to transform virtual addresses (gen-\nerated by the program) into physical addresses. A bounds (or limit) reg-\nister ensures that such addresses are within the con\ufb01nes of t he address\nspace. T ogether , they combine to provide a simple and ef\ufb01cie nt virtual-\nization of memory .\nNow you might be asking: what happened to that bounds (limit) reg-\nister? After all, isn\u2019t this supposed to be the base-and-bou nds approach?\nIndeed, it is. And as you might have guessed, the bounds regis ter is there\nto help with protection. Speci\ufb01cally , the processor will \ufb01r st check that\nthe memory reference is within bounds to make sure it is legal; in the sim-\nple example above, the bounds register would always be set to 16 KB. If\na process generates a virtual address that is greater than th e bounds, or\none that is negative, the CPU will raise an exception, and the process will\nlikely be terminated. The point of the bounds is thus to make s ure that all\naddresses generated by the process are legal and within the \u201c bounds\u201d of\nthe process.\nW e should note that the base and bounds registers are hardwar e struc-\ntures kept on the chip (one pair per CPU). Sometimes people ca ll the\npart of the processor that helps with address translation th e memory\nmanagement unit (MMU) ; as we develop more sophisticated memory-\nmanagement techniques, we will be adding more circuitry to t he MMU.\nA small aside about bound registers, which can be de\ufb01ned in on e of\ntwo ways. In one way (as above), it holds the size of the address space,\nand thus the hardware checks the virtual address against it \ufb01 rst before\nadding the base. In the second way , it holds the physical address of the\nend of the address space, and thus the hardware \ufb01rst adds the b ase and\nthen makes sure the address is within bounds. Both methods ar e logically\nequivalent; for simplicity , we\u2019ll usually assume that the b ounds register\nholds the size of the address space.\nExample T ranslations\nT o understand address translation via base-and-bounds in"
  },
  {
    "content": ". In the second way , it holds the physical address of the\nend of the address space, and thus the hardware \ufb01rst adds the b ase and\nthen makes sure the address is within bounds. Both methods ar e logically\nequivalent; for simplicity , we\u2019ll usually assume that the b ounds register\nholds the size of the address space.\nExample T ranslations\nT o understand address translation via base-and-bounds in m ore detail,\nlet\u2019s take a look at an example. Imagine a process with an addr ess space of\nsize 4 KB (yes, unrealistically small) has been loaded at phy sical address\n16 KB. Here are the results of a number of address translation s:\n\u2022 Virtual Address 0 \u2192 Physical Address 16 KB\n\u2022 V A 1 KB \u2192 P A 17 KB\n\u2022 V A 3000 \u2192 P A 19384\n\u2022 V A 4400 \u2192 Fault (out of bounds)\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n136 ME C H A N I S M : A D D R E S S TR A N S L AT I O N\nAS I D E : DATA ST R U C T U R E \u2013 T H E FR E E LI S T\nThe OS must track which parts of free memory are not in use, so a s to\nbe able to allocate memory to processes. Many different data structures\ncan of course be used for such a task; the simplest (which we wi ll assume\nhere) is a free list , which simply is a list of the ranges of the physical\nmemory which are not currently in use.\nAs you can see from the example, it is easy for you to simply add the\nbase address to the virtual address (which can rightly be vie wed as an\noffset into the address space) to get the resulting physical addres s. Only if\nthe virtual address is \u201ctoo big\u201d or negative will the result b e a fault (e.g.,\n4400 is greater than the 4 KB bounds), causing an exception to be raised\nand the process to be terminated.\n15.4 OS Issues\nThere are a number of new OS issues that arise when using base a nd\nbounds to implement a simple virtual memory . Speci\ufb01cally , t here are\nthree critical junctures where the OS must take action to imp lement this\nbase-and-bounds approach to virtualizing memory .\nFirst, The OS must take action when a process is created, \ufb01ndi ng space\nfor its address space in memory . Fortunately , given our assu mptions that\neach address space is (a) smaller than the size of physical me mory and\n(b) the same size, this is quite easy for the OS; it can simply v iew physical\nmemory as an array of slots, and track whether each one is free or in use.\nWhen a new process is created, the OS will have to search a data structure\n(often called a free list ) to \ufb01nd room for the new address space and then\nmark it used.\nAn example of what physical memory might look like can be foun d\nin Figure 15.2. In the \ufb01gure, you can see the OS using the \ufb01rst slot of\nphysical memory for itself, and that it has relocated the pro cess from the\nexample above into the slot starting at physical memory addr ess 32 KB.\nThe other two slots are free (16 KB-32 KB and 48 KB-64 KB); thus , the free\nlist should consist of these two entries.\nSecond, the OS must take action when a process is terminated, reclaim-\ning all of its memory for use in other processes or the OS. Upon termina-\ntion of a process, the OS thus puts its memory back on the free l ist, and\ncleans up any associated data structures as need be.\nThird, the OS must also take action when a context switch occu rs.\nThere is only one base and bounds register on each CPU, after a ll, and\ntheir values differ for each running program, as each progra m is loaded at\na different physical address in memory . Thus, the OS must save and restore\nthe base-and-bounds pair when it switches between processe s. Speci\ufb01-\ncally , when the OS decides to stop running a process, it must s ave the\nOP E R AT I N G\nSY S T E M S\n[V E R S I O"
  },
  {
    "content": "\ntheir values differ for each running program, as each progra m is loaded at\na different physical address in memory . Thus, the OS must save and restore\nthe base-and-bounds pair when it switches between processe s. Speci\ufb01-\ncally , when the OS decides to stop running a process, it must s ave the\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nME C H A N I S M : A D D R E S S TR A N S L AT I O N 137\nvalues of the base and bounds registers to memory , in some per -process\nstructure such as the process structure or process control block (PCB).\nSimilarly , when the OS resumes a running process (or runs it t he \ufb01rst\ntime), it must set the values of the base and bounds on the CPU t o the\ncorrect values for this process.\nW e should note that when a process is stopped (i.e., not runni ng), it is\npossible for the OS to move an address space from one location in mem-\nory to another rather easily . T o move a process\u2019s address spa ce, the OS\n\ufb01rst deschedules the process; then, the OS copies the addres s space from\nthe current location to the new location; \ufb01nally , the OS upda tes the saved\nbase register (in the process structure) to point to the new l ocation. When\nthe process is resumed, its (new) base register is restored, and it begins\nrunning again, oblivious that its instructions and data are now in a com-\npletely new spot in memory!\nW e should also note that access to the base and bounds registe rs is ob-\nviously privileged. Special hardware instructions are required to access\nbase-and-bounds registers; if a process, running in user mo de, attempts\nto do so, the CPU will raise an exception and the OS will likely termi-\nnate the process. Only in kernel (or privileged) mode can suc h registers\nbe modi\ufb01ed. Imagine the havoc a user process could wreak 1 if it could\narbitrarily change the base register while running. Imagin e it! And then\nquickly \ufb02ush such dark thoughts from your mind, as they are th e ghastly\nstuff of which nightmares are made.\n15.5 Summary\nIn this chapter , we have extended the concept of limited dire ct exe-\ncution with a speci\ufb01c mechanism used in virtual memory , know n as ad-\ndress translation . With address translation, the OS can control each and\nevery memory access from a process, ensuring the accesses st ay within\nthe bounds of the address space. Key to the ef\ufb01ciency of this t echnique\nis hardware support, which performs the translation quickl y for each ac-\ncess, turning virtual addresses (the process\u2019s view of memo ry) into phys-\nical ones (the actual view). All of this is performed in a way t hat is trans-\nparent to the process that has been relocated; the process has no ide a its\nmemory references are being translated, making for a wonder ful illusion.\nW e have also seen one particular form of virtualization, kno wn as base\nand bounds or dynamic relocation. Base-and-bounds virtual ization is\nquite ef\ufb01cient , as only a little more hardware logic is required to add a\nbase register to the virtual address and check that the addre ss generated\nby the process is in bounds. Base-and-bounds also offers protection; the\nOS and hardware combine to ensure no process can generate mem ory\nreferences outside its own address space. Protection is cer tainly one of\nthe most important goals of the OS; without it, the OS could no t control\n1 Is there anything other than \u201chavoc\u201d that can be \u201cwreaked\u201d?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n138 ME C H A N I S M : A D D R E S S TR A N S L AT I O N\nthe machine (if processes were free to overwrite memory , the y could eas-\nily do nasty things like overwrite the trap table and take ove r the system).\nUnfortunately ,"
  },
  {
    "content": "?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n138 ME C H A N I S M : A D D R E S S TR A N S L AT I O N\nthe machine (if processes were free to overwrite memory , the y could eas-\nily do nasty things like overwrite the trap table and take ove r the system).\nUnfortunately , this simple technique of dynamic relocatio n does have\nits inef\ufb01ciencies. For example, as you can see in Figure 15.2 (back a few\npages), the relocated process is using physical memory from 32 KB to\n48 KB; however , because the process stack and heap are not too big, all of\nthe space between the two is simply wasted. This type of waste is usually\ncalled internal fragmentation , as the space inside the allocated unit is not\nall used (i.e., is fragmented) and thus wasted. In our curren t approach, al-\nthough there might be enough physical memory for more proces ses, we\nare currently restricted to placing an address space in a \ufb01xe d-sized slot\nand thus internal fragmentation can arise 2 . Thus, we are going to need\nmore sophisticated machinery , to try to better utilize phys ical memory\nand avoid internal fragmentation. Our \ufb01rst attempt will be a slight gen-\neralization of base and bounds known as segmentation, which we will\ndiscuss next.\n2 A different solution might instead place a \ufb01xed-sized stack within the address space,\njust below the code region, and a growing heap below that. How ever , this limits \ufb02exibility\nby making recursion and deeply-nested function calls chall enging, and thus is something we\nhope to avoid.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nME C H A N I S M : A D D R E S S TR A N S L AT I O N 139\nReferences\n[M65] \u201cOn Dynamic Program Relocation\u201d\nW .C. McGee\nIBM Systems Journal\nV olume 4, Number 3, 1965, pages 184\u2013199\nThis paper is a nice summary of early work on dynamic relocati on, as well as some basics on static\nrelocation.\n[P90] \u201cRelocating loader for MS-DOS .EXE executable \ufb01les\u201d\nKenneth D. A. Pillay\nMicroprocessors & Microsystems archive\nV olume 14, Issue 7 (September 1990)\nAn example of a relocating loader for MS-DOS. Not the \ufb01rst one , but just a relatively modern example\nof how such a system works.\n[SS74] \u201cThe Protection of Information in Computer Systems\u201d\nJ. Saltzer and M. Schroeder\nCACM, July 1974\nFrom this paper: \u201cThe concepts of base-and-bound register a nd hardware-interpreted descriptors ap-\npeared, apparently independently, between 1957 and 1959 on three projects with diverse goals. At\nM.I.T ., McCarthy suggested the base-and-bound idea as part of the memory protection system nec-\nessary to make time-sharing feasible. IBM independently de veloped the base-and-bound register as a\nmechanism to permit reliable multiprogramming of the Stret ch (7030) computer system. At Burroughs,\nR. Barton suggested that hardware-interpreted descriptor s would provide direct support for the naming\nscope rules of higher level languages in the B5000 computer s ystem.\u201d We found this quote on Mark\nSmotherman\u2019s cool history pages [S04]; see them for more inf ormation.\n[S04] \u201cSystem Call Support\u201d\nMark Smotherman, May 2004\nhttp://people.cs.clemson.edu/\u02dcmark/syscall.html\nA neat history of system call support. Smotherman has also co llected some early history on items like\ninterrupts and other fun aspects of computing history. See h is web pages for more details.\n[WL+93] \u201cEf\ufb01cient Software-based Fault Isolation\u201d\nRobert W ahbe, Steven Lucco, Thomas E. Anderson, Susan L. Gra ham\nSOSP \u201993\nA terri\ufb01c paper about how you can use compiler"
  },
  {
    "content": " Smotherman has also co llected some early history on items like\ninterrupts and other fun aspects of computing history. See h is web pages for more details.\n[WL+93] \u201cEf\ufb01cient Software-based Fault Isolation\u201d\nRobert W ahbe, Steven Lucco, Thomas E. Anderson, Susan L. Gra ham\nSOSP \u201993\nA terri\ufb01c paper about how you can use compiler support to boun d memory references from a program,\nwithout hardware support. The paper sparked renewed intere st in software techniques for isolation of\nmemory references.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n140 ME C H A N I S M : A D D R E S S TR A N S L AT I O N\nHomework\nThe program relocation.py allows you to see how address trans-\nlations are performed in a system with base and bounds regist ers. See the\nREADME for details.\nQuestions\n\u2022 Run with seeds 1, 2, and 3, and compute whether each virtual ad -\ndress generated by the process is in or out of bounds. If in bou nds,\ncompute the translation.\n\u2022 Run with these \ufb02ags: -s 0 -n 10. What value do you have set\n-l (the bounds register) to in order to ensure that all the gener ated\nvirtual addresses are within bounds?\n\u2022 Run with these \ufb02ags: -s 1 -n 10 -l 100. What is the maxi-\nmum value that bounds can be set to, such that the address spac e\nstill \ufb01ts into physical memory in its entirety?\n\u2022 Run some of the same problems above, but with larger address\nspaces ( -a) and physical memories ( -p).\n\u2022 What fraction of randomly-generated virtual addresses are valid,\nas a function of the value of the bounds register? Make a graph\nfrom running with different random seeds, with limit values rang-\ning from 0 up to the maximum size of the address space.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n16\nSegmentation\nSo far we have been putting the entire address space of each pr ocess in\nmemory . With the base and bounds registers, the OS can easily relocate\nprocesses to different parts of physical memory . However , y ou might\nhave noticed something interesting about these address spa ces of ours:\nthere is a big chunk of \u201cfree\u201d space right in the middle, betwe en the stack\nand the heap.\nAs you can imagine from Figure 16.1, although the space between the\nstack and heap is not being used by the process, it is still tak ing up phys-\nical memory when we relocate the entire address space somewh ere in\nphysical memory; thus, the simple approach of using a base an d bounds\nregister pair to virtualize memory is wasteful. It also make s it quite hard\nto run a program when the entire address space doesn\u2019t \ufb01t into memory;\nthus, base and bounds is not as \ufb02exible as we would like. And th us:\nTH E CR U X : H O W TO SU P P O RT A L A R G E AD D R E S S SPA C E\nHow do we support a large address space with (potentially) a l ot of\nfree space between the stack and the heap? Note that in our exa mples,\nwith tiny (pretend) address spaces, the waste doesn\u2019t seem t oo bad. Imag-\nine, however , a 32-bit address space (4 GB in size); a typical program will\nonly use megabytes of memory , but still would demand that the entire\naddress space be resident in memory .\n16.1 Segmentation: Generalized Base/Bounds\nT o solve this problem, an idea was born, and it is called segmenta-\ntion. It is quite an old idea, going at least as far back as the very e arly\n1960\u2019s [H61, G62]. The idea is simple: instead of having just one base\nand bounds pair in our MMU, why not have a base and bounds pair p er\nlogical segment of the address space? A segment is just a contiguous\nportion of the address space of a particular length, and in ou r canonical\n"
  },
  {
    "content": " segmenta-\ntion. It is quite an old idea, going at least as far back as the very e arly\n1960\u2019s [H61, G62]. The idea is simple: instead of having just one base\nand bounds pair in our MMU, why not have a base and bounds pair p er\nlogical segment of the address space? A segment is just a contiguous\nportion of the address space of a particular length, and in ou r canonical\n141\n142 SE G M E N TAT IO N\n16KB\n15KB\n14KB\n6KB\n5KB\n4KB\n3KB\n2KB\n1KB\n0KB\nProgram Code\nHeap\n(free)\nStack\nFigure 16.1: An Address Space (Again)\naddress space, we have three logically-different segments : code, stack,\nand heap. What segmentation allows the OS to do is to place eac h one\nof those segments in different parts of physical memory , and thus avoid\n\ufb01lling physical memory with unused virtual address space.\nLet\u2019s look at an example. Assume we want to place the address s pace\nfrom Figure 16.1 into physical memory . With a base and bounds pair per\nsegment, we can place each segment independently in physical memory .\nFor example, see Figure 16.2; there you see a 64-KB physical memory\nwith those three segments within it (and 16KB reserved for th e OS).\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSE G M E N TATI ON 143\n64KB\n48KB\n32KB\n16KB\n0KB\n(not in use)\n(not in use)\n(not in use)\nOperating System\nStack\nCode\nHeap\nFigure 16.2: Placing Segments In Physical Memory\nAs you can see in the diagram, only used memory is allocated sp ace\nin physical memory , and thus large address spaces with large amounts of\nunused address space (which we sometimes call sparse address spaces )\ncan be accommodated.\nThe hardware structure in our MMU required to support segmen ta-\ntion is just what you\u2019d expect: in this case, a set of three bas e and bounds\nregister pairs. T able 16.1 below shows the register values for the example\nabove; each bounds register holds the size of a segment.\nSegment Base Size\nCode 32K 2K\nHeap 34K 2K\nStack 28K 2K\nT able 16.1: Segment Register V alues\nY ou can see from the table that the code segment is placed at ph ysical\naddress 32KB and has a size of 2KB and the heap segment is place d at\n34KB and also has a size of 2KB.\nLet\u2019s do an example translation, using the address space in F igure\n16.1.\nAssume a reference is made to virtual address 100 (which is in the code\nsegment). When the reference takes place (say , on an instruc tion fetch),\nthe hardware will add the base value to the offset into this segment (100 in\nthis case) to arrive at the desired physical address: 100 + 32 KB, or 32868.\nIt will then check that the address is within bounds (100 is le ss than 2KB),\n\ufb01nd that it is, and issue the reference to physical memory add ress 32868.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n144 SE G M E N TAT IO N\nAS I D E : TH E SE G M E N TATI O N FA U LT\nThe term segmentation fault or violation arises from a memor y access\non a segmented machine to an illegal address. Humorously , th e term\npersists, even on machines with no support for segmentation at all. Or\nnot so humorously , if you can\u2019t \ufb01gure why your code keeps faul ting.\nNow let\u2019s look at an address in the heap, virtual address 4200 (again\nrefer to Figure 16.1). If we just add the virtual address 4200 to the base\nof the heap (34KB), we get a physical address of 39016, which i s not the\ncorrect physical address. What we need to \ufb01rst do is extract t he offset into\nthe heap,"
  },
  {
    "content": "\ufffdgure why your code keeps faul ting.\nNow let\u2019s look at an address in the heap, virtual address 4200 (again\nrefer to Figure 16.1). If we just add the virtual address 4200 to the base\nof the heap (34KB), we get a physical address of 39016, which i s not the\ncorrect physical address. What we need to \ufb01rst do is extract t he offset into\nthe heap, i.e., which byte(s) in this segment the address refers to. Because\nthe heap starts at virtual address 4KB (4096), the offset of 4 200 is actually\n4200 \u2013 4096 or 104. W e then take this offset (104) and add it to t he base\nregister physical address (34K or 34816) to get the desired r esult: 34920.\nWhat if we tried to refer to an illegal address, such as 7KB whi ch is be-\nyond the end of the heap? Y ou can imagine what will happen: the hard-\nware detects that the address is out of bounds, traps into the OS, likely\nleading to the termination of the offending process. And now you know\nthe origin of the famous term that all C programmers learn to d read: the\nsegmentation violation or segmentation fault .\n16.2 Which Segment Are W e Referring T o?\nThe hardware uses segment registers during translation. Ho w does it\nknow the offset into a segment, and to which segment an addres s refers?\nOne common approach, sometimes referred to as an explicit approach,\nis to chop up the address space into segments based on the top f ew bits\nof the virtual address; this technique was used in the V AX/VM S system\n[LL82]. In our example above, we have three segments; thus we need two\nbits to accomplish our task. If we use the top two bits of our 14 -bit virtual\naddress to select the segment, our virtual address looks lik e this:\n13 12 11 10 9 8 7 6 5 4 3 2 1 0\nSegment Offset\nIn our example, then, if the top two bits are 00, the hardware k nows\nthe virtual address is in the code segment, and thus uses the c ode base\nand bounds pair to relocate the address to the correct physic al location.\nIf the top two bits are 01, the hardware knows the address is in the heap,\nand thus uses the heap base and bounds. Let\u2019s take our example heap\nvirtual address from above (4200) and translate it, just to m ake sure this\nis clear . The virtual address 4200, in binary form, can be see n here:\n13\n0\n12\n1\n11\n0\n10\n0\n9\n0\n8\n0\n7\n0\n6\n1\n5\n1\n4\n0\n3\n1\n2\n0\n1\n0\n0\n0\nSegment Offset\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSE G M E N TATI ON 145\nAs you can see from the picture, the top two bits (01) tell the h ardware\nwhich segment we are referring to. The bottom 12 bits are the offset into\nthe segment: 0000 0110 1000, or hex 0x068, or 104 in decimal. T hus, the\nhardware simply takes the \ufb01rst two bits to determine which se gment reg-\nister to use, and then takes the next 12 bits as the offset into the segment.\nBy adding the base register to the offset, the hardware arriv es at the \ufb01-\nnal physical address. Note the offset eases the bounds check too: we can\nsimply check if the offset is less than the bounds; if not, the address is ille-\ngal. Thus, if base and bounds were arrays (with one entry per s egment),\nthe hardware would be doing something like this to obtain the desired\nphysical address:\n1 // get top 2 bits of 14-bit VA\n2 Segment = (VirtualAddress & SEG_MASK) >> SEG_SHIFT\n3 // now get offset\n4 Offset = VirtualAddress & OFFSET_MASK\n5 if (Offset >= Bounds[Segment])\n6 RaiseException(PROTECTION_FAULT)\n7 else\n8 PhysAddr = Base[Segment] + Offset\n9 Register = AccessMemory(PhysAddr)"
  },
  {
    "content": " top 2 bits of 14-bit VA\n2 Segment = (VirtualAddress & SEG_MASK) >> SEG_SHIFT\n3 // now get offset\n4 Offset = VirtualAddress & OFFSET_MASK\n5 if (Offset >= Bounds[Segment])\n6 RaiseException(PROTECTION_FAULT)\n7 else\n8 PhysAddr = Base[Segment] + Offset\n9 Register = AccessMemory(PhysAddr)\nIn our running example, we can \ufb01ll in values for the constants above.\nSpeci\ufb01cally , SEG MASK would be set to 0x3000, SEG SHIFT to 12, and\nOFFSET MASK to 0xFFF.\nY ou may also have noticed that when we use the top two bits, and we\nonly have three segments (code, heap, stack), one segment of the address\nspace goes unused. Thus, some systems put code in the same seg ment as\nthe heap and thus use only one bit to select which segment to us e [LL82].\nThere are other ways for the hardware to determine which segm ent\na particular address is in. In the implicit approach, the hardware deter-\nmines the segment by noticing how the address was formed. If, for ex-\nample, the address was generated from the program counter (i .e., it was\nan instruction fetch), then the address is within the code se gment; if the\naddress is based off of the stack or base pointer , it must be in the stack\nsegment; any other address must be in the heap.\n16.3 What About The Stack?\nThus far , we\u2019ve left out one important component of the addre ss space:\nthe stack. The stack has been relocated to physical address 2 8KB in the di-\nagram above, but with one critical difference: it grows backwards \u2013 in phys-\nical memory , it starts at 28KB and grows back to 26KB, corresp onding to\nvirtual addresses 16KB to 14KB; translation has to proceed d ifferently .\nThe \ufb01rst thing we need is a little extra hardware support. Ins tead of\njust base and bounds values, the hardware also needs to know w hich way\nthe segment grows (a bit, for example, that is set to 1 when the segment\ngrows in the positive direction, and 0 for negative). Our upd ated view of\nwhat the hardware tracks is seen in T able 16.2.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n146 SE G M E N TAT IO N\nSegment Base Size Grows Positive?\nCode 32K 2K 1\nHeap 34K 2K 1\nStack 28K 2K 0\nT able 16.2: Segment Registers (With Negative-Growth Support)\nWith the hardware understanding that segments can grow in th e neg-\native direction, the hardware must now translate such virtu al addresses\nslightly differently . Let\u2019s take an example stack virtual a ddress and trans-\nlate it to understand the process.\nIn this example, assume we wish to access virtual address 15K B, which\nshould map to physical address 27KB. Our virtual address, in binary\nform, thus looks like this: 11 1100 0000 0000 (hex 0x3C00). Th e hard-\nware uses the top two bits (11) to designate the segment, but t hen we\nare left with an offset of 3KB. T o obtain the correct negative offset, we\nmust subtract the maximum segment size from 3KB: in this exam ple, a\nsegment can be 4KB, and thus the correct negative offset is 3K B - 4KB\nwhich equals -1KB. W e simply add the negative offset (-1KB) t o the base\n(28KB) to arrive at the correct physical address: 27KB. The b ounds check\ncan be calculated by ensuring the absolute value of the negat ive offset is\nless than the segment\u2019s size.\n16.4 Support for Sharing\nAs support for segmentation grew , system designers soon rea lized that\nthey could realize new types of ef\ufb01ciencies with a little mor e hardware\nsupport. Speci\ufb01cally , to save memory , sometimes it is usefu l to share\ncertain memory segments between address spaces. In particu lar , code\nsharing is common and still in use in systems today .\nT o support sharing, we need a little"
  },
  {
    "content": ".4 Support for Sharing\nAs support for segmentation grew , system designers soon rea lized that\nthey could realize new types of ef\ufb01ciencies with a little mor e hardware\nsupport. Speci\ufb01cally , to save memory , sometimes it is usefu l to share\ncertain memory segments between address spaces. In particu lar , code\nsharing is common and still in use in systems today .\nT o support sharing, we need a little extra support from the ha rdware,\nin the form of protection bits . Basic support adds a few bits per segment,\nindicating whether or not a program can read or write a segmen t, or per-\nhaps execute code that lies within the segment. By setting a c ode segment\nto read-only , the same code can be shared across multiple pro cesses, with-\nout worry of harming isolation; while each process still thi nks that it is ac-\ncessing its own private memory , the OS is secretly sharing me mory which\ncannot be modi\ufb01ed by the process, and thus the illusion is pre served.\nAn example of the additional information tracked by the hard ware\n(and OS) is shown in Figure\n16.3. As you can see, the code segment is\nset to read and execute, and thus the same physical segment in memory\ncould be mapped into multiple virtual address spaces.\nWith protection bits, the hardware algorithm described ear lier would\nalso have to change. In addition to checking whether a virtua l address is\nwithin bounds, the hardware also has to check whether a parti cular ac-\ncess is permissible. If a user process tries to write to a read -only page, or\nexecute from a non-executable page, the hardware should rai se an excep-\ntion, and thus let the OS deal with the offending process.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSE G M E N TATI ON 147\nSegment Base Size Grows Positive? Protection\nCode 32K 2K 1 Read-Execute\nHeap 34K 2K 1 Read-W rite\nStack 28K 2K 0 Read-W rite\nT able 16.3: Segment Register V alues (with Protection)\n16.5 Fine-grained vs. Coarse-grained Segmentation\nMost of our examples thus far have focused on systems with jus t a\nfew segments (i.e., code, stack, heap); we can think of this s egmentation\nas coarse-grained, as it chops up the address space into relatively large,\ncoarse chunks. However , some early systems (e.g., Multics [ CV65,DD68])\nwere more \ufb02exible and allowed for address spaces to consist o f a large\nnumber smaller segments, referred to as \ufb01ne-grained segmentation.\nSupporting many segments requires even further hardware su pport,\nwith a segment table of some kind stored in memory . Such segment ta-\nbles usually support the creation of a very large number of se gments, and\nthus enable a system to use segments in more \ufb02exible ways than we have\nthus far discussed. For example, early machines like the Bur roughs B5000\nhad support for thousands of segments, and expected a compil er to chop\ncode and data into separate segments which the OS and hardwar e would\nthen support [RK68]. The thinking at the time was that by havi ng \ufb01ne-\ngrained segments, the OS could better learn about which segm ents are in\nuse and which are not and thus utilize main memory more effect ively .\n16.6 OS Support\nY ou now should have a basic idea as to how segmentation works.\nPieces of the address space are relocated into physical memo ry as the\nsystem runs, and thus a huge savings of physical memory is ach ieved\nrelative to our simpler approach with just a single base/bou nds pair for\nthe entire address space. Speci\ufb01cally , all the unused space between the\nstack and the heap need not be allocated in physical memory , a llowing\nus to \ufb01t more address spaces into physical memory .\nHowever , segmentation raises a number of new issues. W e\u2019ll \ufb01 rst de-\nscribe the new OS issues that must be addressed. The \ufb01rst is an old one:\nwhat should the OS"
  },
  {
    "content": "the entire address space. Speci\ufb01cally , all the unused space between the\nstack and the heap need not be allocated in physical memory , a llowing\nus to \ufb01t more address spaces into physical memory .\nHowever , segmentation raises a number of new issues. W e\u2019ll \ufb01 rst de-\nscribe the new OS issues that must be addressed. The \ufb01rst is an old one:\nwhat should the OS do on a context switch? Y ou should have a goo d\nguess by now: the segment registers must be saved and restore d. Clearly ,\neach process has its own virtual address space, and the OS mus t make\nsure to set up these registers correctly before letting the p rocess run again.\nThe second, and more important, issue is managing free space in phys-\nical memory . When a new address space is created, the OS has to be\nable to \ufb01nd space in physical memory for its segments. Previo usly , we\nassumed that each address space was the same size, and thus ph ysical\nmemory could be thought of as a bunch of slots where processes would\n\ufb01t in. Now , we have a number of segments per process, and each s egment\nmight be a different size.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n148 SE G M E N TAT IO N\n64KB\n56KB\n48KB\n40KB\n32KB\n24KB\n16KB\n8KB\n0KB\nOperating System\nNot Compacted\n(not in use)\n(not in use)\n(not in use)\nAllocated\nAllocated\nAllocated\n64KB\n56KB\n48KB\n40KB\n32KB\n24KB\n16KB\n8KB\n0KB\n(not in use)\nAllocated\nOperating System\nCompacted\nFigure 16.3: Non-compacted and Compacted Memory\nThe general problem that arises is that physical memory quic kly be-\ncomes full of little holes of free space, making it dif\ufb01cult t o allocate new\nsegments, or to grow existing ones. W e call this problem external frag-\nmentation [R69]; see Figure 16.3 (left).\nIn the example, a process comes along and wishes to allocate a 20KB\nsegment. In that example, there is 24KB free, but not in one co ntiguous\nsegment (rather , in three non-contiguous chunks). Thus, th e OS cannot\nsatisfy the 20KB request.\nOne solution to this problem would be to compact physical memory\nby rearranging the existing segments. For example, the OS co uld stop\nwhichever processes are running, copy their data to one cont iguous re-\ngion of memory , change their segment register values to poin t to the\nnew physical locations, and thus have a large free extent of m emory with\nwhich to work. By doing so, the OS enables the new allocation r equest\nto succeed. However , compaction is expensive, as copying se gments is\nmemory-intensive and thus would use a fair amount of process or time.\nSee Figure 16.3 (right) for a diagram of compacted physical memory .\nA simpler approach is to use a free-list management algorith m that\ntries to keep large extents of memory available for allocati on. There are\nliterally hundreds of approaches that people have taken, in cluding clas-\nsic algorithms like best-\ufb01t (which keeps a list of free spaces and returns\nthe one closest in size that satis\ufb01es the desired allocation to the requester),\nworst-\ufb01t , \ufb01rst-\ufb01t , and more complex schemes like buddy algorithm [K68].\nAn excellent survey by Wilson et al. is a good place to start if you want to\nlearn more about such algorithms [W+95], or you can wait unti l we cover\nsome of the basics ourselves in a later chapter . Unfortunate ly , though, no\nmatter how smart the algorithm, external fragmentation wil l still exist;\nthus, a good algorithm simply attempts to minimize it.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSE G M E N TATI ON 149\nTI P : I F 1000 S O L U"
  },
  {
    "content": " later chapter . Unfortunate ly , though, no\nmatter how smart the algorithm, external fragmentation wil l still exist;\nthus, a good algorithm simply attempts to minimize it.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSE G M E N TATI ON 149\nTI P : I F 1000 S O L U T I O N S EX I S T, N O GR E AT ON E DO E S\nThe fact that so many different algorithms exist to try to min imize exter-\nnal fragmentation is indicative of a stronger underlying tr uth: there is no\none \u201cbest\u201d way to solve the problem. Thus, we settle for somet hing rea-\nsonable and hope it is good enough. The only real solution (as we will\nsee in forthcoming chapters) is to avoid the problem altoget her , by never\nallocating memory in variable-sized chunks.\n16.7 Summary\nSegmentation solves a number of problems, and helps us build a more\neffective virtualization of memory . Beyond just dynamic re location, seg-\nmentation can better support sparse address spaces, by avoi ding the huge\npotential waste of memory between logical segments of the ad dress space.\nIt is also fast, as doing the arithmetic segmentation requir es in hardware\nis easy and well-suited to hardware; the overheads of transl ation are min-\nimal. A fringe bene\ufb01t arises too: code sharing. If code is pla ced within\na separate segment, such a segment could potentially be shar ed across\nmultiple running programs.\nHowever , as we learned, allocating variable-sized segment s in mem-\nory leads to some problems that we\u2019d like to overcome. The \ufb01rs t, as dis-\ncussed above, is external fragmentation. Because segments are variable-\nsized, free memory gets chopped up into odd-sized pieces, an d thus sat-\nisfying a memory-allocation request can be dif\ufb01cult. One ca n try to use\nsmart algorithms [W+95] or periodically compact memory , bu t the prob-\nlem is fundamental and hard to avoid.\nThe second and perhaps more important problem is that segmen tation\nstill isn\u2019t \ufb02exible enough to support our fully generalized , sparse address\nspace. For example, if we have a large but sparsely-used heap all in one\nlogical segment, the entire heap must still reside in memory in order to be\naccessed. In other words, if our model of how the address spac e is being\nused doesn\u2019t exactly match how the underlying segmentation has been\ndesigned to support it, segmentation doesn\u2019t work very well . W e thus\nneed to \ufb01nd some new solutions. Ready to \ufb01nd them?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n150 SE G M E N TAT IO N\nReferences\n[CV65] \u201cIntroduction and Overview of the Multics System\u201d\nF . J. Corbato and V . A. V yssotsky\nFall Joint Computer Conference, 1965\nOne of \ufb01ve papers presented on Multics at the Fall Joint Compu ter Conference; oh to be a \ufb02y on the wall\nin that room that day!\n[DD68] \u201cVirtual Memory , Processes, and Sharing in Multics\u201d\nRobert C. Daley and Jack B. Dennis\nCommunications of the ACM, V olume 11, Issue 5, May 1968\nAn early paper on how to perform dynamic linking in Multics, w hich was way ahead of its time. Dy-\nnamic linking \ufb01nally found its way back into systems about 20 years later , as the large X-windows\nlibraries demanded it. Some say that these large X11 librari es were MIT\u2019s revenge for removing support\nfor dynamic linking in early versions of UNIX !\n[G62] \u201cFact Segmentation\u201d\nM. N. Green\ufb01eld\nProceedings of the SJCC, V olume 21, May 1962\nAnother early paper on segmentation; so early that it has no r eferences to other work.\n[H61] \u201cProgram Organization and Record Keeping for Dynamic Storage\u201d\nA. W . Holt\nCommunications of the AC"
  },
  {
    "content": " dynamic linking in early versions of UNIX !\n[G62] \u201cFact Segmentation\u201d\nM. N. Green\ufb01eld\nProceedings of the SJCC, V olume 21, May 1962\nAnother early paper on segmentation; so early that it has no r eferences to other work.\n[H61] \u201cProgram Organization and Record Keeping for Dynamic Storage\u201d\nA. W . Holt\nCommunications of the ACM, V olume 4, Issue 10, October 1961\nAn incredibly early and dif\ufb01cult to read paper about segment ation and some of its uses.\n[I09] \u201cIntel 64 and IA-32 Architectures Software Developer \u2019s Manuals\u201d\nIntel, 2009\nA vailable: http://www .intel.com/products/processor/manuals\nT ry reading about segmentation in here (Chapter 3 in V olume 3 a); it\u2019ll hurt your head, at least a little\nbit.\n[K68] \u201cThe Art of Computer Programming: V olume I\u201d\nDonald Knuth\nAddison-W esley , 1968\nKnuth is famous not only for his early books on the Art of Compu ter Programming but for his typeset-\nting system T eX which is still a powerhouse typesetting tool used by professionals today, and indeed to\ntypeset this very book. His tomes on algorithms are a great ea rly reference to many of the algorithms\nthat underly computing systems today.\n[L83] \u201cHints for Computer Systems Design\u201d\nButler Lampson\nACM Operating Systems Review , 15:5, October 1983\nA treasure-trove of sage advice on how to build systems. Hard to read in one sitting; take it in a little at\na time, like a \ufb01ne wine, or a reference manual.\n[LL82] \u201cVirtual Memory Management in the V AX/VMS Operating System\u201d\nHenry M. Levy and Peter H. Lipman\nIEEE Computer , V olume 15, Number 3 (March 1982)\nA classic memory management system, with lots of common sens e in its design. We\u2019ll study it in more\ndetail in a later chapter .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSE G M E N TATI ON 151\n[RK68] \u201cDynamic Storage Allocation Systems\u201d\nB. Randell and C.J. Kuehner\nCommunications of the ACM\nV olume 11(5), pages 297-306, May 1968\nA nice overview of the differences between paging and segmen tation, with some historical discussion of\nvarious machines.\n[R69] \u201cA note on storage fragmentation and program segmenta tion\u201d\nBrian Randell\nCommunications of the ACM\nV olume 12(7), pages 365-372, July 1969\nOne of the earliest papers to discuss fragmentation.\n[W+95] \u201cDynamic Storage Allocation: A Survey and Critical R eview\u201d\nPaul R. Wilson, Mark S. Johnstone, Michael Neely , and David B oles\nIn International W orkshop on Memory Management\nScotland, United Kingdom, September 1995\nA great survey paper on memory allocators.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n152 SE G M E N TAT IO N\nHomework\nThis program allows you to see how address translations are p erformed\nin a system with segmentation. See the README for details.\nQuestions\n\u2022 First let\u2019s use a tiny address space to translate some addres ses. Here\u2019s\na simple set of parameters with a few different random seeds; can\nyou translate the addresses?\nsegmentation.py -a 128 -p 512 -b 0 -l 20 -B 512 -L 20 -s 0\nsegmentation.py -a 128 -p 512 -b 0 -l 20 -B 512 -L 20 -s 1\nsegmentation.py -a 128 -p 512 -b 0 -l 20 -B 512 -L 20 -s 2\n\u2022 Now , let\u2019s see if we understand this tiny address space we\u2019ve con-\nstructed (using the parameters from the question above). Wh at is\nthe highest legal virtual address in segment 0? What about th e low"
  },
  {
    "content": "py -a 128 -p 512 -b 0 -l 20 -B 512 -L 20 -s 1\nsegmentation.py -a 128 -p 512 -b 0 -l 20 -B 512 -L 20 -s 2\n\u2022 Now , let\u2019s see if we understand this tiny address space we\u2019ve con-\nstructed (using the parameters from the question above). Wh at is\nthe highest legal virtual address in segment 0? What about th e low-\nest legal virtual address in segment 1? What are the lowest an d\nhighest illegal addresses in this entire address space? Finally , how\nwould you run segmentation.py with the -A \ufb02ag to test if you\nare right?\n\u2022 Let\u2019s say we have a tiny 16-byte address space in a 128-byte ph ysical\nmemory . What base and bounds would you set up so as to get\nthe simulator to generate the following translation result s for the\nspeci\ufb01ed address stream: valid, valid, violation, ..., vio lation, valid,\nvalid? Assume the following parameters:\nsegmentation.py -a 16 -p 128\n-A 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n--b0 ? --l0 ? --b1 ? --l1 ?\n\u2022 Assuming we want to generate a problem where roughly 90% of th e\nrandomly-generated virtual addresses are valid (i.e., not segmenta-\ntion violations). How should you con\ufb01gure the simulator to d o so?\nWhich parameters are important?\n\u2022 Can you run the simulator such that no virtual addresses are v alid?\nHow?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n17\nFree-Space Management\nIn this chapter , we take a small detour from our discussion of virtual-\nizing memory to discuss a fundamental aspect of any memory ma nage-\nment system, whether it be a malloc library (managing pages o f a pro-\ncess\u2019s heap) or the OS itself (managing portions of the addre ss space of a\nprocess). Speci\ufb01cally , we will discuss the issues surround ing free-space\nmanagement.\nLet us make the problem more speci\ufb01c. Managing free space can cer-\ntainly be easy , as we will see when we discuss the concept of paging. It is\neasy when the space you are managing is divided into \ufb01xed-siz ed units;\nin such a case, you just keep a list of these \ufb01xed-sized units; when a client\nrequests one of them, return the \ufb01rst entry .\nWhere free-space management becomes more dif\ufb01cult (and int erest-\ning) is when the free space you are managing consists of varia ble-sized\nunits; this arises in a user-level memory-allocation libra ry (as in malloc()\nand free()) and in an OS managing physical memory when using seg-\nmentation to implement virtual memory . In either case, the problem tha t\nexists is known as external fragmentation : the free space gets chopped\ninto little pieces of different sizes and is thus fragmented ; subsequent re-\nquests may fail because there is no single contiguous space t hat can sat-\nisfy the request, even though the total amount of free space e xceeds the\nsize of the request.\nfree used free\n0 10 20 30\nThe \ufb01gure shows an example of this problem. In this case, the t otal\nfree space available is 20 bytes; unfortunately , it is fragm ented into two\nchunks of size 10 each. As a result, a request for 15 bytes will fail even\nthough there are 20 bytes free. And thus we arrive at the probl em ad-\ndressed in this chapter .\n153\n154 FR E E -S PA C E MA N A G E M E NT\nCR U X : H O W TO MA N A G E FR E E SPA C E\nHow should free space be managed, when satisfying variable- sized re-\nquests? What strategies can be used to minimize fragmentati on? What\nare the time and space overheads of alternate approaches?\n17.1 Assumptions\nMost of this discussion will focus on the great history of all ocators\n"
  },
  {
    "content": "S PA C E MA N A G E M E NT\nCR U X : H O W TO MA N A G E FR E E SPA C E\nHow should free space be managed, when satisfying variable- sized re-\nquests? What strategies can be used to minimize fragmentati on? What\nare the time and space overheads of alternate approaches?\n17.1 Assumptions\nMost of this discussion will focus on the great history of all ocators\nfound in user-level memory-allocation libraries. W e draw o n Wilson\u2019s\nexcellent survey [W+95] but encourage interested readers t o go to the\nsource document itself for more details 1.\nW e assume a basic interface such as that provided by malloc() and\nfree(). Speci\ufb01cally , void *malloc(size t size) takes a single pa-\nrameter , size, which is the number of bytes requested by the applica-\ntion; it hands back a pointer (of no particular type, or a void pointer in\nC lingo) to a region of that size (or greater). The complement ary routine\nvoid free(void *ptr) takes a pointer and frees the corresponding\nchunk. Note the implication of the interface: the user , when freeing the\nspace, does not inform the library of its size; thus, the libr ary must be able\nto \ufb01gure out how big a chunk of memory is when handed just a poin ter\nto it. W e\u2019ll discuss how to do this a bit later on in the chapter .\nThe space that this library manages is known historically as the heap,\nand the generic data structure used to manage free space in th e heap is\nsome kind of free list . This structure contains references to all of the free\nchunks of space in the managed region of memory . Of course, th is data\nstructure need not be a list per se , but just some kind of data structure to\ntrack free space.\nW e further assume that primarily we are concerned with external frag-\nmentation, as described above. Allocators could of course also have th e\nproblem of internal fragmentation ; if an allocator hands out chunks of\nmemory bigger than that requested, any unasked for (and thus unused)\nspace in such a chunk is considered internal fragmentation (because the\nwaste occurs inside the allocated unit) and is another examp le of space\nwaste. However , for the sake of simplicity , and because it is the more in-\nteresting of the two types of fragmentation, we\u2019ll mostly fo cus on external\nfragmentation.\nW e\u2019ll also assume that once memory is handed out to a client, i t cannot\nbe relocated to another location in memory . For example, if a program\ncalls malloc() and is given a pointer to some space within the heap,\nthat memory region is essentially \u201cowned\u201d by the program (an d cannot\nbe moved by the library) until the program returns it via a cor respond-\ning call to free(). Thus, no compaction of free space is possible, which\n1 It is nearly 80 pages long; thus, you really have to be interes ted!\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nFR E E -S PA C E MA N A G E M E N T 155\nwould be useful to combat fragmentation 2 . Compaction could, however ,\nbe used in the OS to deal with fragmentation when implementin g seg-\nmentation; see the chapter on segmentation for details.\nFinally , we\u2019ll assume that the allocator manages a contiguo us region\nof bytes. In some cases, an allocator could ask for that regio n to grow;\nfor example, a user-level memory-allocation library might call into the\nkernel to grow the heap (via a system call such as sbrk) when it runs out\nof space. However , for simplicity , we\u2019ll just assume that th e region is a\nsingle \ufb01xed size throughout its life.\n17.2 Low-level Mechanisms\nBefore delving into some policy details, we\u2019ll \ufb01rst cover so me com-\nmon mechanisms used in most allocators. First, we\u2019ll discus s the basics of\nsplitting and coalescing, common techniques in most any all ocator . Sec-\nond, we\u2019ll show how one can track the size of"
  },
  {
    "content": " a\nsingle \ufb01xed size throughout its life.\n17.2 Low-level Mechanisms\nBefore delving into some policy details, we\u2019ll \ufb01rst cover so me com-\nmon mechanisms used in most allocators. First, we\u2019ll discus s the basics of\nsplitting and coalescing, common techniques in most any all ocator . Sec-\nond, we\u2019ll show how one can track the size of allocated region s quickly\nand with relative ease. Finally , we\u2019ll discuss how to build a simple list\ninside the free space to keep track of what is free and what isn \u2019t.\nSplitting and Coalescing\nA free list contains a set of elements that describe the free s pace still re-\nmaining in the heap. Thus, assume the following 30-byte heap :\nfree used free\n0 10 20 30\nThe free list for this heap would have two elements on it. One e ntry de-\nscribes the \ufb01rst 10-byte free segment (bytes 0-9), and one en try describes\nthe other free segment (bytes 20-29):\nhead addr:0\nlen:10\naddr:20\nlen:10 NULL\nAs described above, a request for anything greater than 10 by tes will\nfail (returning NULL); there just isn\u2019t a single contiguous chunk of mem-\nory of that size available. A request for exactly that size (1 0 bytes) could\nbe satis\ufb01ed easily by either of the free chunks. But what happ ens if the\nrequest is for something smaller than 10 bytes?\nAssume we have a request for just a single byte of memory . In th is\ncase, the allocator will perform an action known as splitting: it will \ufb01nd\n2 Once you hand a pointer to a chunk of memory to a C program, it is generally dif\ufb01cult\nto determine all references (pointers) to that region, whic h may be stored in other variables\nor even in registers at a given point in execution. This may no t be the case in more strongly-\ntyped, garbage-collected languages, which would thus enab le compaction as a technique to\ncombat fragmentation.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n156 FR E E -S PA C E MA N A G E M E NT\na free chunk of memory that can satisfy the request and split i t into two.\nThe \ufb01rst chunk it will return to the caller; the second chunk w ill remain\non the list. Thus, in our example above, if a request for 1 byte were made,\nand the allocator decided to use the second of the two element s on the list\nto satisfy the request, the call to malloc() would return 20 ( the address of\nthe 1-byte allocated region) and the list would end up lookin g like this:\nhead addr:0\nlen:10\naddr:21\nlen:9 NULL\nIn the picture, you can see the list basically stays intact; t he only change\nis that the free region now starts at 21 instead of 20, and the l ength of that\nfree region is now just 9 3 . Thus, the split is commonly used in allocators\nwhen requests are smaller than the size of any particular fre e chunk.\nA corollary mechanism found in many allocators is known as coalesc-\ning of free space. T ake our example from above once more (free 10 b ytes,\nused 10 bytes, and another free 10 bytes).\nGiven this (tiny) heap, what happens when an application cal ls free(10),\nthus returning the space in the middle of the heap? If we simpl y add this\nfree space back into our list without too much thinking, we mi ght end up\nwith a list that looks like this:\nhead addr:10\nlen:10\naddr:0\nlen:10\naddr:20\nlen:10 NULL\nNote the problem: while the entire heap is now free, it is seem ingly\ndivided into three chunks of 10 bytes each. Thus, if a user req uests 20\nbytes, a simple list traversal will not \ufb01nd such a free chunk, and return\nfailure.\nWhat allocators do in order to avoid this problem is coalesce free space\nwhen a chunk of memory is freed. The idea is simple: when retur ning a\nfree chunk in memory , look carefully at the addresses of"
  },
  {
    "content": " free, it is seem ingly\ndivided into three chunks of 10 bytes each. Thus, if a user req uests 20\nbytes, a simple list traversal will not \ufb01nd such a free chunk, and return\nfailure.\nWhat allocators do in order to avoid this problem is coalesce free space\nwhen a chunk of memory is freed. The idea is simple: when retur ning a\nfree chunk in memory , look carefully at the addresses of the c hunk you\nare returning as well as the nearby chunks of free space; if th e newly-\nfreed space sits right next to one (or two, as in this example) existing free\nchunks, merge them into a single larger free chunk. Thus, wit h coalesc-\ning, our \ufb01nal list should look like this:\nhead addr:0\nlen:30 NULL\nIndeed, this is what the heap list looked like at \ufb01rst, before any allo-\ncations were made. With coalescing, an allocator can better ensure that\nlarge free extents are available for the application.\n3 This discussion assumes that there are no headers, an unreal istic but simplifying assump-\ntion we make for now .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nFR E E -S PA C E MA N A G E M E N T 157\nptr\nThe header used by malloc library\nThe 20 bytes returned to caller\nFigure 17.1: An Allocated Region Plus Header\nsize: 20\nmagic: 1234567\nhptr\nptr\nThe 20 bytes returned to caller\nFigure 17.2: Speci\ufb01c Contents Of The Header\nT racking The Size Of Allocated Regions\nY ou might have noticed that the interface to free(void *ptr) does\nnot take a size parameter; thus it is assumed that given a poin ter , the\nmalloc library can quickly determine the size of the region o f memory\nbeing freed and thus incorporate the space back into the free list.\nT o accomplish this task, most allocators store a little bit o f extra infor-\nmation in a header block which is kept in memory , usually just before\nthe handed-out chunk of memory . Let\u2019s look at an example agai n (Fig-\nure\n17.1). In this example, we are examining an allocated block of siz e 20\nbytes, pointed to by ptr; imagine the user called malloc() and stored\nthe results in ptr, e.g., ptr = malloc(20);.\nThe header minimally contains the size of the allocated regi on (in this\ncase, 20); it may also contain additional pointers to speed u p dealloca-\ntion, a magic number to provide additional integrity checki ng, and other\ninformation. Let\u2019s assume a simple header which contains th e size of the\nregion and a magic number , like this:\ntypedef struct __header_t {\nint size;\nint magic;\n} header_t;\nThe example above would look like what you see in Figure\n17.2. When\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n158 FR E E -S PA C E MA N A G E M E NT\nthe user calls free(ptr), the library then uses simple pointer arithmetic\nto \ufb01gure out where the header begins:\nvoid free(void *ptr) {\nheader_t *hptr = (void *)ptr - sizeof(header_t);\n}\nAfter obtaining such a pointer to the header , the library can easily de-\ntermine whether the magic number matches the expected value as a san-\nity check ( assert(hptr->magic == 1234567)) and calculate the to-\ntal size of the newly-freed region via simple math (i.e., add ing the size of\nthe header to size of the region). Note the small but critical detail in the\nlast sentence: the size of the free region is the size of the he ader plus the\nsize of the space allocated to the user . Thus, when a user requ ests N bytes\nof memory , the library does not search for a free chunk of size N ; rather ,\nit searches for a free chunk of size N plus the size of the header .\nEmbedding A Free List\nThus far we have treated our"
  },
  {
    "content": " region). Note the small but critical detail in the\nlast sentence: the size of the free region is the size of the he ader plus the\nsize of the space allocated to the user . Thus, when a user requ ests N bytes\nof memory , the library does not search for a free chunk of size N ; rather ,\nit searches for a free chunk of size N plus the size of the header .\nEmbedding A Free List\nThus far we have treated our simple free list as a conceptual e ntity; it is\njust a list describing the free chunks of memory in the heap. B ut how do\nwe build such a list inside the free space itself?\nIn a more typical list, when allocating a new node, you would j ust call\nmalloc() when you need space for the node. Unfortunately , within the\nmemory-allocation library , you can\u2019t do this! Instead, you need to build\nthe list inside the free space itself. Don\u2019t worry if this sounds a little wei rd;\nit is, but not so weird that you can\u2019t do it!\nAssume we have a 4096-byte chunk of memory to manage (i.e., th e\nheap is 4KB). T o manage this as a free list, we \ufb01rst have to init ialize said\nlist; initially , the list should have one entry , of size 4096 (minus the header\nsize). Here is the description of a node of the list:\ntypedef struct __node_t {\nint size;\nstruct __node_t *next;\n} node_t;\nNow let\u2019s look at some code that initializes the heap and puts the \ufb01rst\nelement of the free list inside that space. W e are assuming th at the heap is\nbuilt within some free space acquired via a call to the system call mmap();\nthis is not the only way to build such a heap but serves us well i n this\nexample. Here is the code:\n// mmap() returns a pointer to a chunk of free space\nnode_t *head = mmap(NULL, 4096, PROT_READ|PROT_WRITE,\nMAP_ANON|MAP_PRIVATE, -1, 0);\nhead->size = 4096 - sizeof(node_t);\nhead->next = NULL;\nAfter running this code, the status of the list is that it has a single entry ,\nof size 4088. Y es, this is a tiny heap, but it serves as a \ufb01ne exa mple for us\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nFR E E -S PA C E MA N A G E M E N T 159\nsize: 4088\nnext: 0\n...\nhead [virtual address: 16KB]\nheader: size field\nheader: next field (NULL is 0)\nthe rest of the 4KB chunk\nFigure 17.3: A Heap With One Free Chunk\nsize: 100\nmagic: 1234567\n. . .\nsize: 3980\nnext: 0\n. . .\nptr\n[virtual address: 16KB]\nhead\nThe 100 bytes now allocated\nThe free 3980 byte chunk\nFigure 17.4: A Heap: After One Allocation\nhere. The head pointer contains the beginning address of this range; let\u2019s\nassume it is 16KB (though any virtual address would be \ufb01ne). V isually ,\nthe heap thus looks like what you see in Figure 17.3.\nNow , let\u2019s imagine that a chunk of memory is requested, say of size\n100 bytes. T o service this request, the library will \ufb01rst \ufb01nd a chunk that is\nlarge enough to accommodate the request; because there is on ly one free\nchunk (size: 4088), this chunk will be chosen. Then, the chun k will be\nsplit into two: one chunk big enough to service the request (and hea der ,\nas described above), and the remaining free chunk. Assuming an 8-byte\nheader (an integer size and an integer magic number), the spa ce in the\nheap now looks like what you see in Figure 17.4.\nThus, upon the request for 100 bytes, the library allocated 1 08 bytes\nout of the existing one free chunk, returns a pointer (marked ptr in the\n\ufb01gure above) to it, stashes the header"
  },
  {
    "content": " hea der ,\nas described above), and the remaining free chunk. Assuming an 8-byte\nheader (an integer size and an integer magic number), the spa ce in the\nheap now looks like what you see in Figure 17.4.\nThus, upon the request for 100 bytes, the library allocated 1 08 bytes\nout of the existing one free chunk, returns a pointer (marked ptr in the\n\ufb01gure above) to it, stashes the header information immediat ely before the\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n160 FR E E -S PA C E MA N A G E M E NT\nsize: 100\nmagic: 1234567\n. . .\nsize: 100\nmagic: 1234567\n. . .\nsize: 100\nmagic: 1234567\n. . .\nsize: 3764\nnext: 0\n. . .\nsptr\n[virtual address: 16KB]\nhead\n100 bytes still allocated\n100 bytes still allocated\n (but about to be freed)\n100-bytes still allocated\nThe free 3764-byte chunk\nFigure 17.5: Free Space With Three Chunks Allocated\nallocated space for later use upon free(), and shrinks the one free node\nin the list to 3980 bytes (4088 minus 108).\nNow let\u2019s look at the heap when there are three allocated regi ons, each\nof 100 bytes (or 108 including the header). A visualization o f this heap is\nshown in Figure 17.5.\nAs you can see therein, the \ufb01rst 324 bytes of the heap are now al lo-\ncated, and thus we see three headers in that space as well as th ree 100-\nbyte regions being used by the calling program. The free list remains\nuninteresting: just a single node (pointed to by head), but now only 3764\nbytes in size after the three splits. But what happens when th e calling\nprogram returns some memory via free()?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nFR E E -S PA C E MA N A G E M E N T 161\nsize: 100\nmagic: 1234567\n. . .\nsize: 100\nnext: 16708\n. . .\nsize: 100\nmagic: 1234567\n. . .\nsize: 3764\nnext: 0\n. . .\n[virtual address: 16KB]\nhead\nsptr\n100 bytes still allocated\n(now a free chunk of memory)\n100-bytes still allocated\nThe free 3764-byte chunk\nFigure 17.6: Free Space With T wo Chunks Allocated\nIn this example, the application returns the middle chunk of allocated\nmemory , by calling free(16500) (the value 16500 is arrived upon by\nadding the start of the memory region, 16384, to the 108 of the previous\nchunk and the 8 bytes of the header for this chunk). This value is shown\nin the previous diagram by the pointer sptr.\nThe library immediately \ufb01gures out the size of the free regio n, and\nthen adds the free chunk back onto the free list. Assuming we i nsert at\nthe head of the free list, the space now looks like this (Figur e 17.6).\nAnd now we have a list that starts with a small free chunk (100 b ytes,\npointed to by the head of the list) and a large free chunk (3764 bytes).\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n162 FR E E -S PA C E MA N A G E M E NT\nsize: 100\nnext: 16492\n. . .\nsize: 100\nnext: 16708\n. . .\nsize: 100\nnext: 16384\n. . .\nsize: 3764\nnext: 0\n. . .\n[virtual address: 16KB]\nhead\n(now free)\n(now free)\n(now free)\nThe free 3764-byte chunk\nFigure 17.7: A Non-Coalesced Free List\nOur list \ufb01nally has more than one element on it! And yes, the fr ee space\nis fragmented, an unfortunate but common occurrence.\nOne last example: let\u2019s"
  },
  {
    "content": " 3764\nnext: 0\n. . .\n[virtual address: 16KB]\nhead\n(now free)\n(now free)\n(now free)\nThe free 3764-byte chunk\nFigure 17.7: A Non-Coalesced Free List\nOur list \ufb01nally has more than one element on it! And yes, the fr ee space\nis fragmented, an unfortunate but common occurrence.\nOne last example: let\u2019s assume now that the last two in-use ch unks are\nfreed. Without coalescing, you might end up with a free list t hat is highly\nfragmented (see Figure 17.7).\nAs you can see from the \ufb01gure, we now have a big mess! Why? Simpl e,\nwe forgot to coalesce the list. Although all of the memory is free, it is\nchopped up into pieces, thus appearing as a fragmented memor y despite\nnot being one. The solution is simple: go through the list and merge\nneighboring chunks; when \ufb01nished, the heap will be whole aga in.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nFR E E -S PA C E MA N A G E M E N T 163\nGrowing The Heap\nW e should discuss one last mechanism found within many alloc ation li-\nbraries. Speci\ufb01cally , what should you do if the heap runs out of space?\nThe simplest approach is just to fail. In some cases this is th e only option,\nand thus returning NULL is an honorable approach. Don\u2019t feel bad! Y ou\ntried, and though you failed, you fought the good \ufb01ght.\nMost traditional allocators start with a small-sized heap a nd then re-\nquest more memory from the OS when they run out. T ypically , th is means\nthey make some kind of system call (e.g., sbrk in most U N I X systems) to\ngrow the heap, and then allocate the new chunks from there. T o service\nthe sbrk request, the OS \ufb01nds free physical pages, maps them into the\naddress space of the requesting process, and then returns th e value of\nthe end of the new heap; at that point, a larger heap is availab le, and the\nrequest can be successfully serviced.\n17.3 Basic Strategies\nNow that we have some machinery under our belt, let\u2019s go over s ome\nbasic strategies for managing free space. These approaches are mostly\nbased on pretty simple policies that you could think up yours elf; try it\nbefore reading and see if you come up with all of the alternati ves (or\nmaybe some new ones!).\nThe ideal allocator is both fast and minimizes fragmentatio n. Unfortu-\nnately , because the stream of allocation and free requests c an be arbitrary\n(after all, they are determined by the programmer), any part icular strat-\negy can do quite badly given the wrong set of inputs. Thus, we w ill not\ndescribe a \u201cbest\u201d approach, but rather talk about some basic s and discuss\ntheir pros and cons.\nBest Fit\nThe best \ufb01t strategy is quite simple: \ufb01rst, search through the free list and\n\ufb01nd chunks of free memory that are as big or bigger than the req uested\nsize. Then, return the one that is the smallest in that group o f candidates;\nthis is the so called best-\ufb01t chunk (it could be called smalle st \ufb01t too). One\npass through the free list is enough to \ufb01nd the correct block t o return.\nThe intuition behind best \ufb01t is simple: by returning a block t hat is close\nto what the user asks, best \ufb01t tries to reduce wasted space. Ho wever , there\nis a cost; naive implementations pay a heavy performance pen alty when\nperforming an exhaustive search for the correct free block.\nW orst Fit\nThe worst \ufb01t approach is the opposite of best \ufb01t; \ufb01nd the largest chunk\nand return the requested amount; keep the remaining (large) chunk on\nthe free list. W orst \ufb01t tries to thus leave big chunks free ins tead of lots of\nc\u20dd 2014, A R PA C I-D U S S"
  },
  {
    "content": "ty when\nperforming an exhaustive search for the correct free block.\nW orst Fit\nThe worst \ufb01t approach is the opposite of best \ufb01t; \ufb01nd the largest chunk\nand return the requested amount; keep the remaining (large) chunk on\nthe free list. W orst \ufb01t tries to thus leave big chunks free ins tead of lots of\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n164 FR E E -S PA C E MA N A G E M E NT\nsmall chunks that can arise from a best-\ufb01t approach. Once aga in, how-\never , a full search of free space is required, and thus this ap proach can be\ncostly . W orse, most studies show that it performs badly , lea ding to excess\nfragmentation while still having high overheads.\nFirst Fit\nThe \ufb01rst \ufb01t method simply \ufb01nds the \ufb01rst block that is big enough and\nreturns the requested amount to the user . As before, the rema ining free\nspace is kept free for subsequent requests.\nFirst \ufb01t has the advantage of speed \u2013 no exhaustive search of a ll the\nfree spaces are necessary \u2013 but sometimes pollutes the begin ning of the\nfree list with a small objects. Thus, how the allocator manag es the free\nlist\u2019s order becomes an issue. One approach is to use address-based or-\ndering; by keeping the list ordered by the address of the free space, coa-\nlescing becomes easier , and fragmentation tends to be reduc ed.\nNext Fit\nInstead of always beginning the \ufb01rst-\ufb01t search at the beginn ing of the list,\nthe next \ufb01t algorithm keeps an extra pointer to the location within the\nlist where one was looking last. The idea is to spread the sear ches for\nfree space throughout the list more uniformly , thus avoidin g splintering\nof the beginning of the list. The performance of such an appro ach is quite\nsimilar to \ufb01rst \ufb01t, as an exhaustive search is once again avoi ded.\nExamples\nHere are a few examples of the above strategies. Envision a fr ee list with\nthree elements on it, of sizes 10, 30, and 20 (we\u2019ll ignore hea ders and other\ndetails here, instead just focusing on how strategies opera te):\nhead 10 30 20 NULL\nAssume an allocation request of size 15. A best-\ufb01t approach w ould\nsearch the entire list and \ufb01nd that 20 was the best \ufb01t, as it is t he smallest\nfree space that can accommodate the request. The resulting f ree list:\nhead 10 30 5 NULL\nAs happens in this example, and often happens with a best-\ufb01t a p-\nproach, a small free chunk is now left over . A worst-\ufb01t approa ch is similar\nbut instead \ufb01nds the largest chunk, in this example 30. The re sulting list:\nhead 10 15 20 NULL\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nFR E E -S PA C E MA N A G E M E N T 165\nThe \ufb01rst-\ufb01t strategy , in this example, does the same thing as worst-\ufb01t,\nalso \ufb01nding the \ufb01rst free block that can satisfy the request. The difference\nis in the search cost; both best-\ufb01t and worst-\ufb01t look through the entire list;\n\ufb01rst-\ufb01t only examines free chunks until it \ufb01nds one that \ufb01ts, thus reducing\nsearch cost.\nThese examples just scratch the surface of allocation polic ies. More\ndetailed analysis with real workloads and more complex allo cator behav-\niors (e.g., coalescing) are required for a deeper understan ding. Perhaps\nsomething for a homework section, you say?\n17.4 Other Approaches\nBeyond the basic approaches described above, there have bee n a host\nof suggested techniques and algorithms to improve memory al location in\nsome way . W e list a few of them here for your consideration (i."
  },
  {
    "content": ". More\ndetailed analysis with real workloads and more complex allo cator behav-\niors (e.g., coalescing) are required for a deeper understan ding. Perhaps\nsomething for a homework section, you say?\n17.4 Other Approaches\nBeyond the basic approaches described above, there have bee n a host\nof suggested techniques and algorithms to improve memory al location in\nsome way . W e list a few of them here for your consideration (i. e., to make\nyou think about a little more than just best-\ufb01t allocation).\nSegregated Lists\nOne interesting approach that has been around for some time i s the use\nof segregated lists . The basic idea is simple: if a particular application\nhas one (or a few) popular-sized request that it makes, keep a separate\nlist just to manage objects of that size; all other requests a re forwarded to\na more general memory allocator .\nThe bene\ufb01ts of such an approach are obvious. By having a chunk of\nmemory dedicated for one particular size of requests, fragm entation is\nmuch less of a concern; moreover , allocation and free reques ts can be\nserved quite quickly when they are of the right size, as no com plicated\nsearch of a list is required.\nJust like any good idea, this approach introduces new compli cations\ninto a system as well. For example, how much memory should one ded-\nicate to the pool of memory that serves specialized requests of a given\nsize, as opposed to the general pool? One particular allocat or , the slab\nallocator by uber-engineer Jeff Bonwick (which was designed for use in\nthe Solaris kernel), handles this issue in a rather nice way [ B94].\nSpeci\ufb01cally , when the kernel boots up, it allocates a number of object\ncaches for kernel objects that are likely to be requested frequentl y (such as\nlocks, \ufb01le-system inodes, etc.); the object caches thus are each segregated\nfree lists of a given size and serve memory allocation and fre e requests\nquickly . When a given cache is running low on free space, it re quests\nsome slabs of memory from a more general memory allocator (the to-\ntal amount requested being a multiple of the page size and the object in\nquestion). Conversely , when the reference counts of the obj ects within\na given slab all go to zero, the general allocator can reclaim them from\nthe specialized allocator , which is often done when the VM sy stem needs\nmore memory .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n166 FR E E -S PA C E MA N A G E M E NT\nAS I D E : GR E AT EN G I N E E R S AR E RE A L LY GR E AT\nEngineers like Jeff Bonwick (who not only wrote the slab allo cator men-\ntioned herein but also was the lead of an amazing \ufb01le system, Z FS) are\nthe heart of Silicon V alley . Behind almost any great product or technol-\nogy is a human (or small group of humans) who are way above aver age\nin their talents, abilities, and dedication. As Mark Zucker berg (of Face-\nbook) says: \u201cSomeone who is exceptional in their role is not j ust a little\nbetter than someone who is pretty good. They are 100 times bet ter .\u201d This\nis why , still today , one or two people can start a company that changes\nthe face of the world forever (think Google, Apple, or Facebo ok). W ork\nhard and you might become such a \u201c100x\u201d person as well. Failin g that,\nwork with such a person; you\u2019ll learn more in day than most learn in a\nmonth. Failing that, feel sad.\nThe slab allocator also goes beyond most segregated list app roaches\nby keeping free objects on the lists in a pre-initialized sta te. Bonwick\nshows that initialization and destruction of data structur es is costly [B94];\nby keeping freed objects in a particular list in their initia lized state, the\nslab allocator thus avoids frequent initialization and des truction cycles\nper object and thus lowers overheads noticeably .\nBuddy Allocation\nBecause coalescing is critical for an allocator , some appro aches have been\ndesigned around making coalescing simple. One good example is found\nin the binary buddy allocator [K65].\n"
  },
  {
    "content": " of data structur es is costly [B94];\nby keeping freed objects in a particular list in their initia lized state, the\nslab allocator thus avoids frequent initialization and des truction cycles\nper object and thus lowers overheads noticeably .\nBuddy Allocation\nBecause coalescing is critical for an allocator , some appro aches have been\ndesigned around making coalescing simple. One good example is found\nin the binary buddy allocator [K65].\nIn such a system, free memory is \ufb01rst conceptually thought of as one\nbig space of size 2N . When a request for memory is made, the search for\nfree space recursively divides free space by two until a bloc k that is big\nenough to accommodate the request is found (and a further spl it into two\nwould result in a space that is too small). At this point, the r equested\nblock is returned to the user . Here is an example of a 64KB free space\ngetting divided in the search for a 7KB block:\n64 KB\n32 KB 32 KB\n16 KB 16 KB\n8 KB 8 KB\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nFR E E -S PA C E MA N A G E M E N T 167\nIn the example, the leftmost 8KB block is allocated (as indic ated by the\ndarker shade of gray) and returned to the user; note that this scheme can\nsuffer from internal fragmentation , as you are only allowed to give out\npower-of-two-sized blocks.\nThe beauty of buddy allocation is found in what happens when t hat\nblock is freed. When returning the 8KB block to the free list, the allocator\nchecks whether the \u201cbuddy\u201d 8KB is free; if so, it coalesces th e two blocks\ninto a 16KB block. The allocator then checks if the buddy of th e 16KB\nblock is still free; if so, it coalesces those two blocks. Thi s recursive coa-\nlescing process continues up the tree, either restoring the entire free space\nor stopping when a buddy is found to be in use.\nThe reason buddy allocation works so well is that it is simple to de-\ntermine the buddy of a particular block. How , you ask? Think a bout the\naddresses of the blocks in the free space above. If you think c arefully\nenough, you\u2019ll see that the address of each buddy pair only di ffers by\na single bit; which bit is determined by the level in the buddy tree. And\nthus you have a basic idea of how binary buddy allocation sche mes work.\nFor more detail, as always, see the Wilson survey [W+95].\nOther Ideas\nOne major problem with many of the approaches described abov e is their\nlack of scaling. Speci\ufb01cally , searching lists can be quite slow . Thus,\nadvanced allocators use more complex data structures to add ress these\ncosts, trading simplicity for performance. Examples inclu de balanced bi-\nnary trees, splay trees, or partially-ordered trees [W+95] .\nGiven that modern systems often have multiple processors an d run\nmulti-threaded workloads (something you\u2019ll learn about in great detail\nin the section of the book on Concurrency), it is not surprisi ng that a lot\nof effort has been spent making allocators work well on multi processor-\nbased systems. T wo wonderful examples are found in Berger et al. [B+00]\nand Evans [E06]; check them out for the details.\nThese are but two of the thousands of ideas people have had ove r time\nabout memory allocators. Read on your own if you are curious.\n17.5 Summary\nIn this chapter , we\u2019ve discussed the most rudimentary forms of mem-\nory allocators. Such allocators exist everywhere, linked i nto every C pro-\ngram you write, as well as in the underlying OS which is managi ng mem-\nory for its own data structures. As with many systems, there a re many\ntrade-offs to be made in building such a system, and the more y ou know\nabout the exact workload presented to an allocator , the more you could do\nto tune it to work better for that workload. Making a fast, spa ce-ef\ufb01cient,\nscalable allocator that works well for a broad range of workl oads remains\nan on-going challenge in"
  },
  {
    "content": " its own data structures. As with many systems, there a re many\ntrade-offs to be made in building such a system, and the more y ou know\nabout the exact workload presented to an allocator , the more you could do\nto tune it to work better for that workload. Making a fast, spa ce-ef\ufb01cient,\nscalable allocator that works well for a broad range of workl oads remains\nan on-going challenge in modern computer systems.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n168 FR E E -S PA C E MA N A G E M E NT\nReferences\n[B+00] \u201cHoard: A Scalable Memory Allocator for Multithread ed Applications\u201d\nEmery D. Berger , Kathryn S. McKinley , Robert D. Blumofe, and Paul R. Wilson\nASPLOS-IX, November 2000\nBerger and company\u2019s excellent allocator for multiprocess or systems. Beyond just being a fun paper ,\nalso used in practice!\n[B94] \u201cThe Slab Allocator: An Object-Caching Kernel Memory Allocator \u201d\nJeff Bonwick\nUSENIX \u201994\nA cool paper about how to build an allocator for an operating s ystem kernel, and a great example of how\nto specialize for particular common object sizes.\n[E06] \u201cA Scalable Concurrent malloc(3) Implementation for FreeBSD\u201d\nJason Evans\nhttp://people.freebsd.org/\u02dcjasone/jemalloc/bsdcan20 06/jemalloc.pdf\nApril 2006\nA detailed look at how to build a real modern allocator for use in multiprocessors. The \u201cjemalloc\u201d\nallocator is in widespread use today, within FreeBSD, NetBS D, Mozilla Firefox, and within Facebook.\n[K65] \u201cA Fast Storage Allocator \u201d\nKenneth C. Knowlton\nCommunications of the ACM, V olume 8, Number 10, October 1965\nThe common reference for buddy allocation. Random strange f act: Knuth gives credit for the idea to not\nto Knowlton but to Harry Markowitz, a Nobel-prize winning ec onomist. Another strange fact: Knuth\ncommunicates all of his emails via a secretary; he doesn\u2019t se nd email himself, rather he tells his secretary\nwhat email to send and then the secretary does the work of emai ling. Last Knuth fact: he created T eX,\nthe tool used to typeset this book. It is an amazing piece of so ftware4 .\n[W+95] \u201cDynamic Storage Allocation: A Survey and Critical R eview\u201d\nPaul R. Wilson, Mark S. Johnstone, Michael Neely , David Bole s\nInternational W orkshop on Memory Management\nKinross, Scotland, September 1995\nAn excellent and far-reaching survey of many facets of memor y allocation. Far too much detail to go\ninto in this tiny chapter!\n4 Actually we use LaT eX, which is based on Lamport\u2019s additions to T eX, but close enough.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n18\nPaging: Introduction\nRemember our goal: to virtualize memory . Segmentation (a ge neraliza-\ntion of dynamic relocation) helped us do this, but has some pr oblems; in\nparticular , managing free space becomes quite a pain as memo ry becomes\nfragmented and segmentation is not as \ufb02exible as we might lik e. Is there\na better solution?\nTH E CR U X :\nHO W TO VI RT U A L I Z E ME M O RY WI T H O U T SE G M E N T S\nHow can we virtualize memory in a way as to avoid the problems o f\nsegmentation? What are the basic techniques? How do we make t hose\ntechniques work well?\nThus comes along the idea of paging, which goes back to the earliest\nof computer systems, namely the Atlas [KE+62,L78]. Instead of splitting\nup our address space into three logical segments (each of var iable size),\nwe split up our address space into \ufb01xed-sized units we call a page. Here\nin"
  },
  {
    "content": " f\nsegmentation? What are the basic techniques? How do we make t hose\ntechniques work well?\nThus comes along the idea of paging, which goes back to the earliest\nof computer systems, namely the Atlas [KE+62,L78]. Instead of splitting\nup our address space into three logical segments (each of var iable size),\nwe split up our address space into \ufb01xed-sized units we call a page. Here\nin Figure 18.1 an example of a tiny address space, only 64 bytes total in\nsize, with 16 byte pages (real address spaces are much bigger , of course,\ncommonly 32 bits and thus 4-GB of address space, or even 64 bit s). W e\u2019ll\nuse tiny examples to make them easier to digest (at \ufb01rst).\n64\n48\n32\n16\n0\n(page 3)\n(page 2)\n(page 1)\n(page 0 of the address space)\nFigure 18.1: A Simple 64-byte Address Space\n169\n170 PA G I N G : I N T R O D U C T I O N\n128\n112\n96\n80\n64\n48\n32\n16\n0\npage frame 7\npage frame 6\npage frame 5\npage frame 4\npage frame 3\npage frame 2\npage frame 1\npage frame 0 of physical memoryreserved for OS\n(unused)\npage 3 of AS\npage 0 of AS\n(unused)\npage 2 of AS\n(unused)\npage 1 of AS\nFigure 18.2: 64-Byte Address Space Placed In Physical Memory\nThus, we have an address space that is split into four pages (0 through\n3). With paging, physical memory is also split into some numb er of pages\nas well; we sometimes will call each page of physical memory a page\nframe. For an example, let\u2019s examine Figure 18.2.\nPaging, as we will see, has a number of advantages over our pre vious\napproaches. Probably the most important improvement will b e \ufb02exibility :\nwith a fully-developed paging approach, the system will be a ble to sup-\nport the abstraction of an address space effectively , regar dless of how the\nprocesses uses the address space; we won\u2019t, for example, hav e to make\nassumptions about how the heap and stack grow and how they are used.\nAnother advantage is the simplicity of free-space management that pag-\ning affords. For example, when the OS wishes to place our tiny 64-byte\naddress space from above into our 8-page physical memory , it simply\n\ufb01nds four free pages; perhaps the OS keeps a free list of all free pages for\nthis, and just grabs the \ufb01rst four free pages off of this list. In the exam-\nple above, the OS has placed virtual page 0 of the address spac e (AS) in\nphysical page 3, virtual page 1 of the AS on physical page 7, pa ge 2 on\npage 5, and page 3 on page 2.\nT o record where each virtual page of the address space is plac ed in\nphysical memory , the operating system keeps a per-process data structure\nknown as a page table . The major role of the page table is to store address\ntranslations for each of the virtual pages of the address space, thus letti ng\nus know where in physical memory they live. For our simple exa mple\nabove (Figure 18.2), the page table would thus have the following entries:\n(Virtual Page 0 \u2192 Physical Frame 3), (VP 1 \u2192 PF 7), (VP 2 \u2192 PF 5), and\n(VP 3 \u2192 PF 2).\nIt is important to remember that this page table is a per-process data\nstructure (most page table structures we discuss are per-pr ocess struc-\ntures; an exception we\u2019ll touch on is the inverted page table ). If another\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : I N T R O D U C T I O N 171\nprocess were to run in our example above, the OS would have to m anage\na different page table for it, as its virtual pages obviously map to different\nphysical pages (modulo any sharing going on).\nNow , we know enough to perform an address-translation examp le.\nLet\u2019s imagine the process with that"
  },
  {
    "content": "O S T E P.O R G\nPA G I N G : I N T R O D U C T I O N 171\nprocess were to run in our example above, the OS would have to m anage\na different page table for it, as its virtual pages obviously map to different\nphysical pages (modulo any sharing going on).\nNow , we know enough to perform an address-translation examp le.\nLet\u2019s imagine the process with that tiny address space (64 by tes) is per-\nforming a memory access:\nmovl <virtual address>, %eax\nSpeci\ufb01cally , let\u2019s pay attention to the explicit load of the data at <virtual\naddress> into the register eax (and thus ignore the instruction fetch that\nmust have happened prior).\nT o translate this virtual address that the process generated, we have to\n\ufb01rst split it into two components: the virtual page number (VPN) , and\nthe offset within the page. For this example, because the virtual addre ss\nspace of the process is 64 bytes, we need 6 bits total for our vi rtual address\n(26 = 64 ). Thus, our virtual address:\nVa5 Va4 Va3 Va2 Va1 Va0\nwhere V a5 is the highest-order bit of the virtual address, an d V a0 the\nlowest order bit. Because we know the page size (16 bytes), we can further\ndivide the virtual address as follows:\nVa5 Va4 Va3 Va2 Va1 Va0\nVPN offset\nThe page size is 16 bytes in a 64-byte address space; thus we ne ed to\nbe able to select 4 pages, and the top 2 bits of the address do ju st that.\nThus, we have a 2-bit virtual page number (VPN). The remainin g bits tell\nus which byte of the page we are interested in, 4 bits in this ca se; we call\nthis the offset.\nWhen a process generates a virtual address, the OS and hardwa re\nmust combine to translate it into a meaningful physical addr ess. For ex-\nample, let us assume the load above was to virtual address 21:\nmovl 21, %eax\nT urning \u201c21\u201d into binary form, we get \u201c010101\u201d, and thus we ca n ex-\namine this virtual address and see how it breaks down into a vi rtual page\nnumber (VPN) and offset:\n0 1 0 1 0 1\nVPN offset\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n172 PA G I N G : I N T R O D U C T I O N\n0 1 0 1 0 1\nVPN offset\n1 1 1 0 1 0 1\nAddress\nTranslation\nPFN offset\nVirtual\nAddress\nPhysical\nAddress\nFigure 18.3: The Address T ranslation Process\nThus, the virtual address \u201c21\u201d is on the 5th (\u201c0101\u201dth) byte o f vir-\ntual page \u201c01\u201d (or 1). With our virtual page number , we can now index\nour page table and \ufb01nd which physical page that virtual page 1 resides\nwithin. In the page table above the physical page number (PPN ) (a.k.a.\nphysical frame number or PFN) is 7 (binary 111). Thus, we can t ranslate\nthis virtual address by replacing the VPN with the PFN and the n issue\nthe load to physical memory (Figure 18.3).\nNote the offset stays the same (i.e., it is not translated), b ecause the\noffset just tells us which byte within the page we want. Our \ufb01nal physical\naddress is 1110101 (117 in decimal), and is exactly where we w ant our\nload to fetch data from (Figure 18.2).\n18.1 Where Are Page T ables Stored?\nPage tables can get awfully large, much bigger than the small segment\ntable or base/bounds pair we have discussed previously . For example,\nimagine a typical 32-bit address space, with 4-KB pages. Thi s virtual ad-\ndress splits into a 20-bit VPN and 12-bit offset (recall that 10 bits would\nbe needed for a 1-KB page size, and just add two more to get to 4 K B).\nA 20-bit VPN implies that there are 220 translations that the OS would\nhave to manage for each"
  },
  {
    "content": "bounds pair we have discussed previously . For example,\nimagine a typical 32-bit address space, with 4-KB pages. Thi s virtual ad-\ndress splits into a 20-bit VPN and 12-bit offset (recall that 10 bits would\nbe needed for a 1-KB page size, and just add two more to get to 4 K B).\nA 20-bit VPN implies that there are 220 translations that the OS would\nhave to manage for each process (that\u2019s roughly a million); a ssuming we\nneed 4 bytes per page table entry (PTE) to hold the physical translation\nplus any other useful stuff, we get an immense 4MB of memory ne eded\nfor each page table! That is pretty big. Now imagine there are 100 pro-\ncesses running: this means the OS would need 400MB of memory j ust for\nall those address translations! Even in the modern era, wher e machines\nhave gigabytes of memory , it seems a little crazy to use a larg e chunk of\nif just for translations, no?\nBecause page tables are so big, we don\u2019t keep any special on-c hip hard-\nware in the MMU to store the page table of the currently-runni ng process.\nInstead, we store the page table for each process in memory somewhere.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : I N T R O D U C T I O N 173\n128\n112\n96\n80\n64\n48\n32\n16\n0\npage frame 7\npage frame 6\npage frame 5\npage frame 4\npage frame 3\npage frame 2\npage frame 1\npage frame 0 of physical memory\n(unused)\npage 3 of AS\npage 0 of AS\n(unused)\npage 2 of AS\n(unused)\npage 1 of AS\npage table:\n3 7 5 2\nFigure 18.4: Example: Page T able in Kernel Physical Memory\nLet\u2019s assume for now that the page tables live in physical mem ory that\nthe OS manages. In Figure 18.4 is a picture of what that might look like.\n18.2 What\u2019s Actually In The Page T able?\nLet\u2019s talk a little about page table organization. The page t able is just a\ndata structure that is used to map virtual addresses (or real ly , virtual page\nnumbers) to physical addresses (physical page numbers). Th us, any data\nstructure could work. The simplest form is called a linear page table ,\nwhich is just an array . The OS indexes the array by the VPN, and looks up\nthe page-table entry (PTE) at that index in order to \ufb01nd the de sired PFN.\nFor now , we will assume this simple linear structure; in late r chapters,\nwe will make use of more advanced data structures to help solv e some\nproblems with paging.\nAs for the contents of each PTE, we have a number of different b its\nin there worth understanding at some level. A valid bit is common to\nindicate whether the particular translation is valid; for e xample, when\na program starts running, it will have code and heap at one end of its\naddress space, and the stack at the other . All the unused spac e in-between\nwill be marked invalid, and if the process tries to access such memory , it\nwill generate a trap to the OS which will likely terminate the process.\nThus, the valid bit is crucial for supporting a sparse addres s space; by\nsimply marking all the unused pages in the address space inva lid, we\nremove the need to allocate physical frames for those pages a nd thus save\na great deal of memory .\nW e also might have protection bits , indicating whether the page could\nbe read from, written to, or executed from. Again, accessing a page in a\nway not allowed by these bits will generate a trap to the OS.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n174 PA G I N G : I N T R O D U C T I O N\n31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\nPFN\nG\nPAT\nD\nA\nPCD\nPWT\nU"
  },
  {
    "content": " R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n174 PA G I N G : I N T R O D U C T I O N\n31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\nPFN\nG\nPAT\nD\nA\nPCD\nPWT\nU/S\nR/W\nP\nFigure 18.5: An x86 Page T able Entry (PTE)\nThere are a couple of other bits that are important but we won\u2019 t talk\nabout much for now . A present bit indicates whether this page is in phys-\nical memory or on disk (swapped out); we will understand this in more\ndetail when we study how to move parts of the address space to d isk\nand back in order to support address spaces that are larger th an physical\nmemory and allow for the pages of processes that aren\u2019t activ ely being\nrun to be swapped out. A dirty bit is also common, indicating whether\nthe page has been modi\ufb01ed since it was brought into memory .\nA reference bit (a.k.a. accessed bit ) is sometimes used to track whether\na page has been accessed, and is useful in determining which p ages are\npopular and thus should be kept in memory; such knowledge is c ritical\nduring page replacement , a topic we will study in great detail in subse-\nquent chapters.\nFigure 18.5 shows an example page table entry from the x86 architec-\nture [I09]. It contains a present bit (P); a read/write bit (R /W) which\ndetermines if writes are allowed to this page; a user/superv isor bit (U/S)\nwhich determines if user-mode processes can access the page ; a few bits\n(PWT , PCD, P A T , and G) that determine how hardware caching wo rks for\nthese pages; an accessed bit (A) and a dirty bit (D); and \ufb01nall y , the page\nframe number (PFN) itself.\nRead the Intel Architecture Manuals [I09] for more details o n x86 pag-\ning support. Be forewarned, however; reading manuals such a s these,\nwhile quite informative (and certainly necessary for those who write code\nto use such page tables in the OS), can be challenging at \ufb01rst. A little pa-\ntience, and a lot of desire, is required.\n18.3 Paging: Also T oo Slow\nWith page tables in memory , we already know that they might be too\nbig. T urns out they can slow things down too. For example, tak e our\nsimple instruction:\nmovl 21, %eax\nAgain, let\u2019s just examine the explicit reference to address 21 and not\nworry about the instruction fetch. In this example, we will a ssume the\nhardware performs the translation for us. T o fetch the desir ed data, the\nsystem must \ufb01rst translate the virtual address (21) into the correct physi-\ncal address (117). Thus, before issuing the load to address 1 17, the system\nmust \ufb01rst fetch the proper page table entry from the process\u2019 s page ta-\nble, perform the translation, and then \ufb01nally get the desire d data from\nphysical memory .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : I N T R O D U C T I O N 175\nT o do so, the hardware must know where the page table is for the\ncurrently-running process. Let\u2019s assume for now that a sing le page-table\nbase register contains the physical address of the starting location of th e\npage table. T o \ufb01nd the location of the desired PTE, the hardwa re will thus\nperform the following functions:\nVPN = (VirtualAddress & VPN_MASK) >> SHIFT\nPTEAddr = PageTableBaseRegister + (VPN * sizeof(PTE))\nIn our example, VPN\nMASK would be set to 0x30 (hex 30, or binary\n110000) which picks out the VPN bits from the full virtual add ress; SHIFT\nis set to 4 (the number of bits"
  },
  {
    "content": ", the hardwa re will thus\nperform the following functions:\nVPN = (VirtualAddress & VPN_MASK) >> SHIFT\nPTEAddr = PageTableBaseRegister + (VPN * sizeof(PTE))\nIn our example, VPN\nMASK would be set to 0x30 (hex 30, or binary\n110000) which picks out the VPN bits from the full virtual add ress; SHIFT\nis set to 4 (the number of bits in the offset), such that we move the VPN\nbits down to form the correct integer virtual page number . Fo r exam-\nple, with virtual address 21 (010101), and masking turns thi s value into\n010000; the shift turns it into 01, or virtual page 1, as desir ed. W e then use\nthis value as an index into the array of PTEs pointed to by the p age table\nbase register .\nOnce this physical address is known, the hardware can fetch t he PTE\nfrom memory , extract the PFN, and concatenate it with the off set from\nthe virtual address to form the desired physical address. Sp eci\ufb01cally , you\ncan think of the PFN being left-shifted by SHIFT, and then logically OR\u2019d\nwith the offset to form the \ufb01nal address as follows:\noffset = VirtualAddress & OFFSET_MASK\nPhysAddr = (PFN << SHIFT) | offset\n1 // Extract the VPN from the virtual address\n2 VPN = (VirtualAddress & VPN_MASK) >> SHIFT\n3\n4 // Form the address of the page-table entry (PTE)\n5 PTEAddr = PTBR + (VPN * sizeof(PTE))\n6\n7 // Fetch the PTE\n8 PTE = AccessMemory(PTEAddr)\n9\n10 // Check if process can access the page\n11 if (PTE.Valid == False)\n12 RaiseException(SEGMENTATION_FAULT)\n13 else if (CanAccess(PTE.ProtectBits) == False)\n14 RaiseException(PROTECTION_FAULT)\n15 else\n16 // Access is OK: form physical address and fetch it\n17 offset = VirtualAddress & OFFSET_MASK\n18 PhysAddr = (PTE.PFN << PFN_SHIFT) | offset\n19 Register = AccessMemory(PhysAddr)\nFigure 18.6: Accessing Memory With Paging\nFinally , the hardware can fetch the desired data from memory and put\nit into register eax. The program has now succeeded at loading a value\nfrom memory!\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n176 PA G I N G : I N T R O D U C T I O N\nAS I D E : DATA ST R U C T U R E \u2013 T H E PA G E TA B L E\nOne of the most important data structures in the memory manag ement\nsubsystem of a modern OS is the page table . In general, a page table\nstores virtual-to-physical address translations , thus letting the system\nknow where each page of an address space actually resides in p hysical\nmemory . Because each address space requires such translati ons, in gen-\neral there is one page table per process in the system. The exa ct structure\nof the page table is either determined by the hardware (older systems) or\ncan be more \ufb02exibly managed by the OS (modern systems).\nT o summarize, we now describe the initial protocol for what h appens\non each memory reference. Figure 18.6 shows the basic approach. For\nevery memory reference (whether an instruction fetch or an e xplicit load\nor store), paging requires us to perform one extra memory ref erence in\norder to \ufb01rst fetch the translation from the page table. That is a lot of\nwork! Extra memory references are costly , and in this case wi ll likely\nslow down the process by a factor of two or more.\nAnd now you can hopefully see that there are two real problems that\nwe must solve. Without careful design of both hardware and so ftware,\npage tables will cause the system to run too slowly , as well as take up\ntoo much memory . While seemingly a great solution for our mem ory\nvirtualization needs, these two crucial problems must \ufb01rst be overcome.\n18.4 A Memory T race\nBefore closing, we now trace through a simple memory access e"
  },
  {
    "content": "And now you can hopefully see that there are two real problems that\nwe must solve. Without careful design of both hardware and so ftware,\npage tables will cause the system to run too slowly , as well as take up\ntoo much memory . While seemingly a great solution for our mem ory\nvirtualization needs, these two crucial problems must \ufb01rst be overcome.\n18.4 A Memory T race\nBefore closing, we now trace through a simple memory access e xam-\nple to demonstrate all of the resulting memory accesses that occur when\nusing paging. The code snippet (in C, in a \ufb01le called array.c) that are\ninterested in is as follows:\nint array[1000];\n...\nfor (i = 0; i < 1000; i++)\narray[i] = 0;\nW e could then compile array.c and run it with the following com-\nmands:\nprompt> gcc -o array array.c -Wall -O\nprompt> ./array\nOf course, to truly understand what memory accesses this cod e snip-\npet (which simply initializes an array) will make, we\u2019ll hav e to know (or\nassume) a few more things. First, we\u2019ll have to disassemble the result-\ning binary (using objdump on Linux, or otool on a Mac) to see what\nassembly instructions are used to initialize the array in a l oop. Here it the\nresulting assembly code:\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : I N T R O D U C T I O N 177\n0x1024 movl $0x0,(%edi,%eax,4)\n0x1028 incl %eax\n0x102c cmpl $0x03e8,%eax\n0x1030 jne 0x1024\nThe code, if you know a little x86, is actually quite easy to understand.\nThe \ufb01rst instruction moves the value zero (shown as $0x0) into the vir-\ntual memory address of the location of the array; this addres s is computed\nby taking the contents of %edi and adding %eax multiplied by four to it.\nThus, %edi holds the base address of the array , whereas %eax holds the\narray index ( i); we multiply by four because the array is an array of inte-\ngers, each size four bytes (note we are cheating a little bit h ere, assuming\neach instruction is four bytes in size for simplicity; in act uality , x86 in-\nstructions are variable-sized).\nThe second instruction increments the array index held in %eax, and\nthe third instruction compares the contents of that registe r to the hex\nvalue 0x03e8, or decimal 1000. If the comparison shows that that two\nvalues are not yet equal (which is what the jne instruction tests), the\nfourth instruction jumps back to the top of the loop.\nT o understand which memory accesses this instruction seque nce makes\n(at both the virtual and physical levels), we\u2019ll have assume something\nabout where in virtual memory the code snippet and array are f ound, as\nwell as the contents and location of the page table.\nFor this example, we assume a virtual address space of size 64 KB\n(unrealistically small). W e also assume a page size of 1 KB.\nAll we need to know now are the contents of the page table, and i ts\nlocation in physical memory . Let\u2019s assume we have a linear (a rray-based)\npage table and that it is located at physical address 1 KB (102 4).\nAs for its contents, there are just a few virtual pages we need to worry\nabout having mapped for this example. First, there is the vir tual page the\ncode lives on. Because the page size is 1 KB, virtual address 1 024 resides\non the the second page of the virtual address space (VPN=1, as VPN=0 is\nthe \ufb01rst page). Let\u2019s assume this virtual page maps to physic al frame 4\n(VPN 1 \u2192 PFN 4).\nNext, there is the array itself. Its size is 4000 bytes (1000 i ntegers), and\nit lives at virtual addresses 40000 through 44000 (not inclu ding the last\nbyte). The virtual pages for this decimal range is"
  },
  {
    "content": " second page of the virtual address space (VPN=1, as VPN=0 is\nthe \ufb01rst page). Let\u2019s assume this virtual page maps to physic al frame 4\n(VPN 1 \u2192 PFN 4).\nNext, there is the array itself. Its size is 4000 bytes (1000 i ntegers), and\nit lives at virtual addresses 40000 through 44000 (not inclu ding the last\nbyte). The virtual pages for this decimal range is VPN=39 ... VPN=42.\nThus, we need mappings for these pages. Let\u2019s assume these vi rtual-to-\nphysical mappings for the example: (VPN 39 \u2192 PFN 7), (VPN 40 \u2192 PFN 8),\n(VPN 41 \u2192 PFN 9), (VPN 42 \u2192 PFN 10).\nW e are now ready to trace the memory references of the program .\nWhen it runs, each instruction fetch will generate two memor y references:\none to the page table to \ufb01nd the physical frame that the instru ction resides\nwithin, and one to the instruction itself to fetch it to the CP U for process-\ning. In addition, there is one explicit memory reference in t he form of\nthe mov instruction; this adds another page table access \ufb01rst (to tr anslate\nthe array virtual address to the correct physical one) and th en the array\naccess itself.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n178 PA G I N G : I N T R O D U C T I O N\n0 10 20 30 40 50\n1024\n1074\n1124\nMemory Access\nCode (VA)\n40000\n40050\n40100\nArray (VA)\n1024\n1074\n1124\n1174\n1224\nPage Table (PA)\n4096\n4146\n4196\nCode (PA)\n7232\n7282\n7132\nArray (PA)\nmov\ninc\ncmp\njne\nmov\nPageTable[1]\nPageTable[39]\nFigure 18.7: A Virtual (And Physical) Memory T race\nThe entire process, for the \ufb01rst \ufb01ve loop iterations, is depi cted in Fig-\nure 18.7. The bottom most graph shows the instruction memory refer-\nences on the y-axis in black (with virtual addresses on the le ft, and the\nactual physical addresses on the right); the middle graph sh ows array\naccesses in dark gray (again with virtual on left and physica l on right); \ufb01-\nnally , the topmost graph shows page table memory accesses in light gray\n(just physical, as the page table in this example resides in p hysical mem-\nory). The x-axis, for the entire trace, shows memory accesse s across the\n\ufb01rst \ufb01ve iterations of the loop (there are 10 memory accesses per loop,\nwhich includes four instruction fetches, one explicit upda te of memory ,\nand \ufb01ve page table accesses to translate those four fetches a nd one explicit\nupdate).\nSee if you can make sense of the patterns that show up in this vi su-\nalization. In particular , what will change as the loop conti nues to run\nbeyond these \ufb01rst \ufb01ve iterations? Which new memory location s will be\naccessed? Can you \ufb01gure it out?\nThis has just been the simplest of examples (only a few lines o f C code),\nand yet you might already be able to sense the complexity of un derstand-\ning the actual memory behavior of real applications. Don\u2019t w orry: it de\ufb01-\nnitely gets worse, because the mechanisms we are about to int roduce only\ncomplicate this already complex machinery . Sorry!\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : I N T R O D U C T I O N 179\n18.5 Summary\nW e have introduced the concept of paging as a solution to our chal-\nlenge of virtualizing memory . Paging has many advantages ov er previ-\nous approaches (such as segmentation). First, it does not le ad to external\nfragmentation, as paging (by design) divides memory into \ufffd"
  },
  {
    "content": " P.O R G\nPA G I N G : I N T R O D U C T I O N 179\n18.5 Summary\nW e have introduced the concept of paging as a solution to our chal-\nlenge of virtualizing memory . Paging has many advantages ov er previ-\nous approaches (such as segmentation). First, it does not le ad to external\nfragmentation, as paging (by design) divides memory into \ufb01x ed-sized\nunits. Second, it is quite \ufb02exible, enabling the sparse use o f virtual ad-\ndress spaces.\nHowever , implementing paging support without care will lea d to a\nslower machine (with many extra memory accesses to access th e page\ntable) as well as memory waste (with memory \ufb01lled with page ta bles in-\nstead of useful application data). W e\u2019ll thus have to think a little harder\nto come up with a paging system that not only works, but works w ell.\nThe next two chapters, fortunately , will show us how to do so.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n180 PA G I N G : I N T R O D U C T I O N\nReferences\n[KE+62] \u201cOne-level Storage System\u201d\nT . Kilburn, and D.B.G. Edwards and M.J. Lanigan and F .H. Sumn er\nIRE T rans. EC-11, 2 (1962), pp. 223-235\n(Reprinted in Bell and Newell, \u201cComputer Structures: Readi ngs and Examples\u201d McGraw-Hill,\nNew Y ork, 1971).\nThe Atlas pioneered the idea of dividing memory into \ufb01xed-si zed pages and in many senses was an early\nform of the memory-management ideas we see in modern compute r systems.\n[I09] \u201cIntel 64 and IA-32 Architectures Software Developer \u2019s Manuals\u201d\nIntel, 2009\nA vailable: http://www .intel.com/products/processor/manuals\nIn particular , pay attention to \u201cV olume 3A: System Programm ing Guide Part 1\u201d and \u201cV olume 3B:\nSystem Programming Guide Part 2\u201d\n[L78] \u201cThe Manchester Mark I and atlas: a historical perspec tive\u201d\nS. H. Lavington\nCommunications of the ACM archive\nV olume 21, Issue 1 (January 1978), pp. 4-12\nSpecial issue on computer architecture\nThis paper is a great retrospective of some of the history of t he development of some important computer\nsystems. As we sometimes forget in the US, many of these new id eas came from overseas.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : I N T R O D U C T I O N 181\nHomework\nIn this homework, you will use a simple program, which is know n as\npaging-linear-translate.py, to see if you understand how simple\nvirtual-to-physical address translation works with linea r page tables. See\nthe README for details.\nQuestions\n\u2022 Before doing any translations, let\u2019s use the simulator to st udy how\nlinear page tables change size given different parameters. Compute\nthe size of linear page tables as different parameters chang e. Some\nsuggested inputs are below; by using the -v flag, you can see\nhow many page-table entries are \ufb01lled.\nFirst, to understand how linear page table size changes as th e ad-\ndress space grows:\npaging-linear-translate.py -P 1k -a 1m -p 512m -v -n 0\npaging-linear-translate.py -P 1k -a 2m -p 512m -v -n 0\npaging-linear-translate.py -P 1k -a 4m -p 512m -v -n 0\nThen, to understand how linear page table size changes as pag e size\ngrows:\npaging-linear-translate.py -P 1k -a 1m -p 512m -v -n 0\npaging-linear-translate.py -P 2k -a 1"
  },
  {
    "content": "m -p 512m -v -n 0\npaging-linear-translate.py -P 1k -a 4m -p 512m -v -n 0\nThen, to understand how linear page table size changes as pag e size\ngrows:\npaging-linear-translate.py -P 1k -a 1m -p 512m -v -n 0\npaging-linear-translate.py -P 2k -a 1m -p 512m -v -n 0\npaging-linear-translate.py -P 4k -a 1m -p 512m -v -n 0\nBefore running any of these, try to think about the expected t rends.\nHow should page-table size change as the address space grows ? As\nthe page size grows? Why shouldn\u2019t we just use really big page s in\ngeneral?\n\u2022 Now let\u2019s do some translations. Start with some small exampl es,\nand change the number of pages that are allocated to the addre ss\nspace with the -u flag. For example:\npaging-linear-translate.py -P 1k -a 16k -p 32k -v -u 0\npaging-linear-translate.py -P 1k -a 16k -p 32k -v -u 25\npaging-linear-translate.py -P 1k -a 16k -p 32k -v -u 50\npaging-linear-translate.py -P 1k -a 16k -p 32k -v -u 75\npaging-linear-translate.py -P 1k -a 16k -p 32k -v -u 100\nWhat happens as you increase the percentage of pages that are al-\nlocated in each address space?\n\u2022 Now let\u2019s try some different random seeds, and some differen t (and\nsometimes quite crazy) address-space parameters, for vari ety:\npaging-linear-translate.py -P 8 -a 32 -p 1024 -v -s 1\npaging-linear-translate.py -P 8k -a 32k -p 1m -v -s 2\npaging-linear-translate.py -P 1m -a 256m -p 512m -v -s 3\nWhich of these parameter combinations are unrealistic? Why ?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n182 PA G I N G : I N T R O D U C T I O N\n\u2022 Use the program to try out some other problems. Can you \ufb01nd the\nlimits of where the program doesn\u2019t work anymore? For exampl e,\nwhat happens if the address-space size is bigger than physical mem-\nory?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n19\nPaging: Faster Translations (TLBs)\nUsing paging as the core mechanism to support virtual memory can lead\nto high performance overheads. By chopping the address spac e into small,\n\ufb01xed-sized units (i.e., pages), paging requires a large amo unt of mapping\ninformation. Because that mapping information is generall y stored in\nphysical memory , paging logically requires an extra memory lookup for\neach virtual address generated by the program. Going to memo ry for\ntranslation information before every instruction fetch or explicit load or\nstore is prohibitively slow . And thus our problem:\nTH E CR U X :\nHO W TO SP E E D UP AD D R E S S TR A N S L AT I O N\nHow can we speed up address translation, and generally avoid the\nextra memory reference that paging seems to require? What ha rdware\nsupport is required? What OS involvement is needed?\nWhen we want to make things fast, the OS usually needs some hel p.\nAnd help often comes from the OS\u2019s old friend: the hardware. T o speed\naddress translation, we are going to add what is called (for h istorical rea-\nsons [CP78]) a translation-lookaside buffer , or TLB [C68, C95]. A TLB\nis part of the chip\u2019s memory-management unit (MMU), and is simply a\nhardware cache of popular virtual-to-physical address translations; thu s,\na"
  },
  {
    "content": "s old friend: the hardware. T o speed\naddress translation, we are going to add what is called (for h istorical rea-\nsons [CP78]) a translation-lookaside buffer , or TLB [C68, C95]. A TLB\nis part of the chip\u2019s memory-management unit (MMU), and is simply a\nhardware cache of popular virtual-to-physical address translations; thu s,\na better name would be an address-translation cache . Upon each virtual\nmemory reference, the hardware \ufb01rst checks the TLB to see if t he desired\ntranslation is held therein; if so, the translation is perfo rmed (quickly)\nwithout having to consult the page table (which has all translations ). Be-\ncause of their tremendous performance impact, TLBs in a real sense make\nvirtual memory possible [C95].\n19.1 TLB Basic Algorithm\nFigure 19.1 shows a rough sketch of how hardware might handle a\nvirtual address translation, assuming a simple linear page table (i.e., the\npage table is an array) and a hardware-managed TLB (i.e., the hardware\nhandles much of the responsibility of page table accesses; w e\u2019ll explain\nmore about this below).\n183\n184 PA G I N G : F A S T E R TR A N S L AT I O N S (TLB S)\n1 VPN = (VirtualAddress & VPN_MASK) >> SHIFT\n2 (Success, TlbEntry) = TLB_Lookup(VPN)\n3 if (Success == True) // TLB Hit\n4 if (CanAccess(TlbEntry.ProtectBits) == True)\n5 Offset = VirtualAddress & OFFSET_MASK\n6 PhysAddr = (TlbEntry.PFN << SHIFT) | Offset\n7 AccessMemory(PhysAddr)\n8 else\n9 RaiseException(PROTECTION_FAULT)\n10 else // TLB Miss\n11 PTEAddr = PTBR + (VPN * sizeof(PTE))\n12 PTE = AccessMemory(PTEAddr)\n13 if (PTE.Valid == False)\n14 RaiseException(SEGMENTATION_FAULT)\n15 else if (CanAccess(PTE.ProtectBits) == False)\n16 RaiseException(PROTECTION_FAULT)\n17 else\n18 TLB_Insert(VPN, PTE.PFN, PTE.ProtectBits)\n19 RetryInstruction()\nFigure 19.1: TLB Control Flow Algorithm\nThe algorithm the hardware follows works like this: \ufb01rst, ex tract the\nvirtual page number (VPN) from the virtual address (Line 1 in Figure 19.1),\nand check if the TLB holds the translation for this VPN (Line 2 ). If it does,\nwe have a TLB hit , which means the TLB holds the translation. Success!\nW e can now extract the page frame number (PFN) from the releva nt TLB\nentry , concatenate that onto the offset from the original vi rtual address,\nand form the desired physical address (P A), and access memor y (Lines\n5\u20137), assuming protection checks do not fail (Line 4).\nIf the CPU does not \ufb01nd the translation in the TLB (a TLB miss ), we\nhave some more work to do. In this example, the hardware acces ses the\npage table to \ufb01nd the translation (Lines 11\u201312), and, assumi ng that the\nvirtual memory reference generated by the process is valid a nd accessi-\nble (Lines 13, 15), updates the TLB with the translation (Lin e 18). These\nset of actions are costly , primarily because of the extra mem ory reference\nneeded to access the page table (Line 12). Finally , once the T LB is up-\ndated, the hardware retries the instruction; this time, the translation is\nfound in the TLB, and the memory reference is processed quick ly .\nThe TLB, like all caches, is built on the premise that in the co mmon\ncase, translations are found in the cache (i.e., are hits). I f so, little over-\nhead is added, as the TLB is found near the processing core and is de-\nsigned to be quite fast. When a miss occurs, the high cost of pa ging is\nincurred; the page table must be accessed to \ufb01nd the translat ion, and an\nextra memory reference"
  },
  {
    "content": " is built on the premise that in the co mmon\ncase, translations are found in the cache (i.e., are hits). I f so, little over-\nhead is added, as the TLB is found near the processing core and is de-\nsigned to be quite fast. When a miss occurs, the high cost of pa ging is\nincurred; the page table must be accessed to \ufb01nd the translat ion, and an\nextra memory reference (or more, with more complex page tabl es) results.\nIf this happens often, the program will likely run noticeabl y more slowly;\nmemory accesses, relative to most CPU instructions, are qui te costly , and\nTLB misses lead to more memory accesses. Thus, it is our hope t o avoid\nTLB misses as much as we can.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : F A S T E R TR A N S L AT I O N S (TLB S) 185\nVPN = 15\nVPN = 14\nVPN = 13\nVPN = 12\nVPN = 11\nVPN = 10\nVPN = 09\nVPN = 08\nVPN = 07\nVPN = 06\nVPN = 05\nVPN = 04\nVPN = 03\nVPN = 02\nVPN = 01\nVPN = 00\n00 04 08 12 16\nOffset\na[0] a[1] a[2]\na[3] a[4] a[5] a[6]\na[7] a[8] a[9]\nFigure 19.2: Example: An Array In A Tiny Address Space\n19.2 Example: Accessing An Array\nT o make clear the operation of a TLB, let\u2019s examine a simple vi rtual\naddress trace and see how a TLB can improve its performance. I n this\nexample, let\u2019s assume we have an array of 10 4-byte integers i n memory ,\nstarting at virtual address 100. Assume further that we have a small 8-bit\nvirtual address space, with 16-byte pages; thus, a virtual a ddress breaks\ndown into a 4-bit VPN (there are 16 virtual pages) and a 4-bit o ffset (there\nare 16 bytes on each of those pages).\nFigure 19.2 shows the array laid out on the 16 16-byte pages of the sys-\ntem. As you can see, the array\u2019s \ufb01rst entry ( a[0]) begins on (VPN=06, off-\nset=04); only three 4-byte integers \ufb01t onto that page. The ar ray continues\nonto the next page (VPN=07), where the next four entries ( a[3] ... a[6])\nare found. Finally , the last three entries of the 10-entry ar ray ( a[7] ... a[9])\nare located on the next page of the address space (VPN=08).\nNow let\u2019s consider a simple loop that accesses each array ele ment,\nsomething that would look like this in C:\nint sum = 0;\nfor (i = 0; i < 10; i++) {\nsum += a[i];\n}\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n186 PA G I N G : F A S T E R TR A N S L AT I O N S (TLB S)\nFor the sake of simplicity , we will pretend that the only memo ry ac-\ncesses the loop generates are to the array (ignoring the vari ables i and\nsum, as well as the instructions themselves). When the \ufb01rst arra y element\n(a[0]) is accessed, the CPU will see a load to virtual address 100. T he\nhardware extracts the VPN from this (VPN=06), and uses that t o check\nthe TLB for a valid translation. Assuming this is the \ufb01rst tim e the pro-\ngram accesses the array , the result will be a TLB miss.\nThe next access is to a[1], and there is some good news here: a TLB\nhit! Because the second element of the array is packed next to the \ufb01rst, it\nlives on the same page; because we\u2019ve already accessed this p age when\naccessing the \ufb01rst element of the array ,"
  },
  {
    "content": "\ufffdrst tim e the pro-\ngram accesses the array , the result will be a TLB miss.\nThe next access is to a[1], and there is some good news here: a TLB\nhit! Because the second element of the array is packed next to the \ufb01rst, it\nlives on the same page; because we\u2019ve already accessed this p age when\naccessing the \ufb01rst element of the array , the translation is a lready loaded\ninto the TLB. And hence the reason for our success. Access to a[2] en-\ncounters similar success (another hit), because it too live s on the same\npage as a[0] and a[1].\nUnfortunately , when the program accesses a[3], we encounter an-\nother TLB miss. However , once again, the next entries ( a[4] ... a[6])\nwill hit in the TLB, as they all reside on the same page in memor y .\nFinally , access to a[7] causes one last TLB miss. The hardware once\nagain consults the page table to \ufb01gure out the location of thi s virtual page\nin physical memory , and updates the TLB accordingly . The \ufb01na l two ac-\ncesses ( a[8] and a[9]) receive the bene\ufb01ts of this TLB update; when the\nhardware looks in the TLB for their translations, two more hi ts result.\nLet us summarize TLB activity during our ten accesses to the a rray:\nmiss, hit, hit, miss, hit, hit, hit, miss, hit, hit. Thus, our TLB hit rate ,\nwhich is the number of hits divided by the total number of acce sses, is\n70%. Although this is not too high (indeed, we desire hit rate s that ap-\nproach 100%), it is non-zero, which may be a surprise. Even th ough this\nis the \ufb01rst time the program accesses the array , TLB performa nce gains\nbene\ufb01t from spatial locality . The elements of the array are packed tightly\ninto pages (i.e., they are close to one another in space), and thus only the\n\ufb01rst access to an element on a page yields a TLB miss.\nAlso note the role that page size plays in this example. If the page size\nhad simply been twice as big (32 bytes, not 16), the array acce ss would\nsuffer even fewer misses. As typical page sizes are more like 4KB, these\ntypes of dense, array-based accesses achieve excellent TLB performance,\nencountering only a single miss per page of accesses.\nOne last point about TLB performance: if the program, soon af ter this\nloop completes, accesses the array again, we\u2019d likely see an even bet-\nter result, assuming that we have a big enough TLB to cache the needed\ntranslations: hit, hit, hit, hit, hit, hit, hit, hit, hit, hi t. In this case, the\nTLB hit rate would be high because of temporal locality , i.e., the quick\nre-referencing of memory items in time. Like any cache, TLBs rely upon\nboth spatial and temporal locality for success, which are pr ogram proper-\nties. If the program of interest exhibits such locality (and many programs\ndo), the TLB hit rate will likely be high.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : F A S T E R TR A N S L AT I O N S (TLB S) 187\nTI P : U S E CA C H I N G WH E N PO S S I B L E\nCaching is one of the most fundamental performance techniqu es in com-\nputer systems, one that is used again and again to make the \u201cco mmon-\ncase fast\u201d [HP06]. The idea behind hardware caches is to take advantage\nof locality in instruction and data references. There are usually two ty pes\nof locality: temporal locality and spatial locality . With temporal locality ,\nthe idea is that an instruction or data item that has been rece ntly accessed\nwill likely be re-accessed soon in the future. Think of loop v ariables or in-\nstructions in a loop; they are accessed repeatedly over time ."
  },
  {
    "content": " fast\u201d [HP06]. The idea behind hardware caches is to take advantage\nof locality in instruction and data references. There are usually two ty pes\nof locality: temporal locality and spatial locality . With temporal locality ,\nthe idea is that an instruction or data item that has been rece ntly accessed\nwill likely be re-accessed soon in the future. Think of loop v ariables or in-\nstructions in a loop; they are accessed repeatedly over time . With spatial\nlocality , the idea is that if a program accesses memory at add ress x, it will\nlikely soon access memory near x. Imagine here streaming through an\narray of some kind, accessing one element and then the next. O f course,\nthese properties depend on the exact nature of the program, a nd thus are\nnot hard-and-fast laws but more like rules of thumb.\nHardware caches, whether for instructions, data, or addres s translations\n(as in our TLB) take advantage of locality by keeping copies o f memory in\nsmall, fast on-chip memory . Instead of having to go to a (slow ) memory\nto satisfy a request, the processor can \ufb01rst check if a nearby copy exists\nin a cache; if it does, the processor can access it quickly (i. e., in a few cy-\ncles) and avoid spending the costly time it takes to access me mory (many\nnanoseconds).\nY ou might be wondering: if caches (like the TLB) are so great, why don\u2019t\nwe just make bigger caches and keep all of our data in them? Unf or-\ntunately , this is where we run into more fundamental laws lik e those of\nphysics. If you want a fast cache, it has to be small, as issues like the\nspeed-of-light and other physical constraints become rele vant. Any large\ncache by de\ufb01nition is slow , and thus defeats the purpose. Thu s, we are\nstuck with small, fast caches; the question that remains is h ow to best use\nthem to improve performance.\n19.3 Who Handles The TLB Miss?\nOne question that we must answer: who handles a TLB miss? T wo a n-\nswers are possible: the hardware, or the software (OS). In th e olden days,\nthe hardware had complex instruction sets (sometimes calle d CISC, for\ncomplex-instruction set computers) and the people who buil t the hard-\nware didn\u2019t much trust those sneaky OS people. Thus, the hard ware\nwould handle the TLB miss entirely . T o do this, the hardware h as to\nknow exactly where the page tables are located in memory (via a page-\ntable base register , used in Line 11 in Figure\n19.1), as well as their exact\nformat; on a miss, the hardware would \u201cwalk\u201d the page table, \ufb01nd the c or-\nrect page-table entry and extract the desired translation, update the TLB\nwith the translation, and retry the instruction. An example of an \u201colder \u201d\narchitecture that has hardware-managed TLBs is the Intel x86 architec-\nture, which uses a \ufb01xed multi-level page table (see the next chapter for\ndetails); the current page table is pointed to by the CR3 regi ster [I09].\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n188 PA G I N G : F A S T E R TR A N S L AT I O N S (TLB S)\n1 VPN = (VirtualAddress & VPN_MASK) >> SHIFT\n2 (Success, TlbEntry) = TLB_Lookup(VPN)\n3 if (Success == True) // TLB Hit\n4 if (CanAccess(TlbEntry.ProtectBits) == True)\n5 Offset = VirtualAddress & OFFSET_MASK\n6 PhysAddr = (TlbEntry.PFN << SHIFT) | Offset\n7 Register = AccessMemory(PhysAddr)\n8 else\n9 RaiseException(PROTECTION_FAULT)\n10 else // TLB Miss\n11 RaiseException(TLB_MISS)\nFigure 19.3: TLB Control Flow Algorithm (OS Handled)\nMore modern architectures (e.g., MIPS R10k [H93] or Sun\u2019s SP ARC v9\n[WG00],"
  },
  {
    "content": " << SHIFT) | Offset\n7 Register = AccessMemory(PhysAddr)\n8 else\n9 RaiseException(PROTECTION_FAULT)\n10 else // TLB Miss\n11 RaiseException(TLB_MISS)\nFigure 19.3: TLB Control Flow Algorithm (OS Handled)\nMore modern architectures (e.g., MIPS R10k [H93] or Sun\u2019s SP ARC v9\n[WG00], both RISC or reduced-instruction set computers) have what is\nknown as a software-managed TLB . On a TLB miss, the hardware sim-\nply raises an exception (line 11 in Figure 19.3), which pauses the current\ninstruction stream, raises the privilege level to kernel mo de, and jumps\nto a trap handler . As you might guess, this trap handler is code within\nthe OS that is written with the express purpose of handling TL B misses.\nWhen run, the code will lookup the translation in the page tab le, use spe-\ncial \u201cprivileged\u201d instructions to update the TLB, and retur n from the trap;\nat this point, the hardware retries the instruction (result ing in a TLB hit).\nLet\u2019s discuss a couple of important details. First, the retu rn-from-trap\ninstruction needs to be a little different than the return-f rom-trap we saw\nbefore when servicing a system call. In the latter case, the r eturn-from-\ntrap should resume execution at the instruction after the trap into the OS,\njust as a return from a procedure call returns to the instruct ion imme-\ndiately following the call into the procedure. In the former case, when\nreturning from a TLB miss-handling trap, the hardware must r esume ex-\necution at the instruction that caused the trap; this retry thus lets the in-\nstruction run again, this time resulting in a TLB hit. Thus, d epending on\nhow a trap or exception was caused, the hardware must save a di fferent\nPC when trapping into the OS, in order to resume properly when the time\nto do so arrives.\nSecond, when running the TLB miss-handling code, the OS need s to be\nextra careful not to cause an in\ufb01nite chain of TLB misses to oc cur . Many\nsolutions exist; for example, you could keep TLB miss handle rs in physi-\ncal memory (where they are unmapped and not subject to address trans-\nlation), or reserve some entries in the TLB for permanently- valid transla-\ntions and use some of those permanent translation slots for t he handler\ncode itself; these wired translations always hit in the TLB.\nThe primary advantage of the software-managed approach is \ufb02exibil-\nity: the OS can use any data structure it wants to implement the pa ge\ntable, without necessitating hardware change. Another adv antage is sim-\nplicity; as you can see in the TLB control \ufb02ow (line 11 in Figure 19.3, in\ncontrast to lines 11\u201319 in Figure 19.1), the hardware doesn\u2019t have to do\nmuch on a miss; it raises an exception, and the OS TLB miss hand ler does\nthe rest.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : F A S T E R TR A N S L AT I O N S (TLB S) 189\nAS I D E : RISC V S . CISC\nIn the 1980\u2019s, a great battle took place in the computer archi tecture com-\nmunity . On one side was the CISC camp, which stood for Complex\nInstruction Set Computing ; on the other side was RISC, for Reduced\nInstruction Set Computing [PS81]. The RISC side was spear-headed by\nDavid Patterson at Berkeley and John Hennessy at Stanford (w ho are also\nco-authors of some famous books [HP06]), although later Joh n Cocke was\nrecognized with a T uring award for his earliest work on RISC [ CM00].\nCISC instruction sets tend to have a lot of instructions in th em, and each\ninstruction is relatively powerful. For example, you might see a string\ncopy , which takes two pointers and a length and copies bytes f rom source\nto destination. The idea behind CISC was that instructions s hould"
  },
  {
    "content": "authors of some famous books [HP06]), although later Joh n Cocke was\nrecognized with a T uring award for his earliest work on RISC [ CM00].\nCISC instruction sets tend to have a lot of instructions in th em, and each\ninstruction is relatively powerful. For example, you might see a string\ncopy , which takes two pointers and a length and copies bytes f rom source\nto destination. The idea behind CISC was that instructions s hould be\nhigh-level primitives, to make the assembly language itsel f easier to use,\nand to make code more compact.\nRISC instruction sets are exactly the opposite. A key observ ation behind\nRISC is that instruction sets are really compiler targets, a nd all compil-\ners really want are a few simple primitives that they can use t o gener-\nate high-performance code. Thus, RISC proponents argued, l et\u2019s rip out\nas much from the hardware as possible (especially the microc ode), and\nmake what\u2019s left simple, uniform, and fast.\nIn the early days, RISC chips made a huge impact, as they were n oticeably\nfaster [BC91]; many papers were written; a few companies wer e formed\n(e.g., MIPS and Sun). However , as time progressed, CISC manu facturers\nsuch as Intel incorporated many RISC techniques into the cor e of their\nprocessors, for example by adding early pipeline stages tha t transformed\ncomplex instructions into micro-instructions which could then be pro-\ncessed in a RISC-like manner . These innovations, plus a grow ing number\nof transistors on each chip, allowed CISC to remain competit ive. The end\nresult is that the debate died down, and today both types of pr ocessors\ncan be made to run fast.\n19.4 TLB Contents: What\u2019s In There?\nLet\u2019s look at the contents of the hardware TLB in more detail. A typical\nTLB might have 32, 64, or 128 entries and be what is called fully associa-\ntive. Basically , this just means that any given translation can b e anywhere\nin the TLB, and that the hardware will search the entire TLB in parallel to\n\ufb01nd the desired translation. A typical TLB entry might look l ike this:\nVPN PFN other bits\nNote that both the VPN and PFN are present in each entry , as a tr ans-\nlation could end up in any of these locations (in hardware ter ms, the TLB\nis known as a fully-associative cache). The hardware searches the entries\nin parallel to see if there is a match.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n190 PA G I N G : F A S T E R TR A N S L AT I O N S (TLB S)\nAS I D E : TLB V A L I D BI T \u0338= PA G E TA B L E VA L I D BI T\nA common mistake is to confuse the valid bits found in a TLB wit h\nthose found in a page table. In a page table, when a page-table entry\n(PTE) is marked invalid, it means that the page has not been al located by\nthe process, and should not be accessed by a correctly-worki ng program.\nThe usual response when an invalid page is accessed is to trap to the OS,\nwhich will respond by killing the process.\nA TLB valid bit, in contrast, simply refers to whether a TLB en try has a\nvalid translation within it. When a system boots, for exampl e, a common\ninitial state for each TLB entry is to be set to invalid, becau se no address\ntranslations are yet cached there. Once virtual memory is en abled, and\nonce programs start running and accessing their virtual add ress spaces,\nthe TLB is slowly populated, and thus valid entries soon \ufb01ll t he TLB.\nThe TLB valid bit is quite useful when performing a context sw itch too,\nas we\u2019ll discuss further below . By setting all TLB entries to invalid, the\nsystem can ensure that the about-to-be-run process does not accidentally\nuse a virtual-to-physical translation from a previous proc ess.\nMore interesting are the \u201cother bits\u201d. For example, the TLB c ommonly\nhas a valid bit, which says whether"
  },
  {
    "content": "\nThe TLB valid bit is quite useful when performing a context sw itch too,\nas we\u2019ll discuss further below . By setting all TLB entries to invalid, the\nsystem can ensure that the about-to-be-run process does not accidentally\nuse a virtual-to-physical translation from a previous proc ess.\nMore interesting are the \u201cother bits\u201d. For example, the TLB c ommonly\nhas a valid bit, which says whether the entry has a valid translation or\nnot. Also common are protection bits, which determine how a page can\nbe accessed (as in the page table). For example, code pages mi ght be\nmarked read and execute , whereas heap pages might be marked read and\nwrite. There may also be a few other \ufb01elds, including an address-space\nidenti\ufb01er , a dirty bit , and so forth; see below for more information.\n19.5 TLB Issue: Context Switches\nWith TLBs, some new issues arise when switching between proc esses\n(and hence address spaces). Speci\ufb01cally , the TLB contains v irtual-to-physical\ntranslations that are only valid for the currently running p rocess; these\ntranslations are not meaningful for other processes. As a re sult, when\nswitching from one process to another , the hardware or OS (or both) must\nbe careful to ensure that the about-to-be-run process does n ot accidentally\nuse translations from some previously run process.\nT o understand this situation better , let\u2019s look at an exampl e. When one\nprocess (P1) is running, it assumes the TLB might be caching t ranslations\nthat are valid for it, i.e., that come from P1\u2019s page table. As sume, for this\nexample, that the 10th virtual page of P1 is mapped to physica l frame 100.\nIn this example, assume another process (P2) exists, and the OS soon\nmight decide to perform a context switch and run it. Assume he re that\nthe 10th virtual page of P2 is mapped to physical frame 170. If entries for\nboth processes were in the TLB, the contents of the TLB would b e:\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : F A S T E R TR A N S L AT I O N S (TLB S) 191\nVPN PFN valid prot\n10 100 1 rwx\n\u2014 \u2014 0 \u2014\n10 170 1 rwx\n\u2014 \u2014 0 \u2014\nIn the TLB above, we clearly have a problem: VPN 10 translates to\neither PFN 100 (P1) or PFN 170 (P2), but the hardware can\u2019t dis tinguish\nwhich entry is meant for which process. Thus, we need to do som e more\nwork in order for the TLB to correctly and ef\ufb01ciently support virtualiza-\ntion across multiple processes. And thus, a crux:\nTH E CR U X :\nHO W TO MA N A G E TLB C O N T E N T S ON A C O N T E X T SW I T C H\nWhen context-switching between processes, the translatio ns in the TLB\nfor the last process are not meaningful to the about-to-be-r un process.\nWhat should the hardware or OS do in order to solve this proble m?\nThere are a number of possible solutions to this problem. One ap-\nproach is to simply \ufb02ush the TLB on context switches, thus emptying\nit before running the next process. On a software-based syst em, this\ncan be accomplished with an explicit (and privileged) hardw are instruc-\ntion; with a hardware-managed TLB, the \ufb02ush could be enacted when the\npage-table base register is changed (note the OS must change the PTBR\non a context switch anyhow). In either case, the \ufb02ush operati on simply\nsets all valid bits to 0, essentially clearing the contents o f the TLB.\nBy \ufb02ushing the TLB on each context switch, we now have a workin g\nsolution, as a process will never accidentally encounter th e wrong trans-\nlations in the TLB. However , there is a cost: each time a proce ss runs, it\nmust incur TLB misses as it touches"
  },
  {
    "content": " In either case, the \ufb02ush operati on simply\nsets all valid bits to 0, essentially clearing the contents o f the TLB.\nBy \ufb02ushing the TLB on each context switch, we now have a workin g\nsolution, as a process will never accidentally encounter th e wrong trans-\nlations in the TLB. However , there is a cost: each time a proce ss runs, it\nmust incur TLB misses as it touches its data and code pages. If the OS\nswitches between processes frequently , this cost may be hig h.\nT o reduce this overhead, some systems add hardware support t o en-\nable sharing of the TLB across context switches. In particul ar , some hard-\nware systems provide an address space identi\ufb01er (ASID) \ufb01eld in the\nTLB. Y ou can think of the ASID as a process identi\ufb01er (PID), but usu-\nally it has fewer bits (e.g., 8 bits for the ASID versus 32 bits for a PID).\nIf we take our example TLB from above and add ASIDs, it is clear\nprocesses can readily share the TLB: only the ASID \ufb01eld is nee ded to dif-\nferentiate otherwise identical translations. Here is a dep iction of a TLB\nwith the added ASID \ufb01eld:\nVPN PFN valid prot ASID\n10 100 1 rwx 1\n\u2014 \u2014 0 \u2014 \u2014\n10 170 1 rwx 2\n\u2014 \u2014 0 \u2014 \u2014\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n192 PA G I N G : F A S T E R TR A N S L AT I O N S (TLB S)\nThus, with address-space identi\ufb01ers, the TLB can hold trans lations\nfrom different processes at the same time without any confus ion. Of\ncourse, the hardware also needs to know which process is curr ently run-\nning in order to perform translations, and thus the OS must, o n a context\nswitch, set some privileged register to the ASID of the curre nt process.\nAs an aside, you may also have thought of another case where tw o\nentries of the TLB are remarkably similar . In this example, t here are two\nentries for two different processes with two different VPNs that point to\nthe same physical page:\nVPN PFN valid prot ASID\n10 101 1 r-x 1\n\u2014 \u2014 0 \u2014 \u2014\n50 101 1 r-x 2\n\u2014 \u2014 0 \u2014 \u2014\nThis situation might arise, for example, when two processes share a\npage (a code page, for example). In the example above, Proces s 1 is shar-\ning physical page 101 with Process 2; P1 maps this page into th e 10th\npage of its address space, whereas P2 maps it to the 50th page o f its ad-\ndress space. Sharing of code pages (in binaries, or shared li braries) is\nuseful as it reduces the number of physical pages in use, thus reducing\nmemory overheads.\n19.6 Issue: Replacement Policy\nAs with any cache, and thus also with the TLB, one more issue th at we\nmust consider is cache replacement . Speci\ufb01cally , when we are installing\na new entry in the TLB, we have to replace an old one, and thus the\nquestion: which one to replace?\nTH E CR U X : H O W TO DE S I G N TLB R E P L A C E M E N T PO L I C Y\nWhich TLB entry should be replaced when we add a new TLB entry?\nThe goal, of course, being to minimize the miss rate (or increase hit rate )\nand thus improve performance.\nW e will study such policies in some detail when we tackle the p roblem\nof swapping pages to disk in a virtual memory system; here we\u2019 ll just\nhighlight a few of typical policies. One common approach is t o evict the\nleast-recently-used or LRU entry . The idea here is to take advantage of\nlocality in the memory-reference stream; thus, it is likely that an entry that\nhas not recently been used is a good candidate for eviction as (perhaps)\nit won\u2019t soon be referenced again. Another typical approach is to use a\nrandom policy . Randomness sometimes makes a bad decision but has"
  },
  {
    "content": " few of typical policies. One common approach is t o evict the\nleast-recently-used or LRU entry . The idea here is to take advantage of\nlocality in the memory-reference stream; thus, it is likely that an entry that\nhas not recently been used is a good candidate for eviction as (perhaps)\nit won\u2019t soon be referenced again. Another typical approach is to use a\nrandom policy . Randomness sometimes makes a bad decision but has th e\nnice property that there are not any weird corner case behavi ors that can\ncause pessimal behavior , e.g., think of a loop accessing n + 1pages, a TLB\nof size n, and an LRU replacement policy .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : F A S T E R TR A N S L AT I O N S (TLB S) 193\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nVPN G ASID\nPFN C D V\nFigure 19.4: A MIPS TLB Entry\n19.7 A Real TLB Entry\nFinally , let\u2019s brie\ufb02y look at a real TLB. This example is from the MIPS\nR4000 [H93], a modern system that uses software-managed TLB s. All 64\nbits of this TLB entry can be seen in Figure 19.4.\nThe MIPS R4000 supports a 32-bit address space with 4KB pages . Thus,\nwe would expect a 20-bit VPN and 12-bit offset in our typical v irtual ad-\ndress. However , as you can see in the TLB, there are only 19 bit s for the\nVPN; as it turns out, user addresses will only come from half t he address\nspace (the rest reserved for the kernel) and hence only 19 bit s of VPN\nare needed. The VPN translates to up to a 24-bit physical fram e number\n(PFN), and hence can support systems with up to 64GB of (physi cal) main\nmemory ( 224 4KB pages).\nThere are a few other interesting bits in the MIPS TLB. W e see a global\nbit (G), which is used for pages that are globally-shared amo ng processes.\nThus, if the global bit is set, the ASID is ignored. W e also see the 8-bit\nASID, which the OS can use to distinguish between address spaces ( as\ndescribed above). One question for you: what should the OS do if there\nare more than 256 ( 28) processes running at a time? Finally , we see 3\nCoherence (C) bits, which determine how a page is cached by the hardware\n(a bit beyond the scope of these notes); a dirty bit which is marked when\nthe page has been written to (we\u2019ll see the use of this later); a valid bit\nwhich tells the hardware if there is a valid translation pres ent in the entry .\nThere is also a page mask \ufb01eld (not shown), which supports multiple page\nsizes; we\u2019ll see later why having larger pages might be usefu l. Finally ,\nsome of the 64 bits are unused (shaded gray in the diagram).\nMIPS TLBs usually have 32 or 64 of these entries, most of which are\nused by user processes as they run. However , a few are reserve d for the\nOS. A wired register can be set by the OS to tell the hardware how many\nslots of the TLB to reserve for the OS; the OS uses these reserv ed map-\npings for code and data that it wants to access during critica l times, where\na TLB miss would be problematic (e.g., in the TLB miss handler ).\nBecause the MIPS TLB is software managed, there needs to be in struc-\ntions to update the TLB. The MIPS provides four such instruct ions: TLBP,\nwhich probes the TLB to see if a particular translation is in t here; TLBR,\nwhich reads the contents of a TLB entry into registers; TLBWI, which re-\nplaces a speci\ufb01c TLB entry; and TLBWR, which replaces a random TLB\nentry . The OS uses these instructions to manage the TLB\u2019s con tents. It is\nof course critical that these instructions are privileged; imagine what a"
  },
  {
    "content": "BP,\nwhich probes the TLB to see if a particular translation is in t here; TLBR,\nwhich reads the contents of a TLB entry into registers; TLBWI, which re-\nplaces a speci\ufb01c TLB entry; and TLBWR, which replaces a random TLB\nentry . The OS uses these instructions to manage the TLB\u2019s con tents. It is\nof course critical that these instructions are privileged; imagine what a\nuser process could do if it could modify the contents of the TL B (hint: just\nabout anything, including take over the machine, run its own malicious\n\u201cOS\u201d, or even make the Sun disappear).\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n194 PA G I N G : F A S T E R TR A N S L AT I O N S (TLB S)\nTI P : RAM I S N \u2019 T ALWAY S RAM (C U L L E R \u2019 S LAW )\nThe term random-access memory , or RAM, implies that you can access\nany part of RAM just as quickly as another . While it is general ly good to\nthink of RAM in this way , because of hardware/OS features suc h as the\nTLB, accessing a particular page of memory may be costly , par ticularly if\nthat page isn\u2019t currently mapped by your TLB. Thus, it is alwa ys good to\nremember the implementation tip: RAM isn\u2019t always RAM . Sometimes\nrandomly accessing your address space, particular if the nu mber of pages\naccessed exceeds the TLB coverage, can lead to severe perfor mance penal-\nties. Because one of our advisors, David Culler , used to alwa ys point to\nthe TLB as the source of many performance problems, we name th is law\nin his honor: Culler\u2019s Law .\n19.8 Summary\nW e have seen how hardware can help us make address translatio n\nfaster . By providing a small, dedicated on-chip TLB as an add ress-translation\ncache, most memory references will hopefully be handled without having\nto access the page table in main memory . Thus, in the common ca se,\nthe performance of the program will be almost as if memory isn \u2019t being\nvirtualized at all, an excellent achievement for an operati ng system, and\ncertainly essential to the use of paging in modern systems.\nHowever , TLBs do not make the world rosy for every program tha t\nexists. In particular , if the number of pages a program acces ses in a short\nperiod of time exceeds the number of pages that \ufb01t into the TLB , the pro-\ngram will generate a large number of TLB misses, and thus run q uite a\nbit more slowly . W e refer to this phenomenon as exceeding the TLB cov-\nerage, and it can be quite a problem for certain programs. One solut ion,\nas we\u2019ll discuss in the next chapter , is to include support fo r larger page\nsizes; by mapping key data structures into regions of the pro gram\u2019s ad-\ndress space that are mapped by larger pages, the effective co verage of the\nTLB can be increased. Support for large pages is often exploi ted by pro-\ngrams such as a database management system (a DBMS), which have\ncertain data structures that are both large and randomly-ac cessed.\nOne other TLB issue worth mentioning: TLB access can easily b e-\ncome a bottleneck in the CPU pipeline, in particular with wha t is called a\nphysically-indexed cache . With such a cache, address translation has to\ntake place before the cache is accessed, which can slow things down quite\na bit. Because of this potential problem, people have looked into all sorts\nof clever ways to access caches with virtual addresses, thus avoiding the\nexpensive step of translation in the case of a cache hit. Such a virtually-\nindexed cache solves some performance problems, but introduces new\nissues into hardware design as well. See Wiggins\u2019s \ufb01ne surve y for more\ndetails [W03].\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : F A S T E R TR A N S L AT I O N S (TLB S) 195"
  },
  {
    "content": " but introduces new\nissues into hardware design as well. See Wiggins\u2019s \ufb01ne surve y for more\ndetails [W03].\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : F A S T E R TR A N S L AT I O N S (TLB S) 195\nReferences\n[BC91] \u201cPerformance from Architecture: Comparing a RISC an d a CISC\nwith Similar Hardware Organization\u201d\nD. Bhandarkar and Douglas W . Clark\nCommunications of the ACM, September 1991\nA great and fair comparison between RISC and CISC. The bottom line: on similar hardware, RISC was\nabout a factor of three better in performance.\n[CM00] \u201cThe evolution of RISC technology at IBM\u201d\nJohn Cocke and V . Markstein\nIBM Journal of Research and Development, 44:1/2\nA summary of the ideas and work behind the IBM 801, which many c onsider the \ufb01rst true RISC micro-\nprocessor .\n[C95] \u201cThe Core of the Black Canyon Computer Corporation\u201d\nJohn Couleur\nIEEE Annals of History of Computing, 17:4, 1995\nIn this fascinating historical note, Couleur talks about ho w he invented the TLB in 1964 while working\nfor GE, and the fortuitous collaboration that thus ensued wi th the Project MAC folks at MIT .\n[CG68] \u201cShared-access Data Processing System\u201d\nJohn F . Couleur and Edward L. Glaser\nPatent 3412382, November 1968\nThe patent that contains the idea for an associative memory t o store address translations. The idea,\naccording to Couleur , came in 1964.\n[CP78] \u201cThe architecture of the IBM System/370\u201d\nR.P . Case and A. Padegs\nCommunications of the ACM. 21:1, 73-96, January 1978\nPerhaps the \ufb01rst paper to use the term translation lookaside buffer . The name arises from the his-\ntorical name for a cache, which was a lookaside buffer as called by those developing the Atlas system\nat the University of Manchester; a cache of address translat ions thus became a translation lookaside\nbuffer. Even though the term lookaside buffer fell out of favor , TLB seems to have stuck, for whatever\nreason.\n[H93] \u201cMIPS R4000 Microprocessor User \u2019s Manual\u201d.\nJoe Heinrich, Prentice-Hall, June 1993\nA vailable: http://cag.csail.mit.edu/raw/\ndocuments/R4400\nUman book Ed2.pdf\n[HP06] \u201cComputer Architecture: A Quantitative Approach\u201d\nJohn Hennessy and David Patterson\nMorgan-Kaufmann, 2006\nA great book about computer architecture. We have a particul ar attachment to the classic \ufb01rst edition.\n[I09] \u201cIntel 64 and IA-32 Architectures Software Developer \u2019s Manuals\u201d\nIntel, 2009\nA vailable: http://www .intel.com/products/processor/manuals\nIn particular , pay attention to \u201cV olume 3A: System Programm ing Guide Part 1\u201d and \u201cV olume 3B:\nSystem Programming Guide Part 2\u201d\n[PS81] \u201cRISC-I: A Reduced Instruction Set VLSI Computer \u201d\nD.A. Patterson and C.H. Sequin\nISCA \u201981, Minneapolis, May 1981\nThe paper that introduced the term RISC, and started the aval anche of research into simplifying com-\nputer chips for performance.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n196 PA G I N G : F A S T E R TR A N S L AT I O N S (TLB S)\n[SB92] \u201cCPU Performance Evaluation and Execution Time Pred iction\nUsing Narrow Spectrum Benchmarking\u201d\nRafael H. Saavedra-Barrera\nEECS Department, University of California, Berkeley\nT echnical Report No. UCB/CSD-92-684, February 1992\nwww .eecs.berkeley .edu/Pubs/T echRpts"
  },
  {
    "content": " I O N S (TLB S)\n[SB92] \u201cCPU Performance Evaluation and Execution Time Pred iction\nUsing Narrow Spectrum Benchmarking\u201d\nRafael H. Saavedra-Barrera\nEECS Department, University of California, Berkeley\nT echnical Report No. UCB/CSD-92-684, February 1992\nwww .eecs.berkeley .edu/Pubs/T echRpts/1992/CSD-92-684.pdf\nA great dissertation about how to predict execution time of a pplications by breaking them down into\nconstituent pieces and knowing the cost of each piece. Proba bly the most interesting part that comes out\nof this work is the tool to measure details of the cache hierar chy (described in Chapter 5). Make sure to\ncheck out the wonderful diagrams therein.\n[W03] \u201cA Survey on the Interaction Between Caching, T ransla tion and Protection\u201d\nAdam Wiggins\nUniversity of New South W ales TR UNSW-CSE-TR-0321, August, 2003\nAn excellent survey of how TLBs interact with other parts of t he CPU pipeline, namely hardware caches.\n[WG00] \u201cThe SP ARC Architecture Manual: V ersion 9\u201d\nDavid L. W eaver and T om Germond, September 2000\nSP ARC International, San Jose, California\nA vailable: http://www .sparc.org/standards/SP ARCV9.pdf\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : F A S T E R TR A N S L AT I O N S (TLB S) 197\nHomework (Measurement)\nIn this homework, you are to measure the size and cost of acces sing\na TLB. The idea is based on work by Saavedra-Barrera [SB92], w ho de-\nveloped a simple but beautiful method to measure numerous as pects of\ncache hierarchies, all with a very simple user-level progra m. Read his\nwork for more details.\nThe basic idea is to access some number of pages within large d ata\nstructure (e.g., an array) and to time those accesses. For ex ample, let\u2019s say\nthe TLB size of a machine happens to be 4 (which would be very sm all,\nbut useful for the purposes of this discussion). If you write a program\nthat touches 4 or fewer pages, each access should be a TLB hit, and thus\nrelatively fast. However , once you touch 5 pages or more, rep eatedly in a\nloop, each access will suddenly jump in cost, to that of a TLB m iss.\nThe basic code to loop through an array once should look like t his:\nint jump = PAGESIZE / sizeof(int);\nfor (i = 0; i < NUMPAGES * jump; i += jump) {\na[i] += 1;\n}\nIn this loop, one integer per page of the the array a is updated, up\nto the number of pages speci\ufb01ed by NUMPAGES. By timing such a loop\nrepeatedly (say , a few hundred million times in another loop around this\none, or however many loops are needed to run for a few seconds) , you\ncan time how long each access takes (on average). By looking f or jumps\nin cost as NUMPAGES increases, you can roughly determine how big the\n\ufb01rst-level TLB is, determine whether a second-level TLB exi sts (and how\nbig it is if it does), and in general get a good sense of how TLB h its and\nmisses can affect performance.\nHere is an example graph:\nAs you can see in the graph, when just a few pages are accessed ( 8\nor fewer), the average access time is roughly 5 nanoseconds. When 16\nor more pages are accessed, there is a sudden jump to about 20 n anosec-\nonds per access. A \ufb01nal jump in cost occurs at around 1024 page s, at\nwhich point each access takes around 70 nanoseconds. From th is data,\nwe can conclude that there is a two-level TLB hierarchy; the \ufb01 rst is quite\nsmall (probably holding between 8 and 16 entries); the secon d is larger\nbut slower (holding"
  },
  {
    "content": " accessed, there is a sudden jump to about 20 n anosec-\nonds per access. A \ufb01nal jump in cost occurs at around 1024 page s, at\nwhich point each access takes around 70 nanoseconds. From th is data,\nwe can conclude that there is a two-level TLB hierarchy; the \ufb01 rst is quite\nsmall (probably holding between 8 and 16 entries); the secon d is larger\nbut slower (holding roughly 512 entries). The overall diffe rence between\nhits in the \ufb01rst-level TLB and misses is quite large, roughly a factor of\nfourteen. TLB performance matters!\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n198 PA G I N G : F A S T E R TR A N S L AT I O N S (TLB S)\n1 4 16 64 256 1024\n0\n20\n40\n60\n80\nTLB Size Measurement\nNumber Of Pages\nTime Per Access (ns)\nFigure 19.5: Discovering TLB Sizes and Miss Costs\nQuestions\n\u2022 For timing, you\u2019ll need to use a timer such as that made availa ble\nby gettimeofday(). How precise is such a timer? How long\ndoes an operation have to take in order for you to time it preci sely?\n(this will help determine how many times, in a loop, you\u2019ll ha ve to\nrepeat a page access in order to time it successfully)\n\u2022 W rite the program, called tlb.c, that can roughly measure the cost\nof accessing each page. Inputs to the program should be: the n um-\nber of pages to touch and the number of trials.\n\u2022 Now write a script in your favorite scripting language (csh, python,\netc.) to run this program, while varying the number of pages a c-\ncessed from 1 up to a few thousand, perhaps incrementing by a\nfactor of two per iteration. Run the script on different mach ines\nand gather some data. How many trials are needed to get reliab le\nmeasurements?\n\u2022 Next, graph the results, making a graph that looks similar to the\none above. Use a good tool like ploticus. Visualization usually\nmakes the data much easier to digest; why do you think that is?\n\u2022 One thing to watch out for is compiler optimzation. Compiler s do\nall sorts of clever things, including removing loops which i ncre-\nment values that no other part of the program subsequently us es.\nHow can you ensure the compiler does not remove the main loop\nabove from your TLB size estimator?\n\u2022 Another thing to watch out for is the fact that most systems to day\nship with multiple CPUs, and each CPU, of course, has its own T LB\nhierarchy . T o really get good measurements, you have to run y our\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : F A S T E R TR A N S L AT I O N S (TLB S) 199\ncode on just one CPU, instead of letting the scheduler bounce it\nfrom one CPU to the next. How can you do that? (hint: look up\n\u201cpinning a thread\u201d on Google for some clues) What will happen if\nyou don\u2019t do this, and the code moves from one CPU to the other?\n\u2022 Another issue that might arise relates to initialization. I f you don\u2019t\ninitialize the array a above before accessing it, the \ufb01rst time you\naccess it will be very expensive, due to initial access costs such as\ndemand zeroing. Will this affect your code and its timing? Wh at\ncan you do to counterbalance these potential costs?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n20\nPaging: Smaller Tables\nW e now tackle the second problem that paging introduces: pag e tables\nare too big and thus consume too much memory . Let\u2019s start out w ith\na linear page table. As you might recall 1, linear page tables get pretty\nbig. Assume again a 32-bit address space ( 232 bytes), with 4KB ( 212 byte)\npages"
  },
  {
    "content": " E E\nEA S Y\nPI E C E S\n\n20\nPaging: Smaller Tables\nW e now tackle the second problem that paging introduces: pag e tables\nare too big and thus consume too much memory . Let\u2019s start out w ith\na linear page table. As you might recall 1, linear page tables get pretty\nbig. Assume again a 32-bit address space ( 232 bytes), with 4KB ( 212 byte)\npages and a 4-byte page-table entry . An address space thus ha s roughly\none million virtual pages in it ( 232\n212 ); multiply by the page-table size and\nyou see that our page table is 4MB in size. Recall also: we usua lly have\none page table for every process in the system! With a hundred active pro-\ncesses (not uncommon on a modern system), we will be allocati ng hun-\ndreds of megabytes of memory just for page tables! As a result , we are in\nsearch of some techniques to reduce this heavy burden. There are a lot of\nthem, so let\u2019s get going. But not before our crux:\nCR U X : H O W TO MA K E PA G E TA B L E S SM A L L E R ?\nSimple array-based page tables (usually called linear page tables) are\ntoo big, taking up far too much memory on typical systems. How can we\nmake page tables smaller? What are the key ideas? What inef\ufb01c iencies\narise as a result of these new data structures?\n20.1 Simple Solution: Bigger Pages\nW e could reduce the size of the page table in one simple way: us e\nbigger pages. T ake our 32-bit address space again, but this t ime assume\n16KB pages. W e would thus have an 18-bit VPN plus a 14-bit offs et. As-\nsuming the same size for each PTE (4 bytes), we now have 218 entries in\nour linear page table and thus a total size of 1MB per page tabl e, a factor\n1 Or indeed, you might not; this paging thing is getting out of c ontrol, no? That said,\nalways make sure you understand the problem you are solving before moving onto the solution;\nindeed, if you understand the problem, you can often derive t he solution yourself. Here, the\nproblem should be clear: simple linear (array-based) page t ables are too big.\n201\n202 PA G I N G : S M A L L E R TA B L E S\nAS I D E : MU LT I P L E PA G E SI Z E S\nAs an aside, do note that many architectures (e.g., MIPS, SP A RC, x86-64)\nnow support multiple page sizes. Usually , a small (4KB or 8KB ) page\nsize is used. However , if a \u201csmart\u201d application requests it, a single large\npage (e.g., of size 4MB) can be used for a speci\ufb01c portion of th e address\nspace, enabling such applications to place a frequently-us ed (and large)\ndata structure in such a space while consuming only a single T LB en-\ntry . This type of large page usage is common in database manag ement\nsystems and other high-end commercial applications. The ma in reason\nfor multiple page sizes is not to save page table space, howev er; it is to\nreduce pressure on the TLB, enabling a program to access more of its ad-\ndress space without suffering from too many TLB misses. Howe ver , as\nresearchers have shown [N+02], using multiple page sizes ma kes the OS\nvirtual memory manager notably more complex, and thus large pages\nare sometimes most easily used simply by exporting a new inte rface to\napplications to request large pages directly .\nof four reduction in size of the page table (not surprisingly , the reduction\nexactly mirrors the factor of four increase in page size).\nThe major problem with this approach, however , is that big pa ges lead\nto waste within each page, a problem known as internal fragmentation\n(as the waste is internal to the unit of allocation). Applications thus end\nup allocating pages but only using little bits and pieces of e ach, and mem-\nory quickly \ufb01lls up with these overly-large pages. Thus, mos t systems use\nrelatively small page sizes in the common case: 4KB (as in x86 ) or 8KB (as\n"
  },
  {
    "content": " pa ges lead\nto waste within each page, a problem known as internal fragmentation\n(as the waste is internal to the unit of allocation). Applications thus end\nup allocating pages but only using little bits and pieces of e ach, and mem-\nory quickly \ufb01lls up with these overly-large pages. Thus, mos t systems use\nrelatively small page sizes in the common case: 4KB (as in x86 ) or 8KB (as\nin SP ARCv9). Our problem will not be solved so simply , alas.\n20.2 Hybrid Approach: Paging and Segments\nWhenever you have two reasonable but different approaches t o some-\nthing in life, you should always examine the combination of t he two to\nsee if you can obtain the best of both worlds. W e call such a com bination a\nhybrid. For example, why eat just chocolate or plain peanut butter w hen\nyou can instead combine the two in a lovely hybrid known as the Reese\u2019s\nPeanut Butter Cup [M28]?\nY ears ago, the creators of Multics (in particular Jack Denni s) chanced\nupon such an idea in the construction of the Multics virtual m emory sys-\ntem [M07]. Speci\ufb01cally , Dennis had the idea of combining pag ing and\nsegmentation in order to reduce the memory overhead of page t ables.\nW e can see why this might work by examining a typical linear pa ge ta-\nble in more detail. Assume we have an address space in which th e used\nportions of the heap and stack are small. For the example, we u se a tiny\n16KB address space with 1KB pages (Figure\n20.1); the page table for this\naddress space is in T able 20.1.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : S M A L L E R TA B L E S 203\ncode\nheap\nstack\nVirtual Address Space Physical Memory\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\nFigure 20.1: A 16-KB Address Space With 1-KB Pages\nThis example assumes the single code page (VPN 0) is mapped to\nphysical page 10, the single heap page (VPN 4) to physical pag e 23, and\nthe two stack pages at the other end of the address space (VPNs 14 and\n15) are mapped to physical pages 28 and 4, respectively . As yo u can see\nfrom the picture, most of the page table is unused, full of invalid entries.\nWhat a waste! And this is for a tiny 16KB address space. Imagin e the\npage table of a 32-bit address space and all the potential was ted space in\nthere! Actually , don\u2019t imagine such a thing; it\u2019s far too gru esome.\nPFN valid prot present dirty\n10 1 r-x 1 0\n- 0 \u2014 - -\n- 0 \u2014 - -\n- 0 \u2014 - -\n23 1 rw- 1 1\n- 0 \u2014 - -\n- 0 \u2014 - -\n- 0 \u2014 - -\n- 0 \u2014 - -\n- 0 \u2014 - -\n- 0 \u2014 - -\n- 0 \u2014 - -\n- 0 \u2014 - -\n- 0 \u2014 - -\n28 1 rw- 1 1\n4 1 rw- 1 1\nT able 20.1: A Page T able For 16-KB Address Space\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n204 PA G I N G : S M A L L E R TA B L E S\nThus, our hybrid approach: instead of having a single page ta ble for\nthe entire address space of the process, why not have one per l ogical seg-\nment? In this example, we might thus have three page tables, o ne for the\ncode, heap, and stack parts of the address space.\nNow , remember with segmentation, we had a base register that told\nus where"
  },
  {
    "content": " : S M A L L E R TA B L E S\nThus, our hybrid approach: instead of having a single page ta ble for\nthe entire address space of the process, why not have one per l ogical seg-\nment? In this example, we might thus have three page tables, o ne for the\ncode, heap, and stack parts of the address space.\nNow , remember with segmentation, we had a base register that told\nus where each segment lived in physical memory , and a bound or limit\nregister that told us the size of said segment. In our hybrid, we still have\nthose structures in the MMU; here, we use the base not to point to the\nsegment itself but rather to hold the physical address of the page table of that\nsegment. The bounds register is used to indicate the end of th e page table\n(i.e., how many valid pages it has).\nLet\u2019s do a simple example to clarify . Assume a 32-bit virtual address\nspace with 4KB pages, and an address space split into four seg ments.\nW e\u2019ll only use three segments for this example: one for code, one for\nheap, and one for stack.\nT o determine which segment an address refers to, we\u2019ll use th e top\ntwo bits of the address space. Let\u2019s assume 00 is the unused se gment,\nwith 01 for code, 10 for the heap, and 11 for the stack. Thus, a v irtual\naddress looks like this:\n31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\nSeg VPN Offset\nIn the hardware, assume that there are thus three base/bound s pairs,\none each for code, heap, and stack. When a process is running, the base\nregister for each of these segments contains the physical ad dress of a lin-\near page table for that segment; thus, each process in the sys tem now has\nthree page tables associated with it. On a context switch, these re gisters\nmust be changed to re\ufb02ect the location of the page tables of th e newly-\nrunning process.\nOn a TLB miss (assuming a hardware-managed TLB, i.e., where t he\nhardware is responsible for handling TLB misses), the hardw are uses the\nsegment bits ( SN) to determine which base and bounds pair to use. The\nhardware then takes the physical address therein and combin es it with\nthe VPN as follows to form the address of the page table entry ( PTE):\nSN = (VirtualAddress & SEG_MASK) >> SN_SHIFT\nVPN = (VirtualAddress & VPN_MASK) >> VPN_SHIFT\nAddressOfPTE = Base[SN] + (VPN * sizeof(PTE))\nThis sequence should look familiar; it is virtually identic al to what we\nsaw before with linear page tables. The only difference, of c ourse, is the\nuse of one of three segment base registers instead of the sing le page table\nbase register .\nThe critical difference in our hybrid scheme is the presence of a bounds\nregister per segment; each bounds register holds the value o f the maxi-\nmum valid page in the segment. For example, if the code segmen t is\nusing its \ufb01rst three pages (0, 1, and 2), the code segment page table will\nonly have three entries allocated to it and the bounds regist er will be set\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : S M A L L E R TA B L E S 205\nTI P : U S E HY B R I D S\nWhen you have two good and seemingly opposing ideas, you shou ld\nalways see if you can combine them into a hybrid that manages to achieve\nthe best of both worlds. Hybrid corn species, for example, ar e known to\nbe more robust than any naturally-occurring species. Of cou rse, not all\nhybrids are a good idea; see the Zeedonk (or Zonkey), which is a cross of\na Zebra and a Donkey . If you don\u2019t believe such a creature exis ts, look it\nup, and prepare to be amazed.\nto 3; memory accesses beyond the end of the segment will gener ate an ex-\nception and likely lead to the"
  },
  {
    "content": " robust than any naturally-occurring species. Of cou rse, not all\nhybrids are a good idea; see the Zeedonk (or Zonkey), which is a cross of\na Zebra and a Donkey . If you don\u2019t believe such a creature exis ts, look it\nup, and prepare to be amazed.\nto 3; memory accesses beyond the end of the segment will gener ate an ex-\nception and likely lead to the termination of the process. In this manner ,\nour hybrid approach realizes a signi\ufb01cant memory savings co mpared to\nthe linear page table; unallocated pages between the stack a nd the heap\nno longer take up space in a page table (just to mark them as not valid).\nHowever , as you might notice, this approach is not without pr oblems.\nFirst, it still requires us to use segmentation; as we discus sed before, seg-\nmentation is not quite as \ufb02exible as we would like, as it assum es a certain\nusage pattern of the address space; if we have a large but spar sely-used\nheap, for example, we can still end up with a lot of page table w aste.\nSecond, this hybrid causes external fragmentation to arise again. While\nmost of memory is managed in page-sized units, page tables no w can be\nof arbitrary size (in multiples of PTEs). Thus, \ufb01nding free s pace for them\nin memory is more complicated. For these reasons, people con tinued to\nlook for better approaches to implementing smaller page tab les.\n20.3 Multi-level Page T ables\nA different approach doesn\u2019t rely on segmentation but attac ks the same\nproblem: how to get rid of all those invalid regions in the pag e table in-\nstead of keeping them all in memory? W e call this approach a multi-level\npage table , as it turns the linear page table into something like a tree. This\napproach is so effective that many modern systems employ it ( e.g., x86\n[BOH10]). W e now describe this approach in detail.\nThe basic idea behind a multi-level page table is simple. Fir st, chop up\nthe page table into page-sized units; then, if an entire page of page-table\nentries (PTEs) is invalid, don\u2019t allocate that page of the pa ge table at all.\nT o track whether a page of the page table is valid (and if valid , where it\nis in memory), use a new structure, called the page directory . The page\ndirectory thus either can be used to tell you where a page of th e page\ntable is, or that the entire page of the page table contains no valid pages.\nFigure\n20.2 shows an example. On the left of the \ufb01gure is the classic\nlinear page table; even though most of the middle regions of t he address\nspace are not valid, we still have to have page-table space al located for\nthose regions (i.e., the middle two pages of the page table). On the right\nis a multi-level page table. The page directory marks just tw o pages of\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n206 PA G I N G : S M A L L E R TA B L E S\nvalid\nprotPFN\n1 rx 12\n1 rx 13\n0 - -\n1 rw 100\n0 - -\n0 - -\n0 - -\n0 - -\n0 - -\n0 - -\n0 - -\n0 - -\n0 - -\n0 - -\n1 rw 86\n1 rw 15\nLinear Page Table\nPTBR 201\nPFN 201PFN 202PFN 203PFN 204\nvalid\nprotPFN\n1 rx 12\n1 rx 13\n0 - -\n1 rw 100\n0 - -\n0 - -\n1 rw 86\n1 rw 15\n[Page 1 of PT: Not Allocated]\n[Page 2 of PT: Not Allocated]\nPFN 201PFN 204\nMulti-level Page Table\nPDBR 200\nvalid PFN\n1 201\n0 -\n0 -\n1 204\nPFN 200\nThe Page Directory\nFigure 20.2: Linear (Left) And Multi-Level (Right) Page T ables\nthe page table as valid (the \ufb01rst and last); thus, just"
  },
  {
    "content": " 1 of PT: Not Allocated]\n[Page 2 of PT: Not Allocated]\nPFN 201PFN 204\nMulti-level Page Table\nPDBR 200\nvalid PFN\n1 201\n0 -\n0 -\n1 204\nPFN 200\nThe Page Directory\nFigure 20.2: Linear (Left) And Multi-Level (Right) Page T ables\nthe page table as valid (the \ufb01rst and last); thus, just those t wo pages of the\npage table reside in memory . And thus you can see one way to vis ualize\nwhat a multi-level table is doing: it just makes parts of the l inear page\ntable disappear (freeing those frames for other uses), and t racks which\npages of the page table are allocated with the page directory .\nThe page directory , in a simple two-level table, contains on e entry per\npage of the page table. It consists of a number of page directory entries\n(PDE). A PDE (minimally) has a valid bit and a page frame number\n(PFN), similar to a PTE. However , as hinted at above, the mean ing of\nthis valid bit is slightly different: if the PDE entry is vali d, it means that\nat least one of the pages of the page table that the entry point s to (via the\nPFN) is valid, i.e., in at least one PTE on that page pointed to by this PDE,\nthe valid bit in that PTE is set to one. If the PDE entry is not va lid (i.e.,\nequal to zero), the rest of the PDE is not de\ufb01ned.\nMulti-level page tables have some obvious advantages over a pproaches\nwe\u2019ve seen thus far . First, and perhaps most obviously , the m ulti-level ta-\nble only allocates page-table space in proportion to the amo unt of address\nspace you are using; thus it is generally compact and support s sparse ad-\ndress spaces.\nSecond, if carefully constructed, each portion of the page t able \ufb01ts\nneatly within a page, making it easier to manage memory; the O S can\nsimply grab the next free page when it needs to allocate or gro w a page\ntable. Contrast this to a simple (non-paged) linear page tab le2 , which\nis just an array of PTEs indexed by VPN; with such a structure, the en-\ntire linear page table must reside contiguously in physical memory . For\na large page table (say 4MB), \ufb01nding such a large chunk of unus ed con-\ntiguous free physical memory can be quite a challenge. With a multi-level\n2 W e are making some assumptions here, i.e., that all page tabl es reside in their entirety in\nphysical memory (i.e., they are not swapped to disk); we\u2019ll s oon relax this assumption.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : S M A L L E R TA B L E S 207\nTI P : U N D E R S TA N D TI M E -S PA C E TR A D E -O FF S\nWhen building a data structure, one should always consider time-space\ntrade-offs in its construction. Usually , if you wish to make access to a p ar-\nticular data structure faster , you will have to pay a space-u sage penalty\nfor the structure.\nstructure, we add a level of indirection through use of the page directory ,\nwhich points to pieces of the page table; that indirection al lows us to place\npage-table pages wherever we would like in physical memory .\nIt should be noted that there is a cost to multi-level tables; on a TLB\nmiss, two loads from memory will be required to get the right t ranslation\ninformation from the page table (one for the page directory , and one for\nthe PTE itself), in contrast to just one load with a linear pag e table. Thus,\nthe multi-level table is a small example of a time-space trade-off . W e\nwanted smaller tables (and got them), but not for free; altho ugh in the\ncommon case (TLB hit), performance is obviously identical, a TLB miss\nsuffers from a higher cost with this smaller table.\nAnother obvious negative is complexity. Whether"
  },
  {
    "content": "the PTE itself), in contrast to just one load with a linear pag e table. Thus,\nthe multi-level table is a small example of a time-space trade-off . W e\nwanted smaller tables (and got them), but not for free; altho ugh in the\ncommon case (TLB hit), performance is obviously identical, a TLB miss\nsuffers from a higher cost with this smaller table.\nAnother obvious negative is complexity. Whether it is the hardware or\nOS handling the page-table lookup (on a TLB miss), doing so is undoubt-\nedly more involved than a simple linear page-table lookup. O ften we are\nwilling to increase complexity in order to improve performa nce or reduce\noverheads; in the case of a multi-level table, we make page-t able lookups\nmore complicated in order to save valuable memory .\nA Detailed Multi-Level Example\nT o understand the idea behind multi-level page tables bette r , let\u2019s do an\nexample. Imagine a small address space of size 16 KB, with 64- byte pages.\nThus, we have a 14-bit virtual address space, with 8 bits for t he VPN and\n6 bits for the offset. A linear page table would have 28 (256) entries, even\nif only a small portion of the address space is in use. Figure\n20.3 presents\none example of such an address space.\nstack\nstack\n(free)\n(free)\n... all free ...\n(free)\n(free)\nheap\nheap\n(free)\n(free)\ncode\ncode\n1111 1111\n1111 1110\n1111 1101\n1111 1100\n0000 0111\n0000 0110\n0000 0101\n0000 0100\n0000 0011\n0000 0010\n0000 0001\n0000 0000\n................\nFigure 20.3: A 16-KB Address Space With 64-byte Pages\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n208 PA G I N G : S M A L L E R TA B L E S\nTI P : B E WA RY O F CO M P L E X I T Y\nSystem designers should be wary of adding complexity into th eir sys-\ntem. What a good systems builder does is implement the least c omplex\nsystem that achieves the task at hand. For example, if disk sp ace is abun-\ndant, you shouldn\u2019t design a \ufb01le system that works hard to use as few\nbytes as possible; similarly , if processors are fast, it is b etter to write a\nclean and understandable module within the OS than perhaps t he most\nCPU-optimized, hand-assembled code for the task at hand. Be wary of\nneedless complexity , in prematurely-optimized code or oth er forms; such\napproaches make systems harder to understand, maintain, an d debug.\nAs Antoine de Saint-Exupery famously wrote: \u201cPerfection is \ufb01nally at-\ntained not when there is no longer anything to add, but when th ere is no\nlonger anything to take away .\u201d What he didn\u2019t write: \u201cIt\u2019s a l ot easier to\nsay something about perfection than to actually achieve it. \u201d\nIn this example, virtual pages 0 and 1 are for code, virtual pa ges 4 and\n5 for the heap, and virtual pages 254 and 255 for the stack; the rest of the\npages of the address space are unused.\nT o build a two-level page table for this address space, we sta rt with\nour full linear page table and break it up into page-sized uni ts. Recall our\nfull table (in this example) has 256 entries; assume each PTE is 4 bytes in\nsize. Thus, our page table is 1KB (256 \u00d7 4 bytes) in size. Given that we\nhave 64-byte pages, the 1-KB page table can be divided into 16 64-byte\npages; each page can hold 16 PTEs.\nWhat we need to understand now is how to take a VPN and use it to\nindex \ufb01rst into the page directory and then into the page of th e page table.\nRemember that each is an array of entries; thus, all we need to \ufb01gure out\nis how to construct the index for each from pieces of the VPN.\nLet\u2019s \ufb01rst index into the page directory . Our page table"
  },
  {
    "content": " 16 PTEs.\nWhat we need to understand now is how to take a VPN and use it to\nindex \ufb01rst into the page directory and then into the page of th e page table.\nRemember that each is an array of entries; thus, all we need to \ufb01gure out\nis how to construct the index for each from pieces of the VPN.\nLet\u2019s \ufb01rst index into the page directory . Our page table in th is example\nis small: 256 entries, spread across 16 pages. The page direc tory needs one\nentry per page of the page table; thus, it has 16 entries. As a r esult, we\nneed four bits of the VPN to index into the directory; we use th e top four\nbits of the VPN, as follows:\n13 12 11 10 9 8 7 6 5 4 3 2 1 0\nVPN offset\nPage Directory Index\nOnce we extract the page-directory index (PDIndex for short) from\nthe VPN, we can use it to \ufb01nd the address of the page-directory entry\n(PDE) with a simple calculation: PDEAddr = PageDirBase + (PDIndex\n* sizeof(PDE)). This results in our page directory , which we now ex-\namine to make further progress in our translation.\nIf the page-directory entry is marked invalid, we know that t he access\nis invalid, and thus raise an exception. If, however , the PDE is valid,\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : S M A L L E R TA B L E S 209\nwe have more work to do. Speci\ufb01cally , we now have to fetch the p age-\ntable entry (PTE) from the page of the page table pointed to by this page-\ndirectory entry . T o \ufb01nd this PTE, we have to index into the por tion of the\npage table using the remaining bits of the VPN:\n13 12 11 10 9 8 7 6 5 4 3 2 1 0\nVPN offset\nPage Directory Index Page Table Index\nThis page-table index (PTIndex for short) can then be used to index\ninto the page table itself, giving us the address of our PTE:\nPTEAddr = (PDE.PFN << SHIFT) + (PTIndex * sizeof(PTE))\nNote that the page-frame number (PFN) obtained from the page -directory\nentry must be left-shifted into place before combining it wi th the page-\ntable index to form the address of the PTE.\nT o see if this all makes sense, we\u2019ll now \ufb01ll in a multi-level p age ta-\nble with some actual values, and translate a single virtual a ddress. Let\u2019s\nbegin with the page directory for this example (left side of T able\n20.2).\nIn the \ufb01gure, you can see that each page directory entry (PDE) de-\nscribes something about a page of the page table for the addre ss space.\nIn this example, we have two valid regions in the address spac e (at the\nbeginning and end), and a number of invalid mappings in-betw een.\nIn physical page 100 (the physical frame number of the 0th pag e of the\npage table), we have the \ufb01rst page of 16 page table entries for the \ufb01rst 16\nVPNs in the address space. See T able 20.2 (middle part) for the contents\nof this portion of the page table.\nPage Directory Page of PT (@PFN:100) Page of PT (@PFN:101)\nPFN valid? PFN valid prot PFN valid prot\n100 1 10 1 r-x \u2013 0 \u2014\n\u2014\u2014 0 23 1 r-x \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 \u2013 0 \u2014\n\u2014\u2014 0 80 1 rw- \u2013 0 \u2014\n\u2014\u2014 0 59 1 rw- \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 55 1 rw-\n101 1 \u2013"
  },
  {
    "content": " 0 \u2014\n\u2014\u2014 0 59 1 rw- \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 \u2013 0 \u2014\n\u2014\u2014 0 \u2013 0 \u2014 55 1 rw-\n101 1 \u2013 0 \u2014 45 1 rw-\nT able 20.2: A Page Directory , And Pieces Of Page T able\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n210 PA G I N G : S M A L L E R TA B L E S\nThis page of the page table contains the mappings for the \ufb01rst 16\nVPNs; in our example, VPNs 0 and 1 are valid (the code segment) , as\nare 4 and 5 (the heap). Thus, the table has mapping informatio n for each\nof those pages. The rest of the entries are marked invalid.\nThe other valid page of page table is found inside PFN 101. Thi s page\ncontains mappings for the last 16 VPNs of the address space; s ee T able\n20.2 (right) for details.\nIn the example, VPNs 254 and 255 (the stack) have valid mappin gs.\nHopefully , what we can see from this example is how much space savings\nare possible with a multi-level indexed structure. In this e xample, instead\nof allocating the full sixteen pages for a linear page table, we allocate only\nthree: one for the page directory , and two for the chunks of the page table\nthat have valid mappings. The savings for large (32-bit or 64 -bit) address\nspaces could obviously be much greater .\nFinally , let\u2019s use this information in order to perform a tra nslation.\nHere is an address that refers to the 0th byte of VPN 254: 0x3F80, or\n11 1111 1000 0000 in binary .\nRecall that we will use the top 4 bits of the VPN to index into th e\npage directory . Thus, 1111 will choose the last (15th, if you start at the\n0th) entry of the page directory above. This points us to a val id page\nof the page table located at address 101. W e then use the next 4 bits\nof the VPN ( 1110) to index into that page of the page table and \ufb01nd\nthe desired PTE. 1110 is the next-to-last (14th) entry on the page, and\ntells us that page 254 of our virtual address space is mapped a t physi-\ncal page 55. By concatenating PFN=55 (or hex 0x37) with offset=000000,\nwe can thus form our desired physical address and issue the re quest to\nthe memory system: PhysAddr = (PTE.PFN << SHIFT) + offset\n= 00 1101 1100 0000 = 0x0DC0.\nY ou should now have some idea of how to construct a two-level p age\ntable, using a page directory which points to pages of the pag e table. Un-\nfortunately , however , our work is not done. As we\u2019ll now disc uss, some-\ntimes two levels of page table is not enough!\nMore Than T wo Levels\nIn our example thus far , we\u2019ve assumed that multi-level page tables only\nhave two levels: a page directory and then pieces of the page t able. In\nsome cases, a deeper tree is possible (and indeed, needed).\nLet\u2019s take a simple example and use it to show why a deeper mult i-\nlevel table can be useful. In this example, assume we have a 30 -bit virtual\naddress space, and a small (512 byte) page. Thus our virtual a ddress has\na 21-bit virtual page number component and a 9-bit offset.\nRemember our goal in constructing a multi-level page table: to make\neach piece of the page table \ufb01t within a single page. Thus far , we\u2019ve only\nconsidered the page table itself; however , what if the page d irectory gets\ntoo big?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R"
  },
  {
    "content": " our goal in constructing a multi-level page table: to make\neach piece of the page table \ufb01t within a single page. Thus far , we\u2019ve only\nconsidered the page table itself; however , what if the page d irectory gets\ntoo big?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : S M A L L E R TA B L E S 211\nT o determine how many levels are needed in a multi-level tabl e to\nmake all pieces of the page table \ufb01t within a page, we start by d etermining\nhow many page-table entries \ufb01t within a page. Given our page s ize of 512\nbytes, and assuming a PTE size of 4 bytes, you should see that y ou can \ufb01t\n128 PTEs on a single page. When we index into a page of the page t able,\nwe can thus conclude we\u2019ll need the least signi\ufb01cant 7 bits ( log2128) of\nthe VPN as an index:\n29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\nVPN offset\nPage Directory Index Page Table Index\nWhat you also might notice from the diagram above is how many b its\nare left into the (large) page directory: 14. If our page dire ctory has 214\nentries, it spans not one page but 128, and thus our goal of mak ing every\npiece of the multi-level page table \ufb01t into a page vanishes.\nT o remedy this problem, we build a further level of the tree, b y split-\nting the page directory itself into multiple pages, and then adding another\npage directory on top of that, to point to the pages of the page directory .\nW e can thus split up our virtual address as follows:\n29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\nVPN offset\nPD Index 0 PD Index 1 Page Table Index\nNow , when indexing the upper-level page directory , we use th e very\ntop bits of the virtual address ( PD Index 0 in the diagram); this index\ncan be used to fetch the page-directory entry from the top-le vel page di-\nrectory . If valid, the second level of the page directory is c onsulted by\ncombining the physical frame number from the top-level PDE a nd the\nnext part of the VPN ( PD Index 1). Finally , if valid, the PTE address\ncan be formed by using the page-table index combined with the address\nfrom the second-level PDE. Whew! That\u2019s a lot of work. And all just to\nlook something up in a multi-level table.\nThe T ranslation Process: Remember the TLB\nT o summarize the entire process of address translation usin g a two-level\npage table, we once again present the control \ufb02ow in algorith mic form\n(Figure\n20.4). The \ufb01gure shows what happens in hardware (assuming a\nhardware-managed TLB) upon every memory reference.\nAs you can see from the \ufb01gure, before any of the complicated mu lti-\nlevel page table access occurs, the hardware \ufb01rst checks the TLB; upon\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n212 PA G I N G : S M A L L E R TA B L E S\n1 VPN = (VirtualAddress & VPN_MASK) >> SHIFT\n2 (Success, TlbEntry) = TLB_Lookup(VPN)\n3 if (Success == True) // TLB Hit\n4 if (CanAccess(TlbEntry.ProtectBits) == True)\n5 Offset = VirtualAddress & OFFSET_MASK\n6 PhysAddr = (TlbEntry.PFN << SHIFT) | Offset\n7 Register = AccessMemory(PhysAddr)\n8 else\n9 RaiseException(PROTECTION_FAULT)\n10 else // TLB Miss\n11 // first, get page directory entry\n12 PDIndex = (VPN & PD_MASK) >> PD_SHIFT\n13 PDEAddr ="
  },
  {
    "content": "\n5 Offset = VirtualAddress & OFFSET_MASK\n6 PhysAddr = (TlbEntry.PFN << SHIFT) | Offset\n7 Register = AccessMemory(PhysAddr)\n8 else\n9 RaiseException(PROTECTION_FAULT)\n10 else // TLB Miss\n11 // first, get page directory entry\n12 PDIndex = (VPN & PD_MASK) >> PD_SHIFT\n13 PDEAddr = PDBR + (PDIndex * sizeof(PDE))\n14 PDE = AccessMemory(PDEAddr)\n15 if (PDE.Valid == False)\n16 RaiseException(SEGMENTATION_FAULT)\n17 else\n18 // PDE is valid: now fetch PTE from page table\n19 PTIndex = (VPN & PT_MASK) >> PT_SHIFT\n20 PTEAddr = (PDE.PFN << SHIFT) + (PTIndex * sizeof(PTE))\n21 PTE = AccessMemory(PTEAddr)\n22 if (PTE.Valid == False)\n23 RaiseException(SEGMENTATION_FAULT)\n24 else if (CanAccess(PTE.ProtectBits) == False)\n25 RaiseException(PROTECTION_FAULT)\n26 else\n27 TLB_Insert(VPN, PTE.PFN, PTE.ProtectBits)\n28 RetryInstruction()\nFigure 20.4: Multi-level Page T able Control Flow\na hit, the physical address is formed directly without accessing the page\ntable at all, as before. Only upon a TLB miss does the hardware need to\nperform the full multi-level lookup. On this path, you can se e the cost of\nour traditional two-level page table: two additional memor y accesses to\nlook up a valid translation.\n20.4 Inverted Page T ables\nAn even more extreme space savings in the world of page tables is\nfound with inverted page tables . Here, instead of having many page\ntables (one per process of the system), we keep a single page t able that\nhas an entry for each physical page of the system. The entry tells us which\nprocess is using this page, and which virtual page of that pro cess maps to\nthis physical page.\nFinding the correct entry is now a matter of searching throug h this\ndata structure. A linear scan would be expensive, and thus a h ash table is\noften built over the base structure to speed lookups. The Pow erPC is one\nexample of such an architecture [JM98].\nMore generally , inverted page tables illustrate what we\u2019ve said from\nthe beginning: page tables are just data structures. Y ou can do lots of\ncrazy things with data structures, making them smaller or bi gger , making\nthem slower or faster . Multi-level and inverted page tables are just two\nexamples of the many things one could do.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : S M A L L E R TA B L E S 213\n20.5 Swapping the Page T ables to Disk\nFinally , we discuss the relaxation of one \ufb01nal assumption. T hus far ,\nwe have assumed that page tables reside in kernel-owned phys ical mem-\nory . Even with our many tricks to reduce the size of page table s, it is still\npossible, however , that they may be too big to \ufb01t into memory a ll at once.\nThus, some systems place such page tables in kernel virtual memory ,\nthereby allowing the system to swap some of these page tables to disk\nwhen memory pressure gets a little tight. W e\u2019ll talk more abo ut this in\na future chapter (namely , the case study on V AX/VMS), once we under-\nstand how to move pages in and out of memory in more detail.\n20.6 Summary\nW e have now seen how real page tables are built; not necessari ly just\nas linear arrays but as more complex data structures. The tra de-offs such\ntables present are in time and space \u2013 the bigger the table, th e faster a TLB\nmiss can be serviced, as well as the converse \u2013 and thus the rig ht choice of\nstructure depends strongly on the constraints of the given e nvironment.\nIn a memory-constrained system (like many older systems), s mall struc-\ntures make sense;"
  },
  {
    "content": "as linear arrays but as more complex data structures. The tra de-offs such\ntables present are in time and space \u2013 the bigger the table, th e faster a TLB\nmiss can be serviced, as well as the converse \u2013 and thus the rig ht choice of\nstructure depends strongly on the constraints of the given e nvironment.\nIn a memory-constrained system (like many older systems), s mall struc-\ntures make sense; in a system with a reasonable amount of memo ry and\nwith workloads that actively use a large number of pages, a bi gger ta-\nble that speeds up TLB misses might be the right choice. With s oftware-\nmanaged TLBs, the entire space of data structures opens up to the delight\nof the operating system innovator (hint: that\u2019s you). What n ew struc-\ntures can you come up with? What problems do they solve? Think of\nthese questions as you fall asleep, and dream the big dreams t hat only\noperating-system developers can dream.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n214 PA G I N G : S M A L L E R TA B L E S\nReferences\n[BOH10] \u201cComputer Systems: A Programmer \u2019s Perspective\u201d\nRandal E. Bryant and David R. O\u2019Hallaron\nAddison-W esley , 2010\nWe have yet to \ufb01nd a good \ufb01rst reference to the multi-level pag e table. However , this great textbook by\nBryant and O\u2019Hallaron dives into the details of x86, which at least is an early system that used such\nstructures. It\u2019s also just a great book to have.\n[JM98] \u201cVirtual Memory: Issues of Implementation\u201d\nBruce Jacob and T revor Mudge\nIEEE Computer , June 1998\nAn excellent survey of a number of different systems and thei r approach to virtualizing memory. Plenty\nof details on x86, PowerPC, MIPS, and other architectures.\n[LL82] \u201cVirtual Memory Management in the V AX/VMS Operating System\u201d\nHank Levy and P . Lipman\nIEEE Computer , V ol. 15, No. 3, March 1982\nA terri\ufb01c paper about a real virtual memory manager in a class ic operating system, VMS. So terri\ufb01c, in\nfact, that we\u2019ll use it to review everything we\u2019ve learned ab out virtual memory thus far a few chapters\nfrom now.\n[M28] \u201cReese\u2019s Peanut Butter Cups\u201d\nMars Candy Corporation.\nApparently these \ufb01ne confections were invented in 1928 by Ha rry Burnett Reese, a former dairy farmer\nand shipping foreman for one Milton S. Hershey. At least, tha t is what it says on Wikipedia. If true,\nHershey and Reese probably hated each other\u2019s guts, as any tw o chocolate barons should.\n[N+02] \u201cPractical, T ransparent Operating System Support f or Superpages\u201d\nJuan Navarro, Sitaram Iyer , Peter Druschel, Alan Cox\nOSDI \u201902, Boston, Massachusetts, October 2002\nA nice paper showing all the details you have to get right to in corporate large pages, or superpages,\ninto a modern OS. Not as easy as you might think, alas.\n[M07] \u201cMultics: History\u201d\nA vailable: http://www.multicians.org/history.html\nThis amazing web site provides a huge amount of history on the Multics system, certainly one of the\nmost in\ufb02uential systems in OS history. The quote from therei n: \u201cJack Dennis of MIT contributed\nin\ufb02uential architectural ideas to the beginning of Multics , especially the idea of combining paging and\nsegmentation.\u201d (from Section 1.2.1)\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : S M A L L E R TA B L E S 215\nHomework\nThis fun little homework tests if you understand how a multi- level\npage table works. And yes, there is some debate over the use of the term\n\ufffd"
  },
  {
    "content": "1)\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPA G I N G : S M A L L E R TA B L E S 215\nHomework\nThis fun little homework tests if you understand how a multi- level\npage table works. And yes, there is some debate over the use of the term\n\u201cfun\u201d in the previous sentence. The program is called, perha ps unsur-\nprisingly: paging-multilevel-translate.py; see the README for\ndetails.\nQuestions\n\u2022 With a linear page table, you need a single register to locate the\npage table, assuming that hardware does the lookup upon a TLB\nmiss. How many registers do you need to locate a two-level pag e\ntable? A three-level table?\n\u2022 Use the simulator to perform translations given random seed s 0,\n1, and 2, and check your answers using the -c \ufb02ag. How many\nmemory references are needed to perform each lookup?\n\u2022 Given your understanding of how cache memory works, how do\nyou think memory references to the page table will behave in t he\ncache? Will they lead to lots of cache hits (and thus fast acce sses?)\nOr lots of misses (and thus slow accesses)?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n21\nBeyond Physical Memory: Mechanisms\nThus far , we\u2019ve assumed that an address space is unrealistic ally small\nand \ufb01ts into physical memory . In fact, we\u2019ve been assuming th at every\naddress space of every running process \ufb01ts into memory . W e wi ll now\nrelax these big assumptions, and assume that we wish to suppo rt many\nconcurrently-running large address spaces.\nT o do so, we require an additional level in the memory hierarchy .\nThus far , we have assumed that all pages reside in physical me mory .\nHowever , to support large address spaces, the OS will need a p lace to\nstash away portions of address spaces that currently aren\u2019t in great de-\nmand. In general, the characteristics of such a location are that it should\nhave more capacity than memory; as a result, it is generally s lower (if it\nwere faster , we would just use it as memory , no?). In modern sy stems,\nthis role is usually served by a hard disk drive . Thus, in our memory\nhierarchy , big and slow hard drives sit at the bottom, with me mory just\nabove. And thus we arrive at the crux of the problem:\nTH E CR U X : H O W TO GO BE Y O N D PH Y S I C A L ME M O RY\nHow can the OS make use of a larger , slower device to transpare ntly pro-\nvide the illusion of a large virtual address space?\nOne question you might have: why do we want to support a single\nlarge address space for a process? Once again, the answer is c onvenience\nand ease of use. With a large address space, you don\u2019t have to w orry\nabout if there is room enough in memory for your program\u2019s dat a struc-\ntures; rather , you just write the program naturally , alloca ting memory as\nneeded. It is a powerful illusion that the OS provides, and ma kes your\nlife vastly simpler . Y ou\u2019re welcome! A contrast is found in o lder systems\nthat used memory overlays , which required programmers to manually\nmove pieces of code or data in and out of memory as they were nee ded\n[D97]. T ry imagining what this would be like: before calling a function or\naccessing some data, you need to \ufb01rst arrange for the code or d ata to be\nin memory; yuck!\n217\n218 BE Y O N D PH Y S I C A L ME M O RY: M E C H A N I S M S\nAS I D E : ST O R A G E TE C H N O L O G I E S\nW e\u2019ll delve much more deeply into how I/O devices actually wo rk later\n(see the chapter on I/O devices). So be patient! And of course the slower\ndevice need not be a hard disk, but could be something more mod ern\n"
  },
  {
    "content": " A L ME M O RY: M E C H A N I S M S\nAS I D E : ST O R A G E TE C H N O L O G I E S\nW e\u2019ll delve much more deeply into how I/O devices actually wo rk later\n(see the chapter on I/O devices). So be patient! And of course the slower\ndevice need not be a hard disk, but could be something more mod ern\nsuch as a Flash-based SSD. W e\u2019ll talk about those things too. For now ,\njust assume we have a big and relatively-slow device which we can use\nto help us build the illusion of a very large virtual memory , e ven bigger\nthan physical memory itself.\nBeyond just a single process, the addition of swap space allo ws the OS\nto support the illusion of a large virtual memory for multipl e concurrently-\nrunning processes. The invention of multiprogramming (run ning multi-\nple programs \u201cat once\u201d, to better utilize the machine) almos t demanded\nthe ability to swap out some pages, as early machines clearly could not\nhold all the pages needed by all processes at once. Thus, the c ombina-\ntion of multiprogramming and ease-of-use leads us to want to support\nusing more memory than is physically available. It is someth ing that all\nmodern VM systems do; it is now something we will learn more ab out.\n21.1 Swap Space\nThe \ufb01rst thing we will need to do is to reserve some space on the disk\nfor moving pages back and forth. In operating systems, we gen erally refer\nto such space as swap space , because we swap pages out of memory to it\nand swap pages into memory from it. Thus, we will simply assume that\nthe OS can read from and write to the swap space, in page-sized units. T o\ndo so, the OS will need to remember the disk address of a given page.\nThe size of the swap space is important, as ultimately it dete rmines\nthe maximum number of memory pages that can be in use by a syste m at\na given time. Let us assume for simplicity that it is very large for now .\nIn the tiny example (Figure 21.1), you can see a little example of a 4-\npage physical memory and an 8-page swap space. In the example , three\nprocesses (Proc 0, Proc 1, and Proc 2) are actively sharing ph ysical mem-\nory; each of the three, however , only have some of their valid pages in\nmemory , with the rest located in swap space on disk. A fourth p rocess\n(Proc 3) has all of its pages swapped out to disk, and thus clea rly isn\u2019t\ncurrently running. One block of swap remains free. Even from this tiny\nexample, hopefully you can see how using swap space allows th e system\nto pretend that memory is larger than it actually is.\nW e should note that swap space is not the only on-disk locatio n for\nswapping traf\ufb01c. For example, assume you are running a progr am binary\n(e.g., ls, or your own compiled main program). The code pages from this\nbinary are initially found on disk, and when the program runs , they are\nloaded into memory (either all at once when the program start s execution,\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nBE Y O N D PH Y S I C A L ME M O RY: M E C H A N I S M S 219\nPhysical\nMemory\nPFN 0\nProc 0\n[VPN 0]\nPFN 1\nProc 1\n[VPN 2]\nPFN 2\nProc 1\n[VPN 3]\nPFN 3\nProc 2\n[VPN 0]\nSwap\nSpace\nProc 0\n[VPN 1]\nBlock 0\nProc 0\n[VPN 2]\nBlock 1\n[Free]\nBlock 2\nProc 1\n[VPN 0]\nBlock 3\nProc 1\n[VPN 1]\nBlock 4\nProc 3\n[VPN 0]\nBlock 5\nProc 2\n[VPN 1]\nBlock 6\nProc 3\n[VPN 1]\nBlock 7\nFigure 21.1: Physical Memory and Swap Space\nor , as in modern systems, one page at a time when needed). Howe ver , if\n"
  },
  {
    "content": " 1\n[Free]\nBlock 2\nProc 1\n[VPN 0]\nBlock 3\nProc 1\n[VPN 1]\nBlock 4\nProc 3\n[VPN 0]\nBlock 5\nProc 2\n[VPN 1]\nBlock 6\nProc 3\n[VPN 1]\nBlock 7\nFigure 21.1: Physical Memory and Swap Space\nor , as in modern systems, one page at a time when needed). Howe ver , if\nthe system needs to make room in physical memory for other nee ds, it\ncan safely re-use the memory space for these code pages, know ing that it\ncan later swap them in again from the on-disk binary in the \ufb01le system.\n21.2 The Present Bit\nNow that we have some space on the disk, we need to add some ma-\nchinery higher up in the system in order to support swapping p ages to\nand from the disk. Let us assume, for simplicity , that we have a system\nwith a hardware-managed TLB.\nRecall \ufb01rst what happens on a memory reference. The running p ro-\ncess generates virtual memory references (for instruction fetches, or data\naccesses), and, in this case, the hardware translates them i nto physical\naddresses before fetching the desired data from memory .\nRemember that the hardware \ufb01rst extracts the VPN from the vir tual\naddress, checks the TLB for a match (a TLB hit ), and if a hit, produces the\nresulting physical address and fetches it from memory . This is hopefully\nthe common case, as it is fast (requiring no additional memor y accesses).\nIf the VPN is not found in the TLB (i.e., a TLB miss ), the hardware\nlocates the page table in memory (using the page table base register )\nand looks up the page table entry (PTE) for this page using the VPN\nas an index. If the page is valid and present in physical memor y , the\nhardware extracts the PFN from the PTE, installs it in the TLB , and retries\nthe instruction, this time generating a TLB hit; so far , so go od.\nIf we wish to allow pages to be swapped to disk, however , we mus t\nadd even more machinery . Speci\ufb01cally , when the hardware loo ks in the\nPTE, it may \ufb01nd that the page is not present in physical memory . The way\nthe hardware (or the OS, in a software-managed TLB approach) deter-\nmines this is through a new piece of information in each page- table entry ,\nknown as the present bit . If the present bit is set to one, it means the\npage is present in physical memory and everything proceeds a s above; if\nit is set to zero, the page is not in memory but rather on disk somewhere.\nThe act of accessing a page that is not in physical memory is co mmonly\nreferred to as a page fault .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n220 BE Y O N D PH Y S I C A L ME M O RY: M E C H A N I S M S\nAS I D E : SWA P P I N G TE R M I N O L O G Y AN D OT H E R TH I N G S\nT erminology in virtual memory systems can be a little confus ing and vari-\nable across machines and operating systems. For example, a page fault\nmore generally could refer to any reference to a page table th at generates\na fault of some kind: this could include the type of fault we ar e discussing\nhere, i.e., a page-not-present fault, but sometimes can ref er to illegal mem-\nory accesses. Indeed, it is odd that we call what is de\ufb01nitely a legal access\n(to a page mapped into the virtual address space of a process, but simply\nnot in physical memory at the time) a \u201cfault\u201d at all; really , i t should be\ncalled a page miss . But often, when people say a program is \u201cpage fault-\ning\u201d, they mean that it is accessing parts of its virtual addr ess space that\nthe OS has swapped out to disk.\nW e suspect the reason that this behavior became known as a \u201cfa ult\u201d re-\nlates to the machinery in the operating system to handle it. W hen some"
  },
  {
    "content": "\ufffdfault\u201d at all; really , i t should be\ncalled a page miss . But often, when people say a program is \u201cpage fault-\ning\u201d, they mean that it is accessing parts of its virtual addr ess space that\nthe OS has swapped out to disk.\nW e suspect the reason that this behavior became known as a \u201cfa ult\u201d re-\nlates to the machinery in the operating system to handle it. W hen some-\nthing unusual happens, i.e., when something the hardware do esn\u2019t know\nhow to handle occurs, the hardware simply transfers control to the OS,\nhoping it can make things better . In this case, a page that a pr ocess wants\nto access is missing from memory; the hardware does the only t hing it\ncan, which is raise an exception, and the OS takes over from th ere. As\nthis is identical to what happens when a process does somethi ng illegal,\nit is perhaps not surprising that we term the activity a \u201cfaul t.\u201d\nUpon a page fault, the OS is invoked to service the page fault. A partic-\nular piece of code, known as a page-fault handler , runs, and must service\nthe page fault, as we now describe.\n21.3 The Page Fault\nRecall that with TLB misses, we have two types of systems: har dware-\nmanaged TLBs (where the hardware looks in the page table to \ufb01n d the\ndesired translation) and software-managed TLBs (where the OS does). In\neither type of system, if a page is not present, the OS is put in charge to\nhandle the page fault. The appropriately-named OS page-fault handler\nruns to determine what to do. Virtually all systems handle pa ge faults in\nsoftware; even with a hardware-managed TLB, the hardware tr usts the\nOS to manage this important duty .\nIf a page is not present and has been swapped to disk, the OS wil l need\nto swap the page into memory in order to service the page fault . Thus, a\nquestion arises: how will the OS know where to \ufb01nd the desired page? In\nmany systems, the page table is a natural place to store such i nformation.\nThus, the OS could use the bits in the PTE normally used for dat a such as\nthe PFN of the page for a disk address. When the OS receives a pa ge fault\nfor a page, it looks in the PTE to \ufb01nd the address, and issues th e request\nto disk to fetch the page into memory .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nBE Y O N D PH Y S I C A L ME M O RY: M E C H A N I S M S 221\nAS I D E : WH Y HA R D WA R E DO E S N \u2019 T HA N D L E PA G E FA U LT S\nW e know from our experience with the TLB that hardware design ers are\nloathe to trust the OS to do much of anything. So why do they tru st the\nOS to handle a page fault? There are a few main reasons. First, page\nfaults to disk are slow; even if the OS takes a long time to handle a fault,\nexecuting tons of instructions, the disk operation itself i s traditionally so\nslow that the extra overheads of running software are minima l. Second,\nto be able to handle a page fault, the hardware would have to un derstand\nswap space, how to issue I/Os to the disk, and a lot of other det ails which\nit currently doesn\u2019t know much about. Thus, for both reasons of perfor-\nmance and simplicity , the OS handles page faults, and even ha rdware\ntypes can be happy .\nWhen the disk I/O completes, the OS will then update the page t able\nto mark the page as present, update the PFN \ufb01eld of the page-ta ble entry\n(PTE) to record the in-memory location of the newly-fetched page, and\nretry the instruction. This next attempt may generate a TLB m iss, which\nwould then be serviced and update the TLB with the translatio n (one\ncould alternately update the TLB upon when servicing the pag e fault,\nto avoid this step). Finally , a last restart would \ufb01nd"
  },
  {
    "content": " \ufb01eld of the page-ta ble entry\n(PTE) to record the in-memory location of the newly-fetched page, and\nretry the instruction. This next attempt may generate a TLB m iss, which\nwould then be serviced and update the TLB with the translatio n (one\ncould alternately update the TLB upon when servicing the pag e fault,\nto avoid this step). Finally , a last restart would \ufb01nd the tra nslation in\nthe TLB and thus proceed to fetch the desired data or instruct ion from\nmemory at the translated physical address.\nNote that while the I/O is in \ufb02ight, the process will be in the blocked\nstate. Thus, the OS will be free to run other ready processes w hile the\npage fault is being serviced. Because I/O is expensive, this overlap of\nthe I/O (page fault) of one process and the execution of anoth er is yet\nanother way a multiprogrammed system can make the most effec tive use\nof its hardware.\n21.4 What If Memory Is Full?\nIn the process described above, you may notice that we assume d there\nis plenty of free memory in which to page in a page from swap space.\nOf course, this may not be the case; memory may be full (or clos e to it).\nThus, the OS might like to \ufb01rst page out one or more pages to make room\nfor the new page(s) the OS is about to bring in. The process of p icking a\npage to kick out, or replace is known as the page-replacement policy .\nAs it turns out, a lot of thought has been put into creating a go od page-\nreplacement policy , as kicking out the wrong page can exact a great cost\non program performance. Making the wrong decision can cause a pro-\ngram to run at disk-like speeds instead of memory-like speed s; in cur-\nrent technology that means a program could run 10,000 or 100, 000 times\nslower . Thus, such a policy is something we should study in so me detail;\nindeed, that is exactly what we will do in the next chapter . Fo r now , it is\ngood enough to understand that such a policy exists, built on top of the\nmechanisms described here.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n222 BE Y O N D PH Y S I C A L ME M O RY: M E C H A N I S M S\n1 VPN = (VirtualAddress & VPN_MASK) >> SHIFT\n2 (Success, TlbEntry) = TLB_Lookup(VPN)\n3 if (Success == True) // TLB Hit\n4 if (CanAccess(TlbEntry.ProtectBits) == True)\n5 Offset = VirtualAddress & OFFSET_MASK\n6 PhysAddr = (TlbEntry.PFN << SHIFT) | Offset\n7 Register = AccessMemory(PhysAddr)\n8 else\n9 RaiseException(PROTECTION_FAULT)\n10 else // TLB Miss\n11 PTEAddr = PTBR + (VPN * sizeof(PTE))\n12 PTE = AccessMemory(PTEAddr)\n13 if (PTE.Valid == False)\n14 RaiseException(SEGMENTATION_FAULT)\n15 else\n16 if (CanAccess(PTE.ProtectBits) == False)\n17 RaiseException(PROTECTION_FAULT)\n18 else if (PTE.Present == True)\n19 // assuming hardware-managed TLB\n20 TLB_Insert(VPN, PTE.PFN, PTE.ProtectBits)\n21 RetryInstruction()\n22 else if (PTE.Present == False)\n23 RaiseException(PAGE_FAULT)\nFigure 21.2: Page-Fault Control Flow Algorithm (Hardware)\n21.5 Page Fault Control Flow\nWith all of this knowledge in place, we can now roughly sketch the\ncomplete control \ufb02ow of memory access. In other words, when s ome-\nbody asks you \u201cwhat happens when a program fetches some data f rom\nmemory?\u201d, you should have a pretty good idea of all the differ ent pos-\nsibilities. See the control \ufb02ow in Figures 21.2 and 21.3 for more details;\nthe \ufb01rst \ufb01gure shows what the hardware does"
  },
  {
    "content": " sketch the\ncomplete control \ufb02ow of memory access. In other words, when s ome-\nbody asks you \u201cwhat happens when a program fetches some data f rom\nmemory?\u201d, you should have a pretty good idea of all the differ ent pos-\nsibilities. See the control \ufb02ow in Figures 21.2 and 21.3 for more details;\nthe \ufb01rst \ufb01gure shows what the hardware does during translati on, and the\nsecond what the OS does upon a page fault.\nFrom the hardware control \ufb02ow diagram in Figure 21.2, notice that\nthere are now three important cases to understand when a TLB m iss oc-\ncurs. First, that the page was both present and valid (Lines 18\u201321); in\nthis case, the TLB miss handler can simply grab the PFN from th e PTE,\nretry the instruction (this time resulting in a TLB hit), and thus continue\nas described (many times) before. In the second case (Lines 2 2\u201323), the\npage fault handler must be run; although this was a legitimat e page for\nthe process to access (it is valid, after all), it is not prese nt in physical\nmemory . Third (and \ufb01nally), the access could be to an invalid page, due\nfor example to a bug in the program (Lines 13\u201314). In this case , no other\nbits in the PTE really matter; the hardware traps this invali d access, and\nthe OS trap handler runs, likely terminating the offending p rocess.\nFrom the software control \ufb02ow in Figure 21.3, we can see what the OS\nroughly must do in order to service the page fault. First, the OS must \ufb01nd\na physical frame for the soon-to-be-faulted-in page to resi de within; if\nthere is no such page, we\u2019ll have to wait for the replacement a lgorithm to\nrun and kick some pages out of memory , thus freeing them for us e here.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nBE Y O N D PH Y S I C A L ME M O RY: M E C H A N I S M S 223\n1 PFN = FindFreePhysicalPage()\n2 if (PFN == -1) // no free page found\n3 PFN = EvictPage() // run replacement algorithm\n4 DiskRead(PTE.DiskAddr, pfn) // sleep (waiting for I/O)\n5 PTE.present = True // update page table with present\n6 PTE.PFN = PFN // bit and translation (PFN)\n7 RetryInstruction() // retry instruction\nFigure 21.3: Page-Fault Control Flow Algorithm (Software)\nWith a physical frame in hand, the handler then issues the I/O request\nto read in the page from swap space. Finally , when that slow op eration\ncompletes, the OS updates the page table and retries the inst ruction. The\nretry will result in a TLB miss, and then, upon another retry , a TLB hit, at\nwhich point the hardware will be able to access the desired it em.\n21.6 When Replacements Really Occur\nThus far , the way we\u2019ve described how replacements occur ass umes\nthat the OS waits until memory is entirely full, and only then replaces\n(evicts) a page to make room for some other page. As you can ima gine,\nthis is a little bit unrealistic, and there are many reasons f or the OS to keep\na small portion of memory free more proactively .\nT o keep a small amount of memory free, most operating systems thus\nhave some kind of high watermark (H W ) and low watermark (LW ) to\nhelp decide when to start evicting pages from memory . How thi s works is\nas follows: when the OS notices that there are fewer than LW pages avail-\nable, a background thread that is responsible for freeing me mory runs.\nThe thread evicts pages until there are H W pages available. The back-\nground thread, sometimes called the swap daemon or page daemon 1 ,\nthen goes to sleep, happy that is has freed some memory for run ning pro-\ncesses and the OS to use.\nBy performing a number of replacements at once"
  },
  {
    "content": "as follows: when the OS notices that there are fewer than LW pages avail-\nable, a background thread that is responsible for freeing me mory runs.\nThe thread evicts pages until there are H W pages available. The back-\nground thread, sometimes called the swap daemon or page daemon 1 ,\nthen goes to sleep, happy that is has freed some memory for run ning pro-\ncesses and the OS to use.\nBy performing a number of replacements at once, new performa nce\noptimizations become possible. For example, many systems w ill cluster\nor group a number of pages and write them out at once to the swap parti-\ntion, thus increasing the ef\ufb01ciency of the disk [LL82]; as we will see later\nwhen we discuss disks in more detail, such clustering reduce s seek and\nrotational overheads of a disk and thus increases performan ce noticeably .\nT o work with the background paging thread, the control \ufb02ow in Figure\n21.3 should be modi\ufb01ed slightly; instead of performing a replace ment\ndirectly , the algorithm would instead simply check if there are any free\npages available. If not, it would signal that the background paging thread\nthat free pages are needed; when the thread frees up some page s, it would\nre-awaken the original thread, which could then page in the d esired page\nand go about its work.\n1 The word \u201cdaemon\u201d, usually pronounced \u201cdemon\u201d, is an old ter m for a background\nthread or process that does something useful. T urns out (onc e again!) that the source of the\nterm is Multics [CS94].\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n224 BE Y O N D PH Y S I C A L ME M O RY: M E C H A N I S M S\nTI P : D O WO R K IN TH E BA C K G R O U N D\nWhen you have some work to do, it is often a good idea to do it in t he\nbackground to increase ef\ufb01ciency and to allow for grouping of opera-\ntions. Operating systems often do work in the background; fo r example,\nmany systems buffer \ufb01le writes in memory before actually wri ting the\ndata to disk. Doing so has many possible bene\ufb01ts: increased d isk ef\ufb01-\nciency , as the disk may now receive many writes at once and thu s better\nbe able to schedule them; improved latency of writes, as the a pplication\nthinks the writes completed quite quickly; the possibility of work reduc-\ntion, as the writes may need never to go to disk (i.e., if the \ufb01l e is deleted);\nand better use of idle time , as the background work may possibly be\ndone when the system is otherwise idle, thus better utilizin g the hard-\nware [G+95].\n21.7 Summary\nIn this brief chapter , we have introduced the notion of acces sing more\nmemory than is physically present within a system. T o do so re quires\nmore complexity in page-table structures, as a present bit (of some kind)\nmust be included to tell us whether the page is present in memo ry or not.\nWhen not, the operating system page-fault handler runs to service the\npage fault , and thus arranges for the transfer of the desired page from\ndisk to memory , perhaps \ufb01rst replacing some pages in memory t o make\nroom for those soon to be swapped in.\nRecall, importantly (and amazingly!), that these actions a ll take place\ntransparently to the process. As far as the process is concerned, it is just\naccessing its own private, contiguous virtual memory . Behi nd the scenes,\npages are placed in arbitrary (non-contiguous) locations i n physical mem-\nory , and sometimes they are not even present in memory , requi ring a fetch\nfrom disk. While we hope that in the common case a memory acces s is\nfast, in some cases it will take multiple disk operations to s ervice it; some-\nthing as simple as performing a single instruction can, in th e worst case,\ntake many milliseconds to complete.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W."
  },
  {
    "content": " requi ring a fetch\nfrom disk. While we hope that in the common case a memory acces s is\nfast, in some cases it will take multiple disk operations to s ervice it; some-\nthing as simple as performing a single instruction can, in th e worst case,\ntake many milliseconds to complete.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nBE Y O N D PH Y S I C A L ME M O RY: M E C H A N I S M S 225\nReferences\n[CS94] \u201cT ake Our W ord For It\u201d\nF . Corbato and R. Steinberg\nA vailable: http://www.takeourword.com/TOW146/page4.html\nRichard Steinberg writes: \u201cSomeone has asked me the origin o f the word daemon as it applies to comput-\ning. Best I can tell based on my research, the word was \ufb01rst use d by people on your team at Project MAC\nusing the IBM 7094 in 1963.\u201d Professor Corbato replies: \u201cOur use of the word daemon was inspired\nby the Maxwell\u2019s daemon of physics and thermodynamics (my ba ckground is in physics). Maxwell\u2019s\ndaemon was an imaginary agent which helped sort molecules of different speeds and worked tirelessly\nin the background. We fancifully began to use the word daemon to describe background processes which\nworked tirelessly to perform system chores.\u201d\n[D97] \u201cBefore Memory W as Virtual\u201d\nPeter Denning\nFrom In the Beginning: Recollections of Software Pioneers , Wiley , November 1997\nAn excellent historical piece by one of the pioneers of virtu al memory and working sets.\n[G+95] \u201cIdleness is not sloth\u201d\nRichard Golding, Peter Bosch, Carl Staelin, Tim Sullivan, J ohn Wilkes\nUSENIX A TC \u201995, New Orleans, Louisiana\nA fun and easy-to-read discussion of how idle time can be bett er used in systems, with lots of good\nexamples.\n[LL82] \u201cVirtual Memory Management in the V AX/VMS Operating System\u201d\nHank Levy and P . Lipman\nIEEE Computer , V ol. 15, No. 3, March 1982\nNot the \ufb01rst place where such clustering was used, but a clear and simple explanation of how such a\nmechanism works.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n22\nBeyond Physical Memory: Policies\nIn a virtual memory manager , life is easy when you have a lot of free\nmemory . A page fault occurs, you \ufb01nd a free page on the free-pa ge list,\nand assign it to the faulting page. Hey , Operating System, co ngratula-\ntions! Y ou did it again.\nUnfortunately , things get a little more interesting when li ttle memory\nis free. In such a case, this memory pressure forces the OS to start paging\nout pages to make room for actively-used pages. Deciding which p age\n(or pages) to evict is encapsulated within the replacement policy of the\nOS; historically , it was one of the most important decisions the early vir-\ntual memory systems made, as older systems had little physic al memory .\nMinimally , it is an interesting set of policies worth knowin g a little more\nabout. And thus our problem:\nTH E CR U X : H O W TO DE C I D E WH I C H PA G E TO EV I C T\nHow can the OS decide which page (or pages) to evict from memor y?\nThis decision is made by the replacement policy of the system , which usu-\nally follows some general principles (discussed below) but also includes\ncertain tweaks to avoid corner-case behaviors.\n22.1 Cache Management\nBefore diving into policies, we \ufb01rst describe the problem we are trying\nto solve in more detail. Given that main memory holds some sub set of\nall the pages in the system, it can rightly be viewed as a cache for virtual\nmemory pages in the system. Thus, our goal in picking a replac ement\npolicy for this cache is to minimize the number of cache misses ; that is,\nto minimize the number of times that we have to go to disk"
  },
  {
    "content": "Before diving into policies, we \ufb01rst describe the problem we are trying\nto solve in more detail. Given that main memory holds some sub set of\nall the pages in the system, it can rightly be viewed as a cache for virtual\nmemory pages in the system. Thus, our goal in picking a replac ement\npolicy for this cache is to minimize the number of cache misses ; that is,\nto minimize the number of times that we have to go to disk to fet ch the\ndesired page. Alternately , one can view our goal as maximizi ng the num-\nber of cache hits , i.e., the number of times a page that is read or written\nis found in memory .\n227\n228 BE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S\nKnowing the number of cache hits and misses let us calculate t he av-\nerage memory access time (AMA T) for a program (a metric computer\narchitects compute for hardware caches [HP06]). Speci\ufb01cal ly , given these\nvalues, we can compute the AMA T of a program as follows:\nAM AT = ( H it% \u00b7TM ) + (M iss% \u00b7TD ) (22.1)\nwhere TM represents the cost of accessing memory , and represents TD the\ncost of accessing disk.\nFor example, let us imagine a machine with a (tiny) address sp ace:\n4KB, with 256-byte pages. Thus, a virtual address has two com ponents: a\n4-bit VPN (the most-signi\ufb01cant bits) and an 8-bit offset (th e least-signi\ufb01cant\nbits). Thus, a process in this example can access 24 or 16 total virtual\npages. In this example, the process generates the following memory ref-\nerences (i.e., virtual addresses): 0x000, 0x100, 0x200, 0x 300, 0x400, 0x500,\n0x600, 0x700, 0x800, 0x900. These virtual addresses refer t o the \ufb01rst byte\nof each of the \ufb01rst ten pages of the address space (the page num ber being\nthe \ufb01rst hex digit of each virtual address).\nLet us further assume that every page except virtual page 3 ar e already\nin memory . Thus, our sequence of memory references will enco unter the\nfollowing behavior: hit, hit, hit, miss, hit, hit, hit, hit, hit, hit. W e can\ncompute the hit rate (the percent of references found in memory): 90%,\nas 9 out of 10 references are in memory . The miss rate is obviously 10%.\nT o calculate AMA T , we simply need to know the cost of accessin g\nmemory and the cost of accessing disk. Assuming the cost of ac cess-\ning memory ( TM ) is around 100 nanoseconds, and the cost of access-\ning disk ( TD ) is about 10 milliseconds, we have the following AMA T:\n0. 9 \u00b7100ns + 0. 1 \u00b710ms, which is 90ns + 1ms, or 1.00009 ms, or about\n1 millisecond. If our hit rate had instead been 99.9%, the res ult is quite\ndifferent: AMA T is 10.1 microseconds, or roughly 100 times f aster . As the\nhit rate approaches 100%, AMA T approaches 100 nanoseconds.\nUnfortunately , as you can see in this example, the cost of dis k access\nis so high in modern systems that even a tiny miss rate will qui ckly dom-\ninate the overall AMA T of running programs. Clearly , we need to avoid\nas many misses as possible or run slowly , at the rate of the dis k. One way\nto help with this is to carefully develop a smart policy , as we now do.\n22.2 The Optimal Replacement Policy\nT o better understand how a particular replacement policy wo rks, it\nwould be nice to compare it to the best possible replacement p olicy . As it\nturns out, such an optimal policy was developed by Belady many years\nago [B66] (he originally called it MIN). The optimal replace ment policy\nleads to the fewest number of misses overall. Belady showed t hat a sim-\nple (but, unfortunately , dif\ufb01cult to implement!) approach that replaces\nthe page that will be accessed furthest in the future is the optimal policy ,\nresulting in the fewest-possible cache misses.\nOP E"
  },
  {
    "content": " an optimal policy was developed by Belady many years\nago [B66] (he originally called it MIN). The optimal replace ment policy\nleads to the fewest number of misses overall. Belady showed t hat a sim-\nple (but, unfortunately , dif\ufb01cult to implement!) approach that replaces\nthe page that will be accessed furthest in the future is the optimal policy ,\nresulting in the fewest-possible cache misses.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nBE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S 229\nTI P : C O M PA R I N G AG A I N S T OP T I M A L I S US E F U L\nAlthough optimal is not very practical as a real policy , it is incredibly\nuseful as a comparison point in simulation or other studies. Saying that\nyour fancy new algorithm has a 80% hit rate isn\u2019t meaningful i n isolation;\nsaying that optimal achieves an 82% hit rate (and thus your ne w approach\nis quite close to optimal) makes the result more meaningful a nd gives it\ncontext. Thus, in any study you perform, knowing what the opt imal is\nlets you perform a better comparison, showing how much impro vement\nis still possible, and also when you can stop making your policy better ,\nbecause it is close enough to the ideal [AD03].\nHopefully , the intuition behind the optimal policy makes se nse. Think\nabout it like this: if you have to throw out some page, why not t hrow\nout the one that is needed the furthest from now? By doing so, y ou are\nessentially saying that all the other pages in the cache are m ore important\nthan the one furthest out. The reason this is true is simple: y ou will refer\nto the other pages before you refer to the one furthest out.\nLet\u2019s trace through a simple example to understand the decis ions the\noptimal policy makes. Assume a program accesses the followi ng stream\nof virtual pages: 0, 1, 2, 0, 1, 3, 0, 3, 1, 2, 1. T able 22.1 shows the behavior\nof optimal, assuming a cache that \ufb01ts three pages.\nIn the table, you can see the following actions. Not surprisi ngly , the\n\ufb01rst three accesses are misses, as the cache begins in an empt y state; such\na miss is sometimes referred to as a cold-start miss (or compulsory miss ).\nThen we refer again to pages 0 and 1, which both hit in the cache . Finally ,\nwe reach another miss (to page 3), but this time the cache is fu ll; a re-\nplacement must take place! Which begs the question: which pa ge should\nwe replace? With the optimal policy , we examine the future fo r each page\ncurrently in the cache (0, 1, and 2), and see that 0 is accessed almost imme-\ndiately , 1 is accessed a little later , and 2 is accessed furth est in the future.\nThus the optimal policy has an easy choice: evict page 2, resu lting in\npages 0, 1, and 3 in the cache. The next three references are hi ts, but then\nResulting\nAccess Hit/Miss? Evict Cache State\n0 Miss 0\n1 Miss 0, 1\n2 Miss 0, 1, 2\n0 Hit 0, 1, 2\n1 Hit 0, 1, 2\n3 Miss 2 0, 1, 3\n0 Hit 0, 1, 3\n3 Hit 0, 1, 3\n1 Hit 0, 1, 3\n2 Miss 3 0, 1, 2\n1 Hit 0, 1, 2\nT able 22.1: T racing the Optimal Policy\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n230 BE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S\nAS I D E : TY P E S O F CA C H E MI S S E S\nIn the computer architecture world, architects sometimes \ufb01 nd it useful\nto characterize misses by type, into one of three categories : compulsory ,\ncapacity , and con\ufb02ict misses, sometimes called the Three C\u2019s"
  },
  {
    "content": " S\n230 BE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S\nAS I D E : TY P E S O F CA C H E MI S S E S\nIn the computer architecture world, architects sometimes \ufb01 nd it useful\nto characterize misses by type, into one of three categories : compulsory ,\ncapacity , and con\ufb02ict misses, sometimes called the Three C\u2019s [H87]. A\ncompulsory miss (or cold-start miss [EF78]) occurs because the cache is\nempty to begin with and this is the \ufb01rst reference to the item; in con-\ntrast, a capacity miss occurs because the cache ran out of space and had\nto evict an item to bring a new item into the cache. The third ty pe of\nmiss (a con\ufb02ict miss ) arises in hardware because of limits on where an\nitem can be placed in a hardware cache, due to something known as set-\nassociativity; it does not arise in the OS page cache because such caches\nare always fully-associative, i.e., there are no restrictions on where in\nmemory a page can be placed. See H&P for details [HP06].\nwe get to page 2, which we evicted long ago, and suffer another miss.\nHere the optimal policy again examines the future for each pa ge in the\ncache (0, 1, and 3), and sees that as long as it doesn\u2019t evict pa ge 1 (which\nis about to be accessed), we\u2019ll be OK. The example shows page 3 getting\nevicted, although 0 would have been a \ufb01ne choice too. Finally , we hit on\npage 1 and the trace completes.\nW e can also calculate the hit rate for the cache: with 6 hits an d 5 misses,\nthe hit rate is H its\nH its+M isses which is 6\n6+5 or 54.6%. Y ou can also compute\nthe hit rate modulo compulsory misses (i.e., ignore the \ufb01rst miss to a given\npage), resulting in a 85.7% hit rate.\nUnfortunately , as we saw before in the development of schedu ling\npolicies, the future is not generally known; you can\u2019t build the optimal\npolicy for a general-purpose operating system 1. Thus, in developing a\nreal, deployable policy , we will focus on approaches that \ufb01n d some other\nway to decide which page to evict. The optimal policy will thu s serve\nonly as a comparison point, to know how close we are to \u201cperfec t\u201d.\n22.3 A Simple Policy: FIFO\nMany early systems avoided the complexity of trying to appro ach\noptimal and employed very simple replacement policies. For example,\nsome systems used FIFO (\ufb01rst-in, \ufb01rst-out) replacement, where pages\nwere simply placed in a queue when they enter the system; when a re-\nplacement occurs, the page on the tail of the queue (the \u201c\ufb01rst -in\u201d page) is\nevicted. FIFO has one great strength: it is quite simple to im plement.\nLet\u2019s examine how FIFO does on our example reference stream ( T able\n22.2). W e again begin our trace with three compulsory misses to pa ges 0,\n1, and 2, and then hit on both 0 and 1. Next, page 3 is referenced , causing\na miss; the replacement decision is easy with FIFO: pick the p age that\n1 If you can, let us know! W e can become rich together . Or , like t he scientists who \u201cdiscov-\nered\u201d cold fusion, widely scorned and mocked.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nBE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S 231\nResulting\nAccess Hit/Miss? Evict Cache State\n0 Miss First-in \u2192 0\n1 Miss First-in \u2192 0, 1\n2 Miss First-in \u2192 0, 1, 2\n0 Hit First-in \u2192 0, 1, 2\n1 Hit First-in \u2192 0, 1, 2\n3 Miss 0 First-in \u2192 1, 2, 3\n0 Miss 1 First-in \u2192 2"
  },
  {
    "content": "Y: P O L I C I E S 231\nResulting\nAccess Hit/Miss? Evict Cache State\n0 Miss First-in \u2192 0\n1 Miss First-in \u2192 0, 1\n2 Miss First-in \u2192 0, 1, 2\n0 Hit First-in \u2192 0, 1, 2\n1 Hit First-in \u2192 0, 1, 2\n3 Miss 0 First-in \u2192 1, 2, 3\n0 Miss 1 First-in \u2192 2, 3, 0\n3 Hit First-in \u2192 2, 3, 0\n1 Miss 2 First-in \u2192 3, 0, 1\n2 Miss 3 First-in \u2192 0, 1, 2\n1 Hit First-in \u2192 0, 1, 2\nT able 22.2: T racing the FIFO Policy\nwas the \u201c\ufb01rst one\u201d in (the cache state in the table is kept in FI FO order ,\nwith the \ufb01rst-in page on the left), which is page 0. Unfortuna tely , our next\naccess is to page 0, causing another miss and replacement (of page 1). W e\nthen hit on page 3, but miss on 1 and 2, and \ufb01nally hit on 3.\nComparing FIFO to optimal, FIFO does notably worse: a 36.4% h it\nrate (or 57.1% excluding compulsory misses). FIFO simply ca n\u2019t deter-\nmine the importance of blocks: even though page 0 had been acc essed\na number of times, FIFO still kicks it out, simply because it w as the \ufb01rst\none brought into memory .\nAS I D E : BE L A D Y \u2019 S AN O M A LY\nBelady (of the optimal policy) and colleagues found an inter esting refer-\nence stream that behaved a little unexpectedly [BNS69]. The memory-\nreference stream: 1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5. The replacem ent policy\nthey were studying was FIFO. The interesting part: how the ca che hit\nrate changed when moving from a cache size of 3 to 4 pages.\nIn general, you would expect the cache hit rate to increase (get better)\nwhen the cache gets larger . But in this case, with FIFO, it get s worse! Cal-\nculate the hits and misses yourself and see. This odd behavio r is generally\nreferred to as Belady\u2019s Anomaly (to the chagrin of his co-authors).\nSome other policies, such as LRU, don\u2019t suffer from this prob lem. Can\nyou guess why? As it turns out, LRU has what is known as a stack prop-\nerty [M+70]. For algorithms with this property , a cache of size N + 1\nnaturally includes the contents of a cache of size N . Thus, when increas-\ning the cache size, hit rate will either stay the same or impro ve. FIFO and\nRandom (among others) clearly do not obey the stack property , and thus\nare susceptible to anomalous behavior .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n232 BE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S\nResulting\nAccess Hit/Miss? Evict Cache State\n0 Miss 0\n1 Miss 0, 1\n2 Miss 0, 1, 2\n0 Hit 0, 1, 2\n1 Hit 0, 1, 2\n3 Miss 0 1, 2, 3\n0 Miss 1 2, 3, 0\n3 Hit 2, 3, 0\n1 Miss 3 2, 0, 1\n2 Hit 2, 0, 1\n1 Hit 2, 0, 1\nT able 22.3: T racing the Random Policy\n22.4 Another Simple Policy: Random\nAnother similar replacement policy is Random, which simply picks a\nrandom page to replace under memory pressure. Random has pro perties\nsimilar to FIFO; it is simple to implement, but it doesn\u2019t rea lly try to be\ntoo intelligent in picking which blocks to evict. Let\u2019s look at how Random\ndoes on our famous example reference stream (see T able\n22.3).\nOf course, how Random does depends entirely upon how lucky (o r\nunlucky) Random gets in its choices. In the example above, Ra ndom does\na little"
  },
  {
    "content": "ties\nsimilar to FIFO; it is simple to implement, but it doesn\u2019t rea lly try to be\ntoo intelligent in picking which blocks to evict. Let\u2019s look at how Random\ndoes on our famous example reference stream (see T able\n22.3).\nOf course, how Random does depends entirely upon how lucky (o r\nunlucky) Random gets in its choices. In the example above, Ra ndom does\na little better than FIFO, and a little worse than optimal. In fact, we can\nrun the Random experiment thousands of times and determine h ow it\ndoes in general. Figure 22.1 shows how many hits Random achieves over\n10,000 trials, each with a different random seed. As you can s ee, some-\ntimes (just over 40% of the time), Random is as good as optimal , achieving\n6 hits on the example trace; sometimes it does much worse, ach ieving 2\nhits or fewer . How Random does depends on the luck of the draw .\n0 1 2 3 4 5 6 7\n0\n10\n20\n30\n40\n50\nNumber of Hits\nFrequency\nFigure 22.1: Random Performance over 10,000 T rials\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nBE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S 233\nResulting\nAccess Hit/Miss? Evict Cache State\n0 Miss LRU \u2192 0\n1 Miss LRU \u2192 0, 1\n2 Miss LRU \u2192 0, 1, 2\n0 Hit LRU \u2192 1, 2, 0\n1 Hit LRU \u2192 2, 0, 1\n3 Miss 2 LRU \u2192 0, 1, 3\n0 Hit LRU \u2192 1, 3, 0\n3 Hit LRU \u2192 1, 0, 3\n1 Hit LRU \u2192 0, 3, 1\n2 Miss 0 LRU \u2192 3, 1, 2\n1 Hit LRU \u2192 3, 2, 1\nT able 22.4: T racing the LRU Policy\n22.5 Using History: LRU\nUnfortunately , any policy as simple as FIFO or Random is like ly to\nhave a common problem: it might kick out an important page, on e that\nis about to be referenced again. FIFO kicks out the page that w as \ufb01rst\nbrought in; if this happens to be a page with important code or data\nstructures upon it, it gets thrown out anyhow , even though it will soon be\npaged back in. Thus, FIFO, Random, and similar policies are n ot likely to\napproach optimal; something smarter is needed.\nAs we did with scheduling policy , to improve our guess at the f uture,\nwe once again lean on the past and use history as our guide. For example,\nif a program has accessed a page in the near past, it is likely t o access it\nagain in the near future.\nOne type of historical information a page-replacement poli cy could\nuse is frequency; if a page has been accessed many times, perhaps it\nshould not be replaced as it clearly has some value. A more com monly-\nused property of a page is its recency of access; the more recently a page\nhas been accessed, perhaps the more likely it will be accesse d again.\nThis family of policies is based on what people refer to as the prin-\nciple of locality [D70], which basically is just an observation about pro-\ngrams and their behavior . What this principle says, quite si mply , is that\nprograms tend to access certain code sequences (e.g., in a lo op) and data\nstructures (e.g., an array accessed by the loop) quite frequ ently; we should\nthus try to use history to \ufb01gure out which pages are important , and keep\nthose pages in memory when it comes to eviction time.\nAnd thus, a family of simple historically-based algorithms are born.\nThe Least-Frequently-Used (LFU) policy replaces the least-frequently-\nused page when an eviction must take place. Similarly , the Least-Recently-\nUsed (LRU) policy replaces the least-recently-used page. These algo -\nrithms are easy to remember: once you know the name, you know e xactly\nwhat it does, which is an excellent property for a name.\nT o"
  },
  {
    "content": " are born.\nThe Least-Frequently-Used (LFU) policy replaces the least-frequently-\nused page when an eviction must take place. Similarly , the Least-Recently-\nUsed (LRU) policy replaces the least-recently-used page. These algo -\nrithms are easy to remember: once you know the name, you know e xactly\nwhat it does, which is an excellent property for a name.\nT o better understand LRU, let\u2019s examine how LRU does on our ex am-\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n234 BE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S\nAS I D E : TY P E S O F LO C A L I T Y\nThere are two types of locality that programs tend to exhibit . The \ufb01rst\nis known as spatial locality , which states that if a page P is accessed,\nit is likely the pages around it (say P \u2212 1 or P + 1) will also likely be\naccessed. The second is temporal locality , which states that pages that\nhave been accessed in the near past are likely to be accessed a gain in the\nnear future. The assumption of the presence of these types of locality\nplays a large role in the caching hierarchies of hardware sys tems, which\ndeploy many levels of instruction, data, and address-trans lation caching\nto help programs run fast when such locality exists.\nOf course, the principle of locality , as it is often called, is no hard-and-\nfast rule that all programs must obey . Indeed, some programs access\nmemory (or disk) in rather random fashion and don\u2019t exhibit m uch or\nany locality in their access streams. Thus, while locality i s a good thing to\nkeep in mind while designing caches of any kind (hardware or s oftware),\nit does not guarantee success. Rather , it is a heuristic that often proves\nuseful in the design of computer systems.\nple reference stream. T able\n22.4 shows the results. From the table, you\ncan see how LRU can use history to do better than stateless pol icies such\nas Random or FIFO. In the example, LRU evicts page 2 when it \ufb01rs t has\nto replace a page, because 0 and 1 have been accessed more rece ntly . It\nthen replaces page 0 because 1 and 3 have been accessed more re cently .\nIn both cases, LRU\u2019s decision, based on history , turns out to be correct,\nand the next references are thus hits. Thus, in our simple exa mple, LRU\ndoes as well as possible, matching optimal in its performanc e.\nW e should also note that the opposites of these algorithms ex ist: Most-\nFrequently-Used (MFU) and Most-Recently-Used (MRU). In most cases\n(not all!), these policies do not work well, as they ignore th e locality most\nprograms exhibit instead of embracing it.\n22.6 W orkload Examples\nLet\u2019s look at a few more examples in order to better understan d how\nsome of these policies behave. W e\u2019ll look at more complex workloads\ninstead just a small trace of references. However , even thes e workloads\nare greatly simpli\ufb01ed; a real study would include applicati on traces.\nOur \ufb01rst workload has no locality , which means that each refe rence\nis to a random page within the set of accessed pages. In this si mple ex-\nample, the workload accesses 100 unique pages over time, cho osing the\nnext page to refer to at random; overall, 10,000 pages are acc essed. In the\nexperiment, we vary the cache size from very small (1 page) to enough\nto hold all the unique pages (100 page), in order to see how eac h policy\nbehaves over the range of cache sizes.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nBE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S 235\n0 20 40 60 80 100\n0%\n20%\n40%\n60%\n80%\n100"
  },
  {
    "content": " over the range of cache sizes.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nBE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S 235\n0 20 40 60 80 100\n0%\n20%\n40%\n60%\n80%\n100%\nThe No-Locality Workload\nCache Size (Blocks)\nHit Rate\nOPT\nLRU\nFIFO\nRAND\nFigure 22.2: The No-Locality W orkload\nFigure 22.2 plots the results of the experiment for optimal, LRU, Ran-\ndom, and FIFO. The y-axis of the \ufb01gure shows the hit rate that e ach policy\nachieves; the x-axis varies the cache size as described abov e.\nW e can draw a number of conclusions from the graph. First, whe n\nthere is no locality in the workload, it doesn\u2019t matter much w hich realistic\npolicy you are using; LRU, FIFO, and Random all perform the sa me, with\nthe hit rate exactly determined by the size of the cache. Seco nd, when\nthe cache is large enough to \ufb01t the entire workload, it also do esn\u2019t matter\nwhich policy you use; all policies (even optimal) converge t o a 100% hit\nrate when all the referenced blocks \ufb01t in cache. Finally , you can see that\noptimal performs noticeably better than the realistic poli cies; peeking into\nthe future, if it were possible, does a much better job of repl acement.\nThe next workload we examine is called the \u201c80-20\u201d workload, which\nexhibits locality: 80% of the references are made to 20% of th e pages (the\n\u201chot\u201d pages); the remaining 20% of the references are made to the re-\nmaining 80% of the pages (the \u201ccold\u201d pages). In our workload, there are\na total 100 unique pages again; thus, \u201chot\u201d pages are referre d to most of\nthe time, and \u201ccold\u201d pages the remainder . Figure 22.3 shows how the\npolicies perform with this workload.\nAs you can see from the \ufb01gure, while both random and FIFO do rea -\nsonably well, LRU does better , as it is more likely to hold ont o the hot\npages; as those pages have been referred to frequently in the past, they\nare likely to be referred to again in the near future. Optimal once again\ndoes better , showing that LRU\u2019s historical information is n ot perfect.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n236 BE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S\n0 20 40 60 80 100\n0%\n20%\n40%\n60%\n80%\n100%\nThe 80-20 Workload\nCache Size (Blocks)\nHit Rate\nOPT\nLRU\nFIFO\nRAND\nFigure 22.3: The 80-20 W orkload\nY ou might now be wondering: is LRU\u2019s improvement over Random\nand FIFO really that big of a deal? The answer , as usual, is \u201cit depends.\u201d If\neach miss is very costly (not uncommon), then even a small inc rease in hit\nrate (reduction in miss rate) can make a huge difference on pe rformance.\nIf misses are not so costly , then of course the bene\ufb01ts possib le with LRU\nare not nearly as important.\nLet\u2019s look at one \ufb01nal workload. W e call this one the \u201clooping sequen-\ntial\u201d workload, as in it, we refer to 50 pages in sequence, sta rting at 0,\nthen 1, ..., up to page 49, and then we loop, repeating those ac cesses, for a\ntotal of 10,000 accesses to 50 unique pages. The last graph in Figure 22.4\nshows the behavior of the policies under this workload.\nThis workload, common in many applications (including impo rtant\ncommercial applications such as databases [CD85"
  },
  {
    "content": ", as in it, we refer to 50 pages in sequence, sta rting at 0,\nthen 1, ..., up to page 49, and then we loop, repeating those ac cesses, for a\ntotal of 10,000 accesses to 50 unique pages. The last graph in Figure 22.4\nshows the behavior of the policies under this workload.\nThis workload, common in many applications (including impo rtant\ncommercial applications such as databases [CD85]), repres ents a worst-\ncase for both LRU and FIFO. These algorithms, under a looping -sequential\nworkload, kick out older pages; unfortunately , due to the lo oping nature\nof the workload, these older pages are going to be accessed so oner than\nthe pages that the policies prefer to keep in cache. Indeed, e ven with\na cache of size 49, a looping-sequential workload of 50 pages results in\na 0% hit rate. Interestingly , Random fares notably better , n ot quite ap-\nproaching optimal, but at least achieving a non-zero hit rat e. T urns out\nthat random has some nice properties; one such property is no t having\nweird corner-case behaviors.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nBE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S 237\n0 20 40 60 80 100\n0%\n20%\n40%\n60%\n80%\n100%\nThe Looping-Sequential Workload\nCache Size (Blocks)\nHit Rate\nOPT\nLRU\nFIFO\nRAND\nFigure 22.4: The Looping W orkload\n22.7 Implementing Historical Algorithms\nAs you can see, an algorithm such as LRU can generally do a bett er\njob than simpler policies like FIFO or Random, which may thro w out\nimportant pages. Unfortunately , historical policies pres ent us with a new\nchallenge: how do we implement them?\nLet\u2019s take, for example, LRU. T o implement it perfectly , we n eed to\ndo a lot of work. Speci\ufb01cally , upon each page access (i.e., each memory\naccess, whether an instruction fetch or a load or store), we m ust update\nsome data structure to move this page to the front of the list ( i.e., the\nMRU side). Contrast this to FIFO, where the FIFO list of pages is only\naccessed when a page is evicted (by removing the \ufb01rst-in page ) or when\na new page is added to the list (to the last-in side). T o keep tr ack of which\npages have been least- and most-recently used, the system ha s to do some\naccounting work on every memory reference. Clearly , without great care,\nsuch accounting could greatly reduce performance.\nOne method that could help speed this up is to add a little bit o f hard-\nware support. For example, a machine could update, on each pa ge access,\na time \ufb01eld in memory (for example, this could be in the per-pr ocess page\ntable, or just in some separate array in memory , with one entr y per phys-\nical page of the system). Thus, when a page is accessed, the ti me \ufb01eld\nwould be set, by hardware, to the current time. Then, when rep lacing a\npage, the OS could simply scan all the time \ufb01elds in the system to \ufb01nd the\nleast-recently-used page.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n238 BE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S\nUnfortunately , as the number of pages in a system grows, scan ning a\nhuge array of times just to \ufb01nd the absolute least-recently- used page is\nprohibitively expensive. Imagine a modern machine with 4GB of mem-\nory , chopped into 4KB pages. This machine has 1 million pages , and thus\n\ufb01nding the LRU page will take a long time, even at modern CPU sp eeds.\nWhich begs the question:"
  },
  {
    "content": " as the number of pages in a system grows, scan ning a\nhuge array of times just to \ufb01nd the absolute least-recently- used page is\nprohibitively expensive. Imagine a modern machine with 4GB of mem-\nory , chopped into 4KB pages. This machine has 1 million pages , and thus\n\ufb01nding the LRU page will take a long time, even at modern CPU sp eeds.\nWhich begs the question: do we really need to \ufb01nd the absolute oldest\npage to replace? Can we instead survive with an approximatio n?\nCR U X : H O W TO IM P L E M E N T AN LRU R E P L A C E M E N T PO L I C Y\nGiven that it will be expensive to implement perfect LRU, can we ap-\nproximate it in some way , and still obtain the desired behavi or?\n22.8 Approximating LRU\nAs it turns out, the answer is yes: approximating LRU is more f ea-\nsible from a computational-overhead standpoint, and indee d it is what\nmany modern systems do. The idea requires some hardware supp ort,\nin the form of a use bit (sometimes called the reference bit ), the \ufb01rst of\nwhich was implemented in the \ufb01rst system with paging, the Atl as one-\nlevel store [KE+62]. There is one use bit per page of the syste m, and the\nuse bits live in memory somewhere (they could be in the per-pr ocess page\ntables, for example, or just in an array somewhere). Wheneve r a page is\nreferenced (i.e., read or written), the use bit is set by hard ware to 1. The\nhardware never clears the bit, though (i.e., sets it to 0); th at is the respon-\nsibility of the OS.\nHow does the OS employ the use bit to approximate LRU? W ell, th ere\ncould be a lot of ways, but with the clock algorithm [C69], one simple\napproach was suggested. Imagine all the pages of the system a rranged in\na circular list. A clock hand points to some particular page to begin with\n(it doesn\u2019t really matter which). When a replacement must oc cur , the OS\nchecks if the currently-pointed to page P has a use bit of 1 or 0. If 1, this\nimplies that page P was recently used and thus is not a good candidate\nfor replacement. Thus, the clock hand is incremented to the n ext page\nP + 1, and the use bit for P set to 0 (cleared). The algorithm continues\nuntil it \ufb01nds a use bit that is set to 0, implying this page has n ot been\nrecently used (or , in the worst case, that all pages have been and that we\nhave now searched through the entire set of pages, clearing a ll the bits).\nNote that this approach is not the only way to employ a use bit t o\napproximate LRU. Indeed, any approach which periodically c lears the\nuse bits and then differentiates between which pages have us e bits of 1\nversus 0 to decide which to replace would be \ufb01ne. The clock alg orithm of\nCorbato\u2019s was just one early approach which met with some suc cess, and\nhad the nice property of not repeatedly scanning through all of memory\nlooking for an unused page.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nBE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S 239\n0 20 40 60 80 100\n0%\n20%\n40%\n60%\n80%\n100%\nThe 80-20 Workload\nCache Size (Blocks)\nHit Rate\nOPT\nLRU\nFIFO\nRAND\nClock\nFigure 22.5: The 80-20 W orkload With Clock\nThe behavior of a clock algorithm variant is shown in Figure 22.5. This\nvariant randomly scans pages when doing a replacement; when it en-\ncounters a page with a reference bit set to 1, it clears the bit (i.e., sets it\nto 0); when it \ufb01nds a page with the reference bit set to 0, it cho oses it as\nits victim. As"
  },
  {
    "content": "5: The 80-20 W orkload With Clock\nThe behavior of a clock algorithm variant is shown in Figure 22.5. This\nvariant randomly scans pages when doing a replacement; when it en-\ncounters a page with a reference bit set to 1, it clears the bit (i.e., sets it\nto 0); when it \ufb01nds a page with the reference bit set to 0, it cho oses it as\nits victim. As you can see, although it doesn\u2019t do quite as wel l as perfect\nLRU, it does better than approaches that don\u2019t consider hist ory at all.\n22.9 Considering Dirty Pages\nOne small modi\ufb01cation to the clock algorithm (also original ly sug-\ngested by Corbato [C69]) that is commonly made is the additio nal con-\nsideration of whether a page has been modi\ufb01ed or not while in m emory .\nThe reason for this: if a page has been modi\ufb01ed and is thus dirty, it must\nbe written back to disk to evict it, which is expensive. If it h as not been\nmodi\ufb01ed (and is thus clean), the eviction is free; the physical frame can\nsimply be reused for other purposes without additional I/O. Thus, some\nVM systems prefer to evict clean pages over dirty pages.\nT o support this behavior , the hardware should include a modi\ufb01ed bit\n(a.k.a. dirty bit ). This bit is set any time a page is written, and thus can be\nincorporated into the page-replacement algorithm. The clo ck algorithm,\nfor example, could be changed to scan for pages that are both u nused\nand clean to evict \ufb01rst; failing to \ufb01nd those, then for unused pages that\nare dirty; etc.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n240 BE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S\n22.10 Other VM Policies\nPage replacement is not the only policy the VM subsystem empl oys\n(though it may be the most important). For example, the OS als o has to\ndecide when to bring a page into memory . This policy , sometimes called\nthe page selection policy (as it was called by Denning [D70]), presents\nthe OS with some different options.\nFor most pages, the OS simply uses demand paging , which means the\nOS brings the page into memory when it is accessed, \u201con demand \u201d as\nit were. Of course, the OS could guess that a page is about to be used,\nand thus bring it in ahead of time; this behavior is known as prefetching\nand should only be done when there is reasonable chance of suc cess. For\nexample, some systems will assume that if a code page P is brought into\nmemory , that code page P +1 will likely soon be accessed and thus should\nbe brought into memory too.\nAnother policy determines how the OS writes pages out to disk . Of\ncourse, they could simply be written out one at a time; howeve r , many\nsystems instead collect a number of pending writes together in memory\nand write them to disk in one (more ef\ufb01cient) write. This beha vior is\nusually called clustering or simply grouping of writes, and is effective\nbecause of the nature of disk drives, which perform a single l arge write\nmore ef\ufb01ciently than many small ones.\n22.11 Thrashing\nBefore closing, we address one \ufb01nal question: what should th e OS do\nwhen memory is simply oversubscribed, and the memory demand s of the\nset of running processes simply exceeds the available physi cal memory?\nIn this case, the system will constantly be paging, a conditi on sometimes\nreferred to as thrashing [D70].\nSome earlier operating systems had a fairly sophisticated s et of mech-\nanisms to both detect and cope with thrashing when it took pla ce. For\nexample, given a set of processes, a system could decide not t o run a sub-\nset of processes, with the hope that the reduced set of proces ses working\nsets (the pages that they are using actively) \ufb01t in memory and thus can\nmake progress. This approach, generally known as admission control ,\nstates that"
  },
  {
    "content": " fairly sophisticated s et of mech-\nanisms to both detect and cope with thrashing when it took pla ce. For\nexample, given a set of processes, a system could decide not t o run a sub-\nset of processes, with the hope that the reduced set of proces ses working\nsets (the pages that they are using actively) \ufb01t in memory and thus can\nmake progress. This approach, generally known as admission control ,\nstates that it is sometimes better to do less work well than to try to do\neverything at once poorly , a situation we often encounter in real life as\nwell as in modern computer systems (sadly).\nSome current systems take more a draconian approach to memor y\noverload. For example, some versions of Linux run an out-of-memory\nkiller when memory is oversubscribed; this daemon chooses a memory -\nintensive process and kills it, thus reducing memory in a non e-too-subtle\nmanner . While successful at reducing memory pressure, this approach\ncan have problems, if, for example, it kills the X server and t hus renders\nany applications requiring the display unusable.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nBE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S 241\n22.12 Summary\nW e have seen the introduction of a number of page-replacemen t (and\nother) policies, which are part of the VM subsystem of all mod ern operat-\ning systems. Modern systems add some tweaks to straightforw ard LRU\napproximations like clock; for example, scan resistance is an important\npart of many modern algorithms, such as ARC [MM03]. Scan-res istant al-\ngorithms are usually LRU-like but also try to avoid the worst -case behav-\nior of LRU, which we saw with the looping-sequential workloa d. Thus,\nthe evolution of page-replacement algorithms continues.\nHowever , in many cases the importance of said algorithms has de-\ncreased, as the discrepancy between memory-access and disk -access times\nhas increased. Because paging to disk is so expensive, the co st of frequent\npaging is prohibitive. Thus, the best solution to excessive paging is often\na simple (if intellectually dissatisfying) one: buy more me mory .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n242 BE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S\nReferences\n[AD03] \u201cRun-Time Adaptation in River \u201d\nRemzi H. Arpaci-Dusseau\nACM TOCS, 21:1, February 2003\nA summary of one of the authors\u2019 dissertation work on a system named River . Certainly one place where\nhe learned that comparison against the ideal is an important technique for system designers.\n[B66] \u201cA Study of Replacement Algorithms for Virtual-Stora ge Computer \u201d\nLaszlo A. Belady\nIBM Systems Journal 5(2): 78-101, 1966\nThe paper that introduces the simple way to compute the optim al behavior of a policy (the MIN algo-\nrithm).\n[BNS69] \u201cAn Anomaly in Space-time Characteristics of Certa in Programs Running in a Paging\nMachine\u201d\nL. A. Belady and R. A. Nelson and G. S. Shedler\nCommunications of the ACM, 12:6, June 1969\nIntroduction of the little sequence of memory references kn own as Belady\u2019s Anomaly. How do Nelson\nand Shedler feel about this name, we wonder?\n[CD85] \u201cAn Evaluation of Buffer Management Strategies for R elational Database Systems\u201d\nHong-T ai Chou and David J. DeWitt\nVLDB \u201985, Stockholm, Sweden, August 1985\nA famous database paper on the different buffering strategi es you should use under a number of common\ndatabase access patterns. The more general lesson: if you kn ow something about a workload, you can\ntailor policies to do better than the general-purpose ones u sually found in the OS.\n[C69] \u201cA Paging Experiment with the Multics System\u201d\nF ."
  },
  {
    "content": " DeWitt\nVLDB \u201985, Stockholm, Sweden, August 1985\nA famous database paper on the different buffering strategi es you should use under a number of common\ndatabase access patterns. The more general lesson: if you kn ow something about a workload, you can\ntailor policies to do better than the general-purpose ones u sually found in the OS.\n[C69] \u201cA Paging Experiment with the Multics System\u201d\nF .J. Corbato\nIncluded in a Festschrift published in honor of Prof. P .M. Mo rse\nMIT Press, Cambridge, MA, 1969\nThe original (and hard to \ufb01nd!) reference to the clock algori thm, though not the \ufb01rst usage of a use bit.\nThanks to H. Balakrishnan of MIT for digging up this paper for us.\n[D70] \u201cVirtual Memory\u201d\nPeter J. Denning\nComputing Surveys, V ol. 2, No. 3, September 1970\nDenning\u2019s early and famous survey on virtual memory systems .\n[EF78] \u201cCold-start vs. W arm-start Miss Ratios\u201d\nMalcolm C. Easton and Ronald Fagin\nCommunications of the ACM, 21:10, October 1978\nA good discussion of cold-start vs. warm-start misses.\n[HP06] \u201cComputer Architecture: A Quantitative Approach\u201d\nJohn Hennessy and David Patterson\nMorgan-Kaufmann, 2006\nA great and marvelous book about computer architecture. Rea d it!\n[H87] \u201cAspects of Cache Memory and Instruction Buffer Perfo rmance\u201d\nMark D. Hill\nPh.D. Dissertation, U.C. Berkeley , 1987\nMark Hill, in his dissertation work, introduced the Three C\u2019 s, which later gained wide popularity with\nits inclusion in H&P [HP06]. The quote from therein: \u201cI have f ound it useful to partition misses ... into\nthree components intuitively based on the cause of the misse s (page 49).\u201d\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nBE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S 243\n[KE+62] \u201cOne-level Storage System\u201d\nT . Kilburn, and D.B.G. Edwards and M.J. Lanigan and F .H. Sumn er\nIRE T rans. EC-11:2, 1962\nAlthough Atlas had a use bit, it only had a very small number of pages, and thus the scanning of the\nuse bits in large memories was not a problem the authors solve d.\n[M+70] \u201cEvaluation T echniques for Storage Hierarchies\u201d\nR. L. Mattson, J. Gecsei, D. R. Slutz, I. L. T raiger\nIBM Systems Journal, V olume 9:2, 1970\nA paper that is mostly about how to simulate cache hierarchie s ef\ufb01ciently; certainly a classic in that\nregard, as well for its excellent discussion of some of the pr operties of various replacement algorithms.\nCan you \ufb01gure out why the stack property might be useful for si mulating a lot of different-sized caches\nat once?\n[MM03] \u201cARC: A Self-T uning, Low Overhead Replacement Cache \u201d\nNimrod Megiddo and Dharmendra S. Modha\nF AST 2003, February 2003, San Jose, California\nAn excellent modern paper about replacement algorithms, wh ich includes a new policy, ARC, that is\nnow used in some systems. Recognized in 2014 as a \u201cT est of Time \u201d award winner by the storage systems\ncommunity at the F AST \u201914 conference.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n244 BE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S\nHomework\nThis simulator , paging-policy.py, allows you to play around with\ndifferent page-replacement policies. See the README for de tails.\nQuestions\n\u2022 Generate random addresses with the following arguments: -s 0\n-n"
  },
  {
    "content": " A U\nTH R E E\nEA S Y\nPI E C E S\n244 BE Y O N D PH Y S I C A L ME M O RY: P O L I C I E S\nHomework\nThis simulator , paging-policy.py, allows you to play around with\ndifferent page-replacement policies. See the README for de tails.\nQuestions\n\u2022 Generate random addresses with the following arguments: -s 0\n-n 10, -s 1 -n 10, and -s 2 -n 10. Change the policy from\nFIFO, to LRU, to OPT . Compute whether each access in said addr ess\ntraces are hits or misses.\n\u2022 For a cache of size 5, generate worst-case address reference streams\nfor each of the following policies: FIFO, LRU, and MRU (worst -case\nreference streams cause the most misses possible. For the wo rst case\nreference streams, how much bigger of a cache is needed to imp rove\nperformance dramatically and approach OPT?\n\u2022 Generate a random trace (use python or perl). How would you\nexpect the different policies to perform on such a trace?\n\u2022 Now generate a trace with some locality . How can you generate\nsuch a trace? How does LRU perform on it? How much better than\nRAND is LRU? How does CLOCK do? How about CLOCK with\ndifferent numbers of clock bits?\n\u2022 Use a program like valgrind to instrument a real application and\ngenerate a virtual page reference stream. For example, runn ing\nvalgrind --tool=lackey --trace-mem=yes ls will output\na nearly-complete reference trace of every instruction and data ref-\nerence made by the program ls. T o make this useful for the sim-\nulator above, you\u2019ll have to \ufb01rst transform each virtual mem ory\nreference into a virtual page-number reference (done by mas king\noff the offset and shifting the resulting bits downward). Ho w big\nof a cache is needed for your application trace in order to sat isfy a\nlarge fraction of requests? Plot a graph of its working set as the size\nof the cache increases.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n23\nThe VAX/VMS Virtual Memory System\nBefore we end our study of virtual memory , let us take a closer look at one\nparticularly clean and well done virtual memory manager , th at found in\nthe V AX/VMS operating system [LL82]. In this note, we will di scuss the\nsystem to illustrate how some of the concepts brought forth i n earlier\nchapters together in a complete memory manager .\n23.1 Background\nThe V AX-11 minicomputer architecture was introduced in the late 1970\u2019s\nby Digital Equipment Corporation (DEC). DEC was a massive player\nin the computer industry during the era of the mini-computer ; unfortu-\nnately , a series of bad decisions and the advent of the PC slow ly (but\nsurely) led to their demise [C03]. The architecture was real ized in a num-\nber of implementations, including the V AX-11/780 and the le ss powerful\nV AX-11/750.\nThe OS for the system was known as V AX/VMS (or just plain VMS),\none of whose primary architects was Dave Cutler , who later le d the effort\nto develop Microsoft\u2019s Windows NT [C93]. VMS had the general prob-\nlem that it would be run on a broad range of machines, includin g very\ninexpensive V AXen (yes, that is the proper plural) to extrem ely high-end\nand powerful machines in the same architecture family . Thus , the OS had\nto have mechanisms and policies that worked (and worked well ) across\nthis huge range of systems.\nTH E CR U X : H O W TO AV O I D TH E CU R S E OF GE N E R A L I T Y\nOperating systems often have a problem known as \u201cthe curse of gen-\nerality\u201d, where they are tasked with general support for a br oad class of\napplications and systems. The fundamental result of the cur se is that the\nOS is not likely to support any one installation very well. In the case of\nVMS, the curse was very real, as the V AX-11 architecture was r ealized in\na number of different implementations."
  },
  {
    "content": "Operating systems often have a problem known as \u201cthe curse of gen-\nerality\u201d, where they are tasked with general support for a br oad class of\napplications and systems. The fundamental result of the cur se is that the\nOS is not likely to support any one installation very well. In the case of\nVMS, the curse was very real, as the V AX-11 architecture was r ealized in\na number of different implementations. Thus, how can an OS be built so\nas to run effectively on a wide range of systems?\n245\n246 TH E VAX/VMS V I RT U A L ME M O RY SY S T E M\nAs an additional issue, VMS is an excellent example of softwa re inno-\nvations used to hide some of the inherent \ufb02aws of the architec ture. Al-\nthough the OS often relies on the hardware to build ef\ufb01cient a bstractions\nand illusions, sometimes the hardware designers don\u2019t quit e get every-\nthing right; in the V AX hardware, we\u2019ll see a few examples of t his, and\nwhat the VMS operating system does to build an effective, wor king sys-\ntem despite these hardware \ufb02aws.\n23.2 Memory Management Hardware\nThe V AX-11 provided a 32-bit virtual address space per proce ss, di-\nvided into 512-byte pages. Thus, a virtual address consiste d of a 23-bit\nVPN and a 9-bit offset. Further , the upper two bits of the VPN w ere used\nto differentiate which segment the page resided within; thu s, the system\nwas a hybrid of paging and segmentation, as we saw previously .\nThe lower-half of the address space was known as \u201cprocess spa ce\u201d and\nis unique to each process. In the \ufb01rst half of process space (k nown as P0),\nthe user program is found, as well as a heap which grows downwa rd.\nIn the second half of process space ( P1), we \ufb01nd the stack, which grows\nupwards. The upper-half of the address space is known as syst em space\n(S), although only half of it is used. Protected OS code and data reside\nhere, and the OS is in this way shared across processes.\nOne major concern of the VMS designers was the incredibly sma ll size\nof pages in the V AX hardware (512 bytes). This size, chosen fo r historical\nreasons, has the fundamental problem of making simple linea r page ta-\nbles excessively large. Thus, one of the \ufb01rst goals of the VMS designers\nwas to make sure that VMS would not overwhelm memory with page\ntables.\nThe system reduced the pressure page tables place on memory i n two\nways. First, by segmenting the user address space into two, t he V AX-11\nprovides a page table for each of these regions ( P0 and P1) per process;\nthus, no page-table space is needed for the unused portion of the address\nspace between the stack and the heap. The base and bounds regi sters\nare used as you would expect; a base register holds the addres s of the\npage table for that segment, and the bounds holds its size (i. e., number of\npage-table entries).\nSecond, the OS reduces memory pressure even further by placi ng user\npage tables (for P0 and P1, thus two per process) in kernel virtual mem-\nory . Thus, when allocating or growing a page table, the kerne l allocates\nspace out of its own virtual memory , in segment S. If memory comes un-\nder severe pressure, the kernel can swap pages of these page t ables out to\ndisk, thus making physical memory available for other uses.\nPutting page tables in kernel virtual memory means that addr ess trans-\nlation is even further complicated. For example, to transla te a virtual ad-\ndress in P0 or P1, the hardware has to \ufb01rst try to look up the page-table\nentry for that page in its page table (the P0 or P1 page table for that pro-\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E VAX/VMS V I RT U A L ME M O RY SY S T E M 247\nPage 0"
  },
  {
    "content": "st try to look up the page-table\nentry for that page in its page table (the P0 or P1 page table for that pro-\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E VAX/VMS V I RT U A L ME M O RY SY S T E M 247\nPage 0: Invalid\nUser Code\nUser Heap\nUser Stack\nTrap Tables\nKernel Data\nKernel Code\nKernel Heap\nUnused\nSystem (S)\nUser (P1)\nUser (P0)\n0\n230\n231\n232\nFigure 23.1: The V AX/VMS Address Space\ncess); in doing so, however , the hardware may \ufb01rst have to con sult the\nsystem page table (which lives in physical memory); with tha t transla-\ntion complete, the hardware can learn the address of the page of the page\ntable, and then \ufb01nally learn the address of the desired memor y access.\nAll of this, fortunately , is made faster by the V AX\u2019s hardwar e-managed\nTLBs, which usually (hopefully) circumvent this laborious lookup.\n23.3 A Real Address Space\nOne neat aspect of studying VMS is that we can see how a real add ress\nspace is constructed (Figure 23.1. Thus far , we have assumed a simple\naddress space of just user code, user data, and user heap, but as we can\nsee above, a real address space is notably more complex.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n248 TH E VAX/VMS V I RT U A L ME M O RY SY S T E M\nAS I D E : WH Y NU L L PO I N T E R AC C E S S E S CA U S E SE G FA U LT S\nY ou should now have a good understanding of exactly what happ ens on\na null-pointer dereference. A process generates a virtual a ddress of 0, by\ndoing something like this:\nint *p = NULL; // set p = 0\n*p = 10; // try to store value 10 to virtual address 0\nThe hardware tries to look up the VPN (also 0 here) in the TLB, a nd suf-\nfers a TLB miss. The page table is consulted, and the entry for VPN 0\nis found to be marked invalid. Thus, we have an invalid access , which\ntransfers control to the OS, which likely terminates the pro cess (on U N I X\nsystems, processes are sent a signal which allows them to rea ct to such a\nfault; if uncaught, however , the process is killed).\nFor example, the code segment never begins at page 0. This pag e,\ninstead, is marked inaccessible, in order to provide some su pport for de-\ntecting null-pointer accesses. Thus, one concern when designing an ad-\ndress space is support for debugging, which the inaccessibl e zero page\nprovides here in some form.\nPerhaps more importantly , the kernel virtual address space (i.e., its\ndata structures and code) is a part of each user address space . On a con-\ntext switch, the OS changes the P0 and P1 registers to point to the ap-\npropriate page tables of the soon-to-be-run process; howev er , it does not\nchange the S base and bound registers, and as a result the \u201csame\u201d kernel\nstructures are mapped into each user address space.\nThe kernel is mapped into each address space for a number of re asons.\nThis construction makes life easier for the kernel; when, fo r example, the\nOS is handed a pointer from a user program (e.g., on a write() system\ncall), it is easy to copy data from that pointer to its own stru ctures. The\nOS is naturally written and compiled, without worry of where the data\nit is accessing comes from. If in contrast the kernel were loc ated entirely\nin physical memory , it would be quite hard to do things like sw ap pages\nof the page table to disk; if the kernel were given its own addr ess space,\nmoving data between user applications and the kernel would a gain be\ncomplicated and painful. With this construction (now"
  },
  {
    "content": " to its own stru ctures. The\nOS is naturally written and compiled, without worry of where the data\nit is accessing comes from. If in contrast the kernel were loc ated entirely\nin physical memory , it would be quite hard to do things like sw ap pages\nof the page table to disk; if the kernel were given its own addr ess space,\nmoving data between user applications and the kernel would a gain be\ncomplicated and painful. With this construction (now used w idely), the\nkernel appears almost as a library to applications, albeit a protected one.\nOne last point about this address space relates to protectio n. Clearly ,\nthe OS does not want user applications reading or writing OS d ata or\ncode. Thus, the hardware must support different protection levels for\npages to enable this. The V AX did so by specifying, in protect ion bits\nin the page table, what privilege level the CPU must be at in or der to\naccess a particular page. Thus, system data and code are set t o a higher\nlevel of protection than user data and code; an attempted acc ess to such\ninformation from user code will generate a trap into the OS, a nd (you\nguessed it) the likely termination of the offending process .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E VAX/VMS V I RT U A L ME M O RY SY S T E M 249\n23.4 Page Replacement\nThe page table entry (PTE) in V AX contains the following bits : a valid\nbit, a protection \ufb01eld (4 bits), a modify (or dirty) bit, a \ufb01el d reserved for\nOS use (5 bits), and \ufb01nally a physical frame number (PFN) to st ore the\nlocation of the page in physical memory . The astute reader mi ght note:\nno reference bit ! Thus, the VMS replacement algorithm must make do\nwithout hardware support for determining which pages are ac tive.\nThe developers were also concerned about memory hogs , programs\nthat use a lot of memory and make it hard for other programs to r un.\nMost of the policies we have looked at thus far are susceptibl e to such\nhogging; for example, LRU is a global policy that doesn\u2019t share memory\nfairly among processes.\nSegmented FIFO\nT o address these two problems, the developers came up with th e seg-\nmented FIFO replacement policy [RL81]. The idea is simple: each pro-\ncess has a maximum number of pages it can keep in memory , known as\nits resident set size (RSS). Each of these pages is kept on a FIFO list; when\na process exceeds its RSS, the \u201c\ufb01rst-in\u201d page is evicted. FIF O clearly does\nnot need any support from the hardware, and is thus easy to imp lement.\nOf course, pure FIFO does not perform particularly well, as w e saw\nearlier . T o improve FIFO\u2019s performance, VMS introduced two second-\nchance lists where pages are placed before getting evicted from memory ,\nspeci\ufb01cally a global clean-page free list and dirty-page list . When a process\nP exceeds its RSS, a page is removed from its per-process FIFO; if clean\n(not modi\ufb01ed), it is placed on the end of the clean-page list; if dirty (mod-\ni\ufb01ed), it is placed on the end of the dirty-page list.\nIf another process Q needs a free page, it takes the \ufb01rst free page off\nof the global clean list. However , if the original process P faults on that\npage before it is reclaimed, P reclaims it from the free (or dirty) list, thus\navoiding a costly disk access. The bigger these global secon d-chance lists\nare, the closer the segmented FIFO algorithm performs to LRU [RL81].\nPage Clustering\nAnother optimization used in VMS also helps overcome the sma ll page\nsize in VMS. Speci\ufb01cally , with such small pages, disk I/O dur ing swap-\nping could be highly inef\ufb01cient, as disks do better with larg e transfers.\nT o make swapping I/O more ef\ufb01cient, VMS adds a number of optim iza-\ntions"
  },
  {
    "content": " [RL81].\nPage Clustering\nAnother optimization used in VMS also helps overcome the sma ll page\nsize in VMS. Speci\ufb01cally , with such small pages, disk I/O dur ing swap-\nping could be highly inef\ufb01cient, as disks do better with larg e transfers.\nT o make swapping I/O more ef\ufb01cient, VMS adds a number of optim iza-\ntions, but most important is clustering. With clustering, VMS groups\nlarge batches of pages together from the global dirty list, a nd writes them\nto disk in one fell swoop (thus making them clean). Clusterin g is used\nin most modern systems, as the freedom to place pages anywher e within\nswap space lets the OS group pages, perform fewer and bigger w rites,\nand thus improve performance.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n250 TH E VAX/VMS V I RT U A L ME M O RY SY S T E M\nAS I D E : EM U L AT I N G RE F E R E N C E BI T S\nAs it turns out, you don\u2019t need a hardware reference bit in ord er to get\nsome notion of which pages are in use in a system. In fact, in th e early\n1980\u2019s, Babaoglu and Joy showed that protection bits on the V AX can be\nused to emulate reference bits [BJ81]. The basic idea: if you want to gain\nsome understanding of which pages are actively being used in a system,\nmark all of the pages in the page table as inaccessible (but ke ep around\nthe information as to which pages are really accessible by th e process,\nperhaps in the \u201creserved OS \ufb01eld\u201d portion of the page table en try). When\na process accesses a page, it will generate a trap into the OS; the OS will\nthen check if the page really should be accessible, and if so, revert the\npage to its normal protections (e.g., read-only , or read-wr ite). At the time\nof a replacement, the OS can check which pages remain marked i nacces-\nsible, and thus get an idea of which pages have not been recent ly used.\nThe key to this \u201cemulation\u201d of reference bits is reducing ove rhead while\nstill obtaining a good idea of page usage. The OS must not be to o aggres-\nsive in marking pages inaccessible, or overhead would be too high. The\nOS also must not be too passive in such marking, or all pages wi ll end up\nreferenced; the OS will again have no good idea which page to e vict.\n23.5 Other Neat VM T ricks\nVMS had two other now-standard tricks: demand zeroing and co py-\non-write. W e now describe these lazy optimizations.\nOne form of laziness in VMS (and most modern systems) is demand\nzeroing of pages. T o understand this better , let\u2019s consider the exam ple\nof adding a page to your address space, say in your heap. In a na ive\nimplementation, the OS responds to a request to add a page to y our heap\nby \ufb01nding a page in physical memory , zeroing it (required for security;\notherwise you\u2019d be able to see what was on the page from when so me\nother process used it!), and then mapping it into your addres s space (i.e.,\nsetting up the page table to refer to that physical page as des ired). But the\nnaive implementation can be costly , particularly if the pag e does not get\nused by the process.\nWith demand zeroing, the OS instead does very little work whe n the\npage is added to your address space; it puts an entry in the pag e table\nthat marks the page inaccessible. If the process then reads o r writes the\npage, a trap into the OS takes place. When handling the trap, t he OS no-\ntices (usually through some bits marked in the \u201creserved for OS\u201d portion\nof the page table entry) that this is actually a demand-zero p age; at this\npoint, the OS then does the needed work of \ufb01nding a physical pa ge, ze-\nroing it, and mapping it into the process\u2019s address space. If the process\nnever accesses the page"
  },
  {
    "content": ". When handling the trap, t he OS no-\ntices (usually through some bits marked in the \u201creserved for OS\u201d portion\nof the page table entry) that this is actually a demand-zero p age; at this\npoint, the OS then does the needed work of \ufb01nding a physical pa ge, ze-\nroing it, and mapping it into the process\u2019s address space. If the process\nnever accesses the page, all of this work is avoided, and thus the virtue of\ndemand zeroing.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E VAX/VMS V I RT U A L ME M O RY SY S T E M 251\nTI P : B E LA Z Y\nBeing lazy can be a virtue in both life as well as in operating s ystems.\nLaziness can put off work until later , which is bene\ufb01cial wit hin an OS for\na number of reasons. First, putting off work might reduce the latency of\nthe current operation, thus improving responsiveness; for example, op-\nerating systems often report that writes to a \ufb01le succeeded i mmediately ,\nand only write them to disk later in the background. Second, a nd more\nimportantly , laziness sometimes obviates the need to do the work at all;\nfor example, delaying a write until the \ufb01le is deleted remove s the need to\ndo the write at all. Laziness is also good in life: for example , by putting\noff your OS project, you may \ufb01nd that the project speci\ufb01catio n bugs are\nworked out by your fellow classmates; however , the class pro ject is un-\nlikely to get canceled, so being too lazy may be problematic, leading to a\nlate project, bad grade, and a sad professor . Don\u2019t make prof essors sad!\nAnother cool optimization found in VMS (and again, in virtua lly every\nmodern OS) is copy-on-write (COW for short). The idea, which goes at\nleast back to the TENEX operating system [BB+72], is simple: when the\nOS needs to copy a page from one address space to another , inst ead of\ncopying it, it can map it into the target address space and mar k it read-\nonly in both address spaces. If both address spaces only read the page, no\nfurther action is taken, and thus the OS has affected a fast co py without\nactually moving any data.\nIf, however , one of the address spaces does indeed try to writ e to the\npage, it will trap into the OS. The OS will then notice that the page is a\nCOW page, and thus (lazily) allocate a new page, \ufb01ll it with th e data, and\nmap this new page into the address space of the faulting proce ss. The\nprocess then continues and now has its own private copy of the page.\nCOW is useful for a number of reasons. Certainly any sort of sh ared\nlibrary can be mapped copy-on-write into the address spaces of many\nprocesses, saving valuable memory space. In U N I X systems, COW is\neven more critical, due to the semantics of fork() and exec(). As\nyou might recall, fork() creates an exact copy of the address space of\nthe caller; with a large address space, making such a copy is s low and\ndata intensive. Even worse, most of the address space is imme diately\nover-written by a subsequent call to exec(), which overlays the calling\nprocess\u2019s address space with that of the soon-to-be-exec\u2019d program. By\ninstead performing a copy-on-write fork(), the OS avoids much of the\nneedless copying and thus retains the correct semantics whi le improving\nperformance.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n252 TH E VAX/VMS V I RT U A L ME M O RY SY S T E M\n23.6 Summary\nY ou have now seen a top-to-bottom review of an entire virtual mem-\nory system. Hopefully , most of the details were easy to follo w , as you\nshould have already had a good understanding of most of the ba sic mech-\n"
  },
  {
    "content": " R E E\nEA S Y\nPI E C E S\n252 TH E VAX/VMS V I RT U A L ME M O RY SY S T E M\n23.6 Summary\nY ou have now seen a top-to-bottom review of an entire virtual mem-\nory system. Hopefully , most of the details were easy to follo w , as you\nshould have already had a good understanding of most of the ba sic mech-\nanisms and policies. More detail is available in the excelle nt (and short)\npaper by Levy and Lipman [LL82]; we encourage you to read it, a great\nway to see what the source material behind these chapters is l ike.\nY ou should also learn more about the state of the art by readin g about\nLinux and other modern systems when possible. There is a lot o f source\nmaterial out there, including some reasonable books [BC05] . One thing\nthat will amaze you: how classic ideas, found in old papers su ch as\nthis one on V AX/VMS, still in\ufb02uence how modern operating sys tems are\nbuilt.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E VAX/VMS V I RT U A L ME M O RY SY S T E M 253\nReferences\n[BB+72] \u201cTENEX, A Paged Time Sharing System for the PDP-10\u201d\nDaniel G. Bobrow , Jerry D. Burch\ufb01el, Daniel L. Murphy , Raymo nd S. T omlinson\nCommunications of the ACM, V olume 15, March 1972\nAn early time-sharing OS where a number of good ideas came fro m. Copy-on-write was just one of\nthose; inspiration for many other aspects of modern systems , including process management, virtual\nmemory, and \ufb01le systems are found herein.\n[BJ81] \u201cConverting a Swap-Based System to do Paging\nin an Architecture Lacking Page-Reference Bits\u201d\nOzalp Babaoglu and William N. Joy\nSOSP \u201981, December 1981, Paci\ufb01c Grove, California\nA clever idea paper on how to exploit existing protection mac hinery within a machine in order to emulate\nreference bits. The idea came from the group at Berkeley work ing on their own version of UNIX , known\nas the Berkeley Systems Distribution, or BSD. The group was h eavily in\ufb02uential in the development of\nUNIX , in virtual memory, \ufb01le systems, and networking.\n[BC05] \u201cUnderstanding the Linux Kernel (Third Edition)\u201d\nDaniel P . Bovet and Marco Cesati\nO\u2019Reilly Media, November 2005\nOne of the many books you can \ufb01nd on Linux. They go out of date qu ickly, but many of the basics\nremain and are worth reading about.\n[C03] \u201cThe Innovator \u2019s Dilemma\u201d\nClayton M. Christenson\nHarper Paperbacks, January 2003\nA fantastic book about the disk-drive industry and how new in novations disrupt existing ones. A good\nread for business majors and computer scientists alike. Pro vides insight on how large and successful\ncompanies completely fail.\n[C93] \u201cInside Windows NT\u201d\nHelen Custer and David Solomon\nMicrosoft Press, 1993\nThe book about Windows NT that explains the system top to bott om, in more detail than you might like.\nBut seriously, a pretty good book.\n[LL82] \u201cVirtual Memory Management in the V AX/VMS Operating System\u201d\nHenry M. Levy , Peter H. Lipman\nIEEE Computer , V olume 15, Number 3 (March 1982) Read the original source of most of this ma-\nterial; tt is a concise and easy read. Particularly importan t if you wish to go to graduate school, where\nall you do is read papers, work, read some more papers, work mo re, eventually write a paper , and then\nwork some more. But it is fun!\n[RL81] \u201cSegmented FIFO Page Replacement\u201d\nRollins T urner and Henry Levy\nSIGMETRICS \u201981\nA short paper that shows for some workloads, segmented FIFO c an approach the performance of LRU.\nc\ufffd"
  },
  {
    "content": "\nall you do is read papers, work, read some more papers, work mo re, eventually write a paper , and then\nwork some more. But it is fun!\n[RL81] \u201cSegmented FIFO Page Replacement\u201d\nRollins T urner and Henry Levy\nSIGMETRICS \u201981\nA short paper that shows for some workloads, segmented FIFO c an approach the performance of LRU.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n24\nSummary Dialogue on Memory Virtualization\nStudent: (Gulps) Wow, that was a lot of material.\nProfessor: Y es, and?\nStudent: Well, how am I supposed to remember it all? Y ou know, for the ex am?\nProfessor: Goodness, I hope that\u2019s not why you are trying to remember it.\nStudent: Why should I then?\nProfessor: Come on, I thought you knew better . Y ou\u2019re trying to learn som e-\nthing here, so that when you go off into the world, you\u2019ll unde rstand how systems\nactually work.\nStudent: Hmm... can you give an example?\nProfessor: Sure! One time back in graduate school, my friends and I were\nmeasuring how long memory accesses took, and once in a while t he numbers\nwere way higher than we expected; we thought all the data was \ufb01 tting nicely into\nthe second-level hardware cache, you see, and thus should ha ve been really fast\nto access.\nStudent: (nods)\nProfessor: We couldn\u2019t \ufb01gure out what was going on. So what do you do in suc h\na case? Easy, ask a professor! So we went and asked one of our pr ofessors, who\nlooked at the graph we had produced, and simply said \u201cTLB\u201d. Ah a! Of course,\nTLB misses! Why didn\u2019t we think of that? Having a good model of how virtual\nmemory works helps diagnose all sorts of interesting perfor mance problems.\nStudent: I think I see. I\u2019m trying to build these mental models of how th ings\nwork, so that when I\u2019m out there working on my own, I won\u2019t be su rprised when\na system doesn\u2019t quite behave as expected. I should even be ab le to anticipate how\nthe system will work just by thinking about it.\nProfessor: Exactly. So what have you learned? What\u2019s in your mental mode l of\nhow virtual memory works?\nStudent: Well, I think I now have a pretty good idea of what happens when\nmemory is referenced by a process, which, as you\u2019ve said many times, happens\n255\n256 S U M M A RY DI A L O G U E O N ME M O RY VI RT U A L I Z AT IO N\non each instruction fetch as well as explicit loads and store s.\nProfessor: Sounds good \u2013 tell me more.\nStudent: Well, one thing I\u2019ll always remember is that the addresses we see in a\nuser program, written in C for example...\nProfessor: What other language is there?\nStudent: (continuing) ... Y es, I know you like C. So do I! Anyhow, as I wa s\nsaying, I now really know that all addresses that we can obser ve within a program\nare virtual addresses; that I, as a programmer , am just given this illusion of where\ndata and code are in memory. I used to think it was cool that I co uld print the\naddress of a pointer , but now I \ufb01nd it frustrating \u2013 it\u2019s just a virtual address! I\ncan\u2019t see the real physical address where the data lives.\nProfessor: Nope, the OS de\ufb01nitely hides that from you. What else?\nStudent: Well, I think the TLB is a really key piece, providing the syst em with\na small hardware cache of address translations. Page tables are usually quite\nlarge and hence live in big and slow memories. Without that TL B, programs\nwould certainly run a great deal more slowly. Seems like the T LB truly makes\nvirtualizing memory possible. I couldn\u2019t imagine building a system without one!\nAnd I shudder at the thought of a program with a working set tha t exceeds the\ncoverage of the TLB: with all those TLB misses, it would"
  },
  {
    "content": "a small hardware cache of address translations. Page tables are usually quite\nlarge and hence live in big and slow memories. Without that TL B, programs\nwould certainly run a great deal more slowly. Seems like the T LB truly makes\nvirtualizing memory possible. I couldn\u2019t imagine building a system without one!\nAnd I shudder at the thought of a program with a working set tha t exceeds the\ncoverage of the TLB: with all those TLB misses, it would be har d to watch.\nProfessor: Y es, cover the eyes of the children! Beyond the TLB, what did y ou\nlearn?\nStudent: I also now understand that the page table is one of those data s tructures\nyou need to know about; it\u2019s just a data structure, though, an d that means almost\nany structure could be used. We started with simple structur es, like arrays (a.k.a.\nlinear page tables), and advanced all the way up to multi-lev el tables (which look\nlike trees), and even crazier things like pageable page tabl es in kernel virtual\nmemory. All to save a little space in memory!\nProfessor: Indeed.\nStudent: And here\u2019s one more important thing: I learned that the addre ss trans-\nlation structures need to be \ufb02exible enough to support what p rogrammers want\nto do with their address spaces. Structures like the multi-l evel table are perfect\nin this sense; they only create table space when the user need s a portion of the\naddress space, and thus there is little waste. Earlier attem pts, like the simple base\nand bounds register , just weren\u2019t \ufb02exible enough; the struc tures need to match\nwhat users expect and want out of their virtual memory system .\nProfessor: That\u2019s a nice perspective. What about all of the stuff we lear ned\nabout swapping to disk?\nStudent: Well, it\u2019s certainly fun to study, and good to know how page re place-\nment works. Some of the basic policies are kind of obvious (li ke LRU, for ex-\nample), but building a real virtual memory system seems more interesting, like\nwe saw in the VMS case study. But somehow, I found the mechanis ms more\ninteresting, and the policies less so.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSU M M A RY DI A L O G U E O N ME M O RY VI RT U A L I Z ATI O N 257\nProfessor: Oh, why is that?\nStudent: Well, as you said, in the end the best solution to policy probl ems is\nsimple: buy more memory. But the mechanisms you need to under stand to know\nhow stuff really works. Speaking of which...\nProfessor: Y es?\nStudent: Well, my machine is running a little slowly these days... and memory\ncertainly doesn\u2019t cost that much...\nProfessor: Oh \ufb01ne, \ufb01ne! Here\u2019s a few bucks. Go and get yourself some DRAM,\ncheapskate.\nStudent: Thanks professor! I\u2019ll never swap to disk again \u2013 or , if I do, a t least I\u2019ll\nknow what\u2019s actually going on!\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\nPart II\nConcurrency\n259\n\n25\nA Dialogue on Concurrency\nProfessor: And thus we reach the second of our three pillars of operating sys-\ntems: concurrency.\nStudent: I thought there were four pillars...?\nProfessor: Nope, that was in an older version of the book.\nStudent: Umm... OK. So what is concurrency, oh wonderful professor?\nProfessor: Well, imagine we have a peach \u2013\nStudent: (interrupting) Peaches again! What is it with you and peache s?\nProfessor: Ever read T .S. Eliot? The Love Song of J. Alfred Prufrock, \u201cDo I dare\nto eat a peach\u201d, and all that fun stuff?\nStudent: Oh yes! In English class in high school. Great stuff! I really liked the\npart where \u2013\nProfessor: (interrupting) This has nothing to do with that \u2013 I just like p eaches.\nAnyhow, imagine there are a lot of"
  },
  {
    "content": " s?\nProfessor: Ever read T .S. Eliot? The Love Song of J. Alfred Prufrock, \u201cDo I dare\nto eat a peach\u201d, and all that fun stuff?\nStudent: Oh yes! In English class in high school. Great stuff! I really liked the\npart where \u2013\nProfessor: (interrupting) This has nothing to do with that \u2013 I just like p eaches.\nAnyhow, imagine there are a lot of peaches on a table, and a lot of people who\nwish to eat them. Let\u2019s say we did it this way: each eater \ufb01rst i denti\ufb01es a peach\nvisually, and then tries to grab it and eat it. What is wrong wi th this approach?\nStudent: Hmmm... seems like you might see a peach that somebody else al so\nsees. If they get there \ufb01rst, when you reach out, no peach for y ou!\nProfessor: Exactly! So what should we do about it?\nStudent: Well, probably develop a better way of going about this. Mayb e form a\nline, and when you get to the front, grab a peach and get on with it.\nProfessor: Good! But what\u2019s wrong with your approach?\nStudent: Sheesh, do I have to do all the work?\nProfessor: Y es.\nStudent: OK, let me think. Well, we used to have many people grabbing fo r\npeaches all at once, which is faster . But in my way, we just go o ne at a time,\nwhich is correct, but quite a bit slower . The best kind of appr oach would be fast\nand correct, probably.\n261\n262 A D I A L O G U E O N CO N C U R R E N C Y\nProfessor: Y ou are really starting to impress. In fact, you just told us e verything\nwe need to know about concurrency! Well done.\nStudent: I did? I thought we were just talking about peaches. Remember , this\nis usually a part where you make it about computers again.\nProfessor: Indeed. My apologies! One must never forget the concrete. We ll,\nas it turns out, there are certain types of programs that we ca ll multi-threaded\napplications; each thread is kind of like an independent agent running around\nin this program, doing things on the program\u2019s behalf. But th ese threads access\nmemory, and for them, each spot of memory is kind of like one of those peaches. If\nwe don\u2019t coordinate access to memory between threads, the pr ogram won\u2019t work\nas expected. Make sense?\nStudent: Kind of. But why do we talk about this in an OS class? Isn\u2019t that just\napplication programming?\nProfessor: Good question! A few reasons, actually. First, the OS must su pport\nmulti-threaded applications with primitives such as locks and condition vari-\nables, which we\u2019ll talk about soon. Second, the OS itself was the \ufb01r st concurrent\nprogram \u2013 it must access its own memory very carefully or many strange and\nterrible things will happen. Really, it can get quite grisly .\nStudent: I see. Sounds interesting. There are more details, I imagine ?\nProfessor: Indeed there are...\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n26\nConcurrency: An Introduction\nThus far , we have seen the development of the basic abstracti ons that the\nOS performs. W e have seen how to take a single physical CPU and turn\nit into multiple virtual CPUs , thus enabling the illusion of multiple pro-\ngrams running at the same time. W e have also seen how to create the\nillusion of a large, private virtual memory for each process; this abstrac-\ntion of the address space enables each program to behave as if it has its\nown memory when indeed the OS is secretly multiplexing addre ss spaces\nacross physical memory (and sometimes, disk).\nIn this note, we introduce a new abstraction for a single runn ing pro-\ncess: that of a thread. Instead of our classic view of a single point of\nexecution within a program (i.e., a single PC where instruct ions are be-\ning fetched from and executed), a multi-threaded program has more than\none point of execution (i.e., multiple PCs,"
  },
  {
    "content": "re ss spaces\nacross physical memory (and sometimes, disk).\nIn this note, we introduce a new abstraction for a single runn ing pro-\ncess: that of a thread. Instead of our classic view of a single point of\nexecution within a program (i.e., a single PC where instruct ions are be-\ning fetched from and executed), a multi-threaded program has more than\none point of execution (i.e., multiple PCs, each of which is b eing fetched\nand executed from). Perhaps another way to think of this is th at each\nthread is very much like a separate process, except for one di fference:\nthey share the same address space and thus can access the same data.\nThe state of a single thread is thus very similar to that of a pr ocess.\nIt has a program counter (PC) that tracks where the program is fetch-\ning instructions from. Each thread has its own private set of registers it\nuses for computation; thus, if there are two threads that are running on\na single processor , when switching from running one (T1) to r unning the\nother (T2), a context switch must take place. The context switch between\nthreads is quite similar to the context switch between proce sses, as the\nregister state of T1 must be saved and the register state of T2 restored\nbefore running T2. With processes, we saved state to a process control\nblock (PCB) ; now , we\u2019ll need one or more thread control blocks (TCBs)\nto store the state of each thread of a process. There is one maj or difference,\nthough, in the context switch we perform between threads as c ompared\nto processes: the address space remains the same (i.e., ther e is no need to\nswitch which page table we are using).\nOne other major difference between threads and processes co ncerns\nthe stack. In our simple model of the address space of a classi c process\n(which we can now call a single-threaded process), there is a single stack,\nusually residing at the bottom of the address space (Figure 26.1, left).\n263\n264 CO N C U R R E N C Y: A N IN T R O D U C T I O N\n16KB\n15KB\n2KB\n1KB\n0KB\nStack\n(free)\nHeap\nProgram Code the code segment:\nwhere instructions live\nthe heap segment:\ncontains malloc\u2019d data\ndynamic data structures\n(it grows downward)\n(it grows upward)\nthe stack segment:\ncontains local variables\narguments to routines, \nreturn values, etc.\n16KB\n15KB\n2KB\n1KB\n0KB\nStack (1)\nStack (2)\n(free)\n(free)\nHeap\nProgram Code\nFigure 26.1: A Single-Threaded Address Space\nHowever , in a multi-threaded process, each thread runs inde pendently\nand of course may call into various routines to do whatever wo rk it is do-\ning. Instead of a single stack in the address space, there wil l be one per\nthread. Let\u2019s say we have a multi-threaded process that has t wo threads\nin it; the resulting address space looks different (Figure 26.1, right).\nIn this \ufb01gure, you can see two stacks spread throughout the ad dress\nspace of the process. Thus, any stack-allocated variables, parameters, re-\nturn values, and other things that we put on the stack will be p laced in\nwhat is sometimes called thread-local storage, i.e., the stack of the rele-\nvant thread.\nY ou might also notice how this ruins our beautiful address sp ace lay-\nout. Before, the stack and heap could grow independently and trouble\nonly arose when you ran out of room in the address space. Here, we\nno longer have such a nice situation. Fortunately , this is us ually OK, as\nstacks do not generally have to be very large (the exception b eing in pro-\ngrams that make heavy use of recursion).\n26.1 An Example: Thread Creation\nLet\u2019s say we wanted to run a program that created two threads, each\nof which was doing some independent work, in this case printi ng \u201cA \u201d or\n\u201cB\u201d. The code is shown in Figure 26.2.\nThe main program creates two threads, each of which will run t he\nfunction mythread(), though with different arguments"
  },
  {
    "content": "\ngrams that make heavy use of recursion).\n26.1 An Example: Thread Creation\nLet\u2019s say we wanted to run a program that created two threads, each\nof which was doing some independent work, in this case printi ng \u201cA \u201d or\n\u201cB\u201d. The code is shown in Figure 26.2.\nThe main program creates two threads, each of which will run t he\nfunction mythread(), though with different arguments (the string A or\nB). Once a thread is created, it may start running right away (d epending\non the whims of the scheduler); alternately , it may be put in a \u201cready\u201d but\nnot \u201crunning\u201d state and thus not run yet. After creating the t wo threads\n(T1 and T2), the main thread calls pthread join(), which waits for a\nparticular thread to complete.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N C U R R E N C Y: A N IN T R O D U C T I O N 265\n1 #include <stdio.h>\n2 #include <assert.h>\n3 #include <pthread.h>\n4\n5 void *mythread(void *arg) {\n6 printf(\"%s\\n\", (char *) arg);\n7 return NULL;\n8 }\n9\n10 int\n11 main(int argc, char *argv[]) {\n12 pthread_t p1, p2;\n13 br int rc;\n14 printf(\"main: begin\\n\");\n15 rc = pthread_create(&p1, NULL, mythread, \"A\"); assert(rc == 0);\n16 rc = pthread_create(&p2, NULL, mythread, \"B\"); assert(rc == 0);\n17 // join waits for the threads to finish\n18 rc = pthread_join(p1, NULL); assert(rc == 0);\n19 rc = pthread_join(p2, NULL); assert(rc == 0);\n20 printf(\"main: end\\n\");\n21 return 0;\n22 }\nFigure 26.2: Simple Thread Creation Code (t0.c)\nLet us examine the possible execution ordering of this littl e program.\nIn the execution diagram (T able\n26.1), time increases in the downwards\ndirection, and each column shows when a different thread (th e main one,\nor Thread 1, or Thread 2) is running.\nNote, however , that this ordering is not the only possible or dering. In\nfact, given a sequence of instructions, there are quite a few , depending on\nwhich thread the scheduler decides to run at a given point. Fo r example,\nonce a thread is created, it may run immediately , which would lead to the\nexecution shown in T able 26.2.\nW e also could even see \u201cB\u201d printed before \u201cA \u201d, if, say , the sch eduler\ndecided to run Thread 2 \ufb01rst even though Thread 1 was created e arlier;\nthere is no reason to assume that a thread that is created \ufb01rst will run \ufb01rst.\nT able 26.3 shows this \ufb01nal execution ordering, with Thread 2 getting to\nstrut its stuff before Thread 1.\nAs you might be able to see, one way to think about thread creat ion\nis that it is a bit like making a function call; however , inste ad of \ufb01rst ex-\necuting the function and then returning to the caller , the sy stem instead\ncreates a new thread of execution for the routine that is bein g called, and\nit runs independently of the caller , perhaps before returni ng from the cre-\nate, but perhaps much later .\nAs you also might be able to tell from this example, threads ma ke life\ncomplicated: it is already hard to tell what will run when! Co mputers are\nhard enough to understand without concurrency . Unfortunat ely , with\nconcurrency , it gets worse. Much worse.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n266 CO N C U R R E N C Y: A N IN T R O D U C T I O N\nmain Thread 1 Thread2\nstarts running\n"
  },
  {
    "content": "\nhard enough to understand without concurrency . Unfortunat ely , with\nconcurrency , it gets worse. Much worse.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n266 CO N C U R R E N C Y: A N IN T R O D U C T I O N\nmain Thread 1 Thread2\nstarts running\nprints \u201cmain: begin\u201d\ncreates Thread 1\ncreates Thread 2\nwaits for T1\nruns\nprints \u201cA \u201d\nreturns\nwaits for T2\nruns\nprints \u201cB\u201d\nreturns\nprints \u201cmain: end\u201d\nT able 26.1: Thread T race (1)\nmain Thread 1 Thread2\nstarts running\nprints \u201cmain: begin\u201d\ncreates Thread 1\nruns\nprints \u201cA \u201d\nreturns\ncreates Thread 2\nruns\nprints \u201cB\u201d\nreturns\nwaits for T1\nreturns immediately; T1 is done\nwaits for T2\nreturns immediately; T2 is done\nprints \u201cmain: end\u201d\nT able 26.2: Thread T race (2)\nmain Thread 1 Thread2\nstarts running\nprints \u201cmain: begin\u201d\ncreates Thread 1\ncreates Thread 2\nruns\nprints \u201cB\u201d\nreturns\nwaits for T1\nruns\nprints \u201cA \u201d\nreturns\nwaits for T2\nreturns immediately; T2 is done\nprints \u201cmain: end\u201d\nT able 26.3: Thread T race (3)\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N C U R R E N C Y: A N IN T R O D U C T I O N 267\n1 #include <stdio.h>\n2 #include <pthread.h>\n3 #include \"mythreads.h\"\n4\n5 static volatile int counter = 0;\n6\n7 //\n8 // mythread()\n9 //\n10 // Simply adds 1 to counter repeatedly, in a loop\n11 // No, this is not how you would add 10,000,000 to\n12 // a counter, but it shows the problem nicely.\n13 //\n14 void *\n15 mythread(void *arg)\n16 {\n17 printf(\"%s: begin\\n\", (char *) arg);\n18 int i;\n19 for (i = 0; i < 1e7; i++) {\n20 counter = counter + 1;\n21 }\n22 printf(\"%s: done\\n\", (char *) arg);\n23 return NULL;\n24 }\n25\n26 //\n27 // main()\n28 //\n29 // Just launches two threads (pthread_create)\n30 // and then waits for them (pthread_join)\n31 //\n32 int\n33 main(int argc, char *argv[])\n34 {\n35 pthread_t p1, p2;\n36 printf(\"main: begin (counter = %d)\\n\", counter);\n37 Pthread_create(&p1, NULL, mythread, \"A\");\n38 Pthread_create(&p2, NULL, mythread, \"B\");\n39\n40 // join waits for the threads to finish\n41 Pthread_join(p1, NULL);\n42 Pthread_join(p2, NULL);\n43 printf(\"main: done with both (counter = %d)\\n\", counter);\n44 return 0;\n45 }\nFigure 26.3: Sharing Data: Oh Oh (t2)\n26.2 Why It Gets W orse: Shared Data\nThe simple thread example we showed above was useful in showi ng\nhow threads are created and how they can run in different orde rs depend-\ning on how the scheduler decides to run them. What it doesn\u2019t s how you,\nthough, is how threads interact when they access shared data .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n268 CO N C U R R E N C Y: A N IN T R O D U C T I O N\nLet us imagine a simple example where two threads wish to upda te a\nglobal"
  },
  {
    "content": " doesn\u2019t s how you,\nthough, is how threads interact when they access shared data .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n268 CO N C U R R E N C Y: A N IN T R O D U C T I O N\nLet us imagine a simple example where two threads wish to upda te a\nglobal shared variable. The code we\u2019ll study is in Figure 26.3.\nHere are a few notes about the code. First, as Stevens suggest s [SR05],\nwe wrap the thread creation and join routines to simply exit o n failure;\nfor a program as simple as this one, we want to at least notice a n error\noccurred (if it did), but not do anything very smart about it ( e.g., just\nexit). Thus, Pthread create() simply calls pthread create() and\nmakes sure the return code is 0; if it isn\u2019t, Pthread create() just prints\na message and exits.\nSecond, instead of using two separate function bodies for th e worker\nthreads, we just use a single piece of code, and pass the threa d an argu-\nment (in this case, a string) so we can have each thread print a different\nletter before its messages.\nFinally , and most importantly , we can now look at what each wo rker is\ntrying to do: add a number to the shared variable counter, and do so 10\nmillion times (1e7) in a loop. Thus, the desired \ufb01nal result i s: 20,000,000.\nW e now compile and run the program, to see how it behaves. Some -\ntimes, everything works how we might expect:\nprompt> gcc -o main main.c -Wall -pthread\nprompt> ./main\nmain: begin (counter = 0)\nA: begin\nB: begin\nA: done\nB: done\nmain: done with both (counter = 20000000)\nUnfortunately , when we run this code, even on a single proces sor , we\ndon\u2019t necessarily get the desired result. Sometimes, we get :\nprompt> ./main\nmain: begin (counter = 0)\nA: begin\nB: begin\nA: done\nB: done\nmain: done with both (counter = 19345221)\nLet\u2019s try it one more time, just to see if we\u2019ve gone crazy . Aft er all,\naren\u2019t computers supposed to produce deterministic results, as you have\nbeen taught?! Perhaps your professors have been lying to you ? (gasp)\nprompt> ./main\nmain: begin (counter = 0)\nA: begin\nB: begin\nA: done\nB: done\nmain: done with both (counter = 19221041)\nNot only is each run wrong, but also yields a different result! A big\nquestion remains: why does this happen?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N C U R R E N C Y: A N IN T R O D U C T I O N 269\nTI P : K N O W AN D US E YO U R TO O L S\nY ou should always learn new tools that help you write, debug, and un-\nderstand computer systems. Here, we use a neat tool called a disassem-\nbler. When you run a disassembler on an executable, it shows you wha t\nassembly instructions make up the program. For example, if w e wish to\nunderstand the low-level code to update a counter (as in our e xample),\nwe run objdump (Linux) to see the assembly code:\nprompt> objdump -d main\nDoing so produces a long listing of all the instructions in th e program,\nneatly labeled (particularly if you compiled with the -g \ufb02ag), which in-\ncludes symbol information in the program. The objdump program is just\none of many tools you should learn how to use; a debugger like gdb,\nmemory pro\ufb01lers like valgrind or purify, and of course the compiler\nitself are others that you should spend time to learn more abo ut; the better\nyou are at using your tools, the better systems you\u2019ll be able to build.\n26."
  },
  {
    "content": "\ufffdag), which in-\ncludes symbol information in the program. The objdump program is just\none of many tools you should learn how to use; a debugger like gdb,\nmemory pro\ufb01lers like valgrind or purify, and of course the compiler\nitself are others that you should spend time to learn more abo ut; the better\nyou are at using your tools, the better systems you\u2019ll be able to build.\n26.3 The Heart of the Problem: Uncontrolled Scheduling\nT o understand why this happens, we must understand the code s e-\nquence that the compiler generates for the update to counter. In this\ncase, we wish to simply add a number (1) to counter. Thus, the code\nsequence for doing so might look something like this (in x86) ;\nmov 0x8049a1c, %eax\nadd $0x1, %eax\nmov %eax, 0x8049a1c\nThis example assumes that the variable counter is located at address\n0x8049a1c. In this three-instruction sequence, the x86 mov instruction is\nused \ufb01rst to get the memory value at the address and put it into register\neax. Then, the add is performed, adding 1 (0x1) to the contents of the\neax register , and \ufb01nally , the contents of eax are stored back into memory\nat the same address.\nLet us imagine one of our two threads (Thread 1) enters this re gion of\ncode, and is thus about to increment counter by one. It loads the value\nof counter (let\u2019s say it\u2019s 50 to begin with) into its register eax. Thus,\neax=50 for Thread 1. Then it adds one to the register; thus eax=51.\nNow , something unfortunate happens: a timer interrupt goes off; thus,\nthe OS saves the state of the currently running thread (its PC , its registers\nincluding eax, etc.) to the thread\u2019s TCB.\nNow something worse happens: Thread 2 is chosen to run, and it en-\nters this same piece of code. It also executes the \ufb01rst instru ction, getting\nthe value of counter and putting it into its eax (remember: each thread\nwhen running has its own private registers; the registers ar e virtualized\nby the context-switch code that saves and restores them). Th e value of\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n270 CO N C U R R E N C Y: A N IN T R O D U C T I O N\n(after instruction)\nOS Thread 1 Thread 2 PC %eax counter\nbefore critical section 100 0 50\nmov 0x8049a1c, %eax 105 50 50\nadd $0x1, %eax 108 51 50\ninterrupt\nsave T1\u2019s state\nrestore T2\u2019s state 100 0 50\nmov 0x8049a1c, %eax 105 50 50\nadd $0x1, %eax 108 51 50\nmov %eax, 0x8049a1c 113 51 51\ninterrupt\nsave T2\u2019s state\nrestore T1\u2019s state 108 51 50\nmov %eax, 0x8049a1c 113 51 51\nT able 26.4: The Problem: Up Close and Personal\ncounter is still 50 at this point, and thus Thread 2 has eax=50. Let\u2019s\nthen assume that Thread 2 executes the next two instructions , increment-\ning eax by 1 (thus eax=51), and then saving the contents of eax into\ncounter (address 0x8049a1c). Thus, the global variable counter now\nhas the value 51.\nFinally , another context switch occurs, and Thread 1 resume s running.\nRecall that it had just executed the mov and add, and is now about to\nperform the \ufb01nal mov instruction. Recall also that eax=51. Thus, the \ufb01nal\nmov instruction executes, and saves the value to memory; the cou nter is\nset to 51 again.\nPut simply , what has happened is this: the code to increment counter\nhas been run twice, but counter, which started at 50, is now only equal\nto 51. A \u201ccorrect\u201d version of this program should have"
  },
  {
    "content": "perform the \ufb01nal mov instruction. Recall also that eax=51. Thus, the \ufb01nal\nmov instruction executes, and saves the value to memory; the cou nter is\nset to 51 again.\nPut simply , what has happened is this: the code to increment counter\nhas been run twice, but counter, which started at 50, is now only equal\nto 51. A \u201ccorrect\u201d version of this program should have result ed in counter\nequal to 52.\nHere is a pictorial depiction of what happened and when in the ex-\nample above. Assume, for this depiction, that the above code is loaded at\naddress 100 in memory , like the following sequence (note for those of you\nused to nice, RISC-like instruction sets: x86 has variable- length instruc-\ntions; the mov instructions here take up 5 bytes of memory , whereas the\nadd takes only 3):\n100 mov 0x8049a1c, %eax\n105 add $0x1, %eax\n108 mov %eax, 0x8049a1c\nWith these assumptions, what happens is seen in T able\n26.4. Assume\nthe counter starts at value 50, and trace through this exampl e to make\nsure you understand what is going on.\nWhat we have demonstrated here is called a race condition : the results\ndepend on the timing execution of the code. With some bad luck (i.e.,\ncontext switches that occur at untimely points in the execut ion), we get\nthe wrong result. In fact, we may get a different result each t ime; thus,\ninstead of a nice deterministic computation (which we are used to from\ncomputers), we call this result indeterminate, where it is not known what\nthe output will be and it is indeed likely to be different acro ss runs.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N C U R R E N C Y: A N IN T R O D U C T I O N 271\nBecause multiple threads executing this code can result in a race con-\ndition, we call this code a critical section . A critical section is a piece of\ncode that accesses a shared variable (or more generally , a sh ared resource)\nand must not be concurrently executed by more than one thread .\nWhat we really want for this code is what we call mutual exclusion .\nThis property guarantees that if one thread is executing wit hin the critical\nsection, the others will be prevented from doing so.\nVirtually all of these terms, by the way , were coined by Edsge r Dijk-\nstra, who was a pioneer in the \ufb01eld and indeed won the T uring A w ard\nbecause of this and other work; see his 1968 paper on \u201cCoopera ting Se-\nquential Processes\u201d [D68] for an amazingly clear descripti on of the prob-\nlem. W e\u2019ll be hearing more about Dijkstra in this section of t he book.\n26.4 The Wish For Atomicity\nOne way to solve this problem would be to have more powerful in -\nstructions that, in a single step, did exactly whatever we ne eded done\nand thus removed the possibility of an untimely interrupt. F or example,\nwhat if we had a super instruction that looked like this?\nmemory-add 0x8049a1c, $0x1\nAssume this instruction adds a value to a memory location, an d the\nhardware guarantees that it executes atomically; when the instruction\nexecuted, it would perform the update as desired. It could no t be inter-\nrupted mid-instruction, because that is precisely the guar antee we receive\nfrom the hardware: when an interrupt occurs, either the inst ruction has\nnot run at all, or it has run to completion; there is no in-betw een state.\nHardware can be a beautiful thing, no?\nAtomically , in this context, means \u201cas a unit\u201d, which someti mes we\ntake as \u201call or none.\u201d What we\u2019d like is to execute the three in struction\nsequence atomically:\nmov 0x8049a1c, %eax\nadd $0x1, %eax\nmov %eax, 0x8049a1c\nAs we said, if we had"
  },
  {
    "content": "?\nAtomically , in this context, means \u201cas a unit\u201d, which someti mes we\ntake as \u201call or none.\u201d What we\u2019d like is to execute the three in struction\nsequence atomically:\nmov 0x8049a1c, %eax\nadd $0x1, %eax\nmov %eax, 0x8049a1c\nAs we said, if we had a single instruction to do this, we could j ust\nissue that instruction and be done. But in the general case, w e won\u2019t have\nsuch an instruction. Imagine we were building a concurrent B -tree, and\nwished to update it; would we really want the hardware to supp ort an\n\u201catomic update of B-tree\u201d instruction? Probably not, at lea st in a sane\ninstruction set.\nThus, what we will instead do is ask the hardware for a few usef ul\ninstructions upon which we can build a general set of what we c all syn-\nchronization primitives . By using these hardware synchronization prim-\nitives, in combination with some help from the operating sys tem, we will\nbe able to build multi-threaded code that accesses critical sections in a\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n272 CO N C U R R E N C Y: A N IN T R O D U C T I O N\nAS I D E : KE Y CO N C U R R E N C Y TE R M S\nCR I T I C A L SE C T I O N , R A C E CO N D I T I O N ,\nIN D E T E R M I N ATE , M U T U A L EX C L U S I O N\nThese four terms are so central to concurrent code that we tho ught it\nworth while to call them out explicitly . See some of Dijkstra \u2019s early work\n[D65,D68] for more details.\n\u2022 A critical section is a piece of code that accesses a shared resource,\nusually a variable or data structure.\n\u2022 A race condition arises if multiple threads of execution enter the\ncritical section at roughly the same time; both attempt to up date\nthe shared data structure, leading to a surprising (and perh aps un-\ndesirable) outcome.\n\u2022 An indeterminate program consists of one or more race conditions;\nthe output of the program varies from run to run, depending on\nwhich threads ran when. The outcome is thus not deterministic,\nsomething we usually expect from computer systems.\n\u2022 T o avoid these problems, threads should use some kind of mutual\nexclusion primitives; doing so guarantees that only a single thread\never enters a critical section, thus avoiding races, and res ulting in\ndeterministic program outputs.\nsynchronized and controlled manner , and thus reliably prod uces the cor-\nrect result despite the challenging nature of concurrent ex ecution. Pretty\nawesome, right?\nThis is the problem we will study in this section of the book. I t is a\nwonderful and hard problem, and should make your mind hurt (a bit).\nIf it doesn\u2019t, then you don\u2019t understand! Keep working until your head\nhurts; you then know you\u2019re headed in the right direction. At that point,\ntake a break; we don\u2019t want your head hurting too much.\nTH E CR U X :\nHO W TO PR O V I D E SU P P O RT FO R SY N C H R O N I Z AT I O N\nWhat support do we need from the hardware in order to build use -\nful synchronization primitives? What support do we need fro m the OS?\nHow can we build these primitives correctly and ef\ufb01ciently? How can\nprograms use them to get the desired results?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N C U R R E N C Y: A N IN T R O D U C T I O N 273\n26.5 One More Problem: W aiting For Another\nThis chapter has set up the problem of concurrency as if only o ne type\nof interaction occurs between threads, that of accessing sh ared variables\nand the need to support atomicity for critical sections."
  },
  {
    "content": " N 0. 80] W W W.O S T E P.O R G\nCO N C U R R E N C Y: A N IN T R O D U C T I O N 273\n26.5 One More Problem: W aiting For Another\nThis chapter has set up the problem of concurrency as if only o ne type\nof interaction occurs between threads, that of accessing sh ared variables\nand the need to support atomicity for critical sections. As i t turns out,\nthere is another common interaction that arises, where one t hread must\nwait for another to complete some action before it continues . This inter-\naction arises, for example, when a process performs a disk I/ O and is put\nto sleep; when the I/O completes, the process needs to be rous ed from its\nslumber so it can continue.\nThus, in the coming chapters, we\u2019ll be not only studying how t o build\nsupport for synchronization primitives to support atomici ty but also for\nmechanisms to support this type of sleeping/waking interac tion that is\ncommon in multi-threaded programs. If this doesn\u2019t make sen se right\nnow , that is OK! It will soon enough, when you read the chapter on con-\ndition variables . If it doesn\u2019t by then, well, then it is less OK, and you\nshould read that chapter again (and again) until it does make sense.\n26.6 Summary: Why in OS Class?\nBefore wrapping up, one question that you might have is: why a re we\nstudying this in OS class? \u201cHistory\u201d is the one-word answer; the OS was\nthe \ufb01rst concurrent program, and many techniques were creat ed for use\nwithin the OS. Later , with multi-threaded processes, application program-\nmers also had to consider such things.\nFor example, imagine the case where there are two processes r unning.\nAssume they both call write() to write to the \ufb01le, and both wish to\nappend the data to the \ufb01le (i.e., add the data to the end of the \ufb01 le, thus in-\ncreasing its length). T o do so, both must allocate a new block , record in the\ninode of the \ufb01le where this block lives, and change the size of the \ufb01le to re-\n\ufb02ect the new larger size (among other things; we\u2019ll learn mor e about \ufb01les\nin the third part of the book). Because an interrupt may occur at any time,\nthe code that updates to these shared structures (e.g., a bit map for alloca-\ntion, or the \ufb01le\u2019s inode) are critical sections; thus, OS des igners, from the\nvery beginning of the introduction of the interrupt, had to w orry about\nhow the OS updates internal structures. An untimely interru pt causes all\nof the problems described above. Not surprisingly , page tab les, process\nlists, \ufb01le system structures, and virtually every kernel da ta structure has\nto be carefully accessed, with the proper synchronization p rimitives, to\nwork correctly .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n274 CO N C U R R E N C Y: A N IN T R O D U C T I O N\nTI P : U S E ATO M I C OP E R AT I O N S\nAtomic operations are one of the most powerful underlying te chniques\nin building computer systems, from the computer architectu re, to concur-\nrent code (what we are studying here), to \ufb01le systems (which w e\u2019ll study\nsoon enough), database management systems, and even distri buted sys-\ntems [L+93].\nThe idea behind making a series of actions atomic is simply expressed\nwith the phrase \u201call or nothing\u201d; it should either appear as i f all of the ac-\ntions you wish to group together occurred, or that none of the m occurred,\nwith no in-between state visible. Sometimes, the grouping o f many ac-\ntions into a single atomic action is called a transaction, an idea devel-\noped in great detail in the world of databases and transactio n processing\n[GR92].\nIn our theme of exploring concurrency , we\u2019ll be using synchr onization\nprimitives to turn short"
  },
  {
    "content": " ac-\ntions you wish to group together occurred, or that none of the m occurred,\nwith no in-between state visible. Sometimes, the grouping o f many ac-\ntions into a single atomic action is called a transaction, an idea devel-\noped in great detail in the world of databases and transactio n processing\n[GR92].\nIn our theme of exploring concurrency , we\u2019ll be using synchr onization\nprimitives to turn short sequences of instructions into ato mic blocks of\nexecution, but the idea of atomicity is much bigger than that , as we will\nsee. For example, \ufb01le systems use techniques such as journal ing or copy-\non-write in order to atomically transition their on-disk st ate, critical for\noperating correctly in the face of system failures. If that d oesn\u2019t make\nsense, don\u2019t worry \u2013 it will, in some future chapter .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N C U R R E N C Y: A N IN T R O D U C T I O N 275\nReferences\n[D65] \u201cSolution of a problem in concurrent programming cont rol\u201d\nE. W . Dijkstra\nCommunications of the ACM, 8(9):569, September 1965\nPointed to as the \ufb01rst paper of Dijkstra\u2019s where he outlines t he mutual exclusion problem and a solution.\nThe solution, however , is not widely used; advanced hardwar e and OS support is needed, as we will see\nin the coming chapters.\n[D68] \u201cCooperating sequential processes\u201d\nEdsger W . Dijkstra, 1968\nA vailable: http://www .cs.utexas.edu/users/EWD/ewd01xx/EWD123.PDF\nDijkstra has an amazing number of his old papers, notes, and t houghts recorded (for posterity) on this\nwebsite at the last place he worked, the University of T exas. Much of his foundational work, however ,\nwas done years earlier while he was at the T echnische Hochshu le of Eindhoven (THE), including this\nfamous paper on \u201ccooperating sequential processes\u201d, which basically outlines all of the thinking that\nhas to go into writing multi-threaded programs. Dijkstra di scovered much of this while working on an\noperating system named after his school: the \u201cTHE\u201d operatin g system (said \u201cT\u201d, \u201cH\u201d, \u201cE\u201d, and not\nlike the word \u201cthe\u201d).\n[GR92] \u201cT ransaction Processing: Concepts and T echniques\u201d\nJim Gray and Andreas Reuter\nMorgan Kaufmann, September 1992\nThis book is the bible of transaction processing, written by one of the legends of the \ufb01eld, Jim Gray. It is,\nfor this reason, also considered Jim Gray\u2019s \u201cbrain dump\u201d, in which he wrote down everything he knows\nabout how database management systems work. Sadly, Gray pas sed away tragically a few years back,\nand many of us lost a friend and great mentor , including the co -authors of said book, who were lucky\nenough to interact with Gray during their graduate school ye ars.\n[L+93] \u201cAtomic T ransactions\u201d\nNancy Lynch, Michael Merritt, William W eihl, Alan Fekete\nMorgan Kaufmann, August 1993\nA nice text on some of the theory and practice of atomic transa ctions for distributed systems. Perhaps a\nbit formal for some, but lots of good material is found herein .\n[SR05] \u201cAdvanced Programming in the U NIX Environment\u201d\nW . Richard Stevens and Stephen A. Rago\nAddison-W esley , 2005\nAs we\u2019ve said many times, buy this book, and read it, in little chunks, preferably before going to bed.\nThis way, you will actually fall asleep more quickly; more im portantly, you learn a little more about\nhow to become a serious UNIX programmer .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n276 CO N C U R R E N C Y: A N IN T"
  },
  {
    "content": ", and read it, in little chunks, preferably before going to bed.\nThis way, you will actually fall asleep more quickly; more im portantly, you learn a little more about\nhow to become a serious UNIX programmer .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n276 CO N C U R R E N C Y: A N IN T R O D U C T I O N\nHomework\nThis program, x86.py, allows you to see how different thread inter-\nleavings either cause or avoid race conditions. See the READ ME for de-\ntails on how the program works and its basic inputs, then answ er the\nquestions below .\nQuestions\n1. T o start, let\u2019s examine a simple program, \u201cloop.s\u201d. First , just look at\nthe program, and see if you can understand it: cat loop.s. Then,\nrun it with these arguments:\n./x86.py -p loop.s -t 1 -i 100 -R dx\nTthis speci\ufb01es a single thread, an interrupt every 100 instr uctions,\nand tracing of register %dx. Can you \ufb01gure out what the value of\n%dx will be during the run? Once you have, run the same above\nand use the -c \ufb02ag to check your answers; note the answers, on\nthe left, show the value of the register (or memory value) after the\ninstruction on the right has run.\n2. Now run the same code but with these \ufb02ags:\n./x86.py -p loop.s -t 2 -i 100 -a dx=3,dx=3 -R dx\nTthis speci\ufb01es two threads, and initializes each %dx regist er to 3.\nWhat values will %dx see? Run with the -c \ufb02ag to see the answers.\nDoes the presence of multiple threads affect anything about your\ncalculations? Is there a race condition in this code?\n3. Now run the following:\n./x86.py -p loop.s -t 2 -i 3 -r -a dx=3,dx=3 -R dx\nThis makes the interrupt interval quite small and random; us e dif-\nferent seeds with -s to see different interleavings. Does the fre-\nquency of interruption change anything about this program?\n4. Next we\u2019ll examine a different program ( looping-race-nolock.s).\nThis program accesses a shared variable located at memory ad dress\n2000; we\u2019ll call this variable x for simplicity . Run it with a single\nthread and make sure you understand what it does, like this:\n./x86.py -p looping-race-nolock.s -t 1 -M 2000\nWhat value is found in x (i.e., at memory address 2000) throughout\nthe run? Use -c to check your answer .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N C U R R E N C Y: A N IN T R O D U C T I O N 277\n5. Now run with multiple iterations and threads:\n./x86.py -p looping-race-nolock.s -t 2 -a bx=3 -M 2000\nDo you understand why the code in each thread loops three time s?\nWhat will the \ufb01nal value of x be?\n6. Now run with random interrupt intervals:\n./x86.py -p looping-race-nolock.s -t 2 -M 2000 -i 4 -r -s 0\nThen change the random seed, setting -s 1, then -s 2, etc. Can\nyou tell, just by looking at the thread interleaving, what th e \ufb01nal\nvalue of x will be? Does the exact location of the interrupt matter?\nWhere can it safely occur? Where does an interrupt cause trou ble?\nIn other words, where is the critical section exactly?\n7. Now use a \ufb01xed interrupt interval to explore the program fu rther .\nRun:\n./x86.py -p looping-race-nolock.s -a bx=1 -t 2 -M 2000 -i 1\nSee if you can"
  },
  {
    "content": " be? Does the exact location of the interrupt matter?\nWhere can it safely occur? Where does an interrupt cause trou ble?\nIn other words, where is the critical section exactly?\n7. Now use a \ufb01xed interrupt interval to explore the program fu rther .\nRun:\n./x86.py -p looping-race-nolock.s -a bx=1 -t 2 -M 2000 -i 1\nSee if you can guess what the \ufb01nal value of the shared variable\nx will be. What about when you change -i 2, -i 3, etc.? For\nwhich interrupt intervals does the program give the \u201ccorrec t\u201d \ufb01nal\nanswer?\n8. Now run the same code for more loops (e.g., set -a bx=100). What\ninterrupt intervals, set with the -i \ufb02ag, lead to a \u201ccorrect\u201d outcome?\nWhich intervals lead to surprising results?\n9. W e\u2019ll examine one last program in this homework ( wait-for-me.s).\nRun the code like this:\n./x86.py -p wait-for-me.s -a ax=1,ax=0 -R ax -M 2000\nThis sets the %ax register to 1 for thread 0, and 0 for thread 1, and\nwatches the value of %ax and memory location 2000 throughout\nthe run. How should the code behave? How is the value at locati on\n2000 being used by the threads? What will its \ufb01nal value be?\n10. Now switch the inputs:\n./x86.py -p wait-for-me.s -a ax=0,ax=1 -R ax -M 2000\nHow do the threads behave? What is thread 0 doing? How would\nchanging the interrupt interval (e.g., -i 1000, or perhaps to use\nrandom intervals) change the trace outcome? Is the program e f\ufb01-\nciently using the CPU?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n27\nInterlude: Thread API\nThis chapter brie\ufb02y covers the main portions of the thread AP I. Each part\nwill be explained further in the subsequent chapters, as we s how how\nto use the API. More details can be found in various books and o nline\nsources [B97, B+96, K+96]. W e should note that the subsequen t chapters\nintroduce the concepts of locks and condition variables mor e slowly , with\nmany examples; this chapter is thus better used as a referenc e.\nCR U X : H O W TO CR E AT E AN D CO N T R O L TH R E A D S\nWhat interfaces should the OS present for thread creation an d control?\nHow should these interfaces be designed to enable ease of use as well as\nutility?\n27.1 Thread Creation\nThe \ufb01rst thing you have to be able to do to write a multi-thread ed\nprogram is to create new threads, and thus some kind of thread creation\ninterface must exist. In POSIX, it is easy:\n#include <pthread.h>\nint\npthread_create( pthread_t * thread,\nconst pthread_attr_t * attr,\nvoid * (*start_routine)(void*),\nvoid * arg);\nThis declaration might look a little complex (particularly if you haven\u2019t\nused function pointers in C), but actually it\u2019s not too bad. T here are\nfour arguments: thread, attr, start\nroutine, and arg. The \ufb01rst,\nthread, is a pointer to a structure of type pthread t; we\u2019ll use this\nstructure to interact with this thread, and thus we need to pa ss it to\npthread create() in order to initialize it.\n279\n280 IN T E R L U D E : T H R E A D API\nThe second argument, attr, is used to specify any attributes this thread\nmight have. Some examples include setting the stack size or p erhaps in-\nformation about the scheduling priority of the thread. An at tribute is\ninitialized with a separate call to pthread attr init(); see the man-\nual page for details. However , in most cases, the defaults wi ll be \ufb01ne; in\nthis case, we will simply pass the value NULL in.\nThe third argument"
  },
  {
    "content": ", attr, is used to specify any attributes this thread\nmight have. Some examples include setting the stack size or p erhaps in-\nformation about the scheduling priority of the thread. An at tribute is\ninitialized with a separate call to pthread attr init(); see the man-\nual page for details. However , in most cases, the defaults wi ll be \ufb01ne; in\nthis case, we will simply pass the value NULL in.\nThe third argument is the most complex, but is really just ask ing: which\nfunction should this thread start running in? In C, we call th is a function\npointer, and this one tells us the following is expected: a function n ame\n(start routine), which is passed a single argument of type void * (as\nindicated in the parentheses after start routine), and which returns a\nvalue of type void * (i.e., a void pointer ).\nIf this routine instead required an integer argument, inste ad of a void\npointer , the declaration would look like this:\nint pthread_create(..., // first two args are the same\nvoid * (*start_routine)(int),\nint arg);\nIf instead the routine took a void pointer as an argument, but returned\nan integer , it would look like this:\nint pthread_create(..., // first two args are the same\nint ( *start_routine)(void *),\nvoid * arg);\nFinally , the fourth argument, arg, is exactly the argument to be passed\nto the function where the thread begins execution. Y ou might ask: why\ndo we need these void pointers? W ell, the answer is quite simp le: having\na void pointer as an argument to the function start\nroutine allows us\nto pass in any type of argument; having it as a return value allows the\nthread to return any type of result.\nLet\u2019s look at an example in Figure 27.1. Here we just create a thread\nthat is passed two arguments, packaged into a single type we d e\ufb01ne our-\nselves ( myarg t). The thread, once created, can simply cast its argument\nto the type it expects and thus unpack the arguments as desire d.\nAnd there it is! Once you create a thread, you really have anot her\nlive executing entity , complete with its own call stack, run ning within the\nsame address space as all the currently existing threads in the pr ogram.\nThe fun thus begins!\n27.2 Thread Completion\nThe example above shows how to create a thread. However , what\nhappens if you want to wait for a thread to complete? Y ou need t o do\nsomething special in order to wait for completion; in partic ular , you must\ncall the routine pthread join().\nint pthread_join(pthread_t thread, void **value_ptr);\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : T H R E A D API 281\n1 #include <pthread.h>\n2\n3 typedef struct __myarg_t {\n4 int a;\n5 int b;\n6 } myarg_t;\n7\n8 void *mythread(void *arg) {\n9 myarg_t *m = (myarg_t *) arg;\n10 printf(\"%d %d\\n\", m->a, m->b);\n11 return NULL;\n12 }\n13\n14 int\n15 main(int argc, char *argv[]) {\n16 pthread_t p;\n17 int rc;\n18\n19 myarg_t args;\n20 args.a = 10;\n21 args.b = 20;\n22 rc = pthread_create(&p, NULL, mythread, &args);\n23 ...\n24 }\nFigure 27.1: Creating a Thread\nThis routine takes only two arguments. The \ufb01rst is of type pthread\nt,\nand is used to specify which thread to wait for . This value is e xactly what\nyou passed into the thread library during creation; if you he ld onto it,\nyou can now use it to wait for the thread to stop running.\nThe second argument is a pointer to the return value you expec t to get\nback. Because the routine can return anything, it is de\ufb01ned t o return a\npointer to void; because the pthread join() routine"
  },
  {
    "content": " is used to specify which thread to wait for . This value is e xactly what\nyou passed into the thread library during creation; if you he ld onto it,\nyou can now use it to wait for the thread to stop running.\nThe second argument is a pointer to the return value you expec t to get\nback. Because the routine can return anything, it is de\ufb01ned t o return a\npointer to void; because the pthread join() routine changes the value\nof the passed in argument, you need to pass in a pointer to that value, not\njust the value itself.\nLet\u2019s look at another example (Figure 27.2). In the code, a single thread\nis again created, and passed a couple of arguments via the myarg t struc-\nture. T o return values, the myret t type is used. Once the thread is\n\ufb01nished running, the main thread, which has been waiting ins ide of the\npthread join() routine1, then returns, and we can access the values\nreturned from the thread, namely whatever is in myret t.\nA few things to note about this example. First, often times we don\u2019t\nhave to do all of this painful packing and unpacking of argume nts. For\nexample, if we just create a thread with no arguments, we can p ass NULL\nin as an argument when the thread is created. Similarly , we ca n pass NULL\ninto pthread join() if we don\u2019t care about the return value.\nSecond, if we are just passing in a single value (e.g., an int) , we don\u2019t\nhave to package it up as an argument. Figure 27.3 shows an example. In\n1 Note we use wrapper functions here; speci\ufb01cally , we call Mal loc(), Pthread join(), and\nPthread create(), which just call their similarly-named lower-cas e versions and make sure the\nroutines did not return anything unexpected.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n282 IN T E R L U D E : T H R E A D API\n1 #include <stdio.h>\n2 #include <pthread.h>\n3 #include <assert.h>\n4 #include <stdlib.h>\n5\n6 typedef struct __myarg_t {\n7 int a;\n8 int b;\n9 } myarg_t;\n10\n11 typedef struct __myret_t {\n12 int x;\n13 int y;\n14 } myret_t;\n15\n16 void *mythread(void *arg) {\n17 myarg_t *m = (myarg_t *) arg;\n18 printf(\"%d %d\\n\", m->a, m->b);\n19 myret_t *r = Malloc(sizeof(myret_t));\n20 r->x = 1;\n21 r->y = 2;\n22 return (void *) r;\n23 }\n24\n25 int\n26 main(int argc, char *argv[]) {\n27 int rc;\n28 pthread_t p;\n29 myret_t *m;\n30\n31 myarg_t args;\n32 args.a = 10;\n33 args.b = 20;\n34 Pthread_create(&p, NULL, mythread, &args);\n35 Pthread_join(p, (void **) &m);\n36 printf(\"returned %d %d\\n\", m->x, m->y);\n37 return 0;\n38 }\nFigure 27.2: W aiting for Thread Completion\nthis case, life is a bit simpler , as we don\u2019t have to package ar guments and\nreturn values inside of structures.\nThird, we should note that one has to be extremely careful wit h how\nvalues are returned from a thread. In particular , never retu rn a pointer\nwhich refers to something allocated on the thread\u2019s call sta ck. If you do,\nwhat do you think will happen? (think about it!) Here is an exa mple of a\ndangerous piece of code, modi\ufb01ed from the example in Figure\n27.2.\n1 void *mythread(void *arg) {\n2 myarg_t *m = (myarg_t *) arg;\n3 printf(\"%d %d\\"
  },
  {
    "content": " allocated on the thread\u2019s call sta ck. If you do,\nwhat do you think will happen? (think about it!) Here is an exa mple of a\ndangerous piece of code, modi\ufb01ed from the example in Figure\n27.2.\n1 void *mythread(void *arg) {\n2 myarg_t *m = (myarg_t *) arg;\n3 printf(\"%d %d\\n\", m->a, m->b);\n4 myret_t r; // ALLOCATED ON STACK: BAD!\n5 r.x = 1;\n6 r.y = 2;\n7 return (void *) &r;\n8 }\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : T H R E A D API 283\nvoid *mythread(void *arg) {\nint m = (int) arg;\nprintf(\"%d\\n\", m);\nreturn (void *) (arg + 1);\n}\nint main(int argc, char *argv[]) {\npthread_t p;\nint rc, m;\nPthread_create(&p, NULL, mythread, (void *) 100);\nPthread_join(p, (void **) &m);\nprintf(\"returned %d\\n\", m);\nreturn 0;\n}\nFigure 27.3: Simpler Argument Passing to a Thread\nIn this case, the variable r is allocated on the stack of mythread. How-\never , when it returns, the value is automatically deallocat ed (that\u2019s why\nthe stack is so easy to use, after all!), and thus, passing bac k a pointer to\na now deallocated variable will lead to all sorts of bad resul ts. Certainly ,\nwhen you print out the values you think you returned, you\u2019ll p robably\n(but not necessarily!) be surprised. T ry it and \ufb01nd out for yo urself2!\nFinally , you might notice that the use of pthread\ncreate() to create\na thread, followed by an immediate call to pthread join(), is a pretty\nstrange way to create a thread. In fact, there is an easier way to accom-\nplish this exact task; it\u2019s called a procedure call . Clearly , we\u2019ll usually be\ncreating more than just one thread and waiting for it to compl ete, other-\nwise there is not much purpose to using threads at all.\nW e should note that not all code that is multi-threaded uses t he join\nroutine. For example, a multi-threaded web server might cre ate a number\nof worker threads, and then use the main thread to accept requ ests and\npass them to the workers, inde\ufb01nitely . Such long-lived prog rams thus\nmay not need to join. However , a parallel program that create s threads\nto execute a particular task (in parallel) will likely use jo in to make sure\nall such work completes before exiting or moving onto the nex t stage of\ncomputation.\n27.3 Locks\nBeyond thread creation and join, probably the next most usef ul set of\nfunctions provided by the POSIX threads library are those fo r providing\nmutual exclusion to a critical section via locks. The most basic pair of\nroutines to use for this purpose is provided by this pair of ro utines:\nint pthread_mutex_lock(pthread_mutex_t *mutex);\nint pthread_mutex_unlock(pthread_mutex_t *mutex);\n2 Fortunately the compiler gcc will likely complain when you write code like this, which\nis yet another reason to pay attention to compiler warnings.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n284 IN T E R L U D E : T H R E A D API\nThe routines should be easy to understand and use. When you ha ve a\nregion of code you realize is a critical section , and thus needs to be pro-\ntected by locks in order to operate as desired. Y ou can probab ly imagine\nwhat the code looks like:\npthread_mutex_t lock;\npthread_mutex_lock(&lock);\nx"
  },
  {
    "content": " IN T E R L U D E : T H R E A D API\nThe routines should be easy to understand and use. When you ha ve a\nregion of code you realize is a critical section , and thus needs to be pro-\ntected by locks in order to operate as desired. Y ou can probab ly imagine\nwhat the code looks like:\npthread_mutex_t lock;\npthread_mutex_lock(&lock);\nx = x + 1; // or whatever your critical section is\npthread_mutex_unlock(&lock);\nThe intent of the code is as follows: if no other thread holds t he lock\nwhen pthread\nmutex lock() is called, the thread will acquire the lock\nand enter the critical section. If another thread does indee d hold the lock,\nthe thread trying to grab the lock will not return from the cal l until it has\nacquired the lock (implying that the thread holding the lock has released\nit via the unlock call). Of course, many threads may be stuck w aiting\ninside the lock acquisition function at a given time; only th e thread with\nthe lock acquired, however , should call unlock.\nUnfortunately , this code is broken, in two important ways. T he \ufb01rst\nproblem is a lack of proper initialization . All locks must be properly\ninitialized in order to guarantee that they have the correct values to begin\nwith and thus work as desired when lock and unlock are called.\nWith POSIX threads, there are two ways to initialize locks. O ne way\nto do this is to use PTHREAD MUTEX INITIALIZER, as follows:\npthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;\nDoing so sets the lock to the default values and thus makes the lock\nusable. The dynamic way to do it (i.e., at run time) is to make a call to\npthread mutex init(), as follows:\nint rc = pthread_mutex_init(&lock, NULL);\nassert(rc == 0); // always check success!\nThe \ufb01rst argument to this routine is the address of the lock it self, whereas\nthe second is an optional set of attributes. Read more about t he attributes\nyourself; passing NULL in simply uses the defaults. Either way works, but\nwe usually use the dynamic (latter) method. Note that a corre sponding\ncall to pthread\ncond destroy() should also be made, when you are\ndone with the lock; see the manual page for all of details.\nThe second problem with the code above is that it fails to chec k errors\ncode when calling lock and unlock. Just like virtually any li brary rou-\ntine you call in a U N I X system, these routines can also fail! If your code\ndoesn\u2019t properly check error codes, the failure will happen silently , which\nin this case could allow multiple threads into a critical sec tion. Minimally ,\nuse wrappers, which assert that the routine succeeded (e.g. , as in Fig-\nure 27.4); more sophisticated (non-toy) programs, which can\u2019t simp ly exit\nwhen something goes wrong, should check for failure and do so mething\nappropriate when the lock or unlock does not succeed.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : T H R E A D API 285\n// Use this to keep your code clean but check for failures\n// Only use if exiting program is OK upon failure\nvoid Pthread_mutex_lock(pthread_mutex_t *mutex) {\nint rc = pthread_mutex_lock(mutex);\nassert(rc == 0);\n}\nFigure 27.4: An Example W rapper\nThe lock and unlock routines are not the only routines that pt hreads\nhas to interact with locks. In particular , here are two more r outines which\nmay be of interest:\nint pthread_mutex_trylock(pthread_mutex_t *mutex);\nint pthread_mutex_timedlock(pthread_mutex_t *mutex,\nstruct timespec *abs_timeout);\nThese two calls are used in lock acquisition. The trylock version re-\nturns failure if the lock is already held; the timedlock version of acquir-\ning a lock"
  },
  {
    "content": " which\nmay be of interest:\nint pthread_mutex_trylock(pthread_mutex_t *mutex);\nint pthread_mutex_timedlock(pthread_mutex_t *mutex,\nstruct timespec *abs_timeout);\nThese two calls are used in lock acquisition. The trylock version re-\nturns failure if the lock is already held; the timedlock version of acquir-\ning a lock returns after a timeout or after acquiring the lock , whichever\nhappens \ufb01rst. Thus, the timedlock with a timeout of zero dege nerates\nto the trylock case. Both of these versions should generally be avoided;\nhowever , there are a few cases where avoiding getting stuck ( perhaps in-\nde\ufb01nitely) in a lock acquisition routine can be useful, as we \u2019ll see in future\nchapters (e.g., when we study deadlock).\n27.4 Condition V ariables\nThe other major component of any threads library , and certai nly the\ncase with POSIX threads, is the presence of a condition variable . Con-\ndition variables are useful when some kind of signaling must take place\nbetween threads, if one thread is waiting for another to do so mething be-\nfore it can continue. T wo primary routines are used by progra ms wishing\nto interact in this way:\nint pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex);\nint pthread_cond_signal(pthread_cond_t *cond);\nT o use a condition variable, one has to in addition have a lock that is\nassociated with this condition. When calling either of the a bove routines,\nthis lock should be held.\nThe \ufb01rst routine, pthread\ncond wait(), puts the calling thread to\nsleep, and thus waits for some other thread to signal it, usua lly when\nsomething in the program has changed that the now-sleeping t hread might\ncare about. For example, a typical usage looks like this:\npthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;\npthread_cond_t init = PTHREAD_COND_INITIALIZER;\nPthread_mutex_lock(&lock);\nwhile (initialized == 0)\nPthread_cond_wait(&init, &lock);\nPthread_mutex_unlock(&lock);\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n286 IN T E R L U D E : T H R E A D API\nIn this code, after initialization of the relevant lock and c ondition3 ,\na thread checks to see if the variable initialized has yet been set to\nsomething other than zero. If not, the thread simply calls th e wait routine\nin order to sleep until some other thread wakes it.\nThe code to wake a thread, which would run in some other thread ,\nlooks like this:\nPthread_mutex_lock(&lock);\ninitialized = 1;\nPthread_cond_signal(&init);\nPthread_mutex_unlock(&lock);\nA few things to note about this code sequence. First, when sig nal-\ning (as well as when modifying the global variable initialized), we\nalways make sure to have the lock held. This ensures that we do n\u2019t acci-\ndentally introduce a race condition into our code.\nSecond, you might notice that the wait call takes a lock as its second\nparameter , whereas the signal call only takes a condition. T he reason\nfor this difference is that the wait call, in addition to putt ing the call-\ning thread to sleep, releases the lock when putting said caller to sleep.\nImagine if it did not: how could the other thread acquire the l ock and\nsignal it to wake up? However , before returning after being woken, the\npthread\ncond wait() re-acquires the lock, thus ensuring that any time\nthe waiting thread is running between the lock acquire at the beginning\nof the wait sequence, and the lock release at the end, it holds the lock.\nOne last oddity: the waiting thread re-checks the condition in a while\nloop, instead of a simple if statement. W e\u2019ll discuss this is sue in detail\nwhen we study condition variables in a future chapter , but in"
  },
  {
    "content": "thread\ncond wait() re-acquires the lock, thus ensuring that any time\nthe waiting thread is running between the lock acquire at the beginning\nof the wait sequence, and the lock release at the end, it holds the lock.\nOne last oddity: the waiting thread re-checks the condition in a while\nloop, instead of a simple if statement. W e\u2019ll discuss this is sue in detail\nwhen we study condition variables in a future chapter , but in general,\nusing a while loop is the simple and safe thing to do. Although it rechecks\nthe condition (perhaps adding a little overhead), there are some pthread\nimplementations that could spuriously wake up a waiting thr ead; in such\na case, without rechecking, the waiting thread will continu e thinking that\nthe condition has changed even though it has not. It is safer t hus to view\nwaking up as a hint that something might have changed, rather than an\nabsolute fact.\nNote that sometimes it is tempting to use a simple \ufb02ag to signa l be-\ntween two threads, instead of a condition variable and assoc iated lock.\nFor example, we could rewrite the waiting code above to look m ore like\nthis in the waiting code:\nwhile (initialized == 0)\n; // spin\nThe associated signaling code would look like this:\ninitialized = 1;\n3 Note that one could use pthread cond init() (and correspond-\ning the pthread cond destroy() call) instead of the static initializer\nPTHREAD COND INITIALIZER. Sound like more work? It is.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : T H R E A D API 287\nDon\u2019t ever do this, for the following reasons. First, it perf orms poorly\nin many cases (spinning for a long time just wastes CPU cycles ). Sec-\nond, it is error prone. As recent research shows [X+10], it is surprisingly\neasy to make mistakes when using \ufb02ags (as above) to synchroni ze be-\ntween threads; roughly half the uses of these ad hoc synchronizations were\nbuggy! Don\u2019t be lazy; use condition variables even when you t hink you\ncan get away without doing so.\n27.5 Compiling and Running\nAll of the code examples in this chapter are relatively easy t o get up\nand running. T o compile them, you must include the header pthread.h\nin your code. On the link line, you must also explicitly link w ith the\npthreads library , by adding the -pthread \ufb02ag.\nFor example, to compile a simple multi-threaded program, al l you\nhave to do is the following:\nprompt> gcc -o main main.c -Wall -pthread\nAs long as main.c includes the pthreads header , you have now suc-\ncessfully compiled a concurrent program. Whether it works o r not, as\nusual, is a different matter entirely .\n27.6 Summary\nW e have introduced the basics of the pthread library , includ ing thread\ncreation, building mutual exclusion via locks, and signali ng and waiting\nvia condition variables. Y ou don\u2019t need much else to write ro bust and\nef\ufb01cient multi-threaded code, except patience and a great d eal of care!\nW e now end the chapter with a set of tips that might be useful to you\nwhen you write multi-threaded code (see the aside on the foll owing page\nfor details). There are other aspects of the API that are inte resting; if you\nwant more information, type man -k pthread on a Linux system to\nsee over one hundred APIs that make up the entire interface. H owever ,\nthe basics discussed herein should enable you to build sophi sticated (and\nhopefully , correct and performant) multi-threaded progra ms. The hard\npart with threads is not the APIs, but rather the tricky logic of how you\nbuild concurrent programs. Read on to learn more.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n288 IN T E R L U D E : T H R E A D API\nAS I D E : TH R E A D API G U I D E L I N E"
  },
  {
    "content": " with threads is not the APIs, but rather the tricky logic of how you\nbuild concurrent programs. Read on to learn more.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n288 IN T E R L U D E : T H R E A D API\nAS I D E : TH R E A D API G U I D E L I N E S\nThere are a number of small but important things to remember w hen\nyou use the POSIX thread library (or really , any thread libra ry) to build a\nmulti-threaded program. They are:\n\u2022 Keep it simple. Above all else, any code to lock or signal between\nthreads should be as simple as possible. T ricky thread inter actions\nlead to bugs.\n\u2022 Minimize thread interactions. T ry to keep the number of ways\nin which threads interact to a minimum. Each interaction sho uld\nbe carefully thought out and constructed with tried and true ap-\nproaches (many of which we will learn about in the coming chap -\nters).\n\u2022 Initialize locks and condition variables. Failure to do so will lead\nto code that sometimes works and sometimes fails in very stra nge\nways.\n\u2022 Check your return codes. Of course, in any C and U N I X program-\nming you do, you should be checking each and every return code ,\nand it\u2019s true here as well. Failure to do so will lead to bizarr e and\nhard to understand behavior , making you likely to (a) scream , (b)\npull some of your hair out, or (c) both.\n\u2022 Be careful with how you pass arguments to, and return values\nfrom, threads. In particular , any time you are passing a reference to\na variable allocated on the stack, you are probably doing som ething\nwrong.\n\u2022 Each thread has its own stack. As related to the point above, please\nremember that each thread has its own stack. Thus, if you have a\nlocally-allocated variable inside of some function a threa d is exe-\ncuting, it is essentially private to that thread; no other thread can\n(easily) access it. T o share data between threads, the value s must be\nin the heap or otherwise some locale that is globally accessible.\n\u2022 Always use condition variables to signal between threads. While\nit is often tempting to use a simple \ufb02ag, don\u2019t do it.\n\u2022 Use the manual pages. On Linux, in particular , the pthread man\npages are highly informative and discuss much of the nuances pre-\nsented here, often in even more detail. Read them carefully!\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : T H R E A D API 289\nReferences\n[B97] \u201cProgramming with POSIX Threads\u201d\nDavid R. Butenhof\nAddison-W esley , May 1997\nAnother one of these books on threads.\n[B+96] \u201cPThreads Programming:\nA POSIX Standard for Better Multiprocessing\u201d\nDick Buttlar , Jacqueline Farrell, Bradford Nichols\nO\u2019Reilly , September 1996\nA reasonable book from the excellent, practical publishing house O\u2019Reilly. Our bookshelves certainly\ncontain a great deal of books from this company, including so me excellent offerings on Perl, Python, and\nJavascript (particularly Crockford\u2019s \u201cJavascript: The Go od Parts\u201d.)\n[K+96] \u201cProgramming With Threads\u201d\nSteve Kleiman, Devang Shah, Bart Smaalders\nPrentice Hall, January 1996\nProbably one of the better books in this space. Get it at your l ocal library.\n[X+10] \u201cAd Hoc Synchronization Considered Harmful\u201d\nW eiwei Xiong, Soyeon Park, Jiaqi Zhang, Y uanyuan Zhou, Zhiq iang Ma\nOSDI 2010, V ancouver , Canada\nThis paper shows how seemingly simple synchronization code can lead to a surprising number of bugs.\nUse condition variables and do the signaling correctly!\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n28\nLocks\nFrom"
  },
  {
    "content": ", Jiaqi Zhang, Y uanyuan Zhou, Zhiq iang Ma\nOSDI 2010, V ancouver , Canada\nThis paper shows how seemingly simple synchronization code can lead to a surprising number of bugs.\nUse condition variables and do the signaling correctly!\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n28\nLocks\nFrom the introduction to concurrency , we saw one of the funda mental\nproblems in concurrent programming: we would like to execut e a series\nof instructions atomically , but due to the presence of inter rupts on a single\nprocessor (or multiple threads executing on multiple proce ssors concur-\nrently), we couldn\u2019t. In this chapter , we thus attack this pr oblem directly ,\nwith the introduction of something referred to as a lock. Programmers\nannotate source code with locks, putting them around critic al sections,\nand thus ensure that any such critical section executes as if it were a sin-\ngle atomic instruction.\n28.1 Locks: The Basic Idea\nAs an example, assume our critical section looks like this, t he canonical\nupdate of a shared variable:\nbalance = balance + 1;\nOf course, other critical sections are possible, such as add ing an ele-\nment to a linked list or other more complex updates to shared s tructures,\nbut we\u2019ll just keep to this simple example for now . T o use a loc k, we add\nsome code around the critical section like this:\n1 lock_t mutex; // some globally-allocated lock \u2019mutex\u2019\n2 ...\n3 lock(&mutex);\n4 balance = balance + 1;\n5 unlock(&mutex);\nA lock is just a variable, and thus to use one, you must declare a lock\nvariable of some kind (such as mutex above). This lock variable (or just\n\u201clock\u201d for short) holds the state of the lock at any instant in time. It is ei-\nther available (or unlocked or free) and thus no thread holds the lock, or\nacquired (or locked or held), and thus exactly one thread holds the lock\nand presumably is in a critical section. W e could store other information\n291\n292 LO C K S\nin the data type as well, such as which thread holds the lock, o r a queue\nfor ordering lock acquisition, but information like that is hidden from the\nuser of the lock.\nThe semantics of the lock() and unlock() routines are simple. Call-\ning the routine lock() tries to acquire the lock; if no other thread holds\nthe lock (i.e., it is free), the thread will acquire the lock a nd enter the crit-\nical section; this thread is sometimes said to be the owner of the lock. If\nanother thread then calls lock() on that same lock variable ( mutex in\nthis example), it will not return while the lock is held by ano ther thread;\nin this way , other threads are prevented from entering the cr itical section\nwhile the \ufb01rst thread that holds the lock is in there.\nOnce the owner of the lock calls unlock(), the lock is now available\n(free) again. If no other threads are waiting for the lock (i. e., no other\nthread has called lock() and is stuck therein), the state of the lock is\nsimply changed to free. If there are waiting threads (stuck i n lock()),\none of them will (eventually) notice (or be informed of) this change of the\nlock\u2019s state, acquire the lock, and enter the critical secti on.\nLocks provide some minimal amount of control over schedulin g to\nprogrammers. In general, we view threads as entities create d by the pro-\ngrammer but scheduled by the OS, in any fashion that the OS cho oses.\nLocks yield some of that control back to the programmer; by pu tting\na lock around a section of code, the programmer can guarantee that no\nmore than a single thread can ever be active within that code. Thus locks\nhelp transform the chaos that is traditional OS scheduling i nto a more\ncontrolled activity .\n28.2 Pthread Locks\nThe name that the POSIX library uses for a lock is a mutex, as it is used\nto provide mutual exclusion between threads, i.e., if one thread is in the\ncritical section, it excludes the others from entering unti l it has completed\nthe section. Thus, when you"
  },
  {
    "content": " can ever be active within that code. Thus locks\nhelp transform the chaos that is traditional OS scheduling i nto a more\ncontrolled activity .\n28.2 Pthread Locks\nThe name that the POSIX library uses for a lock is a mutex, as it is used\nto provide mutual exclusion between threads, i.e., if one thread is in the\ncritical section, it excludes the others from entering unti l it has completed\nthe section. Thus, when you see the following POSIX threads c ode, you\nshould understand that it is doing the same thing as above (we again use\nour wrappers that check for errors upon lock and unlock):\n1 pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;\n2\n3 Pthread_mutex_lock(&lock); // wrapper for pthread_mutex _lock()\n4 balance = balance + 1;\n5 Pthread_mutex_unlock(&lock);\nY ou might also notice here that the POSIX version passes a var iable\nto lock and unlock, as we may be using different locks to protect different\nvariables. Doing so can increase concurrency: instead of on e big lock that\nis used any time any critical section is accessed (a coarse-grained locking\nstrategy), one will often protect different data and data st ructures with\ndifferent locks, thus allowing more threads to be in locked c ode at once\n(a more \ufb01ne-grained approach).\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C K S 293\n28.3 Building A Lock\nBy now , you should have some understanding of how a lock works ,\nfrom the perspective of a programmer . But how should we build a lock?\nWhat hardware support is needed? What OS support? It is this s et of\nquestions we address in the rest of this chapter .\nThe Crux: H O W TO BU I L D A L O C K\nHow can we build an ef\ufb01cient lock? Ef\ufb01cient locks provided mu tual\nexclusion at low cost, and also might attain a few other prope rties we\ndiscuss below . What hardware support is needed? What OS supp ort?\nT o build a working lock, we will need some help from our old fri end,\nthe hardware, as well as our good pal, the OS. Over the years, a num-\nber of different hardware primitives have been added to the i nstruction\nsets of various computer architectures; while we won\u2019t stud y how these\ninstructions are implemented (that, after all, is the topic of a computer\narchitecture class), we will study how to use them in order to build a mu-\ntual exclusion primitive like a lock. W e will also study how t he OS gets\ninvolved to complete the picture and enable us to build a soph isticated\nlocking library .\n28.4 Evaluating Locks\nBefore building any locks, we should \ufb01rst understand what ou r goals\nare, and thus we ask how to evaluate the ef\ufb01cacy of a particula r lock\nimplementation. T o evaluate whether a lock works (and works well), we\nshould \ufb01rst establish some basic criteria. The \ufb01rst is wheth er the lock does\nits basic task, which is to provide mutual exclusion . Basically , does the\nlock work, preventing multiple threads from entering a crit ical section?\nThe second is fairness. Does each thread contending for the lock get\na fair shot at acquiring it once it is free? Another way to look at this is\nby examining the more extreme case: does any thread contendi ng for the\nlock starve while doing so, thus never obtaining it?\nThe \ufb01nal criterion is performance, speci\ufb01cally the time overheads added\nby using the lock. There are a few different cases that are wor th con-\nsidering here. One is the case of no contention; when a single thread\nis running and grabs and releases the lock, what is the overhe ad of do-\ning so? Another is the case where multiple threads are conten ding for\nthe lock on a single CPU; in this case, are there performance c oncerns? Fi-\nnally , how does the lock perform when there are multiple CPUs involved,\nand threads on each contending for the lock? By comparing the se"
  },
  {
    "content": ". One is the case of no contention; when a single thread\nis running and grabs and releases the lock, what is the overhe ad of do-\ning so? Another is the case where multiple threads are conten ding for\nthe lock on a single CPU; in this case, are there performance c oncerns? Fi-\nnally , how does the lock perform when there are multiple CPUs involved,\nand threads on each contending for the lock? By comparing the se differ-\nent scenarios, we can better understand the performance imp act of using\nvarious locking techniques, as described below .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n294 LO C K S\n28.5 Controlling Interrupts\nOne of the earliest solutions used to provide mutual exclusi on was\nto disable interrupts for critical sections; this solution was invented for\nsingle-processor systems. The code would look like this:\n1 void lock() {\n2 DisableInterrupts();\n3 }\n4 void unlock() {\n5 EnableInterrupts();\n6 }\nAssume we are running on such a single-processor system. By t urn-\ning off interrupts (using some kind of special hardware inst ruction) be-\nfore entering a critical section, we ensure that the code ins ide the critical\nsection will not be interrupted, and thus will execute as if it were atomic.\nWhen we are \ufb01nished, we re-enable interrupts (again, via a ha rdware in-\nstruction) and thus the program proceeds as usual.\nThe main positive of this approach is its simplicity . Y ou cer tainly don\u2019t\nhave to scratch your head too hard to \ufb01gure out why this works. Without\ninterruption, a thread can be sure that the code it executes w ill execute\nand that no other thread will interfere with it.\nThe negatives, unfortunately , are many . First, this approa ch requires\nus to allow any calling thread to perform a privileged operation (turning\ninterrupts on and off), and thus trust that this facility is not abused. As\nyou already know , any time we are required to trust an arbitra ry pro-\ngram, we are probably in trouble. Here, the trouble manifest s in numer-\nous ways: a greedy program could call lock() at the beginning of its\nexecution and thus monopolize the processor; worse, an erra nt or mali-\ncious program could call lock() and go into an endless loop. In this\nlatter case, the OS never regains control of the system, and t here is only\none recourse: restart the system. Using interrupt disablin g as a general-\npurpose synchronization solution requires too much trust i n applications.\nSecond, the approach does not work on multiprocessors. If mu ltiple\nthreads are running on different CPUs, and each try to enter t he same\ncritical section, it does not matter whether interrupts are disabled; threads\nwill be able to run on other processors, and thus could enter t he critical\nsection. As multiprocessors are now commonplace, our gener al solution\nwill have to do better than this.\nThird, and probably least important, this approach can be in ef\ufb01cient.\nCompared to normal instruction execution, code that masks o r unmasks\ninterrupts tends to be executed slowly by modern CPUs.\nFor these reasons, turning off interrupts is only used in lim ited con-\ntexts as a mutual-exclusion primitive. For example, in some cases an\noperating system itself will sometimes use interrupt maski ng to guaran-\ntee atomicity when accessing its own data structures, or at l east to pre-\nvent certain messy interrupt handling situations from aris ing. This usage\nmakes sense, as the trust issue disappears inside the OS, whi ch always\ntrusts itself to perform privileged operations anyhow .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C K S 295\nAS I D E : DE K K E R \u2019 S A N D PE T E R S O N \u2019 S AL G O R I T H M S\nIn the 1960\u2019s, Dijkstra posed the concurrency problem to his friends,\nand one of them, a mathematician named Theodorus Jozef Dekke r , came\nup with a solution [D68]. Unlike the"
  },
  {
    "content": " T E P.O R G\nLO C K S 295\nAS I D E : DE K K E R \u2019 S A N D PE T E R S O N \u2019 S AL G O R I T H M S\nIn the 1960\u2019s, Dijkstra posed the concurrency problem to his friends,\nand one of them, a mathematician named Theodorus Jozef Dekke r , came\nup with a solution [D68]. Unlike the solutions we discuss her e, which use\nspecial hardware instructions and even OS support, Dekker \u2019 s approach\nuses just loads and stores (assuming they are atomic with res pect to each\nother , which was true on early hardware).\nDekker \u2019s approach was later re\ufb01ned by Peterson [P81] (and th us \u201cPe-\nterson\u2019s algorithm\u201d), shown here. Once again, just loads an d stores are\nused, and the idea is to ensure that two threads never enter a c ritical sec-\ntion at the same time. Here is Peterson\u2019s algorithm (for two t hreads); see\nif you can understand it.\nint flag[2];\nint turn;\nvoid init() {\nflag[0] = flag[1] = 0; // 1->thread wants to grab lock\nturn = 0; // whose turn? (thread 0 or 1?)\n}\nvoid lock() {\nflag[self] = 1; // self: thread ID of caller\nturn = 1 - self; // make it other thread\u2019s turn\nwhile ((flag[1-self] == 1) && (turn == 1 - self))\n; // spin-wait\n}\nvoid unlock() {\nflag[self] = 0; // simply undo your intent\n}\nFor some reason, developing locks that work without special hard-\nware support became all the rage for a while, giving theory-t ypes a lot\nof problems to work on. Of course, this all became quite usele ss when\npeople realized it is much easier to assume a little hardware support (and\nindeed that support had been around from the very earliest da ys of multi-\nprocessing). Further , algorithms like the ones above don\u2019t work on mod-\nern hardware (due to relaxed memory consistency models), th us making\nthem even less useful than they were before. Y et more researc h relegated\nto the dustbin of history ...\n28.6 T est And Set (Atomic Exchange)\nBecause disabling interrupts does not work on multiple proc essors,\nsystem designers started to invent hardware support for loc king. The\nearliest multiprocessor systems, such as the Burroughs B50 00 in the early\n1960\u2019s [M82], had such support; today all systems provide th is type of\nsupport, even for single CPU systems.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n296 LO C K S\n1 typedef struct __lock_t { int flag; } lock_t;\n2\n3 void init(lock_t *mutex) {\n4 // 0 -> lock is available, 1 -> held\n5 mutex->flag = 0;\n6 }\n7\n8 void lock(lock_t *mutex) {\n9 while (mutex->flag == 1) // TEST the flag\n10 ; // spin-wait (do nothing)\n11 mutex->flag = 1; // now SET it!\n12 }\n13\n14 void unlock(lock_t *mutex) {\n15 mutex->flag = 0;\n16 }\nFigure 28.1: First Attempt: A Simple Flag\nThe simplest bit of hardware support to understand is what is known\nas a test-and-set instruction , also known as atomic exchange . T o under-\nstand how test-and-set works, let\u2019s \ufb01rst try to build a simpl e lock without\nit. In this failed attempt, we use a simple \ufb02ag variable to den ote whether\nthe lock is held or not.\nIn this \ufb01rst attempt (Figure\n28.1), the idea is quite simple: use a simple\nvariable to indicate whether some thread has possession of a lock. The\n\ufb01rst thread that enters the critical section will call lock(), which tests\nwhether the \ufb02ag is equal to 1 (in this case, it is not), and then sets the \ufb02ag\nto 1 to indicate that the thread now holds the lock."
  },
  {
    "content": " not.\nIn this \ufb01rst attempt (Figure\n28.1), the idea is quite simple: use a simple\nvariable to indicate whether some thread has possession of a lock. The\n\ufb01rst thread that enters the critical section will call lock(), which tests\nwhether the \ufb02ag is equal to 1 (in this case, it is not), and then sets the \ufb02ag\nto 1 to indicate that the thread now holds the lock. When \ufb01nished with\nthe critical section, the thread calls unlock() and clears the \ufb02ag, thus\nindicating that the lock is no longer held.\nIf another thread happens to call lock() while that \ufb01rst thread is in\nthe critical section, it will simply spin-wait in the while loop for that\nthread to call unlock() and clear the \ufb02ag. Once that \ufb01rst thread does\nso, the waiting thread will fall out of the while loop, set the \ufb02ag to 1 for\nitself, and proceed into the critical section.\nUnfortunately , the code has two problems: one of correctnes s, and an-\nother of performance. The correctness problem is simple to s ee once you\nget used to thinking about concurrent programming. Imagine the code\ninterleaving in T able 28.1 (assume flag=0 to begin).\nThread 1 Thread 2\ncall lock()\nwhile (\ufb02ag == 1)\ninterrupt: switch to Thread 2\ncall lock()\nwhile (\ufb02ag == 1)\n\ufb02ag = 1;\ninterrupt: switch to Thread 1\n\ufb02ag = 1; // set \ufb02ag to 1 (too!)\nT able 28.1: T race: No Mutual Exclusion\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C K S 297\nTI P : T H I N K AB O U T CO N C U R R E N C Y AS MA L I C I O U S SC H E D U L E R\nWhat we also get from this example is a sense of the approach we\nneed to take when trying to understand concurrent execution . What you\nare really trying to do is to pretend you are a malicious scheduler , one\nthat interrupts threads at the most inopportune of times in o rder to foil\ntheir feeble attempts at building synchronization primiti ves. Although\nthe exact sequence of interrupts may be improbable, it is possible, and that\nis all we need to show to demonstrate that a particular approa ch does not\nwork.\nAs you can see from this interleaving, with timely (untimely ?) inter-\nrupts, we can easily produce a case where both threads set their \ufb02ags to 1\nand both threads are thus able to enter the critical section. This is bad! W e\nhave obviously failed to provide the most basic requirement : providing\nmutual exclusion.\nThe performance problem, which we will address more later on , is the\nfact that the way a thread waits to acquire a lock that is alrea dy held:\nit endlessly checks the value of \ufb02ag, a technique known as spin-waiting.\nSpin-waiting wastes time waiting for another thread to rele ase a lock. The\nwaste is exceptionally high on a uniprocessor , where the thr ead that the\nwaiter is waiting for cannot even run (at least, until a conte xt switch oc-\ncurs)! Thus, as we move forward and develop more sophisticat ed solu-\ntions, we should also consider ways to avoid this kind of wast e.\n28.7 Building A W orking Spin Lock\nWhile the idea behind the example above is a good one, it is not possi-\nble to implement without some support from the hardware. For tunately ,\nsome systems provide an instruction to support the creation of simple\nlocks based on this concept. This more powerful instruction has differ-\nent names \u2013 on SP ARC, it is the load/store unsigned byte instr uction\n(ldstub), whereas on x86, it is the atomic exchange instruction ( xchg)\n\u2013 but basically does the same thing across platforms, and is u sually gen-\nerally referred to as test-and-set. W e de\ufb01ne what the test-and-set instruc-\ntion does with the following C code snippet:\n1 int TestAndSet(int *ptr, int new)"
  },
  {
    "content": "store unsigned byte instr uction\n(ldstub), whereas on x86, it is the atomic exchange instruction ( xchg)\n\u2013 but basically does the same thing across platforms, and is u sually gen-\nerally referred to as test-and-set. W e de\ufb01ne what the test-and-set instruc-\ntion does with the following C code snippet:\n1 int TestAndSet(int *ptr, int new) {\n2 int old = *ptr; // fetch old value at ptr\n3 *ptr = new; // store \u2019new\u2019 into ptr\n4 return old; // return the old value\n5 }\nWhat the test-and-set instruction does is as follows. It ret urns the old\nvalue pointed to by the ptr, and simultaneously updates said value to\nnew. The key , of course, is that this sequence of operations is pe rformed\natomically. The reason it is called \u201ctest and set\u201d is that it enables you\nto \u201ctest\u201d the old value (which is what is returned) while simu ltaneously\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n298 LO C K S\n1 typedef struct __lock_t {\n2 int flag;\n3 } lock_t;\n4\n5 void init(lock_t *lock) {\n6 // 0 indicates that lock is available, 1 that it is held\n7 lock->flag = 0;\n8 }\n9\n10 void lock(lock_t *lock) {\n11 while (TestAndSet(&lock->flag, 1) == 1)\n12 ; // spin-wait (do nothing)\n13 }\n14\n15 void unlock(lock_t *lock) {\n16 lock->flag = 0;\n17 }\nFigure 28.2: A Simple Spin Lock Using T est-and-set\n\u201csetting\u201d the memory location to a new value; as it turns out, this slightly\nmore powerful instruction is enough to build a simple spin lock , as we\nnow examine in Figure\n28.2.\nLet\u2019s make sure we understand why this works. Imagine \ufb01rst th e case\nwhere a thread calls lock() and no other thread currently holds the lock;\nthus, flag should be 0. When the thread then calls TestAndSet(flag,\n1), the routine will return the old value of flag, which is 0; thus, the call-\ning thread, which is testing the value of \ufb02ag, will not get caught spinning\nin the while loop and will acquire the lock. The thread will al so atomi-\ncally set the value to 1, thus indicating that the lock is now held. When\nthe thread is \ufb01nished with its critical section, it calls unlock() to set the\n\ufb02ag back to zero.\nThe second case we can imagine arises when one thread already has\nthe lock held (i.e., flag is 1). In this case, this thread will call lock() and\nthen call TestAndSet(flag, 1) as well. This time, TestAndSet()\nwill return the old value at \ufb02ag, which is 1 (because the lock i s held),\nwhile simultaneously setting it to 1 again. As long as the loc k is held by\nanother thread, TestAndSet() will repeatedly return 1, and thus this\nthread will spin and spin until the lock is \ufb01nally released. W hen the \ufb02ag is\n\ufb01nally set to 0 by some other thread, this thread will call TestAndSet()\nagain, which will now return 0 while atomically setting the v alue to 1 and\nthus acquire the lock and enter the critical section.\nBy making both the test (of the old lock value) and set (of the new\nvalue) a single atomic operation, we ensure that only one thr ead acquires\nthe lock. And that\u2019s how to build a working mutual exclusion p rimitive!\nY ou may also now understand why this type of lock is usually re ferred\nto as a spin lock . It is the simplest type of lock to build, and simply spins,\nusing CPU cycles, until the lock becomes available. T o work c orrectly\non a single processor , it requires a preemptive scheduler (i.e., one that\nwill interrupt a thread via a timer , in order to run a differen t thread, from\ntime to time). Without preemption,"
  },
  {
    "content": " now understand why this type of lock is usually re ferred\nto as a spin lock . It is the simplest type of lock to build, and simply spins,\nusing CPU cycles, until the lock becomes available. T o work c orrectly\non a single processor , it requires a preemptive scheduler (i.e., one that\nwill interrupt a thread via a timer , in order to run a differen t thread, from\ntime to time). Without preemption, spin locks don\u2019t make muc h sense on\na single CPU, as a thread spinning on a CPU will never relinqui sh it.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C K S 299\n28.8 Evaluating Spin Locks\nGiven our basic spin lock, we can now evaluate how effective i t is\nalong our previously described axes. The most important asp ect of a lock\nis correctness: does it provide mutual exclusion? The answer here is ob-\nviously yes: the spin lock only allows a single thread to ente r the critical\nsection at a time. Thus, we have a correct lock.\nThe next axis is fairness. How fair is a spin lock to a waiting thread?\nCan you guarantee that a waiting thread will ever enter the cr itical sec-\ntion? The answer here, unfortunately , is bad news: spin lock s don\u2019t pro-\nvide any fairness guarantees. Indeed, a thread spinning may spin forever ,\nunder contention. Spin locks are not fair and may lead to star vation.\nThe \ufb01nal axis is performance. What are the costs of using a spin lock?\nT o analyze this more carefully , we suggest thinking about a f ew different\ncases. In the \ufb01rst, imagine threads competing for the lock on a single\nprocessor; in the second, consider the threads as spread out across many\nprocessors.\nFor spin locks, in the single CPU case, performance overhead s can\nbe quite painful; imagine the case where the thread holding t he lock is\npre-empted within a critical section. The scheduler might t hen run every\nother thread (imagine there are N \u2212 1 others), each of which tries to ac-\nquire the lock. In this case, each of those threads will spin f or the duration\nof a time slice before giving up the CPU, a waste of CPU cycles.\nHowever , on multiple CPUs, spin locks work reasonably well ( if the\nnumber of threads roughly equals the number of CPUs). The thi nking\ngoes as follows: imagine Thread A on CPU 1 and Thread B on CPU 2,\nboth contending for a lock. If Thread A (CPU 1) grabs the lock, and then\nThread B tries to, B will spin (on CPU 2). However , presumably the crit-\nical section is short, and thus soon the lock becomes availab le, and is ac-\nquired by Thread B. Spinning to wait for a lock held on another processor\ndoesn\u2019t waste many cycles in this case, and thus can be quite e ffective.\n28.9 Compare-And-Swap\nAnother hardware primitive that some systems provide is kno wn as\nthe compare-and-swap instruction (as it is called on SP ARC, for exam-\nple), or compare-and-exchange (as it called on x86). The C pseudocode\nfor this single instruction is found in Figure\n28.3.\nThe basic idea is for compare-and-swap to test whether the va lue at the\n1 int CompareAndSwap(int *ptr, int expected, int new) {\n2 int actual = *ptr;\n3 if (actual == expected)\n4 *ptr = new;\n5 return actual;\n6 }\nFigure 28.3: Compare-and-swap\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n300 LO C K S\naddress speci\ufb01ed by ptr is equal to expected; if so, update the memory\nlocation pointed to by ptr with the new value. If not, do nothing. In\neither case, return the actual value at that memory location , thus allowing\nthe code calling compare-and-swap to know whether it succee ded or not.\nWith the compare-and-swap instruction, we can build a lock i n a man-\nner quite similar to that with test-"
  },
  {
    "content": "\ufffd\ufffded by ptr is equal to expected; if so, update the memory\nlocation pointed to by ptr with the new value. If not, do nothing. In\neither case, return the actual value at that memory location , thus allowing\nthe code calling compare-and-swap to know whether it succee ded or not.\nWith the compare-and-swap instruction, we can build a lock i n a man-\nner quite similar to that with test-and-set. For example, we could just\nreplace the lock() routine above with the following:\n1 void lock(lock_t *lock) {\n2 while (CompareAndSwap(&lock->flag, 0, 1) == 1)\n3 ; // spin\n4 }\nThe rest of the code is the same as the test-and-set example ab ove.\nThis code works quite similarly; it simply checks if the \ufb02ag i s 0 and if\nso, atomically swaps in a 1 thus acquiring the lock. Threads t hat try to\nacquire the lock while it is held will get stuck spinning unti l the lock is\n\ufb01nally released.\nIf you want to see how to really make a C-callable x86-version of\ncompare-and-swap, this code sequence might be useful (from [S05]):\n1 char CompareAndSwap(int *ptr, int old, int new) {\n2 unsigned char ret;\n3\n4 // Note that sete sets a \u2019byte\u2019 not the word\n5 __asm__ __volatile__ (\n6 \" lock\\n\"\n7 \" cmpxchgl %2,%1\\n\"\n8 \" sete %0\\n\"\n9 : \"=q\" (ret), \"=m\" (*ptr)\n10 : \"r\" (new), \"m\" (*ptr), \"a\" (old)\n11 : \"memory\");\n12 return ret;\n13 }\nFinally , as you may have sensed, compare-and-swap is a more p ower-\nful instruction than test-and-set. W e will make some use of t his power in\nthe future when we brie\ufb02y delve into wait-free synchronization [H91].\nHowever , if we just build a simple spin lock with it, its behav ior is iden-\ntical to the spin lock we analyzed above.\n28.10 Load-Linked and Store-Conditional\nSome platforms provide a pair of instructions that work in co ncert to\nhelp build critical sections. On the MIPS architecture [H93 ], for example,\nthe load-linked and store-conditional instructions can be used in tandem\nto build locks and other concurrent structures. The C pseudo code for\nthese instructions is as found in Figure\n28.4. Alpha, PowerPC, and ARM\nprovide similar instructions [W09].\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C K S 301\n1 int LoadLinked(int *ptr) {\n2 return *ptr;\n3 }\n4\n5 int StoreConditional(int *ptr, int value) {\n6 if (no one has updated *ptr since the LoadLinked to this address) {\n7 *ptr = value;\n8 return 1; // success!\n9 } else {\n10 return 0; // failed to update\n11 }\n12 }\nFigure 28.4: Load-linked And Store-conditional\n1 void lock(lock_t *lock) {\n2 while (1) {\n3 while (LoadLinked(&lock->flag) == 1)\n4 ; // spin until it\u2019s zero\n5 if (StoreConditional(&lock->flag, 1) == 1)\n6 return; // if set-it-to-1 was a success: all done\n7 // otherwise: try it all over again\n8 }\n9 }\n10\n11 void unlock(lock_t *lock) {\n12 lock->flag = 0;\n13 }\nFigure 28.5: Using LL/SC T o Build A Lock\nThe load-linked operates much like a typical load instructi on, and sim-\nply fetches a value from memory and places it in a register . Th e key differ-\nence comes with the store-conditional, which only succeeds (and updates\nthe value stored at the address just load-linked from) if no i ntermittent\nstore to the"
  },
  {
    "content": "flag = 0;\n13 }\nFigure 28.5: Using LL/SC T o Build A Lock\nThe load-linked operates much like a typical load instructi on, and sim-\nply fetches a value from memory and places it in a register . Th e key differ-\nence comes with the store-conditional, which only succeeds (and updates\nthe value stored at the address just load-linked from) if no i ntermittent\nstore to the address has taken place. In the case of success, t he store-\nconditional returns 1 and updates the value at ptr to value; if it fails,\nthe value at ptr is not updated and 0 is returned.\nAs a challenge to yourself, try thinking about how to build a l ock using\nload-linked and store-conditional. Then, when you are \ufb01nis hed, look at\nthe code below which provides one simple solution. Do it! The solution\nis in Figure\n28.5.\nThe lock() code is the only interesting piece. First, a thread spins\nwaiting for the \ufb02ag to be set to 0 (and thus indicate the lock is not held).\nOnce so, the thread tries to acquire the lock via the store-co nditional; if it\nsucceeds, the thread has atomically changed the \ufb02ag\u2019s value to 1 and thus\ncan proceed into the critical section.\nNote how failure of the store-conditional might arise. One t hread calls\nlock() and executes the load-linked, returning 0 as the lock is not h eld.\nBefore it can attempt the store-conditional, it is interrup ted and another\nthread enters the lock code, also executing the load-linked instruction,\nand also getting a 0 and continuing. At this point, two thread s have\neach executed the load-linked and each are about to attempt t he store-\nconditional. The key feature of these instructions is that o nly one of these\nthreads will succeed in updating the \ufb02ag to 1 and thus acquire the lock;\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n302 LO C K S\nTI P : L E S S CO D E IS BE T T E R CO D E (L A U E R \u2019 S LAW )\nProgrammers tend to brag about how much code they wrote to do s ome-\nthing. Doing so is fundamentally broken. What one should bra g about,\nrather , is how little code one wrote to accomplish a given task. Short,\nconcise code is always preferred; it is likely easier to unde rstand and has\nfewer bugs. As Hugh Lauer said, when discussing the construc tion of\nthe Pilot operating system: \u201cIf the same people had twice as m uch time,\nthey could produce as good of a system in half the code.\u201d [L81] W e\u2019ll call\nthis Lauer\u2019s Law , and it is well worth remembering. So next time you\u2019re\nbragging about how much code you wrote to \ufb01nish the assignmen t, think\nagain, or better yet, go back, rewrite, and make the code as cl ear and con-\ncise as possible.\nthe second thread to attempt the store-conditional will fai l (because the\nother thread updated the value of \ufb02ag between its load-linke d and store-\nconditional) and thus have to try to acquire the lock again.\nIn class a few years ago, undergraduate student David Capel s ug-\ngested a more concise form of the above, for those of you who en joy\nshort-circuiting boolean conditionals. See if you can \ufb01gur e out why it\nis equivalent. It certainly is shorter!\n1 void lock(lock_t *lock) {\n2 while (LoadLinked(&lock->flag)||!StoreConditional(&lock->flag, 1))\n3 ; // spin\n4 }\n28.11 Fetch-And-Add\nOne \ufb01nal hardware primitive is the fetch-and-add instruction, which\natomically increments a value while returning the old value at a partic-\nular address. The C pseudocode for the fetch-and-add instru ction looks\nlike this:\n1 int FetchAndAdd(int *ptr) {\n2 int old = *ptr;\n3 *ptr = old + 1;\n4 return old;\n5 }\nIn"
  },
  {
    "content": "Add\nOne \ufb01nal hardware primitive is the fetch-and-add instruction, which\natomically increments a value while returning the old value at a partic-\nular address. The C pseudocode for the fetch-and-add instru ction looks\nlike this:\n1 int FetchAndAdd(int *ptr) {\n2 int old = *ptr;\n3 *ptr = old + 1;\n4 return old;\n5 }\nIn this example, we\u2019ll use fetch-and-add to build a more inte resting\nticket lock , as introduced by Mellor-Crummey and Scott [MS91]. The\nlock and unlock code looks like what you see in Figure\n28.6.\nInstead of a single value, this solution uses a ticket and tur n variable in\ncombination to build a lock. The basic operation is pretty si mple: when\na thread wishes to acquire a lock, it \ufb01rst does an atomic fetch -and-add\non the ticket value; that value is now considered this thread \u2019s \u201cturn\u201d\n(myturn). The globally shared lock->turn is then used to determine\nwhich thread\u2019s turn it is; when (myturn == turn) for a given thread,\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C K S 303\n1 typedef struct __lock_t {\n2 int ticket;\n3 int turn;\n4 } lock_t;\n5\n6 void lock_init(lock_t *lock) {\n7 lock->ticket = 0;\n8 lock->turn = 0;\n9 }\n10\n11 void lock(lock_t *lock) {\n12 int myturn = FetchAndAdd(&lock->ticket);\n13 while (lock->turn != myturn)\n14 ; // spin\n15 }\n16\n17 void unlock(lock_t *lock) {\n18 FetchAndAdd(&lock->turn);\n19 }\nFigure 28.6: Ticket Locks\nit is that thread\u2019s turn to enter the critical section. Unloc k is accomplished\nsimply by incrementing the turn such that the next waiting th read (if\nthere is one) can now enter the critical section.\nNote one important difference with this solution versus our previous\nattempts: it ensures progress for all threads. Once a thread is assigned its\nticket value, it will be scheduled at some point in the future (once those in\nfront of it have passed through the critical section and rele ased the lock).\nIn our previous attempts, no such guarantee existed; a threa d spinning\non test-and-set (for example) could spin forever even as oth er threads\nacquire and release the lock.\n28.12 Summary: So Much Spinning\nOur simple hardware-based locks are simple (only a few lines of code)\nand they work (you could even prove that if you\u2019d like to, by wr iting\nsome code), which are two excellent properties of any system or code.\nHowever , in some cases, these solutions can be quite inef\ufb01ci ent. Imagine\nyou are running two threads on a single processor . Now imagin e that\none thread (thread 0) is in a critical section and thus has a lo ck held, and\nunfortunately gets interrupted. The second thread (thread 1) now tries to\nacquire the lock, but \ufb01nds that it is held. Thus, it begins to s pin. And spin.\nThen it spins some more. And \ufb01nally , a timer interrupt goes of f, thread\n0 is run again, which releases the lock, and \ufb01nally (the next t ime it runs,\nsay), thread 1 won\u2019t have to spin so much and will be able to acq uire the\nlock. Thus, any time a thread gets caught spinning in a situat ion like this,\nit wastes an entire time slice doing nothing but checking a va lue that isn\u2019t\ngoing to change! The problem gets worse with N threads contending\nfor a lock; N \u2212 1 time slices may be wasted in a similar manner , simply\nspinning and waiting for a single thread to release the lock. And thus,\nour next problem:\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n304 LO C K S"
  },
  {
    "content": " isn\u2019t\ngoing to change! The problem gets worse with N threads contending\nfor a lock; N \u2212 1 time slices may be wasted in a similar manner , simply\nspinning and waiting for a single thread to release the lock. And thus,\nour next problem:\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n304 LO C K S\nTH E CR U X : H O W TO AV O I D SP I N N I N G\nHow can we develop a lock that doesn\u2019t needlessly waste time s pin-\nning on the CPU?\nHardware support alone cannot solve the problem. W e\u2019ll need OS sup-\nport too! Let\u2019s now \ufb01gure out just how that might work.\n28.13 A Simple Approach: Just Yield, Baby\nHardware support got us pretty far: working locks, and even ( as with\nthe case of the ticket lock) fairness in lock acquisition. Ho wever , we still\nhave a problem: what to do when a context switch occurs in a cri tical\nsection, and threads start to spin endlessly , waiting for th e interrupt (lock-\nholding) thread to be run again?\nOur \ufb01rst try is a simple and friendly approach: when you are go ing to\nspin, instead give up the CPU to another thread. Or , as Al Davi s might\nsay , \u201cjust yield, baby!\u201d [D91]. Figure 28.7 presents the approach.\nIn this approach, we assume an operating system primitive yield()\nwhich a thread can call when it wants to give up the CPU and let a n-\nother thread run. Because a thread can be in one of three state s (running,\nready , or blocked), you can think of this as an OS system call t hat moves\nthe caller from the running state to the ready state, and thus promotes\nanother thread to running.\nThink about the example with two threads on one CPU; in this ca se,\nour yield-based approach works quite well. If a thread happe ns to call\nlock() and \ufb01nd a lock held, it will simply yield the CPU, and thus the\nother thread will run and \ufb01nish its critical section. In this simple case, the\nyielding approach works well.\nLet us now consider the case where there are many threads (say 100)\ncontending for a lock repeatedly . In this case, if one thread acquires\nthe lock and is preempted before releasing it, the other 99 wi ll each call\n1 void init() {\n2 flag = 0;\n3 }\n4\n5 void lock() {\n6 while (TestAndSet(&flag, 1) == 1)\n7 yield(); // give up the CPU\n8 }\n9\n10 void unlock() {\n11 flag = 0;\n12 }\nFigure 28.7: Lock With T est-and-set And Yield\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C K S 305\nlock(), \ufb01nd the lock held, and yield the CPU. Assuming some kind\nof round-robin scheduler , each of the 99 will execute this ru n-and-yield\npattern before the thread holding the lock gets to run again. While better\nthan our spinning approach (which would waste 99 time slices spinning),\nthis approach is still costly; the cost of a context switch ca n be substantial,\nand there is thus plenty of waste.\nW orse, we have not tackled the starvation problem at all. A th read\nmay get caught in an endless yield loop while other threads re peatedly\nenter and exit the critical section. W e clearly will need an a pproach that\naddresses this problem directly .\n28.14 Using Queues: Sleeping Instead Of Spinning\nThe real problem with our previous approaches is that they le ave too\nmuch to chance. The scheduler determines which thread runs n ext; if\nthe scheduler makes a bad choice, a thread runs that must eith er spin\nwaiting for the lock (our \ufb01rst approach), or yield the CPU imm ediately\n(our second approach). Either way , there is potential for wa ste and no\nprevention of starvation.\nThus, we must explicitly exert some control over who gets to a cquire\nthe lock next after the current holder releases it. T o do this"
  },
  {
    "content": " runs n ext; if\nthe scheduler makes a bad choice, a thread runs that must eith er spin\nwaiting for the lock (our \ufb01rst approach), or yield the CPU imm ediately\n(our second approach). Either way , there is potential for wa ste and no\nprevention of starvation.\nThus, we must explicitly exert some control over who gets to a cquire\nthe lock next after the current holder releases it. T o do this , we will need a\nlittle more OS support, as well as a queue to keep track of whic h threads\nare waiting to enter the lock.\nFor simplicity , we will use the support provided by Solaris, in terms of\ntwo calls: park() to put a calling thread to sleep, and unpark(threadID)\nto wake a particular thread as designated by threadID. These two rou-\ntines can be used in tandem to build a lock that puts a caller to sleep if it\ntries to acquire a held lock and wakes it when the lock is free. Let\u2019s look at\nthe code in Figure 28.8 to understand one possible use of such primitives.\nW e do a couple of interesting things in this example. First, w e combine\nthe old test-and-set idea with an explicit queue of lock wait ers to make a\nmore ef\ufb01cient lock. Second, we use a queue to help control who gets the\nlock next and thus avoid starvation.\nY ou might notice how the guard is used, basically as a spin-lo ck around\nthe \ufb02ag and queue manipulations the lock is using. This appro ach thus\ndoesn\u2019t avoid spin-waiting entirely; a thread might be inte rrupted while\nacquiring or releasing the lock, and thus cause other thread s to spin-wait\nfor this one to run again. However , the time spent spinning is quite lim-\nited (just a few instructions inside the lock and unlock code , instead of the\nuser-de\ufb01ned critical section), and thus this approach may b e reasonable.\nSecond, you might notice that in lock(), when a thread can not ac-\nquire the lock (it is already held), we are careful to add ours elves to a\nqueue (by calling the gettid() call to get the thread ID of the current\nthread), set guard to 0, and yield the CPU. A question for the r eader:\nWhat would happen if the release of the guard lock came after the park(),\nand not before? Hint: something bad.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n306 LO C K S\n1 typedef struct __lock_t {\n2 int flag;\n3 int guard;\n4 queue_t *q;\n5 } lock_t;\n6\n7 void lock_init(lock_t *m) {\n8 m->flag = 0;\n9 m->guard = 0;\n10 queue_init(m->q);\n11 }\n12\n13 void lock(lock_t *m) {\n14 while (TestAndSet(&m->guard, 1) == 1)\n15 ; //acquire guard lock by spinning\n16 if (m->flag == 0) {\n17 m->flag = 1; // lock is acquired\n18 m->guard = 0;\n19 } else {\n20 queue_add(m->q, gettid());\n21 m->guard = 0;\n22 park();\n23 }\n24 }\n25\n26 void unlock(lock_t *m) {\n27 while (TestAndSet(&m->guard, 1) == 1)\n28 ; //acquire guard lock by spinning\n29 if (queue_empty(m->q))\n30 m->flag = 0; // let go of lock; no one wants it\n31 else\n32 unpark(queue_remove(m->q)); // hold lock (for next thread!)\n33 m->guard = 0;\n34 }\nFigure 28.8: Lock With Queues, T est-and-set, Yield, And W akeup\nY ou might also notice the interesting fact that the \ufb02ag does n ot get set\nback to 0 when another thread gets woken up. Why is this? W ell, it is not\nan error , but rather a necessity! When a thread is woken up, it will be as\nif it is returning from park(); however , it does not hold the guard at that\npoint"
  },
  {
    "content": ", T est-and-set, Yield, And W akeup\nY ou might also notice the interesting fact that the \ufb02ag does n ot get set\nback to 0 when another thread gets woken up. Why is this? W ell, it is not\nan error , but rather a necessity! When a thread is woken up, it will be as\nif it is returning from park(); however , it does not hold the guard at that\npoint in the code and thus cannot even try to set the \ufb02ag to 1. Th us, we\njust pass the lock directly from the thread releasing the loc k to the next\nthread acquiring it; \ufb02ag is not set to 0 in-between.\nFinally , you might notice the perceived race condition in th e solution,\njust before the call to park(). With just the wrong timing, a thread will\nbe about to park, assuming that it should sleep until the lock is no longer\nheld. A switch at that time to another thread (say , a thread ho lding the\nlock) could lead to trouble, for example, if that thread then released the\nlock. The subsequent park by the \ufb01rst thread would then sleep forever\n(potentially). This problem is sometimes called the wakeup/waiting race ;\nto avoid it, we need to do some extra work.\nSolaris solves this problem by adding a third system call: setpark().\nBy calling this routine, a thread can indicate it is about to park. If it then\nhappens to be interrupted and another thread calls unpark be fore park is\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C K S 307\nactually called, the subsequent park returns immediately i nstead of sleep-\ning. The code modi\ufb01cation, inside of lock(), is quite small:\n1 queue_add(m->q, gettid());\n2 setpark(); // new code\n3 m->guard = 0;\nA different solution could pass the guard into the kernel. In that case,\nthe kernel could take precautions to atomically release the lock and de-\nqueue the running thread.\n28.15 Different OS, Different Support\nW e have thus far seen one type of support that an OS can provide in\norder to build a more ef\ufb01cient lock in a thread library . Other OS\u2019s provide\nsimilar support; the details vary .\nFor example, Linux provides something called a futex which is simi-\nlar to the Solaris interface but provides a bit more in-kerne l functionality .\nSpeci\ufb01cally , each futex has associated with it a speci\ufb01c phy sical mem-\nory location; associated with each such memory location is a n in-kernel\nqueue. Callers can use futex calls (described below) to slee p and wake as\nneed be.\nSpeci\ufb01cally , two calls are available. The call to futex wait(address,\nexpected) puts the calling thread to sleep, assuming the value at address\nis equal to expected. If it is not equal, the call returns immediately . The\ncall to the routine futex wake(address) wakes one thread that is wait-\ning on the queue. The usage of these in Linux is as found in 28.9.\nThis code snippet from lowlevellock.h in the nptl library (part of\nthe gnu libc library) [L09] is pretty interesting. Basicall y , it uses a single\ninteger to track both whether the lock is held or not (the high bit of the\ninteger) and the number of waiters on the lock (all the other b its). Thus,\nif the lock is negative, it is held (because the high bit is set and that bit\ndetermines the sign of the integer). The code is also interes ting because it\nshows how to optimize for the common case where there is no con tention:\nwith only one thread acquiring and releasing a lock, very lit tle work is\ndone (the atomic bit test-and-set to lock and an atomic add to release the\nlock). See if you can puzzle through the rest of this \u201creal-wo rld\u201d lock to\nsee how it works.\n28.16 T wo-Phase Locks\nOne \ufb01nal note: the Linux approach has the \ufb02avor of an old appro ach\nthat has been used on and off for years"
  },
  {
    "content": " very lit tle work is\ndone (the atomic bit test-and-set to lock and an atomic add to release the\nlock). See if you can puzzle through the rest of this \u201creal-wo rld\u201d lock to\nsee how it works.\n28.16 T wo-Phase Locks\nOne \ufb01nal note: the Linux approach has the \ufb02avor of an old appro ach\nthat has been used on and off for years, going at least as far ba ck to Dahm\nLocks in the early 1960\u2019s [M82], and is now referred to as a two-phase\nlock. A two-phase lock realizes that spinning can be useful, part icularly\nif the lock is about to be released. So in the \ufb01rst phase, the lo ck spins for\na while, hoping that it can acquire the lock.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n308 LO C K S\n1 void mutex_lock (int *mutex) {\n2 int v;\n3 /* Bit 31 was clear, we got the mutex (this is the fastpath) */\n4 if (atomic_bit_test_set (mutex, 31) == 0)\n5 return;\n6 atomic_increment (mutex);\n7 while (1) {\n8 if (atomic_bit_test_set (mutex, 31) == 0) {\n9 atomic_decrement (mutex);\n10 return;\n11 }\n12 /* We have to wait now. First make sure the futex value\n13 we are monitoring is truly negative (i.e. locked). */\n14 v = *mutex;\n15 if (v >= 0)\n16 continue;\n17 futex_wait (mutex, v);\n18 }\n19 }\n20\n21 void mutex_unlock (int *mutex) {\n22 /* Adding 0x80000000 to the counter results in 0 if and only if\n23 there are not other interested threads */\n24 if (atomic_add_zero (mutex, 0x80000000))\n25 return;\n26\n27 /* There are other threads waiting for this mutex,\n28 wake one of them up. */\n29 futex_wake (mutex);\nFigure 28.9: Linux-based Futex Locks\nHowever , if the lock is not acquired during the \ufb01rst spin phas e, a sec-\nond phase is entered, where the caller is put to sleep, and onl y woken up\nwhen the lock becomes free later . The Linux lock above is a for m of such\na lock, but it only spins once; a generalization of this could spin in a loop\nfor a \ufb01xed amount of time before using futex support to sleep.\nT wo-phase locks are yet another instance of a hybrid approach, where\ncombining two good ideas may indeed yield a better one. Of cou rse,\nwhether it does depends strongly on many things, including t he hard-\nware environment, number of threads, and other workload det ails. As\nalways, making a single general-purpose lock, good for all p ossible use\ncases, is quite a challenge.\n28.17 Summary\nThe above approach shows how real locks are built these days: some\nhardware support (in the form of a more powerful instruction ) plus some\noperating system support (e.g., in the form of park() and unpark()\nprimitives on Solaris, or futex on Linux). Of course, the details differ , and\nthe exact code to perform such locking is usually highly tune d. Check\nout the Solaris or Linux open source code bases if you want to s ee more\ndetails; they are a fascinating read [L09, S09].\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C K S 309\nReferences\n[D91] \u201cJust Win, Baby: Al Davis and His Raiders\u201d\nGlenn Dickey , Harcourt 1991\nThere is even an undoubtedly bad book about Al Davis and his fa mous \u201cjust win\u201d quote. Or , we suppose,\nthe book is more about Al Davis and the Raiders, and maybe not j ust the quote. Read the book to \ufb01nd\nout?\n[D68] \u201c"
  },
  {
    "content": " S 309\nReferences\n[D91] \u201cJust Win, Baby: Al Davis and His Raiders\u201d\nGlenn Dickey , Harcourt 1991\nThere is even an undoubtedly bad book about Al Davis and his fa mous \u201cjust win\u201d quote. Or , we suppose,\nthe book is more about Al Davis and the Raiders, and maybe not j ust the quote. Read the book to \ufb01nd\nout?\n[D68] \u201cCooperating sequential processes\u201d\nEdsger W . Dijkstra, 1968\nA vailable: http://www .cs.utexas.edu/users/EWD/ewd01xx/EWD123.PDF\nOne of the early seminal papers in the area. Discusses how Dij kstra posed the original concurrency\nproblem, and Dekker\u2019s solution.\n[H93] \u201cMIPS R4000 Microprocessor User \u2019s Manual\u201d.\nJoe Heinrich, Prentice-Hall, June 1993\nA vailable: http://cag.csail.mit.edu/raw/\ndocuments/R4400\nUman book Ed2.pdf\n[H91] \u201cW ait-free Synchronization\u201d\nMaurice Herlihy\nACM T ransactions on Programming Languages and Systems (TOP LAS)\nV olume 13, Issue 1, January 1991\nA landmark paper introducing a different approach to buildi ng concurrent data structures. However ,\nbecause of the complexity involved, many of these ideas have been slow to gain acceptance in deployed\nsystems.\n[L81] \u201cObservations on the Development of an Operating Syst em\u201d\nHugh Lauer\nSOSP \u201981\nA must-read retrospective about the development of the Pilo t OS, an early PC operating system. Fun\nand full of insights.\n[L09] \u201cglibc 2.9 (include Linux pthreads implementation)\u201d\nA vailable: http://ftp.gnu.org/gnu/glibc/\nIn particular , take a look at the nptl subdirectory where you will \ufb01nd most of the pthread support in\nLinux today.\n[M82] \u201cThe Architecture of the Burroughs B5000\n20 Y ears Later and Still Ahead of the Times?\u201d\nAlastair J.W . Mayer , 1982\nwww .ajwm.net/amayer/papers/B5000.html\nFrom the paper: \u201cOne particularly useful instruction is the RDLK (read-lock). It is an indivisible\noperation which reads from and writes into a memory location .\u201d RDLK is thus an early test-and-set\nprimitive, if not the earliest. Some credit here goes to an en gineer named Dave Dahm, who apparently\ninvented a number of these things for the Burroughs systems, including a form of spin locks (called\n\u201cBuzz Locks\u201d as well as a two-phase lock eponymously called \u201c Dahm Locks.\u201d)\n[MS91] \u201cAlgorithms for Scalable Synchronization on Shared -Memory Multiprocessors\u201d\nJohn M. Mellor-Crummey and M. L. Scott\nACM TOCS, February 1991\nAn excellent survey on different locking algorithms. Howev er , no OS support is used, just fancy hard-\nware instructions.\n[P81] \u201cMyths About the Mutual Exclusion Problem\u201d\nG.L. Peterson\nInformation Processing Letters. 12(3) 1981, 115\u2013116\nPeterson\u2019s algorithm introduced here.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n310 LO C K S\n[S05] \u201cGuide to porting from Solaris to Linux on x86\u201d\nAjay Sood, April 29, 2005\nA vailable: http://www.ibm.com/developerworks/linux/library/l-solar/\n[S09] \u201cOpenSolaris Thread Library\u201d\nA vailable: http://src.opensolaris.org/source/xref/on nv/onnv-gate/\nusr/src/lib/libc/port/threads/synch.c\nThis is also pretty interesting to look at, though who knows w hat will happen to it now that Oracle owns\nSun. Thanks to Mike Swift for the pointer to the code.\n[W"
  },
  {
    "content": "S09] \u201cOpenSolaris Thread Library\u201d\nA vailable: http://src.opensolaris.org/source/xref/on nv/onnv-gate/\nusr/src/lib/libc/port/threads/synch.c\nThis is also pretty interesting to look at, though who knows w hat will happen to it now that Oracle owns\nSun. Thanks to Mike Swift for the pointer to the code.\n[W09] \u201cLoad-Link, Store-Conditional\u201d\nWikipedia entry on said topic, as of October 22, 2009\nhttp://en.wikipedia.org/wiki/Load-Link/Store-Conditional\nCan you believe we referenced wikipedia? Pretty shabby. But , we found the information there \ufb01rst,\nand it felt wrong not to cite it. Further , they even listed the instructions for the different architec-\ntures: ldl\nl/stl c and ldq l/stq c (Alpha), lwarx/stwcx (PowerPC), ll/sc (MIPS), and\nldrex/strex (ARM version 6 and above).\n[WG00] \u201cThe SP ARC Architecture Manual: V ersion 9\u201d\nDavid L. W eaver and T om Germond, September 2000\nSP ARC International, San Jose, California\nA vailable: http://www.sparc.org/standards/SPARCV9.pdf\nAlso see: http://developers.sun.com/solaris/articles/atomic\nsparc/ for some\nmore details on Sparc atomic operations.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n29\nLock-based Concurrent Data Structures\nBefore moving beyond locks, we\u2019ll \ufb01rst describe how to use lo cks in some\ncommon data structures. Adding locks to a data structure to m ake it us-\nable by threads makes the structure thread safe . Of course, exactly how\nsuch locks are added determines both the correctness and per formance of\nthe data structure. And thus, our challenge:\nCR U X : H O W TO AD D LO C K S TO DATA ST R U C T U R E S\nWhen given a particular data structure, how should we add loc ks to\nit, in order to make it work correctly? Further , how do we add l ocks such\nthat the data structure yields high performance, enabling m any threads\nto access the structure at once, i.e., concurrently?\nOf course, we will be hard pressed to cover all data structure s or all\nmethods for adding concurrency , as this is a topic that has be en studied\nfor years, with (literally) thousands of research papers pu blished about\nit. Thus, we hope to provide a suf\ufb01cient introduction to the t ype of think-\ning required, and refer you to some good sources of material f or further\ninquiry on your own. W e found Moir and Shavit\u2019s survey to be a g reat\nsource of information [MS04].\n29.1 Concurrent Counters\nOne of the simplest data structures is a counter . It is a struc ture that\nis commonly used and has a simple interface. W e de\ufb01ne a simple non-\nconcurrent counter in Figure 29.1.\nSimple But Not Scalable\nAs you can see, the non-synchronized counter is a trivial dat a structure,\nrequiring a tiny amount of code to implement. W e now have our n ext\nchallenge: how can we make this code thread safe ? Figure\n29.2 shows\nhow we do so.\n311\n312 L O C K -B A S E D CO N C U R R E N T DATA ST R U C T U R E S\n1 typedef struct __counter_t {\n2 int value;\n3 } counter_t;\n4\n5 void init(counter_t *c) {\n6 c->value = 0;\n7 }\n8\n9 void increment(counter_t *c) {\n10 c->value++;\n11 }\n12\n13 void decrement(counter_t *c) {\n14 c->value--;\n15 }\n16\n17 int get(counter_t *c) {\n18 return c->value;\n19 }\nFigure 29.1: A Counter Without Locks\n1 typedef"
  },
  {
    "content": ") {\n6 c->value = 0;\n7 }\n8\n9 void increment(counter_t *c) {\n10 c->value++;\n11 }\n12\n13 void decrement(counter_t *c) {\n14 c->value--;\n15 }\n16\n17 int get(counter_t *c) {\n18 return c->value;\n19 }\nFigure 29.1: A Counter Without Locks\n1 typedef struct __counter_t {\n2 int value;\n3 pthread_lock_t lock;\n4 } counter_t;\n5\n6 void init(counter_t *c) {\n7 c->value = 0;\n8 Pthread_mutex_init(&c->lock, NULL);\n9 }\n10\n11 void increment(counter_t *c) {\n12 Pthread_mutex_lock(&c->lock);\n13 c->value++;\n14 Pthread_mutex_unlock(&c->lock);\n15 }\n16\n17 void decrement(counter_t *c) {\n18 Pthread_mutex_lock(&c->lock);\n19 c->value--;\n20 Pthread_mutex_unlock(&c->lock);\n21 }\n22\n23 int get(counter_t *c) {\n24 Pthread_mutex_lock(&c->lock);\n25 int rc = c->value;\n26 Pthread_mutex_unlock(&c->lock);\n27 return rc;\n28 }\nFigure 29.2: A Counter With Locks\nThis concurrent counter is simple and works correctly . In fa ct, it fol-\nlows a design pattern common to the simplest and most basic co ncurrent\ndata structures: it simply adds a single lock, which is acqui red when call-\ning a routine that manipulates the data structure, and is rel eased when\nreturning from the call. In this manner , it is similar to a dat a structure\nbuilt with monitors [BH73], where locks are acquired and released auto-\nmatically as you call and return from object methods.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C K -B A S E D CO N C U R R E N T DATA ST R U C T U R E S 313\n1 2 3 4\n0\n5\n10\n15\nThreads\nTime (seconds)\nPrecise\nSloppy\nFigure 29.3: Performance of T raditional vs. Sloppy Counters\nAt this point, you have a working concurrent data structure. The prob-\nlem you might have is performance. If your data structure is t oo slow ,\nyou\u2019ll have to do more than just add a single lock; such optimi zations, if\nneeded, are thus the topic of the rest of the chapter . Note tha t if the data\nstructure is not too slow , you are done! No need to do something fancy if\nsomething simple will work.\nT o understand the performance costs of the simple approach, we run a\nbenchmark in which each thread updates a single shared count er a \ufb01xed\nnumber of times; we then vary the number of threads. Figure 29.3 shows\nthe total time taken, with one to four threads active; each th read updates\nthe counter one million times. This experiment was run upon a n iMac\nwith four Intel 2.7 GHz i5 CPUs; with more CPUs active, we hope to get\nmore total work done per unit time.\nFrom the top line in the \ufb01gure (labeled precise), you can see that the\nperformance of the synchronized counter scales poorly . Whe reas a single\nthread can complete the million counter updates in a tiny amo unt of time\n(roughly 0.03 seconds), having two threads each update the c ounter one\nmillion times concurrently leads to a massive slowdown (tak ing over 5\nseconds!). It only gets worse with more threads.\nIdeally , you\u2019d like to see the threads complete just as quick ly on mul-\ntiple processors as the single thread does on one. Achieving this end is\ncalled perfect scaling ; even though more work is done, it is done in par-\nallel, and hence the time taken to complete the task is not inc reased.\nScalable Counting\nAmazingly , researchers have studied how to build more scala ble coun-\nters for years [MS04]. Even more amazing"
  },
  {
    "content": " like to see the threads complete just as quick ly on mul-\ntiple processors as the single thread does on one. Achieving this end is\ncalled perfect scaling ; even though more work is done, it is done in par-\nallel, and hence the time taken to complete the task is not inc reased.\nScalable Counting\nAmazingly , researchers have studied how to build more scala ble coun-\nters for years [MS04]. Even more amazing is the fact that scal able coun-\nters matter , as recent work in operating system performance analysis has\nshown [B+10]; without scalable counting, some workloads ru nning on\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n314 L O C K -B A S E D CO N C U R R E N T DATA ST R U C T U R E S\nTime L1 L2 L3 L4 G\n0 0 0 0 0 0\n1 0 0 1 1 0\n2 1 0 2 1 0\n3 2 0 3 1 0\n4 3 0 3 2 0\n5 4 1 3 3 0\n6 5 \u2192 0 1 3 4 5 (from L1)\n7 0 2 4 5 \u2192 0 10 (from L4)\nT able 29.1: T racing the Sloppy Counters\nLinux suffer from serious scalability problems on multicor e machines.\nThough many techniques have been developed to attack this pr oblem,\nwe\u2019ll now describe one particular approach. The idea, intro duced in re-\ncent research [B+10], is known as a sloppy counter .\nThe sloppy counter works by representing a single logical co unter via\nnumerous local physical counters, one per CPU core, as well as a single\nglobal counter . Speci\ufb01cally , on a machine with four CPUs, there are four\nlocal counters and one global one. In addition to these count ers, there are\nalso locks: one for each local counter , and one for the global counter .\nThe basic idea of sloppy counting is as follows. When a thread running\non a given core wishes to increment the counter , it increment s its local\ncounter; access to this local counter is synchronized via th e corresponding\nlocal lock. Because each CPU has its own local counter , threa ds across\nCPUs can update local counters without contention, and thus counter\nupdates are scalable.\nHowever , to keep the global counter up to date (in case a threa d wishes\nto read its value), the local values are periodically transf erred to the global\ncounter , by acquiring the global lock and incrementing it by the local\ncounter \u2019s value; the local counter is then reset to zero.\nHow often this local-to-global transfer occurs is determin ed by a thresh-\nold, which we call S here (for sloppiness). The smaller S is, the more the\ncounter behaves like the non-scalable counter above; the bi gger S is, the\nmore scalable the counter , but the further off the global val ue might be\nfrom the actual count. One could simply acquire all the local locks and\nthe global lock (in a speci\ufb01ed order , to avoid deadlock) to ge t an exact\nvalue, but that is not scalable.\nT o make this clear , let\u2019s look at an example (T able 29.1). In this exam-\nple, the threshold S is set to 5, and there are threads on each of four CPUs\nupdating their local counters L1 ... L4. The global counter value ( G) is\nalso shown in the trace, with time increasing downward. At ea ch time\nstep, a local counter may be incremented; if the local value r eaches the\nthreshold S, the local value is transferred to the global counter and the\nlocal counter is reset.\nThe lower line in Figure 29.3 (labeled sloppy) shows the performance of\nsloppy counters with a threshold S of 1024. Performance is excellent; the\ntime taken to update the counter four million times on four pr ocessors is\nhardly higher than the time taken to update it one million tim es on one\nprocessor .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C K -B A S E D CO N C U R R E N T DATA ST R U C T U R E S 315\n1 typedef struct"
  },
  {
    "content": " ocessors is\nhardly higher than the time taken to update it one million tim es on one\nprocessor .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C K -B A S E D CO N C U R R E N T DATA ST R U C T U R E S 315\n1 typedef struct __counter_t {\n2 int global; // global count\n3 pthread_mutex_t glock; // global lock\n4 int local[NUMCPUS]; // local count (per cpu)\n5 pthread_mutex_t llock[NUMCPUS]; // ... and locks\n6 int threshold; // update frequency\n7 } counter_t;\n8\n9 // init: record threshold, init locks, init values\n10 // of all local counts and global count\n11 void init(counter_t *c, int threshold) {\n12 c->threshold = threshold;\n13\n14 c->global = 0;\n15 pthread_mutex_init(&c->glock, NULL);\n16\n17 int i;\n18 for (i = 0; i < NUMCPUS; i++) {\n19 c->local[i] = 0;\n20 pthread_mutex_init(&c->llock[i], NULL);\n21 }\n22 }\n23\n24 // update: usually, just grab local lock and update local amount\n25 // once local count has risen by \u2019threshold\u2019, grab global\n26 // lock and transfer local values to it\n27 void update(counter_t *c, int threadID, int amt) {\n28 pthread_mutex_lock(&c->llock[threadID]);\n29 c->local[threadID] += amt; // assumes amt > 0\n30 if (c->local[threadID] >= c->threshold) { // transfer to global\n31 pthread_mutex_lock(&c->glock);\n32 c->global += c->local[threadID];\n33 pthread_mutex_unlock(&c->glock);\n34 c->local[threadID] = 0;\n35 }\n36 pthread_mutex_unlock(&c->llock[threadID]);\n37 }\n38\n39 // get: just return global amount (which may not be perfect)\n40 int get(counter_t *c) {\n41 pthread_mutex_lock(&c->glock);\n42 int val = c->global;\n43 pthread_mutex_unlock(&c->glock);\n44 return val; // only approximate!\n45 }\nFigure 29.4: Sloppy Counter Implementation\nFigure\n29.5 shows the importance of the threshold value S, with four\nthreads each incrementing the counter 1 million times on fou r CPUs. If S\nis low , performance is poor (but the global count is always qu ite accurate);\nif S is high, performance is excellent, but the global count lags (by the\nnumber of CPUs multiplied by S). This accuracy/performance trade-off\nis what sloppy counters enables.\nA rough version of such a sloppy counter is found in Figure 29.4. Read\nit, or better yet, run it yourself in some experiments to bett er understand\nhow it works.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n316 L O C K -B A S E D CO N C U R R E N T DATA ST R U C T U R E S\n1 2 4 8 16 32 64 128 256 1024 512\n0\n5\n10\n15\nSloppiness\nTime (seconds)\nFigure 29.5: Scaling Sloppy Counters\n29.2 Concurrent Linked Lists\nW e next examine a more complicated structure, the linked lis t. Let\u2019s\nstart with a basic approach once again. For simplicity , we\u2019l l omit some of\nthe obvious routines that such a list would have and just focu s on concur-\nrent insert; we\u2019ll leave it to the reader to think about looku p, delete, and\nso forth. Figure 29.6 shows the code for this rudimentary data structure.\nAs you can see in the code, the code simply acquires a lock in th e insert\nroutine upon entry , and releases it upon exit. One small tric k"
  },
  {
    "content": " l omit some of\nthe obvious routines that such a list would have and just focu s on concur-\nrent insert; we\u2019ll leave it to the reader to think about looku p, delete, and\nso forth. Figure 29.6 shows the code for this rudimentary data structure.\nAs you can see in the code, the code simply acquires a lock in th e insert\nroutine upon entry , and releases it upon exit. One small tric ky issue arises\nif malloc() happens to fail (a rare case); in this case, the code must also\nrelease the lock before failing the insert.\nThis kind of exceptional control \ufb02ow has been shown to be quit e error\nprone; a recent study of Linux kernel patches found that a hug e fraction of\nbugs (nearly 40%) are found on such rarely-taken code paths ( indeed, this\nobservation sparked some of our own research, in which we rem oved all\nmemory-failing paths from a Linux \ufb01le system, resulting in a more robust\nsystem [S+11]).\nThus, a challenge: can we rewrite the insert and lookup routi nes to re-\nmain correct under concurrent insert but avoid the case wher e the failure\npath also requires us to add the call to unlock?\nThe answer , in this case, is yes. Speci\ufb01cally , we can rearran ge the code\na bit so that the lock and release only surround the actual cri tical section\nin the insert code, and that a common exit path is used in the lo okup code.\nThe former works because part of the lookup actually need not be locked;\nassuming that malloc() itself is thread-safe, each thread can call into it\nwithout worry of race conditions or other concurrency bugs. Only when\nupdating the shared list does a lock need to be held. See Figur e 29.7 for\nthe details of these modi\ufb01cations.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C K -B A S E D CO N C U R R E N T DATA ST R U C T U R E S 317\n1 // basic node structure\n2 typedef struct __node_t {\n3 int key;\n4 struct __node_t *next;\n5 } node_t;\n6\n7 // basic list structure (one used per list)\n8 typedef struct __list_t {\n9 node_t *head;\n10 pthread_mutex_t lock;\n11 } list_t;\n12\n13 void List_Init(list_t *L) {\n14 L->head = NULL;\n15 pthread_mutex_init(&L->lock, NULL);\n16 }\n17\n18 int List_Insert(list_t *L, int key) {\n19 pthread_mutex_lock(&L->lock);\n20 node_t *new = malloc(sizeof(node_t));\n21 if (new == NULL) {\n22 perror(\"malloc\");\n23 pthread_mutex_unlock(&L->lock);\n24 return -1; // fail\n25 }\n26 new->key = key;\n27 new->next = L->head;\n28 L->head = new;\n29 pthread_mutex_unlock(&L->lock);\n30 return 0; // success\n31 }\n32\n33 int List_Lookup(list_t *L, int key) {\n34 pthread_mutex_lock(&L->lock);\n35 node_t *curr = L->head;\n36 while (curr) {\n37 if (curr->key == key) {\n38 pthread_mutex_unlock(&L->lock);\n39 return 0; // success\n40 }\n41 curr = curr->next;\n42 }\n43 pthread_mutex_unlock(&L->lock);\n44 return -1; // failure\n45 }\nFigure 29.6: Concurrent Linked List\nAs for the lookup routine, it is a simple code transformation to jump\nout of the main search loop to a single return path. Doing so ag ain re-\nduces the number of lock acquire/release points in the code, and thus\ndecreases the chances of accidentally introducing bugs (su ch as forget-\nting to unlock before returning) into the code.\nScaling Linked"
  },
  {
    "content": "; // failure\n45 }\nFigure 29.6: Concurrent Linked List\nAs for the lookup routine, it is a simple code transformation to jump\nout of the main search loop to a single return path. Doing so ag ain re-\nduces the number of lock acquire/release points in the code, and thus\ndecreases the chances of accidentally introducing bugs (su ch as forget-\nting to unlock before returning) into the code.\nScaling Linked Lists\nThough we again have a basic concurrent linked list, once aga in we\nare in a situation where it does not scale particularly well. One technique\nthat researchers have explored to enable more concurrency w ithin a list is\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n318 L O C K -B A S E D CO N C U R R E N T DATA ST R U C T U R E S\n1 void List_Init(list_t *L) {\n2 L->head = NULL;\n3 pthread_mutex_init(&L->lock, NULL);\n4 }\n5\n6 void List_Insert(list_t *L, int key) {\n7 // synchronization not needed\n8 node_t *new = malloc(sizeof(node_t));\n9 if (new == NULL) {\n10 perror(\"malloc\");\n11 return;\n12 }\n13 new->key = key;\n14\n15 // just lock critical section\n16 pthread_mutex_lock(&L->lock);\n17 new->next = L->head;\n18 L->head = new;\n19 pthread_mutex_unlock(&L->lock);\n20 }\n21\n22 int List_Lookup(list_t *L, int key) {\n23 int rv = -1;\n24 pthread_mutex_lock(&L->lock);\n25 node_t *curr = L->head;\n26 while (curr) {\n27 if (curr->key == key) {\n28 rv = 0;\n29 break;\n30 }\n31 curr = curr->next;\n32 }\n33 pthread_mutex_unlock(&L->lock);\n34 return rv; // now both success and failure\n35 }\nFigure 29.7: Concurrent Linked List: Rewritten\nsomething called hand-over-hand locking (a.k.a. lock coupling ) [MS04].\nThe idea is pretty simple. Instead of having a single lock for the entire\nlist, you instead add a lock per node of the list. When travers ing the\nlist, the code \ufb01rst grabs the next node\u2019s lock and then releas es the current\nnode\u2019s lock (which inspires the name hand-over-hand).\nConceptually , a hand-over-hand linked list makes some sens e; it en-\nables a high degree of concurrency in list operations. Howev er , in prac-\ntice, it is hard to make such a structure faster than the simpl e single lock\napproach, as the overheads of acquiring and releasing locks for each node\nof a list traversal is prohibitive. Even with very large list s, and a large\nnumber of threads, the concurrency enabled by allowing mult iple on-\ngoing traversals is unlikely to be faster than simply grabbi ng a single\nlock, performing an operation, and releasing it. Perhaps so me kind of hy-\nbrid (where you grab a new lock every so many nodes) would be wo rth\ninvestigating.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C K -B A S E D CO N C U R R E N T DATA ST R U C T U R E S 319\nTI P : M O R E CO N C U R R E N C Y IS N \u2019 T NE C E S S A R I LY FA S T E R\nIf the scheme you design adds a lot of overhead (for example, b y acquir-\ning and releasing locks frequently , instead of once), the fa ct that it is more\nconcurrent may not be important. Simple schemes tend to work well,\nespecially if they use costly routines rarely . Adding more l ocks and com-\nplexity can be your downfall. All of that said, there is one"
  },
  {
    "content": " E S S A R I LY FA S T E R\nIf the scheme you design adds a lot of overhead (for example, b y acquir-\ning and releasing locks frequently , instead of once), the fa ct that it is more\nconcurrent may not be important. Simple schemes tend to work well,\nespecially if they use costly routines rarely . Adding more l ocks and com-\nplexity can be your downfall. All of that said, there is one wa y to really\nknow: build both alternatives (simple but less concurrent, and complex\nbut more concurrent) and measure how they do. In the end, you c an\u2019t\ncheat on performance; your idea is either faster , or it isn\u2019t .\nTI P : B E WA RY OF LO C K S A N D CO N T R O L FL O W\nA general design tip, which is useful in concurrent code as we ll as\nelsewhere, is to be wary of control \ufb02ow changes that lead to fu nction re-\nturns, exits, or other similar error conditions that halt th e execution of\na function. Because many functions will begin by acquiring a lock, al-\nlocating some memory , or doing other similar stateful opera tions, when\nerrors arise, the code has to undo all of the state before retu rning, which\nis error-prone. Thus, it is best to structure code to minimiz e this pattern.\n29.3 Concurrent Queues\nAs you know by now , there is always a standard method to make a\nconcurrent data structure: add a big lock. For a queue, we\u2019ll skip that\napproach, assuming you can \ufb01gure it out.\nInstead, we\u2019ll take a look at a slightly more concurrent queu e designed\nby Michael and Scott [MS98]. The data structures and code use d for this\nqueue are found in Figure 29.8 on the following page.\nIf you study this code carefully , you\u2019ll notice that there ar e two locks,\none for the head of the queue, and one for the tail. The goal of t hese two\nlocks is to enable concurrency of enqueue and dequeue operat ions. In\nthe common case, the enqueue routine will only access the tai l lock, and\ndequeue only the head lock.\nOne trick used by the Michael and Scott is to add a dummy node (a llo-\ncated in the queue initialization code); this dummy enables the separation\nof head and tail operations. Study the code, or better yet, ty pe it in, run\nit, and measure it, to understand how it works deeply .\nQueues are commonly used in multi-threaded applications. H owever ,\nthe type of queue used here (with just locks) often does not co mpletely\nmeet the needs of such programs. A more fully developed bound ed\nqueue, that enables a thread to wait if the queue is either emp ty or overly\nfull, is the subject of our intense study in the next chapter o n condition\nvariables. W atch for it!\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n320 L O C K -B A S E D CO N C U R R E N T DATA ST R U C T U R E S\n1 typedef struct __node_t {\n2 int value;\n3 struct __node_t *next;\n4 } node_t;\n5\n6 typedef struct __queue_t {\n7 node_t *head;\n8 node_t *tail;\n9 pthread_mutex_t headLock;\n10 pthread_mutex_t tailLock;\n11 } queue_t;\n12\n13 void Queue_Init(queue_t *q) {\n14 node_t *tmp = malloc(sizeof(node_t));\n15 tmp->next = NULL;\n16 q->head = q->tail = tmp;\n17 pthread_mutex_init(&q->headLock, NULL);\n18 pthread_mutex_init(&q->tailLock, NULL);\n19 }\n20\n21 void Queue_Enqueue(queue_t *q, int value) {\n22 node_t *tmp = malloc(sizeof(node_t));\n23 assert(tmp != NULL);\n24 tmp->value = value;\n25 tmp->next = NULL;\n26\n27 pthread_mutex_lock(&"
  },
  {
    "content": "headLock, NULL);\n18 pthread_mutex_init(&q->tailLock, NULL);\n19 }\n20\n21 void Queue_Enqueue(queue_t *q, int value) {\n22 node_t *tmp = malloc(sizeof(node_t));\n23 assert(tmp != NULL);\n24 tmp->value = value;\n25 tmp->next = NULL;\n26\n27 pthread_mutex_lock(&q->tailLock);\n28 q->tail->next = tmp;\n29 q->tail = tmp;\n30 pthread_mutex_unlock(&q->tailLock);\n31 }\n32\n33 int Queue_Dequeue(queue_t *q, int *value) {\n34 pthread_mutex_lock(&q->headLock);\n35 node_t *tmp = q->head;\n36 node_t *newHead = tmp->next;\n37 if (newHead == NULL) {\n38 pthread_mutex_unlock(&q->headLock);\n39 return -1; // queue was empty\n40 }\n41 *value = newHead->value;\n42 q->head = newHead;\n43 pthread_mutex_unlock(&q->headLock);\n44 free(tmp);\n45 return 0;\n46 }\nFigure 29.8: Michael and Scott Concurrent Queue\n29.4 Concurrent Hash T able\nW e end our discussion with a simple and widely applicable con current\ndata structure, the hash table. W e\u2019ll focus on a simple hash t able that does\nnot resize; a little more work is required to handle resizing , which we\nleave as an exercise for the reader (sorry!).\nThis concurrent hash table is straightforward, is built usi ng the con-\ncurrent lists we developed earlier , and works incredibly we ll. The reason\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C K -B A S E D CO N C U R R E N T DATA ST R U C T U R E S 321\n1 #define BUCKETS (101)\n2\n3 typedef struct __hash_t {\n4 list_t lists[BUCKETS];\n5 } hash_t;\n6\n7 void Hash_Init(hash_t *H) {\n8 int i;\n9 for (i = 0; i < BUCKETS; i++) {\n10 List_Init(&H->lists[i]);\n11 }\n12 }\n13\n14 int Hash_Insert(hash_t *H, int key) {\n15 int bucket = key % BUCKETS;\n16 return List_Insert(&H->lists[bucket], key);\n17 }\n18\n19 int Hash_Lookup(hash_t *H, int key) {\n20 int bucket = key % BUCKETS;\n21 return List_Lookup(&H->lists[bucket], key);\n22 }\nFigure 29.9: A Concurrent Hash T able\nfor its good performance is that instead of having a single lo ck for the en-\ntire structure, it uses a lock per hash bucket (each of which i s represented\nby a list). Doing so enables many concurrent operations to ta ke place.\nFigure\n29.10 shows the performance of the hash table under concur-\nrent updates (from 10,000 to 50,000 concurrent updates from each of four\nthreads, on the same iMac with four CPUs). Also shown, for the sake\nof comparison, is the performance of a linked list (with a sin gle lock).\nAs you can see from the graph, this simple concurrent hash tab le scales\nmagni\ufb01cently; the linked list, in contrast, does not.\n0 10 20 30 40\n0\n5\n10\n15\nInserts (Thousands)\nTime (seconds)\nSimple Concurrent List\nConcurrent Hash Table\nFigure 29.10: Scaling Hash T ables\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n322 L O C K -B A S E D CO N C U R R E N T DATA ST R U C T U R E S\nTI P : A V O I D PR E M AT U R E OP T I M I Z AT I O N (K N U T H \u2019 S LAW )"
  },
  {
    "content": "\ufffd\ufffd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n322 L O C K -B A S E D CO N C U R R E N T DATA ST R U C T U R E S\nTI P : A V O I D PR E M AT U R E OP T I M I Z AT I O N (K N U T H \u2019 S LAW )\nWhen building a concurrent data structure, start with the mo st basic ap-\nproach, which is to add a single big lock to provide synchroni zed access.\nBy doing so, you are likely to build a correct lock; if you then \ufb01nd that it\nsuffers from performance problems, you can re\ufb01ne it, thus on ly making\nit fast if need be. As Knuth famously stated, \u201cPremature optimization is\nthe root of all evil.\u201d\nMany operating systems added a single lock when transitioni ng to multi-\nprocessors, including Sun OS and Linux. In the latter , it eve n had a name,\nthe big kernel lock (BKL), and was the source of performance problems\nfor many years until it was \ufb01nally removed in 2011. In SunOS (w hich\nwas a BSD variant), the notion of removing the single lock pro tecting\nthe kernel was so painful that the Sun engineers decided on a d ifferent\nroute: building the entirely new Solaris operating system, which was\nmulti-threaded from day one. Read the Linux and Solaris kern el books\nfor more information [BC05, MM00].\n29.5 Summary\nW e have introduced a sampling of concurrent data structures , from\ncounters, to lists and queues, and \ufb01nally to the ubiquitous a nd heavily-\nused hash table. W e have learned a few important lessons alon g the way:\nto be careful with acquisition and release of locks around co ntrol \ufb02ow\nchanges; that enabling more concurrency does not necessari ly increase\nperformance; that performance problems should only be reme died once\nthey exist. This last point, of avoiding premature optimization , is cen-\ntral to any performance-minded developer; there is no value in making\nsomething faster if doing so will not improve the overall per formance of\nthe application.\nOf course, we have just scratched the surface of high perform ance\nstructures. See Moir and Shavit\u2019s excellent survey for more information,\nas well as links to other sources [MS04]. In particular , you m ight be inter-\nested in other structures (such as B-trees); for this knowle dge, a database\nclass is your best bet. Y ou also might be interested in techni ques that don\u2019t\nuse traditional locks at all; such non-blocking data structures are some-\nthing we\u2019ll get a taste of in the chapter on common concurrenc y bugs,\nbut frankly this topic is an entire area of knowledge requiri ng more study\nthan is possible in this humble book. Find out more on your own if you\nare interested (as always!).\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C K -B A S E D CO N C U R R E N T DATA ST R U C T U R E S 323\nReferences\n[B+10] \u201cAn Analysis of Linux Scalability to Many Cores\u201d\nSilas Boyd-Wickizer , Austin T . Clements, Y andong Mao, Alek sey Pesterev , M. Frans Kaashoek,\nRobert Morris, Nickolai Zeldovich\nOSDI \u201910, V ancouver , Canada, October 2010\nA great study of how Linux performs on multicore machines, as well as some simple solutions.\n[BH73] \u201cOperating System Principles\u201d\nPer Brinch Hansen, Prentice-Hall, 1973\nA vailable: http://portal.acm.org/citation.cfm?id=540 365\nOne of the \ufb01rst books on operating systems; certainly ahead o f its time. Introduced monitors as a\nconcurrency primitive.\n[BC05] \u201cUnderstanding the Linux Kernel (Third Edition)\u201d\nDaniel P . Bovet and Marco Cesati\nO\u2019Reilly Media, November 2005\nThe classic book"
  },
  {
    "content": "-Hall, 1973\nA vailable: http://portal.acm.org/citation.cfm?id=540 365\nOne of the \ufb01rst books on operating systems; certainly ahead o f its time. Introduced monitors as a\nconcurrency primitive.\n[BC05] \u201cUnderstanding the Linux Kernel (Third Edition)\u201d\nDaniel P . Bovet and Marco Cesati\nO\u2019Reilly Media, November 2005\nThe classic book on the Linux kernel. Y ou should read it.\n[L+13] \u201cA Study of Linux File System Evolution\u201d\nLanyue Lu, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusse au, Shan Lu\nF AST \u201913, San Jose, CA, February 2013\nOur paper that studies every patch to Linux \ufb01le systems over n early a decade. Lots of fun \ufb01ndings in\nthere; read it to see! The work was painful to do though; the po or graduate student, Lanyue Lu, had to\nlook through every single patch by hand in order to understan d what they did.\n[MS98] \u201cNonblocking Algorithms and Preemption-safe Locki ng on Multiprogrammed Shared-\nmemory Multiprocessors\u201d\nM. Michael and M. Scott\nJournal of Parallel and Distributed Computing, V ol. 51, No. 1, 1998\nProfessor Scott and his students have been at the forefront o f concurrent algorithms and data structures\nfor many years; check out his web page, numerous papers, or bo oks to \ufb01nd out more.\n[MS04] \u201cConcurrent Data Structures\u201d\nMark Moir and Nir Shavit\nIn Handbook of Data Structures and Applications\n(Editors D. Metha and S.Sahni)\nChapman and Hall/CRC Press, 2004\nA vailable: www .cs.tau.ac.il/\u02dcshanir/concurrent-data-structures.pdf\nA short but relatively comprehensive reference on concurre nt data structures. Though it is missing\nsome of the latest works in the area (due to its age), it remain s an incredibly useful reference.\n[MM00] \u201cSolaris Internals: Core Kernel Architecture\u201d\nJim Mauro and Richard McDougall\nPrentice Hall, October 2000\nThe Solaris book. Y ou should also read this, if you want to lea rn in great detail about something other\nthan Linux.\n[S+11] \u201cMaking the Common Case the Only Case with Anticipato ry Memory Allocation\u201d\nSwaminathan Sundararaman, Y upu Zhang, Sriram Subramanian ,\nAndrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau\nF AST \u201911, San Jose, CA, February 2011\nOur work on removing possibly-failing calls to malloc from k ernel code paths. The idea is to allocate all\npotentially needed memory before doing any of the work, thus avoiding failure deep down in the storage\nstack.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n30\nCondition Variables\nThus far we have developed the notion of a lock and seen how one can be\nproperly built with the right combination of hardware and OS support.\nUnfortunately , locks are not the only primitives that are ne eded to build\nconcurrent programs.\nIn particular , there are many cases where a thread wishes to c heck\nwhether a condition is true before continuing its execution. For example,\na parent thread might wish to check whether a child thread has completed\nbefore continuing (this is often called a join()); how should such a wait\nbe implemented? Let\u2019s look at Figure 30.1.\n1 void *child(void *arg) {\n2 printf(\"child\\n\");\n3 // XXX how to indicate we are done?\n4 return NULL;\n5 }\n6\n7 int main(int argc, char *argv[]) {\n8 printf(\"parent: begin\\n\");\n9 pthread_t c;\n10 Pthread_create(&c, NULL, child, NULL); // create child\n11 // XXX how to wait for child?\n12 printf(\"parent: end\\n\");\n13 return 0;\n14 }\nFigure 30.1: A Parent W aiting For Its Child\nWhat we would like"
  },
  {
    "content": "6\n7 int main(int argc, char *argv[]) {\n8 printf(\"parent: begin\\n\");\n9 pthread_t c;\n10 Pthread_create(&c, NULL, child, NULL); // create child\n11 // XXX how to wait for child?\n12 printf(\"parent: end\\n\");\n13 return 0;\n14 }\nFigure 30.1: A Parent W aiting For Its Child\nWhat we would like to see here is the following output:\nparent: begin\nchild\nparent: end\nW e could try using a shared variable, as you see in Figure\n30.2. This\nsolution will generally work, but it is hugely inef\ufb01cient as the parent spins\nand wastes CPU time. What we would like here instead is some wa y to\nput the parent to sleep until the condition we are waiting for (e.g., the\nchild is done executing) comes true.\n325\n326 CO N D I T I O N VA R I A B L E S\n1 volatile int done = 0;\n2\n3 void *child(void *arg) {\n4 printf(\"child\\n\");\n5 done = 1;\n6 return NULL;\n7 }\n8\n9 int main(int argc, char *argv[]) {\n10 printf(\"parent: begin\\n\");\n11 pthread_t c;\n12 Pthread_create(&c, NULL, child, NULL); // create child\n13 while (done == 0)\n14 ; // spin\n15 printf(\"parent: end\\n\");\n16 return 0;\n17 }\nFigure 30.2: Parent W aiting For Child: Spin-based Approach\nTH E CR U X : H O W TO WA I T FO R A C O N D I T I O N\nIn multi-threaded programs, it is often useful for a thread t o wait for\nsome condition to become true before proceeding. The simple approach,\nof just spinning until the condition becomes true, is grossl y inef\ufb01cient\nand wastes CPU cycles, and in some cases, can be incorrect. Th us, how\nshould a thread wait for a condition?\n30.1 De\ufb01nition and Routines\nT o wait for a condition to become true, a thread can make use of what\nis known as a condition variable . A condition variable is an explicit\nqueue that threads can put themselves on when some state of ex ecution\n(i.e., some condition) is not as desired (by waiting on the condition);\nsome other thread, when it changes said state, can then wake o ne (or\nmore) of those waiting threads and thus allow them to continu e (by sig-\nnaling on the condition). The idea goes back to Dijkstra\u2019s use of \u201cpr ivate\nsemaphores\u201d [D68]; a similar idea was later named a \u201cconditi on variable\u201d\nby Hoare in his work on monitors [H74].\nT o declare such a condition variable, one simply writes some thing\nlike this: pthread cond t c;, which declares c as a condition variable\n(note: proper initialization is also required). A conditio n variable has two\noperations associated with it: wait() and signal(). The wait() call\nis executed when a thread wishes to put itself to sleep; the signal() call\nis executed when a thread has changed something in the progra m and\nthus wants to wake a sleeping thread waiting on this conditio n. Speci\ufb01-\ncally , the POSIX calls look like this:\npthread_cond_wait(pthread_cond_t *c, pthread_mutex_t *m);\npthread_cond_signal(pthread_cond_t *c);\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N D I T I O N VA R I A B L E S 327\n1 int done = 0;\n2 pthread_mutex_t m = PTHREAD_MUTEX_INITIALIZER;\n3 pthread_cond_t c = PTHREAD_COND_INITIALIZER;\n4\n5 void thr_exit() {\n6 Pthread_mutex_lock(&m);\n7 done = 1;\n8 Pthread_cond_signal(&c);\n9 Pthread_mutex_unlock(&m);\n"
  },
  {
    "content": " pthread_mutex_t m = PTHREAD_MUTEX_INITIALIZER;\n3 pthread_cond_t c = PTHREAD_COND_INITIALIZER;\n4\n5 void thr_exit() {\n6 Pthread_mutex_lock(&m);\n7 done = 1;\n8 Pthread_cond_signal(&c);\n9 Pthread_mutex_unlock(&m);\n10 }\n11\n12 void *child(void *arg) {\n13 printf(\"child\\n\");\n14 thr_exit();\n15 return NULL;\n16 }\n17\n18 void thr_join() {\n19 Pthread_mutex_lock(&m);\n20 while (done == 0)\n21 Pthread_cond_wait(&c, &m);\n22 Pthread_mutex_unlock(&m);\n23 }\n24\n25 int main(int argc, char *argv[]) {\n26 printf(\"parent: begin\\n\");\n27 pthread_t p;\n28 Pthread_create(&p, NULL, child, NULL);\n29 thr_join();\n30 printf(\"parent: end\\n\");\n31 return 0;\n32 }\nFigure 30.3: Parent W aiting For Child: Use A Condition V ariable\nW e will often refer to these as wait() and signal() for simplicity .\nOne thing you might notice about the wait() call is that it also takes a\nmutex as a parameter; it assumes that this mutex is locked whe n wait()\nis called. The responsibility of wait() is to release the lock and put the\ncalling thread to sleep (atomically); when the thread wakes up (after some\nother thread has signaled it), it must re-acquire the lock be fore returning\nto the caller . This complexity stems from the desire to preve nt certain\nrace conditions from occurring when a thread is trying to put itself to\nsleep. Let\u2019s take a look at the solution to the join problem (F igure\n30.3) to\nunderstand this better .\nThere are two cases to consider . In the \ufb01rst, the parent creat es the child\nthread but continues running itself (assume we have only a si ngle pro-\ncessor) and thus immediately calls into thr join() to wait for the child\nthread to complete. In this case, it will acquire the lock, ch eck if the child\nis done (it is not), and put itself to sleep by calling wait() (hence releas-\ning the lock). The child will eventually run, print the messa ge \u201cchild\u201d,\nand call thr exit() to wake the parent thread; this code just grabs the\nlock, sets the state variable done, and signals the parent thus waking it.\nFinally , the parent will run (returning from wait() with the lock held),\nunlock the lock, and print the \ufb01nal message \u201cparent: end\u201d.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n328 CO N D I T I O N VA R I A B L E S\nIn the second case, the child runs immediately upon creation , sets\ndone to 1, calls signal to wake a sleeping thread (but there is none , so\nit just returns), and is done. The parent then runs, calls thr join(), sees\nthat done is 1, and thus does not wait and returns.\nOne last note: you might observe the parent uses a while loop instead\nof just an if statement when deciding whether to wait on the condition.\nWhile this does not seem strictly necessary per the logic of t he program,\nit is always a good idea, as we will see below .\nT o make sure you understand the importance of each piece of th e\nthr exit() and thr join() code, let\u2019s try a few alternate implemen-\ntations. First, you might be wondering if we need the state va riable done.\nWhat if the code looked like the example below? W ould this wor k?\n1 void thr_exit() {\n2 Pthread_mutex_lock(&m);\n3 Pthread_cond_signal(&c);\n4 Pthread_mutex_unlock(&m);\n5 }\n6\n7 void thr_join() {\n8 Pthread_mutex_lock(&m);\n9 Pthread_cond_wait(&c, &m);\n10"
  },
  {
    "content": " code looked like the example below? W ould this wor k?\n1 void thr_exit() {\n2 Pthread_mutex_lock(&m);\n3 Pthread_cond_signal(&c);\n4 Pthread_mutex_unlock(&m);\n5 }\n6\n7 void thr_join() {\n8 Pthread_mutex_lock(&m);\n9 Pthread_cond_wait(&c, &m);\n10 Pthread_mutex_unlock(&m);\n11 }\nUnfortunately this approach is broken. Imagine the case whe re the\nchild runs immediately and calls thr\nexit() immediately; in this case,\nthe child will signal, but there is no thread asleep on the con dition. When\nthe parent runs, it will simply call wait and be stuck; no thre ad will ever\nwake it. From this example, you should appreciate the import ance of\nthe state variable done; it records the value the threads are interested in\nknowing. The sleeping, waking, and locking all are built aro und it.\nHere is another poor implementation. In this example, we ima gine\nthat one does not need to hold a lock in order to signal and wait . What\nproblem could occur here? Think about it!\n1 void thr_exit() {\n2 done = 1;\n3 Pthread_cond_signal(&c);\n4 }\n5\n6 void thr_join() {\n7 if (done == 0)\n8 Pthread_cond_wait(&c);\n9 }\nThe issue here is a subtle race condition. Speci\ufb01cally , if th e parent calls\nthr\njoin() and then checks the value of done, it will see that it is 0 and\nthus try to go to sleep. But just before it calls wait to go to sl eep, the parent\nis interrupted, and the child runs. The child changes the sta te variable\ndone to 1 and signals, but no thread is waiting and thus no thread is\nwoken. When the parent runs again, it sleeps forever , which i s sad.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N D I T I O N VA R I A B L E S 329\nTI P : A LWAY S HO L D TH E LO C K WH I L E SI G N A L I N G\nAlthough it is strictly not necessary in all cases, it is like ly simplest and\nbest to hold the lock while signaling when using condition va riables. The\nexample above shows a case where you must hold the lock for correct-\nness; however , there are some other cases where it is likely O K not to, but\nprobably is something you should avoid. Thus, for simplicit y , hold the\nlock when calling signal .\nThe converse of this tip, i.e., hold the lock when calling wai t, is not just\na tip, but rather mandated by the semantics of wait, because w ait always\n(a) assumes the lock is held when you call it, (b) releases sai d lock when\nputting the caller to sleep, and (c) re-acquires the lock jus t before return-\ning. Thus, the generalization of this tip is correct: hold the lock when\ncalling signal or wait , and you will always be in good shape.\nHopefully , from this simple join example, you can see some of the ba-\nsic requirements of using condition variables properly . T o make sure you\nunderstand, we now go through a more complicated example: th e pro-\nducer/consumer or bounded-buffer problem.\n30.2 The Producer/Consumer (Bound Buffer) Problem\nThe next synchronization problem we will confront in this ch apter is\nknown as the producer/consumer problem, or sometimes as the bounded\nbuffer problem, which was \ufb01rst posed by Dijkstra [D72]. Indeed, it w as\nthis very producer/consumer problem that led Dijkstra and h is co-workers\nto invent the generalized semaphore (which can be used as eit her a lock\nor a condition variable) [D01]; we will learn more about sema phores later .\nImagine one or more producer threads and one or more consumer\nthreads. Producers produce data items and wish to place them in a buffer;\nconsumers grab data items out of the buffer consume them in so me way .\nThis arrangement occurs in many real systems. For example"
  },
  {
    "content": "-workers\nto invent the generalized semaphore (which can be used as eit her a lock\nor a condition variable) [D01]; we will learn more about sema phores later .\nImagine one or more producer threads and one or more consumer\nthreads. Producers produce data items and wish to place them in a buffer;\nconsumers grab data items out of the buffer consume them in so me way .\nThis arrangement occurs in many real systems. For example, i n a\nmulti-threaded web server , a producer puts HTTP requests in to a work\nqueue (i.e., the bounded buffer); consumer threads take req uests out of\nthis queue and process them.\nA bounded buffer is also used when you pipe the output of one pr o-\ngram into another , e.g., grep foo file.txt | wc -l. This example\nruns two processes concurrently; grep writes lines from file.txt with\nthe string foo in them to what it thinks is standard output; the U N I X\nshell redirects the output to what is called a U N I X pipe (created by the\npipe system call). The other end of this pipe is connected to the st an-\ndard input of the process wc, which simply counts the number of lines in\nthe input stream and prints out the result. Thus, the grep process is the\nproducer; the wc process is the consumer; between them is an in-kernel\nbounded buffer; you, in this example, are just the happy user .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n330 CO N D I T I O N VA R I A B L E S\n1 int buffer;\n2 int count = 0; // initially, empty\n3\n4 void put(int value) {\n5 assert(count == 0);\n6 count = 1;\n7 buffer = value;\n8 }\n9\n10 int get() {\n11 assert(count == 1);\n12 count = 0;\n13 return buffer;\n14 }\nFigure 30.4: The Put and Get Routines (V ersion 1)\n1 void *producer(void *arg) {\n2 int i;\n3 int loops = (int) arg;\n4 for (i = 0; i < loops; i++) {\n5 put(i);\n6 }\n7 }\n8\n9 void *consumer(void *arg) {\n10 int i;\n11 while (1) {\n12 int tmp = get();\n13 printf(\"%d\\n\", tmp);\n14 }\n15 }\nFigure 30.5: Producer/Consumer Threads (V ersion 1)\nBecause the bounded buffer is a shared resource, we must of co urse\nrequire synchronized access to it, lest 1 a race condition arise. T o begin to\nunderstand this problem better , let us examine some actual c ode.\nThe \ufb01rst thing we need is a shared buffer , into which a produce r puts\ndata, and out of which a consumer takes data. Let\u2019s just use a s ingle\ninteger for simplicity (you can certainly imagine placing a pointer to a\ndata structure into this slot instead), and the two inner rou tines to put\na value into the shared buffer , and to get a value out of the buf fer . See\nFigure\n30.4 for details.\nPretty simple, no? The put() routine assumes the buffer is empty\n(and checks this with an assertion), and then simply puts a va lue into the\nshared buffer and marks it full by setting count to 1. The get() routine\ndoes the opposite, setting the buffer to empty (i.e., settin g count to 0)\nand returning the value. Don\u2019t worry that this shared buffer has just a\nsingle entry; later , we\u2019ll generalize it to a queue that can h old multiple\nentries, which will be even more fun than it sounds.\nNow we need to write some routines that know when it is OK to acc ess\nthe buffer to either put data into it or get data out of it. The c onditions for\n1 This is where we drop some serious Old English on you, and the s ubjunctive form.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N D I T I O N VA R I A B L E S 331\n1"
  },
  {
    "content": " put data into it or get data out of it. The c onditions for\n1 This is where we drop some serious Old English on you, and the s ubjunctive form.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N D I T I O N VA R I A B L E S 331\n1 cond_t cond;\n2 mutex_t mutex;\n3\n4 void *producer(void *arg) {\n5 int i;\n6 for (i = 0; i < loops; i++) {\n7 Pthread_mutex_lock(&mutex); // p1\n8 if (count == 1) // p2\n9 Pthread_cond_wait(&cond, &mutex); // p3\n10 put(i); // p4\n11 Pthread_cond_signal(&cond); // p5\n12 Pthread_mutex_unlock(&mutex); // p6\n13 }\n14 }\n15\n16 void *consumer(void *arg) {\n17 int i;\n18 for (i = 0; i < loops; i++) {\n19 Pthread_mutex_lock(&mutex); // c1\n20 if (count == 0) // c2\n21 Pthread_cond_wait(&cond, &mutex); // c3\n22 int tmp = get(); // c4\n23 Pthread_cond_signal(&cond); // c5\n24 Pthread_mutex_unlock(&mutex); // c6\n25 printf(\"%d\\n\", tmp);\n26 }\n27 }\nFigure 30.6: Producer/Consumer: Single CV and If Statement\nthis should be obvious: only put data into the buffer when count is zero\n(i.e., when the buffer is empty), and only get data from the bu ffer when\ncount is one (i.e., when the buffer is full). If we write the synchro nization\ncode such that a producer puts data into a full buffer , or a con sumer gets\ndata from an empty one, we have done something wrong (and in th is\ncode, an assertion will \ufb01re).\nThis work is going to be done by two types of threads, one set of which\nwe\u2019ll call the producer threads, and the other set which we\u2019ll call con-\nsumer threads. Figure\n30.5 shows the code for a producer that puts an\ninteger into the shared buffer loops number of times, and a consumer\nthat gets the data out of that shared buffer (forever), each t ime printing\nout the data item it pulled from the shared buffer .\nA Broken Solution\nNow imagine that we have just a single producer and a single co nsumer .\nObviously the put() and get() routines have critical sections within\nthem, as put() updates the buffer , and get() reads from it. However ,\nputting a lock around the code doesn\u2019t work; we need somethin g more.\nNot surprisingly , that something more is some condition var iables. In this\n(broken) \ufb01rst try (Figure\n30.6), we have a single condition variable cond\nand associated lock mutex.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n332 CO N D I T I O N VA R I A B L E S\nTc1 State T c2 State Tp State Count Comment\nc1 Running Ready Ready 0\nc2 Running Ready Ready 0\nc3 Sleep Ready Ready 0 Nothing to get\nSleep Ready p1 Running 0\nSleep Ready p2 Running 0\nSleep Ready p4 Running 1 Buffer now full\nReady Ready p5 Running 1 T c1 awoken\nReady Ready p6 Running 1\nReady Ready p1 Running 1\nReady Ready p2 Running 1\nReady Ready p3 Sleep 1 Buffer full; sleep\nReady c1 Running Sleep 1 T c2 sneaks in ...\nReady c2 Running Sleep 1\nReady c4 Running Sleep 0 ... and grabs data\nReady c5 Running Ready 0 T p awoken\nReady c6 Running Ready 0\nc4 Running Ready Ready 0 Oh oh! No data\nT able 30.1: Thread T race: Broken Solution (V ersion 1)\nLet\u2019s examine the signaling logic between producers and con sumers.\nWhen a producer wants to \ufb01ll the buffer , it waits for it to be em"
  },
  {
    "content": " c2 Running Sleep 1\nReady c4 Running Sleep 0 ... and grabs data\nReady c5 Running Ready 0 T p awoken\nReady c6 Running Ready 0\nc4 Running Ready Ready 0 Oh oh! No data\nT able 30.1: Thread T race: Broken Solution (V ersion 1)\nLet\u2019s examine the signaling logic between producers and con sumers.\nWhen a producer wants to \ufb01ll the buffer , it waits for it to be em pty (p1\u2013\np3). The consumer has the exact same logic, but waits for a dif ferent\ncondition: fullness (c1\u2013c3).\nWith just a single producer and a single consumer , the code in Figure\n30.6 works. However , if we have more than one of these threads (e.g .,\ntwo consumers), the solution has two critical problems. Wha t are they?\n... (pause here to think) ...\nLet\u2019s understand the \ufb01rst problem, which has to do with the if state-\nment before the wait. Assume there are two consumers ( Tc1 and Tc2) and\none producer ( Tp). First, a consumer ( Tc1) runs; it acquires the lock (c1),\nchecks if any buffers are ready for consumption (c2), and \ufb01nd ing that\nnone are, waits (c3) (which releases the lock).\nThen the producer ( Tp) runs. It acquires the lock (p1), checks if all\nbuffers are full (p2), and \ufb01nding that not to be the case, goes ahead and\n\ufb01lls the buffer (p4). The producer then signals that a buffer has been\n\ufb01lled (p5). Critically , this moves the \ufb01rst consumer ( Tc1) from sleeping\non a condition variable to the ready queue; Tc1 is now able to run (but\nnot yet running). The producer then continues until realizi ng the buffer\nis full, at which point it sleeps (p6, p1\u2013p3).\nHere is where the problem occurs: another consumer ( Tc2) sneaks in\nand consumes the one existing value in the buffer (c1, c2, c4, c5, c6, skip-\nping the wait at c3 because the buffer is full). Now assume Tc1 runs; just\nbefore returning from the wait, it re-acquires the lock and t hen returns. It\nthen calls get() (c4), but there are no buffers to consume! An assertion\ntriggers, and the code has not functioned as desired. Clearl y , we should\nhave somehow prevented Tc1 from trying to consume because Tc2 snuck\nin and consumed the one value in the buffer that had been produ ced. T a-\nble\n30.1 shows the action each thread takes, as well as its scheduler s tate\n(Ready , Running, or Sleeping) over time.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N D I T I O N VA R I A B L E S 333\n1 cond_t cond;\n2 mutex_t mutex;\n3\n4 void *producer(void *arg) {\n5 int i;\n6 for (i = 0; i < loops; i++) {\n7 Pthread_mutex_lock(&mutex); // p1\n8 while (count == 1) // p2\n9 Pthread_cond_wait(&cond, &mutex); // p3\n10 put(i); // p4\n11 Pthread_cond_signal(&cond); // p5\n12 Pthread_mutex_unlock(&mutex); // p6\n13 }\n14 }\n15\n16 void *consumer(void *arg) {\n17 int i;\n18 for (i = 0; i < loops; i++) {\n19 Pthread_mutex_lock(&mutex); // c1\n20 while (count == 0) // c2\n21 Pthread_cond_wait(&cond, &mutex); // c3\n22 int tmp = get(); // c4\n23 Pthread_cond_signal(&cond); // c5\n24 Pthread_mutex_unlock(&mutex); // c6\n25 printf(\"%d\\n\", tmp);\n26 }\n27 }\nFigure 30."
  },
  {
    "content": "lock(&mutex); // c1\n20 while (count == 0) // c2\n21 Pthread_cond_wait(&cond, &mutex); // c3\n22 int tmp = get(); // c4\n23 Pthread_cond_signal(&cond); // c5\n24 Pthread_mutex_unlock(&mutex); // c6\n25 printf(\"%d\\n\", tmp);\n26 }\n27 }\nFigure 30.7: Producer/Consumer: Single CV and While\nThe problem arises for a simple reason: after the producer wo ke Tc1,\nbut before Tc1 ever ran, the state of the bounded buffer changed (thanks to\nTc2). Signaling a thread only wakes them up; it is thus a hint that the state\nof the world has changed (in this case, that a value has been pl aced in the\nbuffer), but there is no guarantee that when the woken thread runs, the\nstate will still be as desired. This interpretation of what a signal means\nis often referred to as Mesa semantics , after the \ufb01rst research that built\na condition variable in such a manner [LR80]; the contrast, r eferred to as\nHoare semantics , is harder to build but provides a stronger guarantee\nthat the woken thread will run immediately upon being woken [ H74].\nVirtually every system ever built employs Mesa semantics.\nBetter , But Still Broken: While, Not If\nFortunately , this \ufb01x is easy (Figure\n30.7): change the if to a while. Think\nabout why this works; now consumer Tc1 wakes up and (with the lock\nheld) immediately re-checks the state of the shared variabl e (c2). If the\nbuffer is empty at that point, the consumer simply goes back t o sleep\n(c3). The corollary if is also changed to a while in the producer (p2).\nThanks to Mesa semantics, a simple rule to remember with cond ition\nvariables is to always use while loops . Sometimes you don\u2019t have to re-\ncheck the condition, but it is always safe to do so; just do it a nd be happy .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n334 CO N D I T I O N VA R I A B L E S\nTc1 State T c2 State Tp State Count Comment\nc1 Running Ready Ready 0\nc2 Running Ready Ready 0\nc3 Sleep Ready Ready 0 Nothing to get\nSleep c1 Running Ready 0\nSleep c2 Running Ready 0\nSleep c3 Sleep Ready 0 Nothing to get\nSleep Sleep p1 Running 0\nSleep Sleep p2 Running 0\nSleep Sleep p4 Running 1 Buffer now full\nReady Sleep p5 Running 1 T c1 awoken\nReady Sleep p6 Running 1\nReady Sleep p1 Running 1\nReady Sleep p2 Running 1\nReady Sleep p3 Sleep 1 Must sleep (full)\nc2 Running Sleep Sleep 1 Recheck condition\nc4 Running Sleep Sleep 0 T c1 grabs data\nc5 Running Ready Sleep 0 Oops! W oke T c2\nc6 Running Ready Sleep 0\nc1 Running Ready Sleep 0\nc2 Running Ready Sleep 0\nc3 Sleep Ready Sleep 0 Nothing to get\nSleep c2 Running Sleep 0\nSleep c3 Sleep Sleep 0 Everyone asleep...\nT able 30.2: Thread T race: Broken Solution (V ersion 2)\nHowever , this code still has a bug, the second of two problems men-\ntioned above. Can you see it? It has something to do with the fa ct that\nthere is only one condition variable. T ry to \ufb01gure out what th e problem\nis, before reading ahead. DO IT!\n... (another pause for you to think, or close your eyes for a bi t) ...\nLet\u2019s con\ufb01rm you \ufb01gured it out correctly , or perhaps let\u2019s co n\ufb01rm that\nyou are now awake and reading this part of the book. The proble m oc-\ncurs when two consumers run \ufb01rst ( Tc1 and Tc2), and both go to sleep\n(c3). Then, a producer runs, put a value in the buffer , wakes o ne of the\nconsumers (say Tc1), and goes back to sleep. Now we have one consumer\nready to run ( Tc1), and two threads sleeping on a condition ( Tc2 and Tp).\n"
  },
  {
    "content": " The proble m oc-\ncurs when two consumers run \ufb01rst ( Tc1 and Tc2), and both go to sleep\n(c3). Then, a producer runs, put a value in the buffer , wakes o ne of the\nconsumers (say Tc1), and goes back to sleep. Now we have one consumer\nready to run ( Tc1), and two threads sleeping on a condition ( Tc2 and Tp).\nAnd we are about to cause a problem to occur: things are gettin g exciting!\nThe consumer Tc1 then wakes by returning from wait() (c3), re-checks\nthe condition (c2), and \ufb01nding the buffer full, consumes the value (c4).\nThis consumer then, critically , signals on the condition (c 5), waking one\nthread that is sleeping. However , which thread should it wak e?\nBecause the consumer has emptied the buffer , it clearly shou ld wake\nthe producer . However , if it wakes the consumer Tc2 (which is de\ufb01nitely\npossible, depending on how the wait queue is managed), we hav e a prob-\nlem. Speci\ufb01cally , the consumer Tc2 will wake up and \ufb01nd the buffer\nempty (c2), and go back to sleep (c3). The producer Tp, which has a value\nto put into the buffer , is left sleeping. The other consumer t hread, Tc1,\nalso goes back to sleep. All three threads are left sleeping, a clear bug; see\nT able 30.2 for the brutal step-by-step of this terrible calamity .\nSignaling is clearly needed, but must be more directed. A con sumer\nshould not wake other consumers, only producers, and vice-v ersa.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N D I T I O N VA R I A B L E S 335\n1 cond_t empty, fill;\n2 mutex_t mutex;\n3\n4 void *producer(void *arg) {\n5 int i;\n6 for (i = 0; i < loops; i++) {\n7 Pthread_mutex_lock(&mutex);\n8 while (count == 1)\n9 Pthread_cond_wait(&empty, &mutex);\n10 put(i);\n11 Pthread_cond_signal(&fill);\n12 Pthread_mutex_unlock(&mutex);\n13 }\n14 }\n15\n16 void *consumer(void *arg) {\n17 int i;\n18 for (i = 0; i < loops; i++) {\n19 Pthread_mutex_lock(&mutex);\n20 while (count == 0)\n21 Pthread_cond_wait(&fill, &mutex);\n22 int tmp = get();\n23 Pthread_cond_signal(&empty);\n24 Pthread_mutex_unlock(&mutex);\n25 printf(\"%d\\n\", tmp);\n26 }\n27 }\nFigure 30.8: Producer/Consumer: T wo CVs and While\nThe Single Buffer Producer/Consumer Solution\nThe solution here is once again a small one: use two condition variables,\ninstead of one, in order to properly signal which type of thre ad should\nwake up when the state of the system changes. Figure\n30.8 shows the\nresulting code.\nIn the code above, producer threads wait on the condition empty, and\nsignals \ufb01ll . Conversely , consumer threads wait on \ufb01ll and signal empty.\nBy doing so, the second problem above is avoided by design: a c onsumer\ncan never accidentally wake a consumer , and a producer can ne ver acci-\ndentally wake a producer .\nThe Final Producer/Consumer Solution\nW e now have a working producer/consumer solution, albeit no t a fully\ngeneral one. The last change we make is to enable more concurr ency and\nef\ufb01ciency; speci\ufb01cally , we add more buffer slots, so that mu ltiple values\ncan be produced before sleeping, and similarly multiple val ues can be\nconsumed before sleeping. With just a single producer and co nsumer , this\napproach is more ef\ufb01cient as it reduces context switches; wi th multiple\nproducers or consumers (or both), it even"
  },
  {
    "content": " enable more concurr ency and\nef\ufb01ciency; speci\ufb01cally , we add more buffer slots, so that mu ltiple values\ncan be produced before sleeping, and similarly multiple val ues can be\nconsumed before sleeping. With just a single producer and co nsumer , this\napproach is more ef\ufb01cient as it reduces context switches; wi th multiple\nproducers or consumers (or both), it even allows concurrent producing\nor consuming to take place, thus increasing concurrency . Fo rtunately , it\nis a small change from our current solution.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n336 CO N D I T I O N VA R I A B L E S\n1 int buffer[MAX];\n2 int fill = 0;\n3 int use = 0;\n4 int count = 0;\n5\n6 void put(int value) {\n7 buffer[fill] = value;\n8 fill = (fill + 1) % MAX;\n9 count++;\n10 }\n11\n12 int get() {\n13 int tmp = buffer[use];\n14 use = (use + 1) % MAX;\n15 count--;\n16 return tmp;\n17 }\nFigure 30.9: The Final Put and Get Routines\n1 cond_t empty, fill;\n2 mutex_t mutex;\n3\n4 void *producer(void *arg) {\n5 int i;\n6 for (i = 0; i < loops; i++) {\n7 Pthread_mutex_lock(&mutex); // p1\n8 while (count == MAX) // p2\n9 Pthread_cond_wait(&empty, &mutex); // p3\n10 put(i); // p4\n11 Pthread_cond_signal(&fill); // p5\n12 Pthread_mutex_unlock(&mutex); // p6\n13 }\n14 }\n15\n16 void *consumer(void *arg) {\n17 int i;\n18 for (i = 0; i < loops; i++) {\n19 Pthread_mutex_lock(&mutex); // c1\n20 while (count == 0) // c2\n21 Pthread_cond_wait(&fill, &mutex); // c3\n22 int tmp = get(); // c4\n23 Pthread_cond_signal(&empty); // c5\n24 Pthread_mutex_unlock(&mutex); // c6\n25 printf(\"%d\\n\", tmp);\n26 }\n27 }\nFigure 30.10: The Final W orking Solution\nThe \ufb01rst change for this \ufb01nal solution is within the buffer st ructure\nitself and the corresponding put() and get() (Figure\n30.9). W e also\nslightly change the conditions that producers and consumer s check in or-\nder to determine whether to sleep or not. Figure 30.10 shows the \ufb01nal\nwaiting and signaling logic. A producer only sleeps if all bu ffers are cur-\nrently \ufb01lled (p2); similarly , a consumer only sleeps if all b uffers are cur-\nrently empty (c2). And thus we solve the producer/consumer p roblem.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N D I T I O N VA R I A B L E S 337\nTI P : U S E WH I L E (N O T IF ) F O R CO N D I T I O N S\nWhen checking for a condition in a multi-threaded program, u sing\na while loop is always correct; using an if statement only might be,\ndepending on the semantics of signaling. Thus, always use while and\nyour code will behave as expected.\nUsing while loops around conditional checks also handles th e case\nwhere spurious wakeups occur . In some thread packages, due to de-\ntails of the implementation, it is possible that two threads get woken up\nthough just a single signal has taken place [L11]. Spurious w akeups are\nfurther reason to re-check the condition a thread is waiting on.\n30.3 Covering Conditions\nW e\u2019ll now look at one more example of how condition variables can\nbe used. This code study is drawn"
  },
  {
    "content": "where spurious wakeups occur . In some thread packages, due to de-\ntails of the implementation, it is possible that two threads get woken up\nthough just a single signal has taken place [L11]. Spurious w akeups are\nfurther reason to re-check the condition a thread is waiting on.\n30.3 Covering Conditions\nW e\u2019ll now look at one more example of how condition variables can\nbe used. This code study is drawn from Lampson and Redell\u2019s pa per on\nPilot [LR80], the same group who \ufb01rst implemented the Mesa semantics\ndescribed above (the language they used was Mesa, hence the n ame).\nThe problem they ran into is best shown via simple example, in this\ncase in a simple multi-threaded memory allocation library . Figure 30.11\nshows a code snippet which demonstrates the issue.\nAs you might see in the code, when a thread calls into the memor y\nallocation code, it might have to wait in order for more memor y to be-\ncome free. Conversely , when a thread frees memory , it signal s that more\nmemory is free. However , our code above has a problem: which w aiting\nthread (there can be more than one) should be woken up?\nConsider the following scenario. Assume there are zero byte s free;\nthread Ta calls allocate(100), followed by thread Tb which asks for\nless memory by calling allocate(10). Both Ta and Tb thus wait on the\ncondition and go to sleep; there aren\u2019t enough free bytes to s atisfy either\nof these requests.\nAt that point, assume a third thread, Tc , calls free(50). Unfortu-\nnately , when it calls signal to wake a waiting thread, it migh t not wake\nthe correct waiting thread, Tb , which is waiting for only 10 bytes to be\nfreed; Ta should remain waiting, as not enough memory is yet free. Thus ,\nthe code in the \ufb01gure does not work, as the thread waking other threads\ndoes not know which thread (or threads) to wake up.\nThe solution suggested by Lampson and Redell is straightfor ward: re-\nplace the pthread cond signal() call in the code above with a call to\npthread cond broadcast(), which wakes up all waiting threads. By\ndoing so, we guarantee that any threads that should be woken a re. The\ndownside, of course, can be a negative performance impact, a s we might\nneedlessly wake up many other waiting threads that shouldn\u2019 t (yet) be\nawake. Those threads will simply wake up, re-check the condi tion, and\nthen go immediately back to sleep.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n338 CO N D I T I O N VA R I A B L E S\n1 // how many bytes of the heap are free?\n2 int bytesLeft = MAX_HEAP_SIZE;\n3\n4 // need lock and condition too\n5 cond_t c;\n6 mutex_t m;\n7\n8 void *\n9 allocate(int size) {\n10 Pthread_mutex_lock(&m);\n11 while (bytesLeft < size)\n12 Pthread_cond_wait(&c, &m);\n13 void *ptr = ...; // get mem from heap\n14 bytesLeft -= size;\n15 Pthread_mutex_unlock(&m);\n16 return ptr;\n17 }\n18\n19 void free(void *ptr, int size) {\n20 Pthread_mutex_lock(&m);\n21 bytesLeft += size;\n22 Pthread_cond_signal(&c); // whom to signal??\n23 Pthread_mutex_unlock(&m);\n24 }\nFigure 30.11: Covering Conditions: An Example\nLampson and Redell call such a condition a covering condition , as it\ncovers all the cases where a thread needs to wake up (conserva tively);\nthe cost, as we\u2019ve discussed, is that too many threads might b e woken.\nThe astute reader might also have noticed we could have used t his ap-\nproach earlier (see the producer/consumer problem with onl y a single\ncondition variable). However , in that case, a better soluti on was avail-\nable to us, and thus we used it. In general, if you \ufb01nd that"
  },
  {
    "content": "conserva tively);\nthe cost, as we\u2019ve discussed, is that too many threads might b e woken.\nThe astute reader might also have noticed we could have used t his ap-\nproach earlier (see the producer/consumer problem with onl y a single\ncondition variable). However , in that case, a better soluti on was avail-\nable to us, and thus we used it. In general, if you \ufb01nd that your program\nonly works when you change your signals to broadcasts (but yo u don\u2019t\nthink it should need to), you probably have a bug; \ufb01x it! But in cases like\nthe memory allocator above, broadcast may be the most straig htforward\nsolution available.\n30.4 Summary\nW e have seen the introduction of another important synchron ization\nprimitive beyond locks: condition variables. By allowing t hreads to sleep\nwhen some program state is not as desired, CVs enable us to nea tly solve\na number of important synchronization problems, including the famous\n(and still important) producer/consumer problem, as well a s covering\nconditions. A more dramatic concluding sentence would go he re, such as\n\u201cHe loved Big Brother \u201d [O49].\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO N D I T I O N VA R I A B L E S 339\nReferences\n[D72] \u201cInformation Streams Sharing a Finite Buffer \u201d\nE.W . Dijkstra\nInformation Processing Letters 1: 179180, 1972\nA vailable: http://www .cs.utexas.edu/users/EWD/ewd03xx/EWD329.PDF\nThe famous paper that introduced the producer/consumer pro blem.\n[D01] \u201cMy recollections of operating system design\u201d\nE.W . Dijkstra\nApril, 2001\nA vailable: http://www .cs.utexas.edu/users/EWD/ewd13xx/EWD1303.PDF\nA fascinating read for those of you interested in how the pion eers of our \ufb01eld came up with some very\nbasic and fundamental concepts, including ideas like \u201cinte rrupts\u201d and even \u201ca stack\u201d!\n[H74] \u201cMonitors: An Operating System Structuring Concept\u201d\nC.A.R. Hoare\nCommunications of the ACM, 17:10, pages 549\u2013557, October 19 74\nHoare did a fair amount of theoretical work in concurrency. H owever , he is still probably most known\nfor his work on Quicksort, the coolest sorting algorithm in t he world, at least according to these authors.\n[L11] \u201cPthread\ncond signal Man Page\u201d\nA vailable: http://linux.die.net/man/3/pthread cond signal\nMarch, 2011\nThe Linux man page shows a nice simple example of why a thread m ight get a spurious wakeup, due to\nrace conditions within the signal/wakeup code.\n[LR80] \u201cExperience with Processes and Monitors in Mesa\u201d\nB.W . Lampson, D.R. Redell\nCommunications of the ACM. 23:2, pages 105-117, February 19 80\nA terri\ufb01c paper about how to actually implement signaling an d condition variables in a real system,\nleading to the term \u201cMesa\u201d semantics for what it means to be wo ken up; the older semantics, developed\nby T ony Hoare [H74], then became known as \u201cHoare\u201d semantics, which is hard to say out loud in class\nwith a straight face.\n[O49] \u201c1984\u201d\nGeorge Orwell, 1949, Secker and W arburg\nA little heavy-handed, but of course a must read. That said, w e kind of gave away the ending by quoting\nthe last sentence. Sorry! And if the government is reading th is, let us just say that we think that the\ngovernment is \u201cdouble plus good\u201d. Hear that, our pals at the N SA?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n31\nSemaphores\nAs we know now , one needs both locks and condition variables t"
  },
  {
    "content": " last sentence. Sorry! And if the government is reading th is, let us just say that we think that the\ngovernment is \u201cdouble plus good\u201d. Hear that, our pals at the N SA?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n31\nSemaphores\nAs we know now , one needs both locks and condition variables t o solve\na broad range of relevant and interesting concurrency probl ems. One of\nthe \ufb01rst people to realize this years ago was Edsger Dijkstra (though it\nis hard to know the exact history [GR92]), known among other t hings for\nhis famous \u201cshortest paths\u201d algorithm in graph theory [D59] , an early\npolemic on structured programming entitled \u201cGoto Statemen ts Consid-\nered Harmful\u201d [D68a] (what a great title!), and, in the case w e will study\nhere, the introduction of a synchronization primitive call ed the semaphore\n[D68b,D72]. Indeed, Dijkstra and colleagues invented the s emaphore as a\nsingle primitive for all things related to synchronization ; as you will see,\none can use semaphores as both locks and condition variables .\nTH E CR U X : H O W TO US E SE M A P H O R E S\nHow can we use semaphores instead of locks and condition vari ables?\nWhat is the de\ufb01nition of a semaphore? What is a binary semapho re?\nIs it straightforward to build a semaphore out of locks and co ndition\nvariables? What about building locks and condition variabl es out of\nsemaphores?\n31.1 Semaphores: A De\ufb01nition\nA semaphore is as an object with an integer value that we can ma -\nnipulate with two routines; in the POSIX standard, these rou tines are\nsem wait() and sem post()1. Because the initial value of the semaphore\ndetermines its behavior , before calling any other routine t o interact with\nthe semaphore, we must \ufb01rst initialize it to some value, as th e code in\nFigure 31.1 does.\n1 Historically ,sem wait() was \ufb01rst called P() by Dijkstra (for the Dutch word \u201cto probe\u201d )\nand sem post() was called V() (for the Dutch word \u201cto test\u201d). Sometimes, peo ple call them\ndown and up, too. Use the Dutch versions to impress your frien ds.\n341\n342 SE M A P H O R E S\n1 #include <semaphore.h>\n2 sem_t s;\n3 sem_init(&s, 0, 1);\nFigure 31.1: Initializing A Semaphore\nIn the \ufb01gure, we declare a semaphore s and initialize it to the value 1\nby passing 1 in as the third argument. The second argument to sem init()\nwill be set to 0 in all of the examples we\u2019ll see; this indicate s that the\nsemaphore is shared between threads in the same process. See the man\npage for details on other usages of semaphores (namely , how t hey can\nbe used to synchronize access across different processes), which require a\ndifferent value for that second argument.\nAfter a semaphore is initialized, we can call one of two funct ions to\ninteract with it, sem wait() or sem post(). The behavior of these two\nfunctions is seen in Figure 31.2.\nFor now , we are not concerned with the implementation of thes e rou-\ntines, which clearly requires some care; with multiple thre ads calling into\nsem wait() and sem post(), there is the obvious need for managing\nthese critical sections. W e will now focus on how to use these primitives;\nlater we may discuss how they are built.\nW e should discuss a few salient aspects of the interfaces her e. First, we\ncan see that sem wait() will either return right away (because the value\nof the semaphore was one or higher when we called sem wait()), or it\nwill cause the caller to suspend execution waiting for a subs equent post.\nOf course, multiple calling threads may call into sem wait(), and thus\nall be queued waiting to be woken.\nSecond, we can see that sem post() does not wait"
  },
  {
    "content": " aspects of the interfaces her e. First, we\ncan see that sem wait() will either return right away (because the value\nof the semaphore was one or higher when we called sem wait()), or it\nwill cause the caller to suspend execution waiting for a subs equent post.\nOf course, multiple calling threads may call into sem wait(), and thus\nall be queued waiting to be woken.\nSecond, we can see that sem post() does not wait for some particular\ncondition to hold like sem wait() does. Rather , it simply increments the\nvalue of the semaphore and then, if there is a thread waiting t o be woken,\nwakes one of them up.\nThird, the value of the semaphore, when negative, is equal to the num-\nber of waiting threads [D68b]. Though the value generally is n\u2019t seen by\nusers of the semaphores, this invariant is worth knowing and perhaps\ncan help you remember how a semaphore functions.\nDon\u2019t worry (yet) about the seeming race conditions possibl e within\nthe semaphore; assume that the actions they make are perform ed atomi-\ncally . W e will soon use locks and condition variables to do ju st this.\n1 int sem_wait(sem_t *s) {\n2 decrement the value of semaphore s by one\n3 wait if value of semaphore s is negative\n4 }\n5\n6 int sem_post(sem_t *s) {\n7 increment the value of semaphore s by one\n8 if there are one or more threads waiting, wake one\n9 }\nFigure 31.2: Semaphore: De\ufb01nitions of W ait and Post\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSE M A P H O R E S 343\n1 sem_t m;\n2 sem_init(&m, 0, X); // initialize semaphore to X; what should X be?\n3\n4 sem_wait(&m);\n5 // critical section here\n6 sem_post(&m);\nFigure 31.3: A Binary Semaphore, a.k.a. a Lock\n31.2 Binary Semaphores (Locks)\nW e are now ready to use a semaphore. Our \ufb01rst use will be one wit h\nwhich we are already familiar: using a semaphore as a lock. Se e Figure\n31.3 for a code snippet; therein, you\u2019ll see that we simply surrou nd the\ncritical section of interest with a sem wait()/sem post() pair . Criti-\ncal to making this work, though, is the initial value of the se maphore m\n(initialized to X in the \ufb01gure). What should X be?\n... (T ry thinking about it before going on) ...\nLooking back at de\ufb01nition of the sem\nwait() and sem post() rou-\ntines above, we can see that the initial value should be 1.\nT o make this clear , let\u2019s imagine a scenario with two threads . The \ufb01rst\nthread (Thread 0) calls sem wait(); it will \ufb01rst decrement the value of\nthe semaphore, changing it to 0. Then, it will wait only if the value is\nnot greater than or equal to 0; because the value is 0, the calling thread\nwill simply return and continue; Thread 0 is now free to enter the critical\nsection. If no other thread tries to acquire the lock while Th read 0 is inside\nthe critical section, when it calls sem post(), it will simply restore the\nvalue of the semaphore to 1 (and not wake any waiting thread, b ecause\nthere are none). T able 31.1 shows a trace of this scenario.\nA more interesting case arises when Thread 0 \u201cholds the lock\u201d (i.e.,\nit has called sem wait() but not yet called sem post()), and another\nthread (Thread 1) tries to enter the critical section by call ing sem wait().\nIn this case, Thread 1 will decrement the value of the semapho re to -1, and\nthus wait (putting itself to sleep and relinquishing the pro cessor). When\nThread 0 runs again, it will eventually call sem post(), incrementing the\nvalue of the semaphore back to zero, and then wake the waiting"
  },
  {
    "content": " not yet called sem post()), and another\nthread (Thread 1) tries to enter the critical section by call ing sem wait().\nIn this case, Thread 1 will decrement the value of the semapho re to -1, and\nthus wait (putting itself to sleep and relinquishing the pro cessor). When\nThread 0 runs again, it will eventually call sem post(), incrementing the\nvalue of the semaphore back to zero, and then wake the waiting thread\n(Thread 1), which will then be able to acquire the lock for its elf. When\nThread 1 \ufb01nishes, it will again increment the value of the sem aphore,\nrestoring it to 1 again.\nV alue of Semaphore Thread 0 Thread 1\n1\n1 call sem\nwait()\n0 sem wait() returns\n0 (crit sect)\n0 call sem post()\n1 sem post() returns\nT able 31.1: Thread T race: Single Thread Using A Semaphore\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n344 SE M A P H O R E S\nV alue Thread 0 State Thread 1 State\n1 Running Ready\n1 call sem\nwait() Running Ready\n0 sem wait() returns Running Ready\n0 (crit sect: begin) Running Ready\n0 Interrupt; Switch \u2192T1 Ready Running\n0 Ready call sem wait() Running\n-1 Ready decrement sem Running\n-1 Ready (sem<0)\u2192sleep Sleeping\n-1 Running Switch\u2192T0 Sleeping\n-1 (crit sect: end) Running Sleeping\n-1 call sem post() Running Sleeping\n0 increment sem Running Sleeping\n0 wake(T1) Running Ready\n0 sem post() returns Running Ready\n0 Interrupt; Switch \u2192T1 Ready Running\n0 Ready sem wait() returns Running\n0 Ready (crit sect) Running\n0 Ready call sem post() Running\n1 Ready sem post() returns Running\nT able 31.2: Thread T race: T wo Threads Using A Semaphore\nT able 31.2 shows a trace of this example. In addition to thread actions,\nthe table shows the scheduler state of each thread: Running, Ready (i.e.,\nrunnable but not running), and Sleeping. Note in particular that Thread 1\ngoes into the sleeping state when it tries to acquire the alre ady-held lock;\nonly when Thread 0 runs again can Thread 1 be awoken and potent ially\nrun again.\nIf you want to work through your own example, try a scenario wh ere\nmultiple threads queue up waiting for a lock. What would the v alue of\nthe semaphore be during such a trace?\nThus we are able to use semaphores as locks. Because locks onl y have\ntwo states (held and not held), this usage is sometimes known as a binary\nsemaphore and in fact can be implemented in a more simpli\ufb01ed manner\nthan discussed here; we instead use the generalized semapho re as a lock.\n31.3 Semaphores As Condition V ariables\nSemaphores are also useful when a thread wants to halt its pro gress\nwaiting for a condition to become true. For example, a thread may wish\nto wait for a list to become non-empty , so it can delete an elem ent from it.\nIn this pattern of usage, we often \ufb01nd a thread waiting for something to\nhappen, and a different thread making that something happen and then\nsignaling that it has happened, thus waking the waiting thread. Becaus e\nthe waiting thread (or threads) is waiting for some condition in the pro-\ngram to change, we are using the semaphore as a condition variable .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSE M A P H O R E S 345\n1 sem_t s;\n2\n3 void *\n4 child(void *arg) {\n5 printf(\"child\\n\");\n6 sem_post(&s); // signal here: child is done\n7 return NULL;\n8 }\n9\n10 int\n11 main(int argc, char *argv[]) {\n12 sem_init(&s, 0, X); // what should X be?\n13 printf(\"parent: begin\\n\");\n14 pthread_t c;\n15 Pthread_create(c, NULL, child, NULL);"
  },
  {
    "content": " printf(\"child\\n\");\n6 sem_post(&s); // signal here: child is done\n7 return NULL;\n8 }\n9\n10 int\n11 main(int argc, char *argv[]) {\n12 sem_init(&s, 0, X); // what should X be?\n13 printf(\"parent: begin\\n\");\n14 pthread_t c;\n15 Pthread_create(c, NULL, child, NULL);\n16 sem_wait(&s); // wait here for child\n17 printf(\"parent: end\\n\");\n18 return 0;\n19 }\nFigure 31.4: A Parent W aiting For Its Child\nA simple example is as follows. Imagine a thread creates anot her\nthread and then wants to wait for it to complete its execution (Figure\n31.4). When this program runs, we would like to see the following:\nparent: begin\nchild\nparent: end\nThe question, then, is how to use a semaphore to achieve this e ffect,\nand is it turns out, it is relatively easy to understand. As yo u can see in\nthe code, the parent simply calls sem\nwait() and the child sem post()\nto wait for the condition of the child \ufb01nishing its execution to become\ntrue. However , this raises the question: what should the ini tial value of\nthis semaphore be?\n(Again, think about it here, instead of reading ahead)\nThe answer , of course, is that the value of the semaphore shou ld be\nset to is 0. There are two cases to consider . First, let us assu me that the\nparent creates the child but the child has not run yet (i.e., i t is sitting in\na ready queue but not running). In this case (T able\n31.3), the parent will\ncall sem wait() before the child has called sem post(); we\u2019d like the\nparent to wait for the child to run. The only way this will happ en is if the\nvalue of the semaphore is not greater than 0; hence, 0 is the in itial value.\nThe parent runs, decrements the semaphore (to -1), then wait s (sleeping).\nWhen the child \ufb01nally runs, it will call sem post(), increment the value\nof the semaphore to 0, and wake the parent, which will then ret urn from\nsem wait() and \ufb01nish the program.\nThe second case (T able 31.4) occurs when the child runs to comple-\ntion before the parent gets a chance to call sem wait(). In this case,\nthe child will \ufb01rst call sem post(), thus incrementing the value of the\nsemaphore from 0 to 1. When the parent then gets a chance to run , it\nwill call sem wait() and \ufb01nd the value of the semaphore to be 1; the\nparent will thus decrement the value (to 0) and return from sem wait()\nwithout waiting, also achieving the desired effect.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n346 SE M A P H O R E S\nV alue Parent State Child State\n0 create(Child) Running (Child exists; is runnable) Ready\n0 call sem wait() Running Ready\n-1 decrement sem Running Ready\n-1 (sem<0)\u2192sleep Sleeping Ready\n-1 Switch\u2192Child Sleeping child runs Running\n-1 Sleeping call sem post() Running\n0 Sleeping increment sem Running\n0 Ready wake(Parent) Running\n0 Ready sem post() returns Running\n0 Ready Interrupt; Switch \u2192Parent Ready\n0 sem wait() returns Ready Ready\nT able 31.3: Thread T race: Parent W aiting For Child (Case 1)\nV alue Parent State Child State\n0 create(Child) Running (Child exists; is runnable) Ready\n0 Interrupt; Switch \u2192Child Ready child runs Running\n0 Ready call sem post() Running\n1 Ready increment sem Running\n1 Ready wake(nobody) Running\n1 Ready sem post() returns Running\n1 parent runs Running Interrupt; Switch \u2192Parent Ready\n1 call sem wait() Running Ready\n0 decrement sem Running Ready\n0 (sem\u22650)\u2192awake Running Ready\n0 sem wait() returns Running Ready\nT able 31.4: Thread T race: Parent W aiting For Child (Case 2)\n31.4 The Producer/Consumer (Bounded"
  },
  {
    "content": " increment sem Running\n1 Ready wake(nobody) Running\n1 Ready sem post() returns Running\n1 parent runs Running Interrupt; Switch \u2192Parent Ready\n1 call sem wait() Running Ready\n0 decrement sem Running Ready\n0 (sem\u22650)\u2192awake Running Ready\n0 sem wait() returns Running Ready\nT able 31.4: Thread T race: Parent W aiting For Child (Case 2)\n31.4 The Producer/Consumer (Bounded-Buffer) Problem\nThe next problem we will confront in this chapter is known as t he pro-\nducer/consumer problem, or sometimes as the bounded buffer problem\n[D72]. This problem is described in detail in the previous ch apter on con-\ndition variables; see there for details.\nFirst Attempt\nOur \ufb01rst attempt at solving the problem introduces two semap hores, empty\nand full, which the threads will use to indicate when a buffer entry ha s\nbeen emptied or \ufb01lled, respectively . The code for the put and get routines\nis in Figure\n31.5, and our attempt at solving the producer and consumer\nproblem is in Figure 31.6.\nIn this example, the producer \ufb01rst waits for a buffer to becom e empty\nin order to put data into it, and the consumer similarly waits for a buffer\nto become \ufb01lled before using it. Let us \ufb01rst imagine that MAX=1 (there is\nonly one buffer in the array), and see if this works.\nImagine again there are two threads, a producer and a consume r . Let\nus examine a speci\ufb01c scenario on a single CPU. Assume the cons umer\ngets to run \ufb01rst. Thus, the consumer will hit line c1 in the \ufb01gu re above,\ncalling sem wait(&full). Because full was initialized to the value 0,\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSE M A P H O R E S 347\n1 int buffer[MAX];\n2 int fill = 0;\n3 int use = 0;\n4\n5 void put(int value) {\n6 buffer[fill] = value; // line f1\n7 fill = (fill + 1) % MAX; // line f2\n8 }\n9\n10 int get() {\n11 int tmp = buffer[use]; // line g1\n12 use = (use + 1) % MAX; // line g2\n13 return tmp;\n14 }\nFigure 31.5: The Put and Get Routines\n1 sem_t empty;\n2 sem_t full;\n3\n4 void *producer(void *arg) {\n5 int i;\n6 for (i = 0; i < loops; i++) {\n7 sem_wait(&empty); // line P1\n8 put(i); // line P2\n9 sem_post(&full); // line P3\n10 }\n11 }\n12\n13 void *consumer(void *arg) {\n14 int i, tmp = 0;\n15 while (tmp != -1) {\n16 sem_wait(&full); // line C1\n17 tmp = get(); // line C2\n18 sem_post(&empty); // line C3\n19 printf(\"%d\\n\", tmp);\n20 }\n21 }\n22\n23 int main(int argc, char *argv[]) {\n24 // ...\n25 sem_init(&empty, 0, MAX); // MAX buffers are empty to begin with...\n26 sem_init(&full, 0, 0); // ... and 0 are full\n27 // ...\n28 }\nFigure 31.6: Adding the Full and Empty Conditions\nthe call will decrement full (to -1), block the consumer , and wait for\nanother thread to call sem\npost() on full, as desired.\nAssume the producer then runs. It will hit line P1, thus calli ng the\nsem wait(&empty) routine. Unlike the consumer , the producer will\ncontinue through this line, because empty was initialized t o the value\nMAX (in this case, 1). Thus, empty will be decremented to 0 and the\nproducer will put a data value into the \ufb01rst entry of buffer (l ine P2). The\nproducer will then continue on to P3 and call sem post(&full), chang-\ning the value of the full semaphore from -1 to 0 and waking"
  },
  {
    "content": " , the producer will\ncontinue through this line, because empty was initialized t o the value\nMAX (in this case, 1). Thus, empty will be decremented to 0 and the\nproducer will put a data value into the \ufb01rst entry of buffer (l ine P2). The\nproducer will then continue on to P3 and call sem post(&full), chang-\ning the value of the full semaphore from -1 to 0 and waking the c onsumer\n(e.g., move it from blocked to ready).\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n348 SE M A P H O R E S\nIn this case, one of two things could happen. If the producer c ontin-\nues to run, it will loop around and hit line P1 again. This time , how-\never , it would block, as the empty semaphore\u2019s value is 0. If t he producer\ninstead was interrupted and the consumer began to run, it wou ld call\nsem wait(&full) (line c1) and \ufb01nd that the buffer was indeed full and\nthus consume it. In either case, we achieve the desired behav ior .\nY ou can try this same example with more threads (e.g., multip le pro-\nducers, and multiple consumers). It should still work.\nLet us now imagine that MAX is greater than 1 (say MAX = 10). For this\nexample, let us assume that there are multiple producers and multiple\nconsumers. W e now have a problem: a race condition. Do you see where\nit occurs? (take some time and look for it) If you can\u2019t see it, here\u2019s a hint:\nlook more closely at the put() and get() code.\nOK, let\u2019s understand the issue. Imagine two producers (Pa an d Pb)\nboth calling into put() at roughly the same time. Assume prod ucer Pa gets\nto run \ufb01rst, and just starts to \ufb01ll the \ufb01rst buffer entry (\ufb01ll = 0 at line f1).\nBefore Pa gets a chance to increment the \ufb01ll counter to 1, it is interrupted.\nProducer Pb starts to run, and at line f1 it also puts its data i nto the 0th\nelement of buffer , which means that the old data there is over written!\nThis is a no-no; we don\u2019t want any data from the producer to be l ost.\nA Solution: Adding Mutual Exclusion\nAs you can see, what we\u2019ve forgotten here is mutual exclusion . The\n\ufb01lling of a buffer and incrementing of the index into the buff er is a critical\nsection, and thus must be guarded carefully . So let\u2019s use our friend the\nbinary semaphore and add some locks. Figure 31.7 shows our attempt.\nNow we\u2019ve added some locks around the entire put()/get() par ts of\nthe code, as indicated by the NEW LINE comments. That seems like the\nright idea, but it also doesn\u2019t work. Why? Deadlock. Why does deadlock\noccur? T ake a moment to consider it; try to \ufb01nd a case where dea dlock\narises. What sequence of steps must happen for the program to deadlock?\nA voiding Deadlock\nOK, now that you \ufb01gured it out, here is the answer . Imagine two threads,\none producer and one consumer . The consumer gets to run \ufb01rst. It ac-\nquires the mutex (line c0), and then calls sem\nwait() on the full semaphore\n(line c1); because there is no data yet, this call causes the c onsumer to\nblock and thus yield the CPU; importantly , though, the consu mer still\nholds the lock.\nA producer then runs. It has data to produce and if it were able to run,\nit would be able to wake the consumer thread and all would be go od.\nUnfortunately , the \ufb01rst thing it does is call sem wait() on the binary\nmutex semaphore (line p0). The lock is already held. Hence, t he producer\nis now stuck waiting too.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P"
  },
  {
    "content": " be able to wake the consumer thread and all would be go od.\nUnfortunately , the \ufb01rst thing it does is call sem wait() on the binary\nmutex semaphore (line p0). The lock is already held. Hence, t he producer\nis now stuck waiting too.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSE M A P H O R E S 349\n1 sem_t empty;\n2 sem_t full;\n3 sem_t mutex;\n4\n5 void *producer(void *arg) {\n6 int i;\n7 for (i = 0; i < loops; i++) {\n8 sem_wait(&mutex); // line p0 (NEW LINE)\n9 sem_wait(&empty); // line p1\n10 put(i); // line p2\n11 sem_post(&full); // line p3\n12 sem_post(&mutex); // line p4 (NEW LINE)\n13 }\n14 }\n15\n16 void *consumer(void *arg) {\n17 int i;\n18 for (i = 0; i < loops; i++) {\n19 sem_wait(&mutex); // line c0 (NEW LINE)\n20 sem_wait(&full); // line c1\n21 int tmp = get(); // line c2\n22 sem_post(&empty); // line c3\n23 sem_post(&mutex); // line c4 (NEW LINE)\n24 printf(\"%d\\n\", tmp);\n25 }\n26 }\n27\n28 int main(int argc, char *argv[]) {\n29 // ...\n30 sem_init(&empty, 0, MAX); // MAX buffers are empty to begin with...\n31 sem_init(&full, 0, 0); // ... and 0 are full\n32 sem_init(&mutex, 0, 1); // mutex=1 because it is a lock (NEW L INE)\n33 // ...\n34 }\nFigure 31.7: Adding Mutual Exclusion (Incorrectly)\nThere is a simple cycle here. The consumer holds the mutex and is\nwaiting for the someone to signal full. The producer could signal full but\nis waiting for the mutex. Thus, the producer and consumer are each stuck\nwaiting for each other: a classic deadlock.\nFinally , A W orking Solution\nT o solve this problem, we simply must reduce the scope of the l ock. Fig-\nure\n31.8 shows the \ufb01nal working solution. As you can see, we simply\nmove the mutex acquire and release to be just around the criti cal section;\nthe full and empty wait and signal code is left outside. The re sult is a\nsimple and working bounded buffer , a commonly-used pattern in multi-\nthreaded programs. Understand it now; use it later . Y ou will thank us for\nyears to come. Or at least, you will thank us when the same ques tion is\nasked on the \ufb01nal exam.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n350 SE M A P H O R E S\n1 sem_t empty;\n2 sem_t full;\n3 sem_t mutex;\n4\n5 void *producer(void *arg) {\n6 int i;\n7 for (i = 0; i < loops; i++) {\n8 sem_wait(&empty); // line p1\n9 sem_wait(&mutex); // line p1.5 (MOVED MUTEX HERE...)\n10 put(i); // line p2\n11 sem_post(&mutex); // line p2.5 (... AND HERE)\n12 sem_post(&full); // line p3\n13 }\n14 }\n15\n16 void *consumer(void *arg) {\n17 int i;\n18 for (i = 0; i < loops; i++) {\n19 sem_wait(&full); // line c1\n20 sem_wait(&mutex); // line c1.5 (MOVED MUTEX HERE...)\n21 int tmp = get(); // line c2\n22 sem_post(&mutex); // line c2.5 (... AND HERE)\n23 sem_post(&empty); // line c3\n24 printf(\"%d\\n\","
  },
  {
    "content": " (i = 0; i < loops; i++) {\n19 sem_wait(&full); // line c1\n20 sem_wait(&mutex); // line c1.5 (MOVED MUTEX HERE...)\n21 int tmp = get(); // line c2\n22 sem_post(&mutex); // line c2.5 (... AND HERE)\n23 sem_post(&empty); // line c3\n24 printf(\"%d\\n\", tmp);\n25 }\n26 }\n27\n28 int main(int argc, char *argv[]) {\n29 // ...\n30 sem_init(&empty, 0, MAX); // MAX buffers are empty to begin with...\n31 sem_init(&full, 0, 0); // ... and 0 are full\n32 sem_init(&mutex, 0, 1); // mutex=1 because it is a lock\n33 // ...\n34 }\nFigure 31.8: Adding Mutual Exclusion (Correctly)\n31.5 Reader-W riter Locks\nAnother classic problem stems from the desire for a more \ufb02exi ble lock-\ning primitive that admits that different data structure acc esses might re-\nquire different kinds of locking. For example, imagine a num ber of con-\ncurrent list operations, including inserts and simple look ups. While in-\nserts change the state of the list (and thus a traditional cri tical section\nmakes sense), lookups simply read the data structure; as long as we can\nguarantee that no insert is on-going, we can allow many looku ps to pro-\nceed concurrently . The special type of lock we will now devel op to sup-\nport this type of operation is known as a reader-writer lock [CHP71]. The\ncode for such a lock is available in Figure\n31.9.\nThe code is pretty simple. If some thread wants to update the d ata\nstructure in question, it should call the new pair of synchro nization op-\nerations: rwlock acquire writelock(), to acquire a write lock, and\nrwlock release writelock(), to release it. Internally , these simply\nuse the writelock semaphore to ensure that only a single writer can ac-\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSE M A P H O R E S 351\n1 typedef struct _rwlock_t {\n2 sem_t lock; // binary semaphore (basic lock)\n3 sem_t writelock; // used to allow ONE writer or MANY readers\n4 int readers; // count of readers reading in critical section\n5 } rwlock_t;\n6\n7 void rwlock_init(rwlock_t *rw) {\n8 rw->readers = 0;\n9 sem_init(&rw->lock, 0, 1);\n10 sem_init(&rw->writelock, 0, 1);\n11 }\n12\n13 void rwlock_acquire_readlock(rwlock_t *rw) {\n14 sem_wait(&rw->lock);\n15 rw->readers++;\n16 if (rw->readers == 1)\n17 sem_wait(&rw->writelock); // first reader acquires writelock\n18 sem_post(&rw->lock);\n19 }\n20\n21 void rwlock_release_readlock(rwlock_t *rw) {\n22 sem_wait(&rw->lock);\n23 rw->readers--;\n24 if (rw->readers == 0)\n25 sem_post(&rw->writelock); // last reader releases writelock\n26 sem_post(&rw->lock);\n27 }\n28\n29 void rwlock_acquire_writelock(rwlock_t *rw) {\n30 sem_wait(&rw->writelock);\n31 }\n32\n33 void rwlock_release_writelock(rwlock_t *rw) {\n34 sem_post(&rw->writelock);\n35 }\nFigure 31.9: A Simple Reader-W riter Lock\nquire the lock and thus enter the critical section to update t he data struc-\nture in question.\nMore interesting is the pair of routines to acquire and relea se read\nlocks. When acquiring a read lock, the reader \ufb01rst acquires lock and\nthen increments the readers"
  },
  {
    "content": "lock_t *rw) {\n34 sem_post(&rw->writelock);\n35 }\nFigure 31.9: A Simple Reader-W riter Lock\nquire the lock and thus enter the critical section to update t he data struc-\nture in question.\nMore interesting is the pair of routines to acquire and relea se read\nlocks. When acquiring a read lock, the reader \ufb01rst acquires lock and\nthen increments the readers variable to track how many readers are\ncurrently inside the data structure. The important step the n taken within\nrwlock\nacquire readlock() occurs when the \ufb01rst reader acquires\nthe lock; in that case, the reader also acquires the write loc k by calling\nsem wait() on the writelock semaphore, and then \ufb01nally releasing\nthe lock by calling sem post().\nThus, once a reader has acquired a read lock, more readers wil l be\nallowed to acquire the read lock too; however , any thread tha t wishes to\nacquire the write lock will have to wait until all readers are \ufb01nished; the\nlast one to exit the critical section calls sem post() on \u201cwritelock\u201d and\nthus enables a waiting writer to acquire the lock.\nThis approach works (as desired), but does have some negativ es, espe-\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n352 SE M A P H O R E S\nTI P : S I M P L E AN D DU M B CA N BE BE T T E R (H I L L\u2019 S LAW )\nY ou should never underestimate the notion that the simple an d dumb\napproach can be the best one. With locking, sometimes a simpl e spin lock\nworks best, because it is easy to implement and fast. Althoug h something\nlike reader/writer locks sounds cool, they are complex, and complex can\nmean slow . Thus, always try the simple and dumb approach \ufb01rst .\nThis idea, of appealing to simplicity , is found in many place s. One early\nsource is Mark Hill\u2019s dissertation [H87], which studied how to design\ncaches for CPUs. Hill found that simple direct-mapped cache s worked\nbetter than fancy set-associative designs (one reason is th at in caching,\nsimpler designs enable faster lookups). As Hill succinctly summarized\nhis work: \u201cBig and dumb is better .\u201d And thus we call this simil ar advice\nHill\u2019s Law .\ncially when it comes to fairness. In particular , it would be r elatively easy\nfor readers to starve writers. More sophisticated solution s to this prob-\nlem exist; perhaps you can think of a better implementation? Hint: think\nabout what you would need to do to prevent more readers from en tering\nthe lock once a writer is waiting.\nFinally , it should be noted that reader-writer locks should be used\nwith some caution. They often add more overhead (especially with more\nsophisticated implementations), and thus do not end up spee ding up\nperformance as compared to just using simple and fast lockin g primi-\ntives [CB08]. Either way , they showcase once again how we can use\nsemaphores in an interesting and useful way .\n31.6 The Dining Philosophers\nOne of the most famous concurrency problems posed, and solve d, by\nDijkstra, is known as the dining philosopher\u2019s problem [DHO71]. The\nproblem is famous because it is fun and somewhat intellectua lly inter-\nesting; however , its practical utility is low . However , its fame forces its\ninclusion here; indeed, you might be asked about it on some in terview ,\nand you\u2019d really hate your OS professor if you miss that quest ion and\ndon\u2019t get the job. Conversely , if you get the job, please feel free to send\nyour OS professor a nice note, or some stock options.\nThe basic setup for the problem is this (as shown in Figure 31.10): as-\nsume there are \ufb01ve \u201cphilosophers\u201d sitting around a table. Be tween each\npair of philosophers is a single fork (and thus, \ufb01ve total). T he philoso-\nphers each have times where they think, and don\u2019t need any for ks, and\ntimes where they eat. In order to eat, a philosopher needs two"
  },
  {
    "content": " the problem is this (as shown in Figure 31.10): as-\nsume there are \ufb01ve \u201cphilosophers\u201d sitting around a table. Be tween each\npair of philosophers is a single fork (and thus, \ufb01ve total). T he philoso-\nphers each have times where they think, and don\u2019t need any for ks, and\ntimes where they eat. In order to eat, a philosopher needs two forks, both\nthe one on their left and the one on their right. The contentio n for these\nforks, and the synchronization problems that ensue, are wha t makes this\na problem we study in concurrent programming.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSE M A P H O R E S 353\nP0\nP1\nP2\nP3\nP4\nf0\nf1\nf2\nf3\nf4\nFigure 31.10: The Dining Philosophers\nHere is the basic loop of each philosopher:\nwhile (1) {\nthink();\ngetforks();\neat();\nputforks();\n}\nThe key challenge, then, is to write the routines getforks() and\nputforks() such that there is no deadlock, no philosopher starves and\nnever gets to eat, and concurrency is high (i.e., as many phil osophers can\neat at the same time as possible).\nFollowing Downey\u2019s solutions [D08], we\u2019ll use a few helper f unctions\nto get us towards a solution. They are:\nint left(int p) { return p; }\nint right(int p) { return (p + 1) % 5; }\nWhen philosopher p wishes to refer to the fork on their left, they sim-\nply call left(p). Similarly , the fork on the right of a philosopher p is\nreferred to by calling right(p); the modulo operator therein handles\nthe one case where the last philosopher ( p=4) tries to grab the fork on\ntheir right, which is fork 0.\nW e\u2019ll also need some semaphores to solve this problem. Let us assume\nwe have \ufb01ve, one for each fork: sem\nt forks[5].\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n354 SE M A P H O R E S\n1 void getforks() {\n2 sem_wait(forks[left(p)]);\n3 sem_wait(forks[right(p)]);\n4 }\n5\n6 void putforks() {\n7 sem_post(forks[left(p)]);\n8 sem_post(forks[right(p)]);\n9 }\nFigure 31.11: The getforks() and putforks() Routines\nBroken Solution\nW e attempt our \ufb01rst solution to the problem. Assume we initia lize each\nsemaphore (in the forks array) to a value of 1. Assume also that each\nphilosopher knows its own number ( p). W e can thus write the getforks()\nand putforks() routine as shown in Figure\n31.11.\nThe intuition behind this (broken) solution is as follows. T o acquire\nthe forks, we simply grab a \u201clock\u201d on each one: \ufb01rst the one on t he left,\nand then the one on the right. When we are done eating, we relea se them.\nSimple, no? Unfortunately , in this case, simple means broke n. Can you\nsee the problem that arises? Think about it.\nThe problem is deadlock. If each philosopher happens to grab the fork\non their left before any philosopher can grab the fork on thei r right, each\nwill be stuck holding one fork and waiting for another , forev er . Speci\ufb01-\ncally , philosopher 0 grabs fork 0, philosopher 1 grabs fork 1 , philosopher\n2 grabs fork 2, philosopher 3 grabs fork 3, and philosopher 4 g rabs fork 4;\nall the forks are acquired, and all the philosophers are stuc k waiting for\na fork that another philosopher possesses. W e\u2019ll study dead lock in more\ndetail soon; for now , it is safe to say that this is not a workin g solution."
  },
  {
    "content": "ci\ufb01-\ncally , philosopher 0 grabs fork 0, philosopher 1 grabs fork 1 , philosopher\n2 grabs fork 2, philosopher 3 grabs fork 3, and philosopher 4 g rabs fork 4;\nall the forks are acquired, and all the philosophers are stuc k waiting for\na fork that another philosopher possesses. W e\u2019ll study dead lock in more\ndetail soon; for now , it is safe to say that this is not a workin g solution.\nA Solution: Breaking The Dependency\nThe simplest way to attack this problem is to change how forks are ac-\nquired by at least one of the philosophers; indeed, this is ho w Dijkstra\nhimself solved the problem. Speci\ufb01cally , let\u2019s assume that philosopher\n4 (the highest numbered one) acquires the forks in a different order . The\ncode to do so is as follows:\n1 void getforks() {\n2 if (p == 4) {\n3 sem_wait(forks[right(p)]);\n4 sem_wait(forks[left(p)]);\n5 } else {\n6 sem_wait(forks[left(p)]);\n7 sem_wait(forks[right(p)]);\n8 }\n9 }\nBecause the last philosopher tries to grab right before left , there is no\nsituation where each philosopher grabs one fork and is stuck waiting for\nanother; the cycle of waiting is broken. Think through the ra mi\ufb01cations\nof this solution, and convince yourself that it works.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSE M A P H O R E S 355\n1 typedef struct __Zem_t {\n2 int value;\n3 pthread_cond_t cond;\n4 pthread_mutex_t lock;\n5 } Zem_t;\n6\n7 // only one thread can call this\n8 void Zem_init(Zem_t *s, int value) {\n9 s->value = value;\n10 Cond_init(&s->cond);\n11 Mutex_init(&s->lock);\n12 }\n13\n14 void Zem_wait(Zem_t *s) {\n15 Mutex_lock(&s->lock);\n16 while (s->value <= 0)\n17 Cond_wait(&s->cond, &s->lock);\n18 s->value--;\n19 Mutex_unlock(&s->lock);\n20 }\n21\n22 void Zem_post(Zem_t *s) {\n23 Mutex_lock(&s->lock);\n24 s->value++;\n25 Cond_signal(&s->cond);\n26 Mutex_unlock(&s->lock);\n27 }\nFigure 31.12: Implementing Zemaphores with Locks and CVs\nThere are other \u201cfamous\u201d problems like this one, e.g., the cigarette\nsmoker\u2019s problem or the sleeping barber problem . Most of them are\njust excuses to think about concurrency; some of them have fa scinating\nnames. Look them up if you are interested in learning more, or just get-\nting more practice thinking in a concurrent manner [D08].\n31.7 How T o Implement Semaphores\nFinally , let\u2019s use our low-level synchronization primitiv es, locks and\ncondition variables, to build our own version of semaphores called ...\n(drum roll here) ... Zemaphores. This task is fairly straightforward, as\nyou can see in Figure\n31.12.\nAs you can see from the \ufb01gure, we use just one lock and one condi tion\nvariable, plus a state variable to track the value of the sema phore. Study\nthe code for yourself until you really understand it. Do it!\nOne subtle difference between our Zemaphore and pure semaph ores\nas de\ufb01ned by Dijkstra is that we don\u2019t maintain the invariant that the\nvalue of the semaphore, when negative, re\ufb02ects the number of waiting\nthreads; indeed, the value will never be lower than zero. Thi s behavior is\neasier to implement and matches the current Linux implement ation.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S"
  },
  {
    "content": " don\u2019t maintain the invariant that the\nvalue of the semaphore, when negative, re\ufb02ects the number of waiting\nthreads; indeed, the value will never be lower than zero. Thi s behavior is\neasier to implement and matches the current Linux implement ation.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n356 SE M A P H O R E S\nTI P : B E CA R E F U L WI T H GE N E R A L I Z ATI O N\nThe abstract technique of generalization can thus be quite u seful in sys-\ntems design, where one good idea can be made slightly broader and thus\nsolve a larger class of problems. However , be careful when ge neralizing;\nas Lampson warns us \u201cDon\u2019t generalize; generalizations are generally\nwrong\u201d [L83].\nOne could view semaphores as a generalization of locks and co ndition\nvariables; however , is such a generalization needed? And, g iven the dif-\n\ufb01culty of realizing a condition variable on top of a semaphor e, perhaps\nthis generalization is not as general as you might think.\nCuriously , building locks and condition variables out of se maphores\nis a much trickier proposition. Some highly experienced con current pro-\ngrammers tried to do this in the Windows environment, and man y differ-\nent bugs ensued [B04]. T ry it yourself, and see if you can \ufb01gur e out why\nbuilding condition variables out of semaphores is more chal lenging than\nit might appear .\n31.8 Summary\nSemaphores are a powerful and \ufb02exible primitive for writing concur-\nrent programs. Some programmers use them exclusively , shun ning locks\nand condition variables, due to their simplicity and utilit y .\nIn this chapter , we have presented just a few classic problem s and solu-\ntions. If you are interested in \ufb01nding out more, there are man y other ma-\nterials you can reference. One great (and free reference) is Allen Downey\u2019s\nbook on concurrency and programming with semaphores [D08]. This\nbook has lots of puzzles you can work on to improve your unders tand-\ning of both semaphores in speci\ufb01c and concurrency in general . Becoming\na real concurrency expert takes years of effort; going beyon d what you\nlearn in this class is undoubtedly the key to mastering such a topic.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSE M A P H O R E S 357\nReferences\n[B04] \u201cImplementing Condition V ariables with Semaphores\u201d\nAndrew Birrell\nDecember 2004\nAn interesting read on how dif\ufb01cult implementing CVs on top o f semaphores really is, and the mistakes\nthe author and co-workers made along the way. Particularly r elevant because the group had done a ton\nof concurrent programming; Birrell, for example, is known f or (among other things) writing various\nthread-programming guides.\n[CB08] \u201cReal-world Concurrency\u201d\nBryan Cantrill and Jeff Bonwick\nACM Queue. V olume 6, No. 5. September 2008\nA nice article by some kernel hackers from a company formerly known as Sun on the real problems faced\nin concurrent code.\n[CHP71] \u201cConcurrent Control with Readers and W riters\u201d\nP .J. Courtois, F . Heymans, D.L. Parnas\nCommunications of the ACM, 14:10, October 1971\nThe introduction of the reader-writer problem, and a simple solution. Later work introduced more\ncomplex solutions, skipped here because, well, they are pre tty complex.\n[D59] \u201cA Note on T wo Problems in Connexion with Graphs\u201d\nE. W . Dijkstra\nNumerische Mathematik 1, 269271, 1959\nA vailable: http://www-m3.ma.tum.de/twiki/pub/MN0506/W ebHome/dijkstra.pdf\nCan you believe people worked on algorithms in 1959? We can\u2019t ."
  },
  {
    "content": " tty complex.\n[D59] \u201cA Note on T wo Problems in Connexion with Graphs\u201d\nE. W . Dijkstra\nNumerische Mathematik 1, 269271, 1959\nA vailable: http://www-m3.ma.tum.de/twiki/pub/MN0506/W ebHome/dijkstra.pdf\nCan you believe people worked on algorithms in 1959? We can\u2019t . Even before computers were any fun\nto use, these people had a sense that they would transform the world...\n[D68a] \u201cGo-to Statement Considered Harmful\u201d\nE.W . Dijkstra\nCommunications of the ACM, volume 11(3): pages 147148, Marc h 1968\nA vailable: http://www .cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF\nSometimes thought as the beginning of the \ufb01eld of software en gineering.\n[D68b] \u201cThe Structure of the THE Multiprogramming System\u201d\nE.W . Dijkstra\nCommunications of the ACM, volume 11(5), pages 341346, 1968\nOne of the earliest papers to point out that systems work in co mputer science is an engaging intellectual\nendeavor . Also argues strongly for modularity in the form of layered systems.\n[D72] \u201cInformation Streams Sharing a Finite Buffer \u201d\nE.W . Dijkstra\nInformation Processing Letters 1: 179180, 1972\nA vailable: http://www .cs.utexas.edu/users/EWD/ewd03xx/EWD329.PDF\nDid Dijkstra invent everything? No, but maybe close. He cert ainly was the \ufb01rst to clearly write down\nwhat the problems were in concurrent code. However , it is tru e that practitioners in operating system\ndesign knew of many of the problems described by Dijkstra, so perhaps giving him too much credit\nwould be a misrepresentation of history.\n[D08] \u201cThe Little Book of Semaphores\u201d\nA.B. Downey\nA vailable: http://greenteapress.com/semaphores/\nA nice (and free!) book about semaphores. Lots of fun problem s to solve, if you like that sort of thing.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n358 SE M A P H O R E S\n[DHO71] \u201cHierarchical ordering of sequential processes\u201d\nE.W . Dijkstra\nA vailable: http://www .cs.utexas.edu/users/EWD/ewd03xx/EWD310.PDF\nPresents numerous concurrency problems, including the Din ing Philosophers. The wikipedia page\nabout this problem is also quite informative.\n[GR92] \u201cT ransaction Processing: Concepts and T echniques\u201d\nJim Gray and Andreas Reuter\nMorgan Kaufmann, September 1992\nThe exact quote that we \ufb01nd particularly humorous is found on page 485, at the top of Section 8.8:\n\u201cThe \ufb01rst multiprocessors, circa 1960, had test and set inst ructions ... presumably the OS imple-\nmentors worked out the appropriate algorithms, although Di jkstra is generally credited with inventing\nsemaphores many years later .\u201d\n[H87] \u201cAspects of Cache Memory and Instruction Buffer Perfo rmance\u201d\nMark D. Hill\nPh.D. Dissertation, U.C. Berkeley , 1987\nHill\u2019s dissertation work, for those obsessed with caching i n early systems. A great example of a quanti-\ntative dissertation.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n32\nCommon Concurrency Problems\nResearchers have spent a great deal of time and effort lookin g into con-\ncurrency bugs over many years. Much of the early work focused on\ndeadlock, a topic which we\u2019ve touched on in the past chapters but will\nnow dive into deeply [C+71]. More recent work focuses on stud ying\nother types of common concurrency bugs (i.e., non-deadlock bugs). In\nthis chapter , we take a brief look at some example concur"
  },
  {
    "content": " have spent a great deal of time and effort lookin g into con-\ncurrency bugs over many years. Much of the early work focused on\ndeadlock, a topic which we\u2019ve touched on in the past chapters but will\nnow dive into deeply [C+71]. More recent work focuses on stud ying\nother types of common concurrency bugs (i.e., non-deadlock bugs). In\nthis chapter , we take a brief look at some example concurrenc y problems\nfound in real code bases, to better understand what problems to look out\nfor . And thus our problem:\nCR U X : H O W TO HA N D L E CO M M O N CO N C U R R E N C Y BU G S\nConcurrency bugs tend to come in a variety of common patterns .\nKnowing which ones to look out for is the \ufb01rst step to writing m ore ro-\nbust, correct concurrent code.\n32.1 What T ypes Of Bugs Exist?\nThe \ufb01rst, and most obvious, question is this: what types of co ncur-\nrency bugs manifest in complex, concurrent programs? This q uestion is\ndif\ufb01cult to answer in general, but fortunately , some others have done the\nwork for us. Speci\ufb01cally , we rely upon a study by Lu et al. [L+0 8], which\nanalyzes a number of popular concurrent applications in gre at detail to\nunderstand what types of bugs arise in practice.\nThe study focuses on four major and important open-source ap plica-\ntions: MySQL (a popular database management system), Apach e (a well-\nknown web server), Mozilla (the famous web browser), and Ope nOf\ufb01ce\n(a free version of the MS Of\ufb01ce suite, which some people actua lly use).\nIn the study , the authors examine concurrency bugs that have been found\nand \ufb01xed in each of these code bases, turning the developers\u2019 work into a\nquantitative bug analysis; understanding these results ca n help you un-\nderstand what types of problems actually occur in mature cod e bases.\n359\n360 CO M M O N CO N C U R R E N C Y PR O B L E M S\nApplication What it does Non-Deadlock Deadlock\nMySQL Database Server 14 9\nApache W eb Server 13 4\nMozilla W eb Browser 41 16\nOpenOf\ufb01ce Of\ufb01ce Suite 6 2\nT otal 74 31\nT able 32.1: Bugs In Modern Applications\nT able\n32.1 shows a summary of the bugs Lu and colleagues studied.\nFrom the table, you can see that there were 105 total bugs, mos t of which\nwere not deadlock (74); the remaining 31 were deadlock bugs. Further ,\nyou can see that the number of bugs studied from each applicat ion; while\nOpenOf\ufb01ce only had 8 total concurrency bugs, Mozilla had nea rly 60.\nW e now dive into these different classes of bugs (non-deadlo ck, dead-\nlock) a bit more deeply . For the \ufb01rst class of non-deadlock bu gs, we use\nexamples from the study to drive our discussion. For the seco nd class of\ndeadlock bugs, we discuss the long line of work that has been d one in\neither preventing, avoiding, or handling deadlock.\n32.2 Non-Deadlock Bugs\nNon-deadlock bugs make up a majority of concurrency bugs, ac cord-\ning to Lu\u2019s study . But what types of bugs are these? How do they arise?\nHow can we \ufb01x them? W e now discuss the two major types of non-\ndeadlock bugs found by Lu et al.: atomicity violation bugs and order\nviolation bugs.\nAtomicity-Violation Bugs\nThe \ufb01rst type of problem encountered is referred to as an atomicity vi-\nolation. Here is a simple example, found in MySQL. Before reading the\nexplanation, try \ufb01guring out what the bug is. Do it!\n1 Thread 1::\n2 if (thd->proc_info) {\n3 ...\n4 fputs(thd->proc_info, ...);\n5 ...\n6 }\n7\n8 Thread 2::\n9 thd->proc_info = NULL;\nIn the example, two different threads access the \ufb01eld proc\ninfo in\nthe structure thd. The"
  },
  {
    "content": " try \ufb01guring out what the bug is. Do it!\n1 Thread 1::\n2 if (thd->proc_info) {\n3 ...\n4 fputs(thd->proc_info, ...);\n5 ...\n6 }\n7\n8 Thread 2::\n9 thd->proc_info = NULL;\nIn the example, two different threads access the \ufb01eld proc\ninfo in\nthe structure thd. The \ufb01rst thread checks if the value is non-NULL and\nthen prints its value; the second thread sets it to NULL. Clea rly , if the\n\ufb01rst thread performs the check but then is interrupted befor e the call to\nfputs, the second thread could run in-between, thus setting the po inter\nto NULL; when the \ufb01rst thread resumes, it will crash, as a NULL pointer\nwill be dereferenced by fputs.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO M M O N CO N C U R R E N C Y PR O B L E M S 361\nThe more formal de\ufb01nition of an atomicity violation, accord ing to Lu\net al, is this: \u201cThe desired serializability among multiple memory accesses\nis violated (i.e. a code region is intended to be atomic, but t he atomicity\nis not enforced during execution).\u201d In our example above, th e code has\nan atomicity assumption (in Lu\u2019s words) about the check for non-NULL\nof proc info and the usage of proc info in the fputs() call; when\nassumption is broken, the code will not work as desired.\nFinding a \ufb01x for this type of problem is often (but not always) straight-\nforward. Can you think of how to \ufb01x the code above?\nIn this solution, we simply add locks around the shared-vari able ref-\nerences, ensuring that when either thread accesses the proc info \ufb01eld,\nit has a lock held. Of course (not shown), any other code that a ccesses the\nstructure should also acquire this lock before doing so.\n1 pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;\n2\n3 Thread 1::\n4 pthread_mutex_lock(&lock);\n5 if (thd->proc_info) {\n6 ...\n7 fputs(thd->proc_info, ...);\n8 ...\n9 }\n10 pthread_mutex_unlock(&lock);\n11\n12 Thread 2::\n13 pthread_mutex_lock(&lock);\n14 thd->proc_info = NULL;\n15 pthread_mutex_unlock(&lock);\nOrder-Violation Bugs\nAnother common type of non-deadlock bug found by Lu et al. is k nown\nas an order violation . Here is another simple example; once again, see if\nyou can \ufb01gure out why the code below has a bug in it.\n1 Thread 1::\n2 void init() {\n3 ...\n4 mThread = PR_CreateThread(mMain, ...);\n5 ...\n6 }\n7\n8 Thread 2::\n9 void mMain(...) {\n10 ...\n11 mState = mThread->State;\n12 ...\n13 }\nAs you probably \ufb01gured out, the code in Thread 2 seems to assum e\nthat the variable mThread has already been initialized (and is not NULL);\nhowever , if Thread 1 does not happen to run \ufb01rst, we are out of l uck, and\nThread 2 will likely crash with a NULL pointer dereference (a ssuming\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n362 CO M M O N CO N C U R R E N C Y PR O B L E M S\nthat the value of mThread is initially NULL; if not, even stranger things\ncould happen as arbitrary memory locations are read through the deref-\nerence in Thread 2).\nThe more formal de\ufb01nition of an order violation is this: \u201cThe desired\norder between two (groups of) memory accesses is \ufb02ipped (i.e ., A"
  },
  {
    "content": " O N CO N C U R R E N C Y PR O B L E M S\nthat the value of mThread is initially NULL; if not, even stranger things\ncould happen as arbitrary memory locations are read through the deref-\nerence in Thread 2).\nThe more formal de\ufb01nition of an order violation is this: \u201cThe desired\norder between two (groups of) memory accesses is \ufb02ipped (i.e ., A should\nalways be executed before B, but the order is not enforced during execu-\ntion).\u201d [L+08]\nThe \ufb01x to this type of bug is generally to enforce ordering. As we\ndiscussed in detail previously , using condition variables is an easy and\nrobust way to add this style of synchronization into modern c ode bases.\nIn the example above, we could thus rewrite the code as follow s:\n1 pthread_mutex_t mtLock = PTHREAD_MUTEX_INITIALIZER;\n2 pthread_cond_t mtCond = PTHREAD_COND_INITIALIZER;\n3 int mtInit = 0;\n4\n5 Thread 1::\n6 void init() {\n7 ...\n8 mThread = PR_CreateThread(mMain, ...);\n9\n10 // signal that the thread has been created...\n11 pthread_mutex_lock(&mtLock);\n12 mtInit = 1;\n13 pthread_cond_signal(&mtCond);\n14 pthread_mutex_unlock(&mtLock);\n15 ...\n16 }\n17\n18 Thread 2::\n19 void mMain(...) {\n20 ...\n21 // wait for the thread to be initialized...\n22 pthread_mutex_lock(&mtLock);\n23 while (mtInit == 0)\n24 pthread_cond_wait(&mtCond, &mtLock);\n25 pthread_mutex_unlock(&mtLock);\n26\n27 mState = mThread->State;\n28 ...\n29 }\nIn this \ufb01xed-up code sequence, we have added a lock ( mtLock) and\ncorresponding condition variable ( mtCond), as well as a state variable\n(mtInit). When the initialization code runs, it sets the state of mtInit\nto 1 and signals that it has done so. If Thread 2 had run before t his point,\nit will be waiting for this signal and corresponding state ch ange; if it runs\nlater , it will check the state and see that the initializatio n has already oc-\ncurred (i.e., mtInit is set to 1), and thus continue as is proper . Note that\nwe could likely use mThread as the state variable itself, but do not do so\nfor the sake of simplicity here. When ordering matters betwe en threads,\ncondition variables (or semaphores) can come to the rescue.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO M M O N CO N C U R R E N C Y PR O B L E M S 363\nNon-Deadlock Bugs: Summary\nA large fraction (97%) of non-deadlock bugs studied by Lu et a l. are either\natomicity or order violations. Thus, by carefully thinking about these\ntypes of bug patterns, programmers can likely do a better job of avoiding\nthem. Moreover , as more automated code-checking tools deve lop, they\nshould likely focus on these two types of bugs as they constit ute such a\nlarge fraction of non-deadlock bugs found in deployment.\nUnfortunately , not all bugs are as easily \ufb01xable as the examp les we\nlooked at above. Some require a deeper understanding of what the pro-\ngram is doing, or a larger amount of code or data structure reo rganization\nto \ufb01x. Read Lu et al.\u2019s excellent (and readable) paper for mor e details.\n32.3 Deadlock Bugs\nBeyond the concurrency bugs mentioned above, a classic prob lem that\narises in many concurrent systems with complex locking prot ocols is known\nas deadlock. Deadlock occurs, for example, when a thread (say Thread\n1) is holding a lock (L1) and waiting for another one (L2); unf ortunately ,\nthe thread (Thread 2) that holds lock L2 is waiting for L1 to be released.\nHere is a code snippet that"
  },
  {
    "content": " the concurrency bugs mentioned above, a classic prob lem that\narises in many concurrent systems with complex locking prot ocols is known\nas deadlock. Deadlock occurs, for example, when a thread (say Thread\n1) is holding a lock (L1) and waiting for another one (L2); unf ortunately ,\nthe thread (Thread 2) that holds lock L2 is waiting for L1 to be released.\nHere is a code snippet that demonstrates such a potential dea dlock:\nThread 1: Thread 2:\nlock(L1); lock(L2);\nlock(L2); lock(L1);\nNote that if this code runs, deadlock does not necessarily oc cur; rather ,\nit may occur , if, for example, Thread 1 grabs lock L1 and then a context\nswitch occurs to Thread 2. At that point, Thread 2 grabs L2, an d tries to\nacquire L1. Thus we have a deadlock, as each thread is waiting for the\nother and neither can run. See Figure\n32.1 for details; the presence of a\ncycle in the graph is indicative of the deadlock.\nThe \ufb01gure should make clear the problem. How should programm ers\nwrite code so as to handle deadlock in some way?\nCR U X : H O W TO DE A L WI T H DE A D L O C K\nHow should we build systems to prevent, avoid, or at least det ect and\nrecover from deadlock? Is this a real problem in systems toda y?\nWhy Do Deadlocks Occur?\nAs you may be thinking, simple deadlocks such as the one above seem\nreadily avoidable. For example, if Thread 1 and 2 both made su re to grab\nlocks in the same order , the deadlock would never arise. So wh y do dead-\nlocks happen?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n364 CO M M O N CO N C U R R E N C Y PR O B L E M S\nThread 1\nThread 2\nLock L1\nLock L2\nHolds\nHolds\nWanted by\nWanted by\nFigure 32.1: The Deadlock Dependency Graph\nOne reason is that in large code bases, complex dependencies arise\nbetween components. T ake the operating system, for example . The vir-\ntual memory system might need to access the \ufb01le system in orde r to page\nin a block from disk; the \ufb01le system might subsequently requi re a page\nof memory to read the block into and thus contact the virtual m emory\nsystem. Thus, the design of locking strategies in large syst ems must be\ncarefully done to avoid deadlock in the case of circular depe ndencies that\nmay occur naturally in the code.\nAnother reason is due to the nature of encapsulation. As software de-\nvelopers, we are taught to hide details of implementations a nd thus make\nsoftware easier to build in a modular way . Unfortunately , su ch modular-\nity does not mesh well with locking. As Jula et al. point out [J +08], some\nseemingly innocuous interfaces almost invite you to deadlo ck. For exam-\nple, take the Java V ector class and the method AddAll(). This routine\nwould be called as follows:\nVector v1, v2;\nv1.AddAll(v2);\nInternally , because the method needs to be multi-thread saf e, locks for\nboth the vector being added to (v1) and the parameter (v2) nee d to be\nacquired. The routine acquires said locks in some arbitrary order (say v1\nthen v2) in order to add the contents of v2 to v1. If some other t hread\ncalls v2.AddAll(v1) at nearly the same time, we have the potential for\ndeadlock, all in a way that is quite hidden from the calling ap plication.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO M M O N CO N C U R R E N C Y PR O B L E M S 365\nConditions for Deadlock\nFour conditions need to hold for a deadlock to occur [C+71]:\n\u2022 Mutual exclusion: Threads claim exclusive control of resources that\nthey require"
  },
  {
    "content": " AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO M M O N CO N C U R R E N C Y PR O B L E M S 365\nConditions for Deadlock\nFour conditions need to hold for a deadlock to occur [C+71]:\n\u2022 Mutual exclusion: Threads claim exclusive control of resources that\nthey require (e.g., a thread grabs a lock).\n\u2022 Hold-and-wait: Threads hold resources allocated to them (e.g., locks\nthat they have already acquired) while waiting for addition al re-\nsources (e.g., locks that they wish to acquire).\n\u2022 No preemption: Resources (e.g., locks) cannot be forcibly removed\nfrom threads that are holding them.\n\u2022 Circular wait: There exists a circular chain of threads such that\neach thread holds one more resources (e.g., locks) that are b eing\nrequested by the next thread in the chain.\nIf any of these four conditions are not met, deadlock cannot o ccur .\nThus, we \ufb01rst explore techniques to prevent deadlock; each of these strate-\ngies seeks to prevent one of the above conditions from arisin g and thus is\none approach to handling the deadlock problem.\nPrevention\nCircular W ait\nProbably the most practical prevention technique (and cert ainly one that\nis used frequently) is to write your locking code such that yo u never in-\nduce a circular wait. The way to do that is to provide a total ordering on\nlock acquisition. For example, if there are only two locks in the system (L1\nand L2), we can prevent deadlock by always acquiring L1 befor e L2. Such\nstrict ordering ensures that no cyclical wait arises; hence , no deadlock.\nAs you can imagine, this approach requires careful design of global\nlocking strategies and must be done with great care. Further , it is just a\nconvention, and a sloppy programmer can easily ignore the lo cking pro-\ntocol and potentially cause deadlock. Finally , it requires a deep under-\nstanding of the code base, and how various routines are calle d; just one\nmistake could result in the wrong ordering of lock acquisiti on, and hence\ndeadlock.\nHold-and-wait\nThe hold-and-wait requirement for deadlock can be avoided b y acquiring\nall locks at once, atomically . In practice, this could be ach ieved as follows:\n1 lock(prevention);\n2 lock(L1);\n3 lock(L2);\n4 ...\n5 unlock(prevention);\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n366 CO M M O N CO N C U R R E N C Y PR O B L E M S\nBy \ufb01rst grabbing the lock prevention, this code guarantees that no\nuntimely thread switch can occur in the midst of lock acquisi tion and thus\ndeadlock can once again be avoided. Of course, it requires th at any time\nany thread grabs a lock, it \ufb01rst acquires the global preventi on lock. For\nexample, if another thread was trying to grab locks L1 and L2 i n a dif-\nferent order , it would be OK, because it would be holding the p revention\nlock while doing so.\nNote that the solution is problematic for a number of reasons . As be-\nfore, encapsulation works against us: this approach requir es us to know\nwhen calling a routine exactly which locks must be held and to acquire\nthem ahead of time. Further , the approach likely decreases c oncurrency\nas all locks must be acquired early on (at once) instead of whe n they are\ntruly needed.\nNo Preemption\nBecause we generally view locks as held until unlock is calle d, multiple\nlock acquisition often gets us into trouble because when wai ting for one\nlock we are holding another . Many thread libraries provide a more \ufb02exi-\nble set of interfaces to help avoid this situation. Speci\ufb01ca lly , a trylock()\nroutine will grab the lock (if it is available) or return -1 in dicating that the\nlock is held right now and that you should try again later if yo u want to\ngrab that lock.\nSuch an interface could be used as follows"
  },
  {
    "content": "ing for one\nlock we are holding another . Many thread libraries provide a more \ufb02exi-\nble set of interfaces to help avoid this situation. Speci\ufb01ca lly , a trylock()\nroutine will grab the lock (if it is available) or return -1 in dicating that the\nlock is held right now and that you should try again later if yo u want to\ngrab that lock.\nSuch an interface could be used as follows to build a deadlock -free,\nordering-robust lock acquisition protocol:\n1 top:\n2 lock(L1);\n3 if (trylock(L2) == -1) {\n4 unlock(L1);\n5 goto top;\n6 }\nNote that another thread could follow the same protocol but g rab the\nlocks in the other order (L2 then L1) and the program would sti ll be dead-\nlock free. One new problem does arise, however: livelock. It is possible\n(though perhaps unlikely) that two threads could both be rep eatedly at-\ntempting this sequence and repeatedly failing to acquire bo th locks. In\nthis case, both systems are running through this code sequen ce over and\nover again (and thus it is not a deadlock), but progress is not being made,\nhence the name livelock. There are solutions to the livelock problem, too:\nfor example, one could add a random delay before looping back and try-\ning the entire thing over again, thus decreasing the odds of r epeated in-\nterference among competing threads.\nOne \ufb01nal point about this solution: it skirts around the hard parts of\nusing a trylock approach. The \ufb01rst problem that would likely exist again\narises due to encapsulation: if one of these locks is buried i n some routine\nthat is getting called, the jump back to the beginning become s more com-\nplex to implement. If the code had acquired some resources (o ther than\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO M M O N CO N C U R R E N C Y PR O B L E M S 367\nL1) along the way , it must make sure to carefully release them as well;\nfor example, if after acquiring L1, the code had allocated so me memory ,\nit would have to release that memory upon failure to acquire L 2, before\njumping back to the top to try the entire sequence again. Howe ver , in\nlimited circumstances (e.g., the Java vector method above) , this type of\napproach could work well.\nMutual Exclusion\nThe \ufb01nal prevention technique would be to avoid the need for m utual\nexclusion at all. In general, we know this is dif\ufb01cult, becau se the code we\nwish to run does indeed have critical sections. So what can we do?\nHerlihy had the idea that one could design various data struc tures to\nbe wait-free [H91]. The idea here is simple: using powerful hardware in-\nstructions, you can build data structures in a manner that do es not require\nexplicit locking.\nAs a simple example, let us assume we have a compare-and-swap in-\nstruction, which as you may recall is an atomic instruction p rovided by\nthe hardware that does the following:\n1 int CompareAndSwap(int *address, int expected, int new) {\n2 if (*address == expected) {\n3 *address = new;\n4 return 1; // success\n5 }\n6 return 0; // failure\n7 }\nImagine we now wanted to atomically increment a value by a cer tain\namount. W e could do it as follows:\n1 void AtomicIncrement(int *value, int amount) {\n2 do {\n3 int old = *value;\n4 } while (CompareAndSwap(value, old, old + amount) == 0);\n5 }\nInstead of acquiring a lock, doing the update, and then relea sing it, we\nhave instead built an approach that repeatedly tries to upda te the value to\nthe new amount and uses the compare-and-swap to do so. In this manner ,\nno lock is acquired, and no deadlock can arise (though livelo ck is still a\npossibility).\nLet us consider a slightly more complex example: list insert ion. Here\nis"
  },
  {
    "content": "5 }\nInstead of acquiring a lock, doing the update, and then relea sing it, we\nhave instead built an approach that repeatedly tries to upda te the value to\nthe new amount and uses the compare-and-swap to do so. In this manner ,\nno lock is acquired, and no deadlock can arise (though livelo ck is still a\npossibility).\nLet us consider a slightly more complex example: list insert ion. Here\nis code that inserts at the head of a list:\n1 void insert(int value) {\n2 node_t *n = malloc(sizeof(node_t));\n3 assert(n != NULL);\n4 n->value = value;\n5 n->next = head;\n6 head = n;\n7 }\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n368 CO M M O N CO N C U R R E N C Y PR O B L E M S\nThis code performs a simple insertion, but if called by multi ple threads\nat the \u201csame time\u201d, has a race condition (see if you can \ufb01gure o ut why). Of\ncourse, we could solve this by surrounding this code with a lo ck acquire\nand release:\n1 void insert(int value) {\n2 node_t *n = malloc(sizeof(node_t));\n3 assert(n != NULL);\n4 n->value = value;\n5 lock(listlock); // begin critical section\n6 n->next = head;\n7 head = n;\n8 unlock(listlock); // end of critical section\n9 }\nIn this solution, we are using locks in the traditional manne r1 . Instead,\nlet us try to perform this insertion in a wait-free manner sim ply using the\ncompare-and-swap instruction. Here is one possible approa ch:\n1 void insert(int value) {\n2 node_t *n = malloc(sizeof(node_t));\n3 assert(n != NULL);\n4 n->value = value;\n5 do {\n6 n->next = head;\n7 } while (CompareAndSwap(&head, n->next, n));\n8 }\nThe code here updates the next pointer to point to the current head,\nand then tries to swap the newly-created node into position a s the new\nhead of the list. However , this will fail if some other thread successfully\nswapped in a new head in the meanwhile, causing this thread to retry\nagain with the new head.\nOf course, building a useful list requires more than just a li st insert,\nand not surprisingly building a list that you can insert into , delete from,\nand perform lookups on in a wait-free manner is non-trivial. Read the\nrich literature on wait-free synchronization if you \ufb01nd thi s interesting.\nDeadlock A voidance via Scheduling\nInstead of deadlock prevention, in some scenarios deadlock avoidance\nis preferable. A voidance requires some global knowledge of which locks\nvarious threads might grab during their execution, and subs equently sched-\nules said threads in a way as to guarantee no deadlock can occu r .\nFor example, assume we have two processors and four threads w hich\nmust be scheduled upon them. Assume further we know that Thre ad\n1 (T1) grabs locks L1 and L2 (in some order , at some point durin g its\nexecution), T2 grabs L1 and L2 as well, T3 grabs just L2, and T4 grabs no\n1 The astute reader might be asking why we grabbed the lock so la te, instead of right when\nentering the insert() routine; can you, astute reader , \ufb01gure out why that is likely OK?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO M M O N CO N C U R R E N C Y PR O B L E M S 369\nlocks at all. W e can show these lock acquisition demands of th e threads\nin tabular form:\nT1 T2 T3 T4\nL1 yes yes no no\nL2 yes yes yes no\nA smart scheduler could thus compute that as long as T1 and T2 a re\nnot run at the same time, no deadlock could ever arise."
  },
  {
    "content": " O N CO N C U R R E N C Y PR O B L E M S 369\nlocks at all. W e can show these lock acquisition demands of th e threads\nin tabular form:\nT1 T2 T3 T4\nL1 yes yes no no\nL2 yes yes yes no\nA smart scheduler could thus compute that as long as T1 and T2 a re\nnot run at the same time, no deadlock could ever arise. Here is one such\nschedule:\nCPU 1\nCPU 2\nT1 T2\nT3 T4\nNote that it is OK for (T3 and T1) or (T3 and T2) to overlap. Even\nthough T3 grabs lock L2, it can never cause a deadlock by runni ng con-\ncurrently with other threads because it only grabs one lock.\nLet\u2019s look at one more example. In this one, there is more cont ention\nfor the same resources (again, locks L1 and L2), as indicated by the fol-\nlowing contention table:\nT1 T2 T3 T4\nL1 yes yes yes no\nL2 yes yes yes no\nIn particular , threads T1, T2, and T3 all need to grab both loc ks L1 and\nL2 at some point during their execution. Here is a possible sc hedule that\nguarantees that no deadlock could ever occur:\nCPU 1\nCPU 2\nT1 T2 T3\nT4\nAs you can see, static scheduling leads to a conservative app roach\nwhere T1, T2, and T3 are all run on the same processor , and thus the\ntotal time to complete the jobs is lengthened considerably . Though it may\nhave been possible to run these tasks concurrently , the fear of deadlock\nprevents us from doing so, and the cost is performance.\nOne famous example of an approach like this is Dijkstra\u2019s Ban ker \u2019s Al-\ngorithm [D64], and many similar approaches have been descri bed in the\nliterature. Unfortunately , they are only useful in very lim ited environ-\nments, for example, in an embedded system where one has full k nowl-\nedge of the entire set of tasks that must be run and the locks th at they\nneed. Further , such approaches can limit concurrency , as we saw in the\nsecond example above. Thus, avoidance of deadlock via sched uling is\nnot a widely-used general-purpose solution.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n370 CO M M O N CO N C U R R E N C Y PR O B L E M S\nTI P : D O N \u2019 T ALWAY S DO IT PE R F E C T LY (T O M WE S T \u2019 S LAW )\nT om W est, famous as the subject of the classic computer-indu stry book\n\u201cSoul of a New Machine\u201d [K81], says famously: \u201cNot everythin g worth\ndoing is worth doing well\u201d, which is a terri\ufb01c engineering ma xim. If a\nbad thing happens rarely , certainly one should not spend a gr eat deal of\neffort to prevent it, particularly if the cost of the bad thin g occurring is\nsmall.\nDetect and Recover\nOne \ufb01nal general strategy is to allow deadlocks to occasiona lly occur , and\nthen take some action once such a deadlock has been detected. For exam-\nple, if an OS froze once a year , you would just reboot it and get happily (or\ngrumpily) on with your work. If deadlocks are rare, such a non -solution\nis indeed quite pragmatic.\nMany database systems employ deadlock detection and recove ry tech-\nniques. A deadlock detector runs periodically , building a r esource graph\nand checking it for cycles. In the event of a cycle (deadlock) , the system\nneeds to be restarted. If more intricate repair of data struc tures is \ufb01rst\nrequired, a human being may be involved to ease the process.\n32.4 Summary\nIn this chapter , we have studied the types of bugs that occur i n con-\ncurrent programs. The \ufb01rst type, non-deadlock bugs, are sur prisingly\ncommon, but often are easier to \ufb01x. They include atomicity vi olations,\nin which a sequence of instructions"
  },
  {
    "content": " of data struc tures is \ufb01rst\nrequired, a human being may be involved to ease the process.\n32.4 Summary\nIn this chapter , we have studied the types of bugs that occur i n con-\ncurrent programs. The \ufb01rst type, non-deadlock bugs, are sur prisingly\ncommon, but often are easier to \ufb01x. They include atomicity vi olations,\nin which a sequence of instructions that should have been exe cuted to-\ngether was not, and order violations, in which the needed ord er between\ntwo threads was not enforced.\nW e have also brie\ufb02y discussed deadlock: why it occurs, and wh at can\nbe done about it. The problem is as old as concurrency itself, and many\nhundreds of papers have been written about the topic. The bes t solu-\ntion in practice is to be careful, develop a lock acquisition total order ,\nand thus prevent deadlock from occurring in the \ufb01rst place. W ait-free\napproaches also have promise, as some wait-free data struct ures are now\n\ufb01nding their way into commonly-used libraries and critical systems, in-\ncluding Linux. However , their lack of generality and the com plexity to\ndevelop a new wait-free data structure will likely limit the overall util-\nity of this approach. Perhaps the best solution is to develop new concur-\nrent programming models: in systems such as MapReduce (from Google)\n[GD02], programmers can describe certain types of parallel computations\nwithout any locks whatsoever . Locks are problematic by thei r very na-\nture; perhaps we should seek to avoid using them unless we tru ly must.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCO M M O N CO N C U R R E N C Y PR O B L E M S 371\nReferences\n[C+71] \u201cSystem Deadlocks\u201d\nE.G. Coffman, M.J. Elphick, A. Shoshani\nACM Computing Surveys, 3:2, June 1971\nThe classic paper outlining the conditions for deadlock and how you might go about dealing with it.\nThere are certainly some earlier papers on this topic; see th e references within this paper for details.\n[D64] \u201cEen algorithme ter voorkoming van de dodelijke omarm ing\u201d\nCirculated privately , around 1964\nA vailable: http://www .cs.utexas.edu/users/EWD/ewd01xx/EWD108.PDF\nIndeed, not only did Dijkstra come up with a number of solutio ns to the deadlock problem, he was the\n\ufb01rst to note its existence, at least in written form. However , he called it the \u201cdeadly embrace\u201d, which\n(thankfully) did not catch on.\n[GD02] \u201cMapReduce: Simpli\ufb01ed Data Processing on Large Clus ters\u201d\nSanjay Ghemawhat and Jeff Dean\nOSDI \u201904, San Francisco, CA, October 2004\nThe MapReduce paper ushered in the era of large-scale data pr ocessing, and proposes a framework for\nperforming such computations on clusters of generally unre liable machines.\n[H91] \u201cW ait-free Synchronization\u201d\nMaurice Herlihy\nACM TOPLAS, 13(1), pages 124-149, January 1991\nHerlihy\u2019s work pioneers the ideas behind wait-free approac hes to writing concurrent programs. These\napproaches tend to be complex and hard, often more dif\ufb01cult t han using locks correctly, probably limiting\ntheir success in the real world.\n[J+08] \u201cDeadlock Immunity: Enabling Systems T o Defend Agai nst Deadlocks\u201d\nHoratiu Jula, Daniel T ralamazza, Cristian Zam\ufb01r , George Ca ndea\nOSDI \u201908, San Diego, CA, December 2008\nAn excellent recent paper on deadlocks and how to avoid getti ng caught in the same ones over and over\nagain in a particular system.\n[K81] \u201cSoul of a New Machine\u201d\nT racy Kidder , 1980\nA must-read for any systems builder or engineer , detailing t"
  },
  {
    "content": " Daniel T ralamazza, Cristian Zam\ufb01r , George Ca ndea\nOSDI \u201908, San Diego, CA, December 2008\nAn excellent recent paper on deadlocks and how to avoid getti ng caught in the same ones over and over\nagain in a particular system.\n[K81] \u201cSoul of a New Machine\u201d\nT racy Kidder , 1980\nA must-read for any systems builder or engineer , detailing t he early days of how a team inside Data\nGeneral (DG), led by T om West, worked to produce a \u201cnew machin e.\u201d Kidder\u2019s other book are also\nexcellent, in particular , \u201cMountains beyond Mountains\u201d. O r maybe you don\u2019t agree with me, comma?\n[L+08] \u201cLearning from Mistakes \u2013 A Comprehensive Study on\nReal W orld Concurrency Bug Characteristics\u201d\nShan Lu, Soyeon Park, Eunsoo Seo, Y uanyuan Zhou\nASPLOS \u201908, March 2008, Seattle, W ashington\nThe \ufb01rst in-depth study of concurrency bugs in real software , and the basis for this chapter . Look at Y .Y .\nZhou\u2019s or Shan Lu\u2019s web pages for many more interesting paper s on bugs.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n33\nEvent-based Concurrency (Advanced)\nThus far , we\u2019ve written about concurrency as if the only way t o build\nconcurrent applications is to use threads. Like many things in life, this\nis not completely true. Speci\ufb01cally , a different style of co ncurrent pro-\ngramming is often used in both GUI-based applications [O96] as well as\nsome types of internet servers [PDZ99]. This style, known as event-based\nconcurrency, has become popular in some modern systems, including\nserver-side frameworks such as node.js [N13], but its roots are found in\nC/U N I X systems that we\u2019ll discuss below .\nThe problem that event-based concurrency addresses is two- fold. The\n\ufb01rst is that managing concurrency correctly in multi-threa ded applica-\ntions can be challenging; as we\u2019ve discussed, missing locks , deadlock,\nand other nasty problems can arise. The second is that in a mul ti-threaded\napplication, the developer has little or no control over wha t is scheduled\nat a given moment in time; rather , the programmer simply crea tes threads\nand then hopes that the underlying OS schedules them in a reas onable\nmanner across available CPUs. Given the dif\ufb01culty of buildi ng a general-\npurpose scheduler that works well in all cases for all worklo ads, some-\ntimes the OS will schedule work in a manner that is less than op timal.\nThe crux:\nTH E CR U X :\nHO W TO BU I L D CO N C U R R E N T SE RV E R S WI T H O U T TH R E A D S\nHow can we build a concurrent server without using threads, a nd thus\nretain control over concurrency as well as avoid some of the p roblems\nthat seem to plague multi-threaded applications?\n33.1 The Basic Idea: An Event Loop\nThe basic approach we\u2019ll use, as stated above, is called event-based\nconcurrency. The approach is quite simple: you simply wait for some-\nthing (i.e., an \u201cevent\u201d) to occur; when it does, you check wha t type of\n373\n374 EV E N T-B A S E D CO N C U R R E N C Y (A D VA N C E D)\nevent it is and do the small amount of work it requires (which m ay in-\nclude issuing I/O requests, or scheduling other events for f uture han-\ndling, etc.). That\u2019s it!\nBefore getting into the details, let\u2019s \ufb01rst examine what a ca nonical\nevent-based server looks like. Such applications are based around a sim-\nple construct known as the event loop . Pseudocode for an event loop\nlooks like this:\nwhile (1) {\nevents = getEvents();\nfor (e in events)\n"
  },
  {
    "content": " for f uture han-\ndling, etc.). That\u2019s it!\nBefore getting into the details, let\u2019s \ufb01rst examine what a ca nonical\nevent-based server looks like. Such applications are based around a sim-\nple construct known as the event loop . Pseudocode for an event loop\nlooks like this:\nwhile (1) {\nevents = getEvents();\nfor (e in events)\nprocessEvent(e);\n}\nIt\u2019s really that simple. The main loop simply waits for somet hing to do\n(by calling getEvents() in the code above) and then, for each event re-\nturned, processes them, one at a time; the code that processe s each event\nis known as an event handler . Importantly , when a handler processes\nan event, it is the only activity taking place in the system; t hus, deciding\nwhich event to handle next is equivalent to scheduling. This explicit con-\ntrol over scheduling is one of the fundamental advantages of the event-\nbased approach.\nBut this discussion leaves us with a bigger question: how exa ctly does\nan event-based server determine which events are taking pla ce, in par-\nticular with regards to network and disk I/O? Speci\ufb01cally , h ow can an\nevent server tell if a message has arrived for it?\n33.2 An Important API: select() (or poll())\nWith that basic event loop in mind, we next must address the qu estion\nof how to receive events. In most systems, a basic API is avail able, via\neither the select() or poll() system calls.\nWhat these interfaces enable a program to do is simple: check whether\nthere is any incoming I/O that should be attended to. For exam ple, imag-\nine that a network application (such as a web server) wishes t o check\nwhether any network packets have arrived, in order to servic e them.\nThese system calls let you do exactly that.\nT ake select() for example. The manual page (on Mac OS X) de-\nscribes the API in this manner:\nint select(int nfds,\nfd_set *restrict readfds,\nfd_set *restrict writefds,\nfd_set *restrict errorfds,\nstruct timeval *restrict timeout);\nThe actual description from the man page: select() examines the I/O de-\nscriptor sets whose addresses are passed in readfds, writef ds, and errorfds to see\nif some of their descriptors are ready for reading, are ready for writing, or have\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nEV E N T-B A S E D CO N C U R R E N C Y (A D VA N C E D) 375\nAS I D E : BL O C K I N G V S . N O N -B L O C K I N G IN T E R FA C E S\nBlocking (or synchronous) interfaces do all of their work before returning\nto the caller; non-blocking (or asynchronous) interfaces begin some work\nbut return immediately , thus letting whatever work that nee ds to be done\nget done in the background.\nThe usual culprit in blocking calls is I/O of some kind. For ex ample, if a\ncall must read from disk in order to complete, it might block, waiting for\nthe I/O request that has been sent to the disk to return.\nNon-blocking interfaces can be used in any style of programm ing (e.g.,\nwith threads), but are essential in the event-based approac h, as a call that\nblocks will halt all progress.\nan exceptional condition pending, respectively. The \ufb01rst n fds descriptors are\nchecked in each set, i.e., the descriptors from 0 through nfd s-1 in the descriptor\nsets are examined. On return, select() replaces the given de scriptor sets with\nsubsets consisting of those descriptors that are ready for t he requested operation.\nselect() returns the total number of ready descriptors in al l the sets.\nA couple of points about select(). First, note that it lets you check\nwhether descriptors can be read from as well as written to; the former\nlets a server determine that a new packet has arrived and is in need of\nprocessing, whereas the"
  },
  {
    "content": " On return, select() replaces the given de scriptor sets with\nsubsets consisting of those descriptors that are ready for t he requested operation.\nselect() returns the total number of ready descriptors in al l the sets.\nA couple of points about select(). First, note that it lets you check\nwhether descriptors can be read from as well as written to; the former\nlets a server determine that a new packet has arrived and is in need of\nprocessing, whereas the latter lets the service know when it is OK to reply\n(i.e., the outbound queue is not full).\nSecond, note the timeout argument. One common usage here is t o\nset the timeout to NULL, which causes select() to block inde\ufb01nitely ,\nuntil some descriptor is ready . However , more robust server s will usually\nspecify some kind of timeout; one common technique is to set t he timeout\nto zero, and thus use the call to select() to return immediately .\nThe poll() system call is quite similar . See its manual page, or Stevens\nand Rago [SR05], for details.\nEither way , these basic primitives give us a way to build a non -blocking\nevent loop, which simply checks for incoming packets, reads from sockets\nwith messages upon them, and replies as needed.\n33.3 Using select()\nT o make this more concrete, let\u2019s examine how to use select() to see\nwhich network descriptors have incoming messages upon them . Figure\n33.1 shows a simple example.\nThis code is actually fairly simple to understand. After som e initial-\nization, the server enters an in\ufb01nite loop. Inside the loop, it uses the\nFD ZERO() macro to \ufb01rst clear the set of \ufb01le descriptors, and then uses\nFD SET() to include all of the \ufb01le descriptors from minFD to maxFD in\nthe set. This set of descriptors might represent, for exampl e, all of the net-\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n376 EV E N T-B A S E D CO N C U R R E N C Y (A D VA N C E D)\n1 #include <stdio.h>\n2 #include <stdlib.h>\n3 #include <sys/time.h>\n4 #include <sys/types.h>\n5 #include <unistd.h>\n6\n7 int main(void) {\n8 // open and set up a bunch of sockets (not shown)\n9 // main loop\n10 while (1) {\n11 // initialize the fd_set to all zero\n12 fd_set readFDs;\n13 FD_ZERO(&readFDs);\n14\n15 // now set the bits for the descriptors\n16 // this server is interested in\n17 // (for simplicity, all of them from min to max)\n18 int fd;\n19 for (fd = minFD; fd < maxFD; fd++)\n20 FD_SET(fd, &readFDs);\n21\n22 // do the select\n23 int rc = select(maxFD+1, &readFDs, NULL, NULL, NULL);\n24\n25 // check which actually have data using FD_ISSET()\n26 int fd;\n27 for (fd = minFD; fd < maxFD; fd++)\n28 if (FD_ISSET(fd, &readFDs))\n29 processFD(fd);\n30 }\n31 }\nFigure 33.1: Simple Code using select()\nwork sockets to which the server is paying attention. Finall y , the server\ncalls select() to see which of the connections have data available upon\nthem. By then using FD\nISSET() in a loop, the event server can see\nwhich of the descriptors have data ready and process the inco ming data.\nOf course, a real server would be more complicated than this, and\nrequire logic to use when sending messages, issuing disk I/O , and many\nother details. For further information, see Stevens and Rag o [SR05] for\nAPI information, or Pai et. al or W elsh et al. for a good overvi ew of the\ngeneral \ufb02ow of event-based servers [PDZ99, WCB01].\n33.4 Why Simpler? No Locks Needed\nWith a single CPU and an event-based application, the proble ms found"
  },
  {
    "content": " issuing disk I/O , and many\nother details. For further information, see Stevens and Rag o [SR05] for\nAPI information, or Pai et. al or W elsh et al. for a good overvi ew of the\ngeneral \ufb02ow of event-based servers [PDZ99, WCB01].\n33.4 Why Simpler? No Locks Needed\nWith a single CPU and an event-based application, the proble ms found\nin concurrent programs are no longer present. Speci\ufb01cally , because only\none event is being handled at a time, there is no need to acquir e or release\nlocks; the event-based server cannot be interrupted by anot her thread be-\ncause it is decidedly single threaded. Thus, concurrency bu gs common in\nthreaded programs do not manifest in the basic event-based a pproach.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nEV E N T-B A S E D CO N C U R R E N C Y (A D VA N C E D) 377\nTI P : D O N \u2019 T BL O C K IN EV E N T-B A S E D SE RV E R S\nEvent-based servers enable \ufb01ne-grained control over sched uling of tasks.\nHowever , to maintain such control, no call that blocks the ex ecution the\ncaller can ever be made; failing to obey this design tip will r esult in a\nblocked event-based server , frustrated clients, and serio us questions as to\nwhether you ever read this part of the book.\n33.5 A Problem: Blocking System Calls\nThus far , event-based programming sounds great, right? Y ou program\na simple loop, and handle events as they arise. Y ou don\u2019t even need to\nthink about locking! But there is an issue: what if an event re quires that\nyou issue a system call that might block?\nFor example, imagine a request comes from a client into a serv er to\nread a \ufb01le from disk and return its contents to the requesting client (much\nlike a simple HTTP request). T o service such a request, some e vent han-\ndler will eventually have to issue an open() system call to open the \ufb01le,\nfollowed by a series of read() calls to read the \ufb01le. When the \ufb01le is read\ninto memory , the server will likely start sending the result s to the client.\nBoth the open() and read() calls may issue I/O requests to the stor-\nage system (when the needed metadata or data is not in memory a lready),\nand thus may take a long time to service. With a thread-based s erver , this\nis no issue: while the thread issuing the I/O request suspend s (waiting\nfor the I/O to complete), other threads can run, thus enablin g the server\nto make progress. Indeed, this natural overlap of I/O and other computa-\ntion is what makes thread-based programming quite natural a nd straight-\nforward.\nWith an event-based approach, however , there are no other th reads to\nrun: just the main event loop. And this implies that if an even t handler\nissues a call that blocks, the entire server will do just that: block until the\ncall completes. When the event loop blocks, the system sits i dle, and thus\nis a huge potential waste of resources. W e thus have a rule tha t must be\nobeyed in event-based systems: no blocking calls are allowe d.\n33.6 A Solution: Asynchronous I/O\nT o overcome this limit, many modern operating systems have i ntro-\nduced new ways to issue I/O requests to the disk system, refer red to\ngenerically as asynchronous I/O . These interfaces enable an application\nto issue an I/O request and return control immediately to the caller , be-\nfore the I/O has completed; additional interfaces enable an application to\ndetermine whether various I/Os have completed.\nFor example, let us examine the interface provided on Mac OS X (other\nsystems have similar APIs). The APIs revolve around a basic s tructure,\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S"
  },
  {
    "content": " , be-\nfore the I/O has completed; additional interfaces enable an application to\ndetermine whether various I/Os have completed.\nFor example, let us examine the interface provided on Mac OS X (other\nsystems have similar APIs). The APIs revolve around a basic s tructure,\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n378 EV E N T-B A S E D CO N C U R R E N C Y (A D VA N C E D)\nthe struct aiocb or AIO control block in common terminology . A\nsimpli\ufb01ed version of the structure looks like this (see the m anual pages\nfor more information):\nstruct aiocb {\nint aio_fildes; / * File descriptor */\noff_t aio_offset; / * File offset */\nvolatile void *aio_buf; / * Location of buffer */\nsize_t aio_nbytes; / * Length of transfer */\n};\nT o issue an asynchronous read to a \ufb01le, an application should \ufb01rst\n\ufb01ll in this structure with the relevant information: the \ufb01le descriptor of\nthe \ufb01le to be read ( aio\nfildes), the offset within the \ufb01le ( aio offset)\nas well as the length of the request ( aio nbytes), and \ufb01nally the tar-\nget memory location into which the results of the read should be copied\n(aio buf).\nAfter this structure is \ufb01lled in, the application must issue the asyn-\nchronous call to read the \ufb01le; on Mac OS X, this API is simply th e asyn-\nchronous read API:\nint aio_read(struct aiocb *aiocbp);\nThis call tries to issue the I/O; if successful, it simply ret urns right\naway and the application (i.e., the event-based server) can continue with\nits work.\nThere is one last piece of the puzzle we must solve, however . H ow can\nwe tell when an I/O is complete, and thus that the buffer (poin ted to by\naio buf) now has the requested data within it?\nOne last API is needed. On Mac OS X, it is referred to (somewhat\nconfusingly) as aio error(). The API looks like this:\nint aio_error(const struct aiocb *aiocbp);\nThis system call checks whether the request referred to by aiocbp has\ncompleted. If it has, the routine returns success (indicate d by a zero);\nif not, EINPROGRESS is returned. Thus, for every outstandin g asyn-\nchronous I/O, an application can periodically poll the system via a call\nto aio error() to determine whether said I/O has yet completed.\nOne thing you might have noticed is that it is painful to check whether\nan I/O has completed; if a program has tens or hundreds of I/Os issued\nat a given point in time, should it simply keep checking each o f them\nrepeatedly , or wait a little while \ufb01rst, or ... ?\nT o remedy this issue, some systems provide an approach based on the\ninterrupt. This method uses U N I X signals to inform applications when\nan asynchronous I/O completes, thus removing the need to rep eatedly\nask the system. This polling vs. interrupts issue is seen in d evices too, as\nyou will see (or already have seen) in the chapter on I/O devic es.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nEV E N T-B A S E D CO N C U R R E N C Y (A D VA N C E D) 379\nAS I D E : UN I X SI G N A L S\nA huge and fascinating infrastructure known as signals is present in all mod-\nern U N I X variants. At its simplest, signals provide a way to communic ate with a\nprocess. Speci\ufb01cally , a signal can be delivered to an applic ation; doing so stops the\napplication from whatever it is doing to run a signal handler , i.e., some"
  },
  {
    "content": " E D) 379\nAS I D E : UN I X SI G N A L S\nA huge and fascinating infrastructure known as signals is present in all mod-\nern U N I X variants. At its simplest, signals provide a way to communic ate with a\nprocess. Speci\ufb01cally , a signal can be delivered to an applic ation; doing so stops the\napplication from whatever it is doing to run a signal handler , i.e., some code in\nthe application to handle that signal. When \ufb01nished, the pro cess just resumes its\nprevious behavior .\nEach signal has a name, such as HUP (hang up), INT (interrupt), SEGV (seg-\nmentation violation), etc; see the manual page for details. Interestingly , sometimes\nit is the kernel itself that does the signaling. For example, when your program en-\ncounters a segmentation violation, the OS sends it a SIGSEGV (prepending SIG\nto signal names is common); if your program is con\ufb01gured to ca tch that signal,\nyou can actually run some code in response to this erroneous p rogram behavior\n(which can be useful for debugging). When a signal is sent to a process not con\ufb01g-\nured to handle that signal, some default behavior is enacted ; for SEGV , the process\nis killed.\nHere is a simple program that goes into an in\ufb01nite loop, but ha s \ufb01rst set up a\nsignal handler to catch SIGHUP:\n#include <stdio.h>\n#include <signal.h>\nvoid handle(int arg) {\nprintf(\"stop wakin\u2019 me up...\\n\");\n}\nint main(int argc, char *argv[]) {\nsignal(SIGHUP, handle);\nwhile (1)\n; // doin\u2019 nothin\u2019 except catchin\u2019 some sigs\nreturn 0;\n}\nY ou can send signals to it with the kill command line tool (yes, this is an odd\nand aggressive name). Doing so will interrupt the main while loop in the program\nand run the handler code handle():\nprompt> ./main &\n[3] 36705\nprompt> kill -HUP 36705\nstop wakin\u2019 me up...\nprompt> kill -HUP 36705\nstop wakin\u2019 me up...\nprompt> kill -HUP 36705\nstop wakin\u2019 me up...\nThere is a lot more to learn about signals, so much that a singl e page, much\nless a single chapter , does not nearly suf\ufb01ce. As always, the re is one great source:\nStevens and Rago [SR05]. Read more if interested.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n380 EV E N T-B A S E D CO N C U R R E N C Y (A D VA N C E D)\nIn systems without asynchronous I/O, the pure event-based a pproach\ncannot be implemented. However , clever researchers have de rived meth-\nods that work fairly well in their place. For example, Pai et a l. [PDZ99]\ndescribe a hybrid approach in which events are used to proces s network\npackets, and a thread pool is used to manage outstanding I/Os . Read\ntheir paper for details.\n33.7 Another Problem: State Management\nAnother issue with the event-based approach is that such cod e is gen-\nerally more complicated to write than traditional thread-b ased code. The\nreason is as follows: when an event handler issues an asynchr onous I/O,\nit must package up some program state for the next event handl er to use\nwhen the I/O \ufb01nally completes; this additional work is not ne eded in\nthread-based programs, as the state the program needs is on t he stack of\nthe thread. Adya et al. call this work manual stack management , and it\nis fundamental to event-based programming [A+02].\nT o make this point more concrete, let\u2019s look at a simple examp le in\nwhich a thread-based server needs to read from a \ufb01le descript or ( fd) and,\nonce complete, write the data that it read from the \ufb01le to a net work socket\ndescriptor ( sd"
  },
  {
    "content": ". Adya et al. call this work manual stack management , and it\nis fundamental to event-based programming [A+02].\nT o make this point more concrete, let\u2019s look at a simple examp le in\nwhich a thread-based server needs to read from a \ufb01le descript or ( fd) and,\nonce complete, write the data that it read from the \ufb01le to a net work socket\ndescriptor ( sd). The code (ignoring error checking) looks like this:\nint rc = read(fd, buffer, size);\nrc = write(sd, buffer, size);\nAs you can see, in a multi-threaded program, doing this kind o f work\nis trivial; when the read() \ufb01nally returns, the code immediately knows\nwhich socket to write to because that information is on the st ack of the\nthread (in the variable sd).\nIn an event-based system, life is not so easy . T o perform the s ame task,\nwe\u2019d \ufb01rst issue the read asynchronously , using the AIO calls described\nabove. Let\u2019s say we then periodically check for completion o f the read\nusing the aio\nerror() call; when that call informs us that the read is\ncomplete, how does the event-based server know what to do?\nThe solution, as described by Adya et al. [A+02], is to use an o ld pro-\ngramming language construct known as a continuation [FHK84]. Though\nit sounds complicated, the idea is rather simple: basically , record the\nneeded information to \ufb01nish processing this event in some da ta struc-\nture; when the event happens (i.e., when the disk I/O complet es), look\nup the needed information and process the event.\nIn this speci\ufb01c case, the solution would be to record the sock et de-\nscriptor ( sd) in some kind of data structure (e.g., a hash table), indexed\nby the \ufb01le descriptor ( fd). When the disk I/O completes, the event han-\ndler would use the \ufb01le descriptor to look up the continuation , which will\nreturn the value of the socket descriptor to the caller . At th is point (\ufb01-\nnally), the server can then do the last bit of work to write the data to the\nsocket.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nEV E N T-B A S E D CO N C U R R E N C Y (A D VA N C E D) 381\n33.8 What Is Still Dif\ufb01cult With Events\nThere are a few other dif\ufb01culties with the event-based appro ach that\nwe should mention. For example, when systems moved from a sin gle\nCPU to multiple CPUs, some of the simplicity of the event-bas ed ap-\nproach disappeared. Speci\ufb01cally , in order to utilize more t han one CPU,\nthe event server has to run multiple event handlers in parall el; when do-\ning so, the usual synchronization problems (e.g., critical sections) arise,\nand the usual solutions (e.g., locks) must be employed. Thus , on mod-\nern multicore systems, simple event handling without locks is no longer\npossible.\nAnother problem with the event-based approach is that it doe s not\nintegrate well with certain kinds of systems activity , such as paging. For\nexample, if an event-handler page faults, it will block, and thus the server\nwill not make progress until the page fault completes. Even t hough the\nserver has been structured to avoid explicit blocking, this type of implicit\nblocking due to page faults is hard to avoid and thus can lead t o large\nperformance problems when prevalent.\nA third issue is that event-based code can be hard to manage ov er time,\nas the exact semantics of various routines changes [A+02]. F or example,\nif a routine changes from non-blocking to blocking, the even t handler\nthat calls that routine must also change to accommodate its n ew nature,\nby ripping itself into two pieces. Because blocking is so dis astrous for\nevent-based servers, a programmer must always be on the look out for\nsuch changes in the semantics of the APIs each event uses."
  },
  {
    "content": " manage ov er time,\nas the exact semantics of various routines changes [A+02]. F or example,\nif a routine changes from non-blocking to blocking, the even t handler\nthat calls that routine must also change to accommodate its n ew nature,\nby ripping itself into two pieces. Because blocking is so dis astrous for\nevent-based servers, a programmer must always be on the look out for\nsuch changes in the semantics of the APIs each event uses.\nFinally , though asynchronous disk I/O is now possible on mos t plat-\nforms, it has taken a long time to get there [PDZ99], and it nev er quite\nintegrates with asynchronous network I/O in as simple and un iform a\nmanner as you might think. For example, while one would simpl y like\nto use the select() interface to manage all outstanding I/Os, usually\nsome combination of select() for networking and the AIO calls for\ndisk I/O are required.\n33.9 Summary\nW e\u2019ve presented a bare bones introduction to a different sty le of con-\ncurrency based on events. Event-based servers give control of schedul-\ning to the application itself, but do so at some cost in comple xity and\ndif\ufb01culty of integration with other aspects of modern syste ms (e.g., pag-\ning). Because of these challenges, no single approach has em erged as\nbest; thus, both threads and events are likely to persist as t wo different\napproaches to the same concurrency problem for many years to come.\nRead some research papers (e.g., [A+02, PDZ99, vB+03, WCB01 ]) or bet-\nter yet, write some event-based code, to learn more.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n382 EV E N T-B A S E D CO N C U R R E N C Y (A D VA N C E D)\nReferences\n[A+02] \u201cCooperative T ask Management Without Manual Stack M anagement\u201d\nAtul Adya, Jon Howell, Marvin Theimer , William J. Bolosky , J ohn R. Douceur\nUSENIX A TC \u201902, Monterey , CA, June 2002\nThis gem of a paper is the \ufb01rst to clearly articulate some of th e dif\ufb01culties of event-based concurrency,\nand suggests some simple solutions, as well explores the eve n crazier idea of combining the two types of\nconcurrency management into a single application!\n[FHK84] \u201cProgramming With Continuations\u201d\nDaniel P . Friedman, Christopher T . Haynes, Eugene E. Kohlbe cker\nIn Program T ransformation and Programming Environments, S pringer V erlag, 1984\nThe classic reference to this old idea from the world of progr amming languages. Now increasingly\npopular in some modern languages.\n[N13] \u201cNode.js Documentation\u201d\nBy the folks who build node.js\nA vailable: http://nodejs.org/api/\nOne of the many cool new frameworks that help you readily buil d web services and applications. Every\nmodern systems hacker should be pro\ufb01cient in frameworks suc h as this one (and likely, more than one).\nSpend the time and do some development in one of these worlds a nd become an expert.\n[O96] \u201cWhy Threads Are A Bad Idea (for most purposes)\u201d\nJohn Ousterhout\nInvited T alk at USENIX \u201996, San Diego, CA, January 1996\nA great talk about how threads aren\u2019t a great match for GUI-ba sed applications (but the ideas are more\ngeneral). Ousterhout formed many of these opinions while he was developing T cl/Tk, a cool scripting\nlanguage and toolkit that made it 100x easier to develop GUI- based applications than the state of the\nart at the time. While the Tk GUI toolkit lives on (in Python fo r example), T cl seems to be slowly dying\n(unfortunately).\n[PDZ99] \u201cFlash: An Ef\ufb01cient and Portable W eb Server \u201d\nVivek S. Pai, Peter Druschel, Willy Zwaenepoel\nUSENIX \u201999, Monterey , CA, June 1999\nA pioneering paper on how to structure web servers in the"
  },
  {
    "content": " While the Tk GUI toolkit lives on (in Python fo r example), T cl seems to be slowly dying\n(unfortunately).\n[PDZ99] \u201cFlash: An Ef\ufb01cient and Portable W eb Server \u201d\nVivek S. Pai, Peter Druschel, Willy Zwaenepoel\nUSENIX \u201999, Monterey , CA, June 1999\nA pioneering paper on how to structure web servers in the then -burgeoning Internet era. Read it to\nunderstand the basics as well as to see the authors\u2019 ideas on h ow to build hybrids when support for\nasynchronous I/O is lacking.\n[SR05] \u201cAdvanced Programming in the U NIX Environment\u201d\nW . Richard Stevens and Stephen A. Rago\nAddison-W esley , 2005\nOnce again, we refer to the classic must-have-on-your-book shelf book of UNIX systems programming.\nIf there is some detail you need to know, it is in here.\n[vB+03] \u201cCapriccio: Scalable Threads for Internet Service s\u201d\nRob von Behren, Jeremy Condit, Feng Zhou, George C. Necula, E ric Brewer\nSOSP \u201903, Lake George, New Y ork, October 2003\nA paper about how to make threads work at extreme scale; a coun ter to all the event-based work ongoing\nat the time.\n[WCB01] \u201cSEDA: An Architecture for W ell-Conditioned, Scal able Internet Services\u201d\nMatt W elsh, David Culler , and Eric Brewer\nSOSP \u201901, Banff, Canada, October 2001\nA nice twist on event-based serving that combines threads, q ueues, and event-based hanlding into one\nstreamlined whole. Some of these ideas have found their way i nto the infrastructures of companies such\nas Google, Amazon, and elsewhere.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n34\nSummary Dialogue on Concurrency\nProfessor: So, does your head hurt now?\nStudent: (taking two Motrin tablets) Well, some. It\u2019s hard to think ab out all the\nways threads can interleave.\nProfessor: Indeed it is. I am always amazed at how so few line of code, when\nconcurrent execution is involved, can become nearly imposs ible to understand.\nStudent: Me too! It\u2019s kind of embarrassing, as a Computer Scientist, n ot to be\nable to make sense of \ufb01ve lines of code.\nProfessor: Oh, don\u2019t feel too badly. If you look through the \ufb01rst papers o n con-\ncurrent algorithms, they are sometimes wrong! And the autho rs often professors!\nStudent: (gasps) Professors can be ... umm... wrong?\nProfessor: Y es, it is true. Though don\u2019t tell anybody \u2013 it\u2019s one of our tra de\nsecrets.\nStudent: I am sworn to secrecy. But if concurrent code is so hard to thin k about,\nand so hard to get right, how are we supposed to write correct c oncurrent code?\nProfessor: Well that is the real question, isn\u2019t it? I think it starts wit h a few\nsimple things. First, keep it simple! Avoid complex interac tions between threads,\nand use well-known and tried-and-true ways to manage thread interactions.\nStudent: Like simple locking, and maybe a producer-consumer queue?\nProfessor: Exactly! Those are common paradigms, and you should be able t o\nproduce the working solutions given what you\u2019ve learned. Se cond, only use con-\ncurrency when absolutely needed; avoid it if at all possible . There is nothing\nworse than premature optimization of a program.\nStudent: I see \u2013 why add threads if you don\u2019t need them?\nProfessor: Exactly. Third, if you really need parallelism, seek it in ot her sim-\npli\ufb01ed forms. For example, the Map-Reduce method for writin g parallel data\nanalysis code is an excellent example of achieving parallel ism without having to\nhandle any of the horri\ufb01c complexities of locks, condition v ariables, and the other\nnasty things we\u2019ve talked about.\n383\n384 SU M M A RY DI A L O G U"
  },
  {
    "content": " parallelism, seek it in ot her sim-\npli\ufb01ed forms. For example, the Map-Reduce method for writin g parallel data\nanalysis code is an excellent example of achieving parallel ism without having to\nhandle any of the horri\ufb01c complexities of locks, condition v ariables, and the other\nnasty things we\u2019ve talked about.\n383\n384 SU M M A RY DI A L O G U E O N CO N C U R R E N C Y\nStudent: Map-Reduce, huh? Sounds interesting \u2013 I\u2019ll have to read more about\nit on my own.\nProfessor: Good! Y ou should. In the end, you\u2019ll have to do a lot of that, as\nwhat we learn together can only serve as the barest introduct ion to the wealth of\nknowledge that is out there. Read, read, and read some more! A nd then try things\nout, write some code, and then write some more too. As Gladwel l talks about in\nhis book \u201cOutliers\u201d, you need to put roughly 10,000 hours int o something in\norder to become a real expert. Y ou can\u2019t do that all inside of c lass time!\nStudent: Wow, I\u2019m not sure if that is depressing, or uplifting. But I\u2019l l assume\nthe latter , and get to work! Time to write some more concurren t code...\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nPart III\nPersistence\n385\n\n35\nA Dialogue on Persistence\nProfessor: And thus we reach the third of our four ... err ... three pillar s of\noperating systems: persistence.\nStudent: Did you say there were three pillars, or four? What is the four th?\nProfessor: No. Just three, young student, just three. T rying to keep it s imple\nhere.\nStudent: OK, \ufb01ne. But what is persistence, oh \ufb01ne and noble professor?\nProfessor: Actually, you probably know what it means in the traditional sense,\nright? As the dictionary would say: \u201ca \ufb01rm or obstinate conti nuance in a course\nof action in spite of dif\ufb01culty or opposition.\u201d\nStudent: It\u2019s kind of like taking your class: some obstinance require d.\nProfessor: Ha! Y es. But persistence here means something else. Let me ex plain.\nImagine you are outside, in a \ufb01eld, and you pick a \u2013\nStudent: (interrupting) I know! A peach! From a peach tree!\nProfessor: I was going to say apple, from an apple tree. Oh well; we\u2019ll do i t your\nway, I guess.\nStudent: (stares blankly)\nProfessor: Anyhow, you pick a peach; in fact, you pick many many peaches,\nbut you want to make them last for a long time. Winter is hard an d cruel in\nWisconsin, after all. What do you do?\nStudent: Well, I think there are some different things you can do. Y ou c an pickle\nit! Or bake a pie. Or make a jam of some kind. Lots of fun!\nProfessor: Fun? Well, maybe. Certainly, you have to do a lot more work to m ake\nthe peach persist. And so it is with information as well; making information\npersist, despite computer crashes, disk failures, or power outages is a tough and\ninteresting challenge.\nStudent: Nice segue; you\u2019re getting quite good at that.\nProfessor: Thanks! A professor can always use a few kind words, you know.\n387\n388 A D I A L O G U E O N PE R S I S T E N C E\nStudent: I\u2019ll try to remember that. I guess it\u2019s time to stop talking pe aches, and\nstart talking computers?\nProfessor: Y es, it is that time...\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n36\nI/O Devices\nBefore delving into the main content of this part of the book ( on persis-\ntence), we \ufb01rst introduce the concept of"
  },
  {
    "content": "hes, and\nstart talking computers?\nProfessor: Y es, it is that time...\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n36\nI/O Devices\nBefore delving into the main content of this part of the book ( on persis-\ntence), we \ufb01rst introduce the concept of an input/output (I/O) device and\nshow how the operating system might interact with such an ent ity . I/O is\nquite critical to computer systems, of course; imagine a pro gram without\nany input (it produces the same result each time); now imagin e a pro-\ngram with no output (what was the purpose of it running?). Cle arly , for\ncomputer systems to be interesting, both input and output ar e required.\nAnd thus, our general problem:\nCR U X : H O W TO IN T E G R AT E I/O I N TO SY S T E M S\nHow should I/O be integrated into systems? What are the gener al\nmechanisms? How can we make them ef\ufb01cient?\n36.1 System Architecture\nT o begin our discussion, let\u2019s look at the structure of a typi cal system\n(Figure 36.1). The picture shows a single CPU attached to the main mem-\nory of the system via some kind of memory bus or interconnect. Some\ndevices are connected to the system via a general I/O bus , which in many\nmodern systems would be PCI (or one if its many derivatives); graph-\nics and some other higher-performance I/O devices might be f ound here.\nFinally , even lower down are one or more of what we call a peripheral\nbus, such as SCSI, SA T A, or USB. These connect the slowest devices to\nthe system, including disks, mice, and other similar components.\nOne question you might ask is: why do we need a hierarchical st ruc-\nture like this? Put simply: physics, and cost. The faster a bu s is, the\nshorter it must be; thus, a high-performance memory bus does not have\nmuch room to plug devices and such into it. In addition, engin eering\na bus for high performance is quite costly . Thus, system desi gners have\nadopted this hierarchical approach, where components that demands high\nperformance (such as the graphics card) are nearer the CPU. L ower per-\n389\n390 I/O D E V I C E S\nGraphics\nMemoryCPU\nMemory Bus\n(proprietary)\nGeneral I/O Bus\n(e.g., PCI)\nPeripheral I/O Bus\n(e.g., SCSI, SATA, USB)\nFigure 36.1: Prototypical System Architecture\nformance components are further away . The bene\ufb01ts of placin g disks and\nother slow devices on a peripheral bus are manifold; in parti cular , you\ncan place a large number of devices on it.\n36.2 A Canonical Device\nLet us now look at a canonical device (not a real one), and use t his\ndevice to drive our understanding of some of the machinery re quired\nto make device interaction ef\ufb01cient. From Figure 36.2, we can see that a\ndevice has two important components. The \ufb01rst is the hardwar e interface\nit presents to the rest of the system. Just like a piece of soft ware, hardware\nmust also present some kind of interface that allows the syst em software\nto control its operation. Thus, all devices have some speci\ufb01 ed interface\nand protocol for typical interaction.\nThe second part of any device is its internal structure . This part of\nthe device is implementation speci\ufb01c and is responsible for implement-\ning the abstraction the device presents to the system. V ery s imple devices\nwill have one or a few hardware chips to implement their funct ionality;\nmore complex devices will include a simple CPU, some general purpose\nmemory , and other device-speci\ufb01c chips to get their job done . For exam-\nple, modern RAID controllers might consist of hundreds of th ousands of\nlines of \ufb01rmware (i.e., software within a hardware device) to implement\nits functionality .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O"
  },
  {
    "content": " some general purpose\nmemory , and other device-speci\ufb01c chips to get their job done . For exam-\nple, modern RAID controllers might consist of hundreds of th ousands of\nlines of \ufb01rmware (i.e., software within a hardware device) to implement\nits functionality .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nI/O D E V I C E S 391\nOther Hardware-specific Chips\nMemory (DRAM or SRAM or both)\nMicro-controller (CPU)\nRegisters Status Command Data Interface\nInternals\nFigure 36.2: A Canonical Device\n36.3 The Canonical Protocol\nIn the picture above, the (simpli\ufb01ed) device interface is co mprised of\nthree registers: a status register , which can be read to see the current sta-\ntus of the device; a command register , to tell the device to perform a cer-\ntain task; and a data register to pass data to the device, or get data from\nthe device. By reading and writing these registers, the oper ating system\ncan control device behavior .\nLet us now describe a typical interaction that the OS might ha ve with\nthe device in order to get the device to do something on its beh alf. The\nprotocol is as follows:\nWhile (STATUS == BUSY)\n; // wait until device is not busy\nWrite data to DATA register\nWrite command to COMMAND register\n(Doing so starts the device and executes the command)\nWhile (STATUS == BUSY)\n; // wait until device is done with your request\nThe protocol has four steps. In the \ufb01rst, the OS waits until th e device is\nready to receive a command by repeatedly reading the status r egister; we\ncall this polling the device (basically , just asking it what is going on). Sec-\nond, the OS sends some data down to the data register; one can i magine\nthat if this were a disk, for example, that multiple writes wo uld need to\ntake place to transfer a disk block (say 4KB) to the device. Wh en the main\nCPU is involved with the data movement (as in this example pro tocol),\nwe refer to it as programmed I/O (PIO) . Third, the OS writes a command\nto the command register; doing so implicitly lets the device know that\nboth the data is present and that it should begin working on th e com-\nmand. Finally , the OS waits for the device to \ufb01nish by again po lling it\nin a loop, waiting to see if it is \ufb01nished (it may then get an err or code to\nindicate success or failure).\nThis basic protocol has the positive aspect of being simple a nd work-\ning. However , there are some inef\ufb01ciencies and inconvenien ces involved.\nThe \ufb01rst problem you might notice in the protocol is that poll ing seems\ninef\ufb01cient; speci\ufb01cally , it wastes a great deal of CPU time j ust waiting for\nthe (potentially slow) device to complete its activity , ins tead of switching\nto another ready process and thus better utilizing the CPU.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n392 I/O D E V I C E S\nTH E CR U X : H O W TO AV O I D TH E CO S T S OF PO L L I N G\nHow can the OS check device status without frequent polling, and\nthus lower the CPU overhead required to manage the device?\n36.4 Lowering CPU Overhead With Interrupts\nThe invention that many engineers came upon years ago to impr ove\nthis interaction is something we\u2019ve seen already: the interrupt. Instead\nof polling the device repeatedly , the OS can issue a request, put the call-\ning process to sleep, and context switch to another task. Whe n the device\nis \ufb01nally \ufb01nished with the operation, it will raise a hardwar e interrupt,\ncausing the CPU to jump into the OS at a pre-determined interrupt ser-\nvice routine (ISR) or more simply an interrupt handler . The handler is\njust a piece of operating system code that will \ufb01nish the requ est ("
  },
  {
    "content": " the call-\ning process to sleep, and context switch to another task. Whe n the device\nis \ufb01nally \ufb01nished with the operation, it will raise a hardwar e interrupt,\ncausing the CPU to jump into the OS at a pre-determined interrupt ser-\nvice routine (ISR) or more simply an interrupt handler . The handler is\njust a piece of operating system code that will \ufb01nish the requ est (for ex-\nample, by reading data and perhaps an error code from the devi ce) and\nwake the process waiting for the I/O, which can then proceed a s desired.\nInterrupts thus allow for overlap of computation and I/O, which is\nkey for improved utilization. This timeline shows the probl em:\nCPU\nDisk 1 1 1 1 1\n1 1 1 1 1 p p p p p 1 1 1 1 1\nIn the diagram, Process 1 runs on the CPU for some time (indica ted by\na repeated 1 on the CPU line), and then issues an I/O request to the disk\nto read some data. Without interrupts, the system simply spi ns, polling\nthe status of the device repeatedly until the I/O is complete (indicated by\na p). The disk services the request and \ufb01nally Process 1 can run a gain.\nIf instead we utilize interrupts and allow for overlap, the O S can do\nsomething else while waiting for the disk:\nCPU\nDisk 1 1 1 1 1\n1 1 1 1 1 2 2 2 2 2 1 1 1 1 1\nIn this example, the OS runs Process 2 on the CPU while the disk ser-\nvices Process 1\u2019s request. When the disk request is \ufb01nished, an interrupt\noccurs, and the OS wakes up Process 1 and runs it again. Thus, both the\nCPU and the disk are properly utilized during the middle stre tch of time.\nNote that using interrupts is not always the best solution. For example,\nimagine a device that performs its tasks very quickly: the \ufb01r st poll usually\n\ufb01nds the device to be done with task. Using an interrupt in thi s case will\nactually slow down the system: switching to another process, handling the\ninterrupt, and switching back to the issuing process is expe nsive. Thus, if\na device is fast, it may be best to poll; if it is slow , interrup ts, which allow\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nI/O D E V I C E S 393\nTI P : I N T E R R U P T S NO T ALWAY S BE T T E R TH A N PIO\nAlthough interrupts allow for overlap of computation and I/ O, they only\nreally make sense for slow devices. Otherwise, the cost of in terrupt han-\ndling and context switching may outweigh the bene\ufb01ts interr upts pro-\nvide. There are also cases where a \ufb02ood of interrupts may over load a sys-\ntem and lead it to livelock [MR96]; in such cases, polling pro vides more\ncontrol to the OS in its scheduling and thus is again useful.\noverlap, are best. If the speed of the device is not known, or s ometimes\nfast and sometimes slow , it may be best to use a hybrid that polls for a\nlittle while and then, if the device is not yet \ufb01nished, uses i nterrupts. This\ntwo-phased approach may achieve the best of both worlds.\nAnother reason not to use interrupts arises in networks [MR9 6]. When\na huge stream of incoming packets each generate an interrupt , it is pos-\nsible for the OS to livelock, that is, \ufb01nd itself only processing interrupts\nand never allowing a user-level process to run and actually s ervice the\nrequests. For example, imagine a web server that suddenly ex periences\na high load due to the \u201cslashdot effect\u201d. In this case, it is be tter to occa-\nsionally use polling to better control what is happening in t he system and\nallow the web server to service some requests before going ba ck to the\ndevice to check for more packet arrivals.\nAnother interrupt-based optimization is coalescing. In such a setup, a\ndevice which needs to raise an interrupt \ufb01rst waits for a"
  },
  {
    "content": " load due to the \u201cslashdot effect\u201d. In this case, it is be tter to occa-\nsionally use polling to better control what is happening in t he system and\nallow the web server to service some requests before going ba ck to the\ndevice to check for more packet arrivals.\nAnother interrupt-based optimization is coalescing. In such a setup, a\ndevice which needs to raise an interrupt \ufb01rst waits for a bit b efore deliv-\nering the interrupt to the CPU. While waiting, other request s may soon\ncomplete, and thus multiple interrupts can be coalesced int o a single in-\nterrupt delivery , thus lowering the overhead of interrupt p rocessing. Of\ncourse, waiting too long will increase the latency of a reque st, a common\ntrade-off in systems. See Ahmad et al. [A+11] for an excellen t summary .\n36.5 More Ef\ufb01cient Data Movement With DMA\nUnfortunately , there is one other aspect of our canonical pr otocol that\nrequires our attention. In particular , when using programm ed I/O (PIO)\nto transfer a large chunk of data to a device, the CPU is once ag ain over-\nburdened with a rather trivial task, and thus wastes a lot of t ime and\neffort that could better be spent running other processes. T his timeline\nillustrates the problem:\nCPU\nDisk 1 1 1 1 1\n1 1 1 1 1 c c c 2 2 2 2 2 1 1\nIn the timeline, Process 1 is running and then wishes to write some data to\nthe disk. It then initiates the I/O, which must copy the data f rom memory\nto the device explicitly , one word at a time (marked c in the diagram).\nWhen the copy is complete, the I/O begins on the disk and the CP U can\n\ufb01nally be used for something else.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n394 I/O D E V I C E S\nTH E CR U X : H O W TO LO W E R PIO O V E R H E A D S\nWith PIO, the CPU spends too much time moving data to and from\ndevices by hand. How can we of\ufb02oad this work and thus allow the CPU\nto be more effectively utilized?\nThe solution to this problem is something we refer to as Direct Mem-\nory Access (DMA) . A DMA engine is essentially a very speci\ufb01c device\nwithin a system that can orchestrate transfers between devi ces and main\nmemory without much CPU intervention.\nDMA works as follows. T o transfer data to the device, for exam ple, the\nOS would program the DMA engine by telling it where the data li ves in\nmemory , how much data to copy , and which device to send it to. A t that\npoint, the OS is done with the transfer and can proceed with ot her work.\nWhen the DMA is complete, the DMA controller raises an interr upt, and\nthe OS thus knows the transfer is complete. The revised timel ine:\nCPU\nDMA\nDisk 1 1 1 1 1\n1 1 1 1 1 2 2 2 2 2 2 2 2 1 1\nc c c\nFrom the timeline, you can see that the copying of data is now h andled\nby the DMA controller . Because the CPU is free during that tim e, the OS\ncan do something else, here choosing to run Process 2. Proces s 2 thus gets\nto use more CPU before Process 1 runs again.\n36.6 Methods Of Device Interaction\nNow that we have some sense of the ef\ufb01ciency issues involved w ith\nperforming I/O, there are a few other problems we need to hand le to\nincorporate devices into modern systems. One problem you ma y have\nnoticed thus far: we have not really said anything about how t he OS ac-\ntually communicates with the device! Thus, the problem:\nTH E CR U X : H O W TO CO M M U N I C AT E WI T H DE V I C E S\nHow should the hardware communicate with a device? Should th ere\nbe explicit instructions? Or are there other ways to do it?\nOver time, two primary methods of device communication have de-\nveloped. The \ufb01rst, oldest method (used by IBM mainframes for many\n"
  },
  {
    "content": " the device! Thus, the problem:\nTH E CR U X : H O W TO CO M M U N I C AT E WI T H DE V I C E S\nHow should the hardware communicate with a device? Should th ere\nbe explicit instructions? Or are there other ways to do it?\nOver time, two primary methods of device communication have de-\nveloped. The \ufb01rst, oldest method (used by IBM mainframes for many\nyears) is to have explicit I/O instructions . These instructions specify a\nway for the OS to send data to speci\ufb01c device registers and thu s allow the\nconstruction of the protocols described above.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nI/O D E V I C E S 395\nFor example, on x86, the in and out instructions can be used to com-\nmunicate with devices. For example, to send data to a device, the caller\nspeci\ufb01es a register with the data in it, and a speci\ufb01c port which names the\ndevice. Executing the instruction leads to the desired beha vior .\nSuch instructions are usually privileged. The OS controls devices, and\nthe OS thus is the only entity allowed to directly communicat e with them.\nImagine if any program could read or write the disk, for examp le: total\nchaos (as always), as any user program could use such a loopho le to gain\ncomplete control over the machine.\nThe second method to interact with devices is known as memory-\nmapped I/O . With this approach, the hardware makes device registers\navailable as if they were memory locations. T o access a parti cular register ,\nthe OS issues a load (to read) or store (to write) the address; the hardware\nthen routes the load/store to the device instead of main memo ry .\nThere is not some great advantage to one approach or the other . The\nmemory-mapped approach is nice in that no new instructions a re needed\nto support it, but both approaches are still in use today .\n36.7 Fitting Into The OS: The Device Driver\nOne \ufb01nal problem we will discuss: how to \ufb01t devices, each of wh ich\nhave very speci\ufb01c interfaces, into the OS, which we would lik e to keep\nas general as possible. For example, consider a \ufb01le system. W e\u2019d like\nto build a \ufb01le system that worked on top of SCSI disks, IDE disk s, USB\nkeychain drives, and so forth, and we\u2019d like the \ufb01le system to be relatively\noblivious to all of the details of how to issue a read or write r equest to\nthese difference types of drives. Thus, our problem:\nTH E CR U X : H O W TO BU I L D A D E V I C E -N E U T R AL OS\nHow can we keep most of the OS device-neutral, thus hiding the de-\ntails of device interactions from major OS subsystems?\nThe problem is solved through the age-old technique of abstraction.\nAt the lowest level, a piece of software in the OS must know in d etail\nhow a device works. W e call this piece of software a device driver , and\nany speci\ufb01cs of device interaction are encapsulated within .\nLet us see how this abstraction might help OS design and imple men-\ntation by examining the Linux \ufb01le system software stack. Fig ure 36.3 is\na rough and approximate depiction of the Linux software orga nization.\nAs you can see from the diagram, a \ufb01le system (and certainly , a n appli-\ncation above) is completely oblivious to the speci\ufb01cs of whi ch disk class\nit is using; it simply issues block read and write requests to the generic\nblock layer , which routes them to the appropriate device dri ver , which\nhandles the details of issuing the speci\ufb01c request. Althoug h simpli\ufb01ed,\nthe diagram shows how such detail can be hidden from most of th e OS.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n396 I/O D E V I C E S\nApplication\nFile System"
  },
  {
    "content": " dri ver , which\nhandles the details of issuing the speci\ufb01c request. Althoug h simpli\ufb01ed,\nthe diagram shows how such detail can be hidden from most of th e OS.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n396 I/O D E V I C E S\nApplication\nFile System\nGeneric Block Layer\nDevice Driver [SCSI, ATA, etc.]\nPOSIX API [open, read, write, close, etc.]\nGeneric Block Interface [block read/write]\nSpecific Block Interface [protocol-specific read/write]\nuserkernel mode\nFigure 36.3: The File System Stack\nNote that such encapsulation can have its downside as well. F or ex-\nample, if there is a device that has many special capabilitie s, but has to\npresent a generic interface to the rest of the kernel, those s pecial capabili-\nties will go unused. This situation arises, for example, in L inux with SCSI\ndevices, which have very rich error reporting; because othe r block de-\nvices (e.g., A T A/IDE) have much simpler error handling, all that higher\nlevels of software ever receive is a generic EIO (generic IO error) error\ncode; any extra detail that SCSI may have provided is thus los t to the \ufb01le\nsystem [G08].\nInterestingly , because device drivers are needed for any de vice you\nmight plug into your system, over time they have come to repre sent a\nhuge percentage of kernel code. Studies of the Linux kernel r eveal that\nover 70% of OS code is found in device drivers [C01]; for Windo ws-based\nsystems, it is likely quite high as well. Thus, when people te ll you that the\nOS has millions of lines of code, what they are really saying i s that the OS\nhas millions of lines of device-driver code. Of course, for a ny given in-\nstallation, most of that code may not be active (i.e., only a f ew devices are\nconnected to the system at a time). Perhaps more depressingl y , as drivers\nare often written by \u201camateurs\u201d (instead of full-time kerne l developers),\nthey tend to have many more bugs and thus are a primary contrib utor to\nkernel crashes [S03].\n36.8 Case Study: A Simple IDE Disk Driver\nT o dig a little deeper here, let\u2019s take a quick look at an actua l device: an\nIDE disk drive [L94]. W e summarize the protocol as described in this ref-\nerence [W10]; we\u2019ll also peek at the xv6 source code for a simp le example\nof a working IDE driver [CK+08].\nAn IDE disk presents a simple interface to the system, consis ting of\nfour types of register: control, command block, status, and error . These\nregisters are available by reading or writing to speci\ufb01c \u201cI/ O addresses\u201d\n(such as 0x3F6 below) using (on x86) the in and out I/O instructions.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nI/O D E V I C E S 397\nControl Register:\nAddress 0x3F6 = 0x80 (0000 1RE0): R=reset, E=0 means \"enable interrupt\"\nCommand Block Registers:\nAddress 0x1F0 = Data Port\nAddress 0x1F1 = Error\nAddress 0x1F2 = Sector Count\nAddress 0x1F3 = LBA low byte\nAddress 0x1F4 = LBA mid byte\nAddress 0x1F5 = LBA hi byte\nAddress 0x1F6 = 1B1D TOP4LBA: B=LBA, D=drive\nAddress 0x1F7 = Command/status\nStatus Register (Address 0x1F7):\n7 6 5 4 3 2 1 0\nBUSY READY FAULT SEEK DRQ CORR IDDEX ERROR\nError Register (Address 0x1F1): (check when Status ERROR==1)\n7 6 5 4 3 2 1 0\nBBK UNC MC IDNF MCR ABRT T0NF AM"
  },
  {
    "content": ": B=LBA, D=drive\nAddress 0x1F7 = Command/status\nStatus Register (Address 0x1F7):\n7 6 5 4 3 2 1 0\nBUSY READY FAULT SEEK DRQ CORR IDDEX ERROR\nError Register (Address 0x1F1): (check when Status ERROR==1)\n7 6 5 4 3 2 1 0\nBBK UNC MC IDNF MCR ABRT T0NF AMNF\nBBK = Bad Block\nUNC = Uncorrectable data error\nMC = Media Changed\nIDNF = ID mark Not Found\nMCR = Media Change Requested\nABRT = Command aborted\nT0NF = Track 0 Not Found\nAMNF = Address Mark Not Found\nFigure 36.4: The IDE Interface\nThe basic protocol to interact with the device is as follows, assuming\nit has already been initialized.\n\u2022 W ait for drive to be ready . Read Status Register (0x1F7) until drive\nis not busy and READY .\n\u2022 W rite parameters to command registers. W rite the sector count,\nlogical block address (LBA) of the sectors to be accessed, an d drive\nnumber (master=0x00 or slave=0x10, as IDE permits just two d rives)\nto command registers (0x1F2-0x1F6).\n\u2022 Start the I/O. by issuing read/write to command register . W rite\nREAD\u2014WRITE command to command register (0x1F7).\n\u2022 Data transfer (for writes): W ait until drive status is READY and\nDRQ (drive request for data); write data to data port.\n\u2022 Handle interrupts. In the simplest case, handle an interrupt for\neach sector transferred; more complex approaches allow bat ching\nand thus one \ufb01nal interrupt when the entire transfer is compl ete.\n\u2022 Error handling. After each operation, read the status register . If the\nERROR bit is on, read the error register for details.\nMost of this protocol is found in the xv6 IDE driver (Figure\n36.5),\nwhich (after initialization) works through four primary fu nctions. The\n\ufb01rst is ide rw(), which queues a request (if there are others pending),\nor issues it directly to the disk (via ide start request()); in either\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n398 I/O D E V I C E S\nstatic int ide_wait_ready() {\nwhile (((int r = inb(0x1f7)) & IDE_BSY) || !(r & IDE_DRDY))\n; // loop until drive isn\u2019t busy\n}\nstatic void ide_start_request(struct buf *b) {\nide_wait_ready();\noutb(0x3f6, 0); // generate interrupt\noutb(0x1f2, 1); // how many sectors?\noutb(0x1f3, b->sector & 0xff); // LBA goes here ...\noutb(0x1f4, (b->sector >> 8) & 0xff); // ... and here\noutb(0x1f5, (b->sector >> 16) & 0xff); // ... and here!\noutb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((b->sector>>24)&0x0f));\nif(b->flags & B_DIRTY){\noutb(0x1f7, IDE_CMD_WRITE); // this is a WRITE\noutsl(0x1f0, b->data, 512/4); // transfer data too!\n} else {\noutb(0x1f7, IDE_CMD_READ); // this is a READ (no data)\n}\n}\nvoid ide_rw(struct buf *b) {\nacquire(&ide_lock);\nfor (struct buf **pp = &ide_queue; *pp; pp=&(*pp)->qnext)\n; // walk queue\n*pp = b; // add request to end\nif (ide_queue == b) // if q is empty\nide_start_request(b); // send req to disk\nwhile ((b->flags & (B_VALID|B_DIRTY)) != B_VALID)\nsleep(b, &ide_lock); // wait for"
  },
  {
    "content": " = &ide_queue; *pp; pp=&(*pp)->qnext)\n; // walk queue\n*pp = b; // add request to end\nif (ide_queue == b) // if q is empty\nide_start_request(b); // send req to disk\nwhile ((b->flags & (B_VALID|B_DIRTY)) != B_VALID)\nsleep(b, &ide_lock); // wait for completion\nrelease(&ide_lock);\n}\nvoid ide_intr() {\nstruct buf *b;\nacquire(&ide_lock);\nif (!(b->flags & B_DIRTY) && ide_wait_ready(1) >= 0)\ninsl(0x1f0, b->data, 512/4); // if READ: get data\nb->flags |= B_VALID;\nb->flags &= \u02dcB_DIRTY;\nwakeup(b); // wake waiting process\nif ((ide_queue = b->qnext) != 0) // start next request\nide_start_request(ide_queue); // (if one exists)\nrelease(&ide_lock);\n}\nFigure 36.5: The xv6 IDE Disk Driver (Simpli\ufb01ed)\ncase, the routine waits for the request to complete and the ca lling pro-\ncess is put to sleep. The second is ide\nstart request(), which is\nused to send a request (and perhaps data, in the case of a write ) to the\ndisk; the in and out x86 instructions are called to read and write device\nregisters, respectively . The start request routine uses th e third function,\nide wait ready(), to ensure the drive is ready before issuing a request\nto it. Finally , ide intr() is invoked when an interrupt takes place; it\nreads data from the device (if the request is a read, not a writ e), wakes the\nprocess waiting for the I/O to complete, and (if there are mor e requests\nin the I/O queue), launches the next I/O via ide start request().\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nI/O D E V I C E S 399\n36.9 Historical Notes\nBefore ending, we include a brief historical note on the orig in of some\nof these fundamental ideas. If you are interested in learnin g more, read\nSmotherman\u2019s excellent summary [S08].\nInterrupts are an ancient idea, existing on the earliest of m achines. For\nexample, the UNIV AC in the early 1950\u2019s had some form of inter rupt vec-\ntoring, although it is unclear in exactly which year this fea ture was avail-\nable [S08]. Sadly , even in its infancy , we are beginning to lo se the origins\nof computing history .\nThere is also some debate as to which machine \ufb01rst introduced the idea\nof DMA. For example, Knuth and others point to the DYSEAC (a \u201cm o-\nbile\u201d machine, which at the time meant it could be hauled in a t railer),\nwhereas others think the IBM SAGE may have been the \ufb01rst [S08] . Ei-\nther way , by the mid 50\u2019s, systems with I/O devices that commu nicated\ndirectly with memory and interrupted the CPU when \ufb01nished ex isted.\nThe history here is dif\ufb01cult to trace because the inventions are tied to\nreal, and sometimes obscure, machines. For example, some th ink that the\nLincoln Labs TX-2 machine was \ufb01rst with vectored interrupts [S08], but\nthis is hardly clear .\nBecause the ideas are relatively obvious \u2013 no Einsteinian le ap is re-\nquired to come up with the idea of letting the CPU do something else\nwhile a slow I/O is pending \u2013 perhaps our focus on \u201cwho \ufb01rst?\u201d i s mis-\nguided. What is certainly clear: as people built these early machines, it\nbecame obvious that I/O support was needed. Interrupts, DMA , and re-\nlated ideas are all direct outcomes of the nature of fast CPUs and slow\ndevices; if you were there at the time, you might have had simi lar ideas.\n36.10 Summary\nY ou should now"
  },
  {
    "content": " on \u201cwho \ufb01rst?\u201d i s mis-\nguided. What is certainly clear: as people built these early machines, it\nbecame obvious that I/O support was needed. Interrupts, DMA , and re-\nlated ideas are all direct outcomes of the nature of fast CPUs and slow\ndevices; if you were there at the time, you might have had simi lar ideas.\n36.10 Summary\nY ou should now have a very basic understanding of how an OS int er-\nacts with a device. T wo techniques, the interrupt and DMA, ha ve been\nintroduced to help with device ef\ufb01ciency , and two approache s to access-\ning device registers, explicit I/O instructions and memory -mapped I/O,\nhave been described. Finally , the notion of a device driver h as been pre-\nsented, showing how the OS itself can encapsulate low-level details and\nthus make it easier to build the rest of the OS in a device-neut ral fashion.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n400 I/O D E V I C E S\nReferences\n[A+11] \u201cvIC: Interrupt Coalescing for Virtual Machine Stor age Device IO\u201d\nIrfan Ahmad, Ajay Gulati, Ali Mashtizadeh\nUSENIX \u201911\nA terri\ufb01c survey of interrupt coalescing in traditional and virtualized environments.\n[C01] \u201cAn Empirical Study of Operating System Errors\u201d\nAndy Chou, Junfeng Y ang, Benjamin Chelf, Seth Hallem, Dawso n Engler\nSOSP \u201901\nOne of the \ufb01rst papers to systematically explore how many bug s are in modern operating systems.\nAmong other neat \ufb01ndings, the authors show that device drive rs have something like seven times more\nbugs than mainline kernel code.\n[CK+08] \u201cThe xv6 Operating System\u201d\nRuss Cox, Frans Kaashoek, Robert Morris, Nickolai Zeldovic h\nFrom: http://pdos.csail.mit.edu/6.828/2008/index.htm l\nSee ide.c for the IDE device driver , with a few more details therein.\n[D07] \u201cWhat Every Programmer Should Know About Memory\u201d\nUlrich Drepper\nNovember , 2007\nA vailable: http://www .akkadia.org/drepper/cpumemory .pdf\nA fantastic read about modern memory systems, starting at DR AM and going all the way up to virtu-\nalization and cache-optimized algorithms.\n[G08] \u201cEIO: Error-handling is Occasionally Correct\u201d\nHaryadi Gunawi, Cindy Rubio-Gonzalez, Andrea Arpaci-Duss eau, Remzi Arpaci-Dusseau,\nBen Liblit\nF AST \u201908, San Jose, CA, February 2008\nOur own work on building a tool to \ufb01nd code in Linux \ufb01le systems that does not handle error return\nproperly. We found hundreds and hundreds of bugs, many of whi ch have now been \ufb01xed.\n[L94] \u201cA T Attachment Interface for Disk Drives\u201d\nLawrence J. Lamers, X3T10 T echnical Editor\nA vailable: ftp://ftp.t10.org/t13/project/d0791r4c-A TA-1.pdf\nReference number: ANSI X3.221 - 1994 A rather dry document about device interfaces. Read it at\nyour own peril.\n[MR96] \u201cEliminating Receive Livelock in an Interrupt-driv en Kernel\u201d\nJeffrey Mogul and K. K. Ramakrishnan\nUSENIX \u201996, San Diego, CA, January 1996\nMogul and colleagues did a great deal of pioneering work on we b server network performance. This\npaper is but one example.\n[S08] \u201cInterrupts\u201d\nMark Smotherman, as of July \u201908\nA vailable: http://people.cs.clemson.edu/\u02dcmark/interr upts.html\nA treasure trove of information on the history of interrupts , DMA, and related early ideas in computing.\nOP E R AT I N G\n"
  },
  {
    "content": " great deal of pioneering work on we b server network performance. This\npaper is but one example.\n[S08] \u201cInterrupts\u201d\nMark Smotherman, as of July \u201908\nA vailable: http://people.cs.clemson.edu/\u02dcmark/interr upts.html\nA treasure trove of information on the history of interrupts , DMA, and related early ideas in computing.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nI/O D E V I C E S 401\n[S03] \u201cImproving the Reliability of Commodity Operating Sy stems\u201d\nMichael M. Swift, Brian N. Bershad, and Henry M. Levy\nSOSP \u201903\nSwift\u2019s work revived interest in a more microkernel-like ap proach to operating systems; minimally, it\n\ufb01nally gave some good reasons why address-space based prote ction could be useful in a modern OS.\n[W10] \u201cHard Disk Driver \u201d\nW ashington State Course Homepage\nA vailable: http://eecs.wsu.edu/\u02dccs460/cs560/HDdriver .html\nA nice summary of a simple IDE disk drive\u2019s interface and how t o build a device driver for it.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n37\nHard Disk Drives\nThe last chapter introduced the general concept of an I/O dev ice and\nshowed you how the OS might interact with such a beast. In this chapter ,\nwe dive into more detail about one device in particular: the hard disk\ndrive. These drives have been the main form of persistent data stor age in\ncomputer systems for decades and much of the development of \ufb01 le sys-\ntem technology (coming soon) is predicated on their behavio r . Thus, it\nis worth understanding the details of a disk\u2019s operation bef ore building\nthe \ufb01le system software that manages it. Many of these detail s are avail-\nable in excellent papers by Ruemmler and Wilkes [RW92] and An derson,\nDykes, and Riedel [ADR03].\nCR U X : H O W TO STO R E AN D AC C E S S DATA ON DI S K\nHow do modern hard-disk drives store data? What is the interf ace?\nHow is the data actually laid out and accessed? How does disk s chedul-\ning improve performance?\n37.1 The Interface\nLet\u2019s start by understanding the interface to a modern disk d rive. The\nbasic interface for all modern drives is straightforward. T he drive consists\nof a large number of sectors (512-byte blocks), each of which can be read\nor written. The sectors are numbered from 0 to n \u2212 1 on a disk with n\nsectors. Thus, we can view the disk as an array of sectors; 0 to n \u2212 1 is\nthus the address space of the drive.\nMulti-sector operations are possible; indeed, many \ufb01le sys tems will\nread or write 4KB at a time (or more). However , when updating t he\ndisk, the only guarantee drive manufactures make is that a si ngle 512-\nbyte write is atomic (i.e., it will either complete in its entirety or it won\u2019t\ncomplete at all); thus, if an untimely power loss occurs, onl y a portion of\na larger write may complete (sometimes called a torn write ).\n403\n404 HA R D DI S K DR I V E S\n0\n11\n1098\n7\n6\n5\n4 3 2\n1\nSpindle\nFigure 37.1: A Disk With Just A Single T rack\nThere are some assumptions most clients of disk drives make, but\nthat are not speci\ufb01ed directly in the interface; Schlosser a nd Ganger have\ncalled this the \u201cunwritten contract\u201d of disk drives [SG04]. Speci\ufb01cally ,\none can usually assume that accessing two blocks that are nea r one-another\nwithin the drive\u2019s address space will be faster than accessi ng two blocks\nthat are far apart. One can also usually assume that accessin g blocks in\na contiguous chunk (i.e., a sequential read or write)"
  },
  {
    "content": "er a nd Ganger have\ncalled this the \u201cunwritten contract\u201d of disk drives [SG04]. Speci\ufb01cally ,\none can usually assume that accessing two blocks that are nea r one-another\nwithin the drive\u2019s address space will be faster than accessi ng two blocks\nthat are far apart. One can also usually assume that accessin g blocks in\na contiguous chunk (i.e., a sequential read or write) is the f astest access\nmode, and usually much faster than any more random access pat tern.\n37.2 Basic Geometry\nLet\u2019s start to understand some of the components of a modern d isk.\nW e start with a platter, a circular hard surface on which data is stored\npersistently by inducing magnetic changes to it. A disk may h ave one\nor more platters; each platter has 2 sides, each of which is ca lled a sur-\nface. These platters are usually made of some hard material (such as\naluminum), and then coated with a thin magnetic layer that en ables the\ndrive to persistently store bits even when the drive is power ed off.\nThe platters are all bound together around the spindle, which is con-\nnected to a motor that spins the platters around (while the dr ive is pow-\nered on) at a constant (\ufb01xed) rate. The rate of rotation is oft en measured in\nrotations per minute (RPM) , and typical modern values are in the 7,200\nRPM to 15,000 RPM range. Note that we will often be interested in the\ntime of a single rotation, e.g., a drive that rotates at 10,00 0 RPM means\nthat a single rotation takes about 6 milliseconds (6 ms).\nData is encoded on each surface in concentric circles of sect ors; we call\none such concentric circle a track. A single surface contains many thou-\nsands and thousands of tracks, tightly packed together , wit h hundreds of\ntracks \ufb01tting into the width of a human hair .\nT o read and write from the surface, we need a mechanism that al lows\nus to either sense (i.e., read) the magnetic patterns on the d isk or to in-\nduce a change in (i.e., write) them. This process of reading a nd writing is\naccomplished by the disk head ; there is one such head per surface of the\ndrive. The disk head is attached to a single disk arm , which moves across\nthe surface to position the head over the desired track.\n37.3 A Simple Disk Drive\nLet\u2019s understand how disks work by building up a model one tra ck at\na time. Assume we have a simple disk with a single track (Figur e 37.1).\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nHA R D DI S K DR I V E S 405\nHead\nArm\n0\n11\n1098\n7\n6\n5\n4 3 2\n1\nSpindle\nRotates this way\nFigure 37.2: A Single T rack Plus A Head\nThis track has just 12 sectors, each of which is 512 bytes in si ze (our\ntypical sector size, recall) and addressed therefore by the numbers 0 through\n11. The single platter we have here rotates around the spindl e, to which\na motor is attached. Of course, the track by itself isn\u2019t too i nteresting; we\nwant to be able to read or write those sectors, and thus we need a disk\nhead, attached to a disk arm, as we now see (Figure 37.2).\nIn the \ufb01gure, the disk head, attached to the end of the arm, is p osi-\ntioned over sector 6, and the surface is rotating counter-cl ockwise.\nSingle-track Latency: The Rotational Delay\nT o understand how a request would be processed on our simple, one-\ntrack disk, imagine we now receive a request to read block 0. H ow should\nthe disk service this request?\nIn our simple disk, the disk doesn\u2019t have to do much. In partic ular , it\nmust just wait for the desired sector to rotate under the disk head. This\nwait happens often enough in modern drives, and is an importa nt enough\ncomponent of I/O service time, that"
  },
  {
    "content": " would be processed on our simple, one-\ntrack disk, imagine we now receive a request to read block 0. H ow should\nthe disk service this request?\nIn our simple disk, the disk doesn\u2019t have to do much. In partic ular , it\nmust just wait for the desired sector to rotate under the disk head. This\nwait happens often enough in modern drives, and is an importa nt enough\ncomponent of I/O service time, that it has a special name: rotational de-\nlay (sometimes rotation delay , though that sounds weird). In the exam-\nple, if the full rotational delay is R, the disk has to incur a rotational delay\nof about R\n2 to wait for 0 to come under the read/write head (if we start at\n6). A worst-case request on this single track would be to sect or 5, causing\nnearly a full rotational delay in order to service such a requ est.\nMultiple T racks: Seek T ime\nSo far our disk just has a single track, which is not too realis tic; modern\ndisks of course have many millions. Let\u2019s thus look at ever-s o-slightly\nmore realistic disk surface, this one with three tracks (Fig ure\n37.3, left).\nIn the \ufb01gure, the head is currently positioned over the inner most track\n(which contains sectors 24 through 35); the next track over c ontains the\nnext set of sectors (12 through 23), and the outermost track c ontains the\n\ufb01rst sectors (0 through 11).\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n406 HA R D DI S K DR I V E S\n0\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n12\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n24\n35\n343332\n31\n30\n29\n28 27 26\n25\nSpindle\nRotates this way\nSeekRemaining rotation\n3\n2\n1\n0\n11\n10\n9\n8\n7\n6\n5\n4\n15\n14\n13\n12\n23\n22\n21\n20\n19\n18\n17\n16\n27\n26\n252435\n34\n33\n32\n31 30 29\n28\nSpindle\nRotates this way\nFigure 37.3: Three T racks Plus A Head (Right: With Seek)\nT o understand how the drive might access a given sector , we no w trace\nwhat would happen on a request to a distant sector , e.g., a rea d to sector\n11. T o service this read, the drive has to \ufb01rst move the disk ar m to the cor-\nrect track (in this case, the outermost one), in a process kno wn as a seek.\nSeeks, along with rotations, are one of the most costly disk o perations.\nThe seek, it should be noted, has many phases: \ufb01rst an acceleration\nphase as the disk arm gets moving; then coasting as the arm is moving\nat full speed, then deceleration as the arm slows down; \ufb01nally settling as\nthe head is carefully positioned over the correct track. The settling time\nis often quite signi\ufb01cant, e.g., 0.5 to 2 ms, as the drive must be certain to\n\ufb01nd the right track (imagine if it just got close instead!).\nAfter the seek, the disk arm has positioned the head over the r ight\ntrack. A depiction of the seek is found in Figure 37.3 (right).\nAs we can see, during the seek, the arm has been moved to the des ired\ntrack, and the platter of course has rotated, in this case abo ut 3 sectors.\nThus, sector 9 is just about to pass under the disk head, and we must\nonly endure a short rotational delay to complete the transfe r .\nWhen sector 11 passes under the disk head, the \ufb01nal phase of I/ O\nwill take place, known as the transfer, where data is either read from or\nwritten to the surface. And thus, we have a complete picture o f I/O time:\n\ufb01rst a seek, then waiting for the rotational delay , and \ufb01nall y the transfer .\n"
  },
  {
    "content": " endure a short rotational delay to complete the transfe r .\nWhen sector 11 passes under the disk head, the \ufb01nal phase of I/ O\nwill take place, known as the transfer, where data is either read from or\nwritten to the surface. And thus, we have a complete picture o f I/O time:\n\ufb01rst a seek, then waiting for the rotational delay , and \ufb01nall y the transfer .\nSome Other Details\nThough we won\u2019t spend too much time on it, there are some other inter-\nesting details about how hard drives operate. Many drives em ploy some\nkind of track skew to make sure that sequential reads can be properly\nserviced even when crossing track boundaries. In our simple example\ndisk, this might appear as seen in Figure\n37.4.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nHA R D DI S K DR I V E S 407\nTrack skew: 2 blocks\n0\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n23\n32\n31\n302928\n27\n26\n25\n24 35 34\n33\nSpindle\nRotates this way\nFigure 37.4: Three T racks: T rack Skew Of 2\nSectors are often skewed like this because when switching fr om one\ntrack to another , the disk needs time to reposition the head ( even to neigh-\nboring tracks). Without such skew , the head would be moved to the next\ntrack but the desired next block would have already rotated u nder the\nhead, and thus the drive would have to wait almost the entire r otational\ndelay to access the next block.\nAnother reality is that outer tracks tend to have more sector s than\ninner tracks, which is a result of geometry; there is simply m ore room\nout there. These tracks are often referred to as multi-zoned disk drives,\nwhere the disk is organized into multiple zones, and where a z one is con-\nsecutive set of tracks on a surface. Each zone has the same num ber of\nsectors per track, and outer zones have more sectors than inn er zones.\nFinally , an important part of any modern disk drive is its cache, for\nhistorical reasons sometimes called a track buffer . This cache is just some\nsmall amount of memory (usually around 8 or 16 MB) which the dr ive\ncan use to hold data read from or written to the disk. For examp le, when\nreading a sector from the disk, the drive might decide to read in all of the\nsectors on that track and cache them in its memory; doing so al lows the\ndrive to quickly respond to any subsequent requests to the sa me track.\nOn writes, the drive has a choice: should it acknowledge the w rite has\ncompleted when it has put the data in its memory , or after the w rite has\nactually been written to disk? The former is called write back caching\n(or sometimes immediate reporting ), and the latter write through . W rite\nback caching sometimes makes the drive appear \u201cfaster \u201d, but can be dan-\ngerous; if the \ufb01le system or applications require that data b e written to\ndisk in a certain order for correctness, write-back caching can lead to\nproblems (read the chapter on \ufb01le-system journaling for det ails).\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n408 HA R D DI S K DR I V E S\nAS I D E : DI M E N S I O N A L AN A LY S I S\nRemember in Chemistry class, how you solved virtually every prob-\nlem by simply setting up the units such that they canceled out , and some-\nhow the answers popped out as a result? That chemical magic is known\nby the highfalutin name of dimensional analysis and it turns out it is\nuseful in computer systems analysis too.\nLet\u2019s do an example to see how dimensional analysis works and why\nit is useful. In this case, assume you have to \ufb01gure out how lon g, in mil-\nliseconds, a single rotation of a disk takes. Unfortunately , you are given\nonly the RPM of the disk, or rotations"
  },
  {
    "content": " is known\nby the highfalutin name of dimensional analysis and it turns out it is\nuseful in computer systems analysis too.\nLet\u2019s do an example to see how dimensional analysis works and why\nit is useful. In this case, assume you have to \ufb01gure out how lon g, in mil-\nliseconds, a single rotation of a disk takes. Unfortunately , you are given\nonly the RPM of the disk, or rotations per minute . Let\u2019s assume we\u2019re\ntalking about a 10K RPM disk (i.e., it rotates 10,000 times pe r minute).\nHow do we set up the dimensional analysis so that we get time pe r rota-\ntion in milliseconds?\nT o do so, we start by putting the desired units on the left; in t his case,\nwe wish to obtain the time (in milliseconds) per rotation, so that is ex-\nactly what we write down: T ime (ms)\n1 Rotation . W e then write down everything\nwe know , making sure to cancel units where possible. First, w e obtain\n1 minute\n10,000 Rotations (keeping rotation on the bottom, as that\u2019s where it is on\nthe left), then transform minutes into seconds with 60 seconds\n1 minute , and then\n\ufb01nally transform seconds in milliseconds with 1000 ms\n1 second . The \ufb01nal result is\nthis equation, with units nicely canceled, is:\nT ime (ms)\n1 Rot. = 1 \u0018\u0018\u0018minute\n10,000 Rot. \u00b760 \u0018\u0018\u0018seconds\n1 \u0018\u0018\u0018minute \u00b71000 ms\n1 \u0018\u0018\u0018second = 60,000 ms\n10,000 Rot. = 6 ms\nRotation\nAs you can see from this example, dimensional analysis makes what\nseems obvious into a simple and repeatable process. Beyond t he RPM\ncalculation above, it comes in handy with I/O analysis regul arly . For\nexample, you will often be given the transfer rate of a disk, e .g.,\n100 MB/second, and then asked: how long does it take to transf er a\n512 KB block (in milliseconds)? With dimensional analysis, it\u2019s easy:\nT ime (ms)\n1 Request = 512 \b\bKB\n1 Request \u00b7 1 \b\bM B\n1024 \b\bKB \u00b71 \u0018\u0018\u0018second\n100 \b\bM B \u00b71000 ms\n1 \u0018\u0018\u0018second = 5 ms\nRequest\n37.4 I/O Time: Doing The Math\nNow that we have an abstract model of the disk, we can use a litt le\nanalysis to better understand disk performance. In particu lar , we can\nnow represent I/O time as the sum of three major components:\nTI/O = Tseek + Trotation + Ttransf er (37.1)\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nHA R D DI S K DR I V E S 409\nCheetah 15K.5 Barracuda\nCapacity 300 GB 1 TB\nRPM 15,000 7,200\nA verage Seek 4 ms 9 ms\nMax T ransfer 125 MB/s 105 MB/s\nPlatters 4 4\nCache 16 MB 16/32 MB\nConnects via SCSI SA T A\nT able 37.1: Disk Drive Specs: SCSI V ersus SA T A\nNote that the rate of I/O ( RI/O ), which is often more easily used for\ncomparison between drives (as we will do below), is easily co mputed\nfrom the time. Simply divide the size of the transfer by the ti me it took:\nRI/O = Size T ransf er\nTI/O\n(37.2)\nT o get a better feel for I/O time, let us perform the following calcu-\nlation. Assume there are two workloads we are interested in. The \ufb01rst,\nknown as the random workload, issues small (e.g., 4KB) reads to random\nlocations on the disk. Random workloads are common in many im por-\ntant applications, including database management systems . The second,\nknown as the sequential workload, simply reads a large number of sec-\ntors consecutively from the disk, without jumping around. S equential\naccess patterns are quite common and thus important as well.\nT o understand the"
  },
  {
    "content": "st,\nknown as the random workload, issues small (e.g., 4KB) reads to random\nlocations on the disk. Random workloads are common in many im por-\ntant applications, including database management systems . The second,\nknown as the sequential workload, simply reads a large number of sec-\ntors consecutively from the disk, without jumping around. S equential\naccess patterns are quite common and thus important as well.\nT o understand the difference in performance between random and se-\nquential workloads, we need to make a few assumptions about t he disk\ndrive \ufb01rst. Let\u2019s look at a couple of modern disks from Seagat e. The \ufb01rst,\nknown as the Cheetah 15K.5 [S09b], is a high-performance SCS I drive.\nThe second, the Barracuda [S09a], is a drive built for capaci ty . Details on\nboth are found in T able 37.1.\nAs you can see, the drives have quite different characterist ics, and\nin many ways nicely summarize two important components of th e disk\ndrive market. The \ufb01rst is the \u201chigh performance\u201d drive marke t, where\ndrives are engineered to spin as fast as possible, deliver lo w seek times,\nand transfer data quickly . The second is the \u201ccapacity\u201d mark et, where\ncost per byte is the most important aspect; thus, the drives a re slower but\npack as many bits as possible into the space available.\nFrom these numbers, we can start to calculate how well the dri ves\nwould do under our two workloads outlined above. Let\u2019s start by looking\nat the random workload. Assuming each 4 KB read occurs at a ran dom\nlocation on disk, we can calculate how long each such read wou ld take.\nOn the Cheetah:\nTseek = 4 ms, T rotation = 2 ms, T transf er = 30 microsecs (37.3)\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n410 HA R D DI S K DR I V E S\nTI P : U S E DI S K S SE Q U E N T I A L LY\nWhen at all possible, transfer data to and from disks in a sequ ential man-\nner . If sequential is not possible, at least think about tran sferring data\nin large chunks: the bigger , the better . If I/O is done in litt le random\npieces, I/O performance will suffer dramatically . Also, us ers will suffer .\nAlso, you will suffer , knowing what suffering you have wroug ht with\nyour careless random I/Os.\nThe average seek time (4 milliseconds) is just taken as the av erage time\nreported by the manufacturer; note that a full seek (from one end of the\nsurface to the other) would likely take two or three times lon ger . The\naverage rotational delay is calculated from the RPM directl y . 15000 RPM\nis equal to 250 RPS (rotations per second); thus, each rotati on takes 4 ms.\nOn average, the disk will encounter a half rotation and thus 2 ms is the\naverage time. Finally , the transfer time is just the size of t he transfer over\nthe peak transfer rate; here it is vanishingly small (30 microseconds; note\nthat we need 1000 microseconds just to get 1 millisecond!).\nThus, from our equation above, TI/O for the Cheetah roughly equals\n6 ms. T o compute the rate of I/O, we just divide the size of the t ransfer\nby the average time, and thus arrive at RI/O for the Cheetah under the\nrandom workload of about 0. 66 MB/s. The same calculation for the Bar-\nracuda yields a TI/O of about 13.2 ms, more than twice as slow , and thus\na rate of about 0. 31 MB/s.\nNow let\u2019s look at the sequential workload. Here we can assume there\nis a single seek and rotation before a very long transfer . For simplicity ,\nassume the size of the transfer is 100 MB. Thus, TI/O for the Barracuda\nand Cheetah is about 800 ms and 950 ms, respectively . The rate s of I/O\nare thus very nearly the peak transfer rates of 125 MB/s and 10 5 MB/s,\nrespectively . T able 37.2"
  },
  {
    "content": " at the sequential workload. Here we can assume there\nis a single seek and rotation before a very long transfer . For simplicity ,\nassume the size of the transfer is 100 MB. Thus, TI/O for the Barracuda\nand Cheetah is about 800 ms and 950 ms, respectively . The rate s of I/O\nare thus very nearly the peak transfer rates of 125 MB/s and 10 5 MB/s,\nrespectively . T able 37.2 summarizes these numbers.\nThe table shows us a number of important things. First, and mo st\nimportantly , there is a huge gap in drive performance betwee n random\nand sequential workloads, almost a factor of 200 or so for the Cheetah\nand more than a factor 300 difference for the Barracuda. And t hus we\narrive at the most obvious design tip in the history of comput ing.\nA second, more subtle point: there is a large difference in pe rformance\nbetween high-end \u201cperformance\u201d drives and low-end \u201ccapaci ty\u201d drives.\nFor this reason (and others), people are often willing to pay top dollar for\nthe former while trying to get the latter as cheaply as possib le.\nCheetah Barracuda\nRI/O Random 0.66 MB/s 0.31 MB/s\nRI/O Sequential 125 MB/s 105 MB/s\nT able 37.2: Disk Drive Performance: SCSI V ersus SA T A\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nHA R D DI S K DR I V E S 411\nAS I D E : CO M P U T I N G TH E \u201cA V E R A G E \u201d S E E K\nIn many books and papers, you will see average disk-seek time cited\nas being roughly one-third of the full seek time. Where does t his come\nfrom?\nT urns out it arises from a simple calculation based on averag e seek\ndistance, not time. Imagine the disk as a set of tracks, from 0 to N . The\nseek distance between any two tracks x and y is thus computed as the\nabsolute value of the difference between them: |x \u2212 y|.\nT o compute the average seek distance, all you need to do is to \ufb01 rst add\nup all possible seek distances:\nN\u2211\nx=0\nN\u2211\ny=0\n|x \u2212 y|. (37.4)\nThen, divide this by the number of different possible seeks: N 2. T o\ncompute the sum, we\u2019ll just use the integral form:\n\u222b N\nx=0\n\u222b N\ny=0\n|x \u2212 y| dy dx. (37.5)\nT o compute the inner integral, let\u2019s break out the absolute v alue:\n\u222b x\ny=0\n(x \u2212 y) dy +\n\u222b N\ny=x\n(y \u2212 x) dy. (37.6)\nSolving this leads to (xy \u2212 1\n2 y2)\n\u23d0\n\u23d0x\n0 + ( 1\n2 y2 \u2212 xy)\n\u23d0\n\u23d0N\nx which can be sim-\npli\ufb01ed to (x2 \u2212 N x + 1\n2 N 2). Now we have to compute the outer integral:\n\u222b N\nx=0\n(x2 \u2212 N x + 1\n2 N 2) dx, (37.7)\nwhich results in:\n( 1\n3 x3 \u2212 N\n2 x2 + N 2\n2 x)\n\u23d0\n\u23d0\n\u23d0\n\u23d0\nN\n0\n= N 3\n3 . (37.8)\nRemember that we still have to divide by the total number of se eks\n(N 2) to compute the average seek distance: ( N 3\n3 )/ (N 2) = 1\n3 N . Thus the\naverage seek distance on a disk, over all possible seeks, is o ne-third the\nfull distance. And now when you hear that an average seek is on e-third\nof a full seek, you\u2019ll know where it came from.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n412 HA R D DI"
  },
  {
    "content": "\n3 N . Thus the\naverage seek distance on a disk, over all possible seeks, is o ne-third the\nfull distance. And now when you hear that an average seek is on e-third\nof a full seek, you\u2019ll know where it came from.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n412 HA R D DI S K DR I V E S\n0\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n12\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n24\n35\n343332\n31\n30\n29\n28 27 26\n25\nSpindle\nRotates this way\nFigure 37.5: SSTF: Scheduling Requests 21 And 2\n37.5 Disk Scheduling\nBecause of the high cost of I/O, the OS has historically playe d a role in\ndeciding the order of I/Os issued to the disk. More speci\ufb01cal ly , given a\nset of I/O requests, the disk scheduler examines the requests and decides\nwhich one to schedule next [SCO90, JW91].\nUnlike job scheduling, where the length of each job is usuall y un-\nknown, with disk scheduling, we can make a good guess at how lo ng\na \u201cjob\u201d (i.e., disk request) will take. By estimating the see k and possible\nthe rotational delay of a request, the disk scheduler can kno w how long\neach request will take, and thus (greedily) pick the one that will take the\nleast time to service \ufb01rst. Thus, the disk scheduler will try to follow the\nprinciple of SJF (shortest job \ufb01rst) in its operation.\nSSTF: Shortest Seek T ime First\nOne early disk scheduling approach is known as shortest-seek-time-\ufb01rst\n(SSTF) (also called shortest-seek-\ufb01rst or SSF). SSTF orders the queue of\nI/O requests by track, picking requests on the nearest track to complete\n\ufb01rst. For example, assuming the current position of the head is over the\ninner track, and we have requests for sectors 21 (middle trac k) and 2\n(outer track), we would then issue the request to 21 \ufb01rst, wai t for it to\ncomplete, and then issue the request to 2 (Figure\n37.5).\nSSTF works well in this example, seeking to the middle track \ufb01 rst and\nthen the outer track. However , SSTF is not a panacea, for the f ollowing\nreasons. First, the drive geometry is not available to the ho st OS; rather ,\nit sees an array of blocks. Fortunately , this problem is rath er easily \ufb01xed.\nInstead of SSTF , an OS can simply implement nearest-block-\ufb01rst (NBF),\nwhich schedules the request with the nearest block address n ext.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nHA R D DI S K DR I V E S 413\nThe second problem is more fundamental: starvation. Imagine in\nour example above if there were a steady stream of requests to the in-\nner track, where the head currently is positioned. Requests to any other\ntracks would then be ignored completely by a pure SSTF approa ch. And\nthus the crux of the problem:\nCR U X : H O W TO HA N D L E DI S K STA RVAT I O N\nHow can we implement SSTF-like scheduling but avoid starvat ion?\nElevator (a.k.a. SCAN or C-SCAN)\nThe answer to this query was developed some time ago (see [CKR 72]\nfor example), and is relatively straightforward. The algor ithm, originally\ncalled SCAN, simply moves across the disk servicing requests in order\nacross the tracks. Let us call a single pass across the disk a sweep. Thus, if\na request comes for a block on a track that has already been ser viced on\nthis sweep of the disk, it is not handled immediately , but rat her que"
  },
  {
    "content": " this query was developed some time ago (see [CKR 72]\nfor example), and is relatively straightforward. The algor ithm, originally\ncalled SCAN, simply moves across the disk servicing requests in order\nacross the tracks. Let us call a single pass across the disk a sweep. Thus, if\na request comes for a block on a track that has already been ser viced on\nthis sweep of the disk, it is not handled immediately , but rat her queued\nuntil the next sweep.\nSCAN has a number of variants, all of which do about the same th ing.\nFor example, Coffman et al. introduced F-SCAN, which freezes the queue\nto be serviced when it is doing a sweep [CKR72]; this action pl aces re-\nquests that come in during the sweep into a queue to be service d later .\nDoing so avoids starvation of far-away requests, by delayin g the servic-\ning of late-arriving (but nearer by) requests.\nC-SCAN is another common variant, short for Circular SCAN . In-\nstead of sweeping in one direction across the disk, the algor ithm sweeps\nfrom outer-to-inner , and then inner-to-outer , etc.\nFor reasons that should now be obvious, this algorithm (and i ts vari-\nants) is sometimes referred to as the elevator algorithm, because it be-\nhaves like an elevator which is either going up or down and not just ser-\nvicing requests to \ufb02oors based on which \ufb02oor is closer . Imagi ne how an-\nnoying it would be if you were going down from \ufb02oor 10 to 1, and s ome-\nbody got on at 3 and pressed 4, and the elevator went up to 4 beca use it\nwas \u201ccloser \u201d than 1! As you can see, the elevator algorithm, w hen used\nin real life, prevents \ufb01ghts from taking place on elevators. In disks, it just\nprevents starvation.\nUnfortunately , SCAN and its cousins do not represent the bes t schedul-\ning technology . In particular , SCAN (or SSTF even) do not act ually adhere\nas closely to the principle of SJF as they could. In particula r , they ignore\nrotation. And thus, another crux:\nCR U X : H O W TO AC C O U N T FO R DI S K RO TAT I O N CO S T S\nHow can we implement an algorithm that more closely approxim ates SJF\nby taking both seek and rotation into account?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n414 HA R D DI S K DR I V E S\n0\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n12\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n24\n35\n343332\n31\n30\n29\n28 27 26\n25\nSpindle\nRotates this way\nFigure 37.6: SSTF: Sometimes Not Good Enough\nSPTF: Shortest Positioning T ime First\nBefore discussing shortest positioning time \ufb01rst or SPTF scheduling (some-\ntimes also called shortest access time \ufb01rst or SA TF), which is the solution\nto our problem, let us make sure we understand the problem in m ore de-\ntail. Figure\n37.6 presents an example.\nIn the example, the head is currently positioned over sector 30 on the\ninner track. The scheduler thus has to decide: should it sche dule sector 16\n(on the middle track) or sector 8 (on the outer track) for its n ext request.\nSo which should it service next?\nThe answer , of course, is \u201cit depends\u201d. In engineering, it tu rns out\n\u201cit depends\u201d is almost always the answer , re\ufb02ecting that tra de-offs are\npart of the life of the engineer; such maxims are also good in a pinch,\ne.g., when you don\u2019t know an answer to your boss\u2019s question, y ou might\nwant to try this gem. However , it is almost always better to kn ow why it\ndepends, which is what we discuss here.\nWhat it depends on here is the relative time of seeking as comp ared\nto rotation."
  },
  {
    "content": " tra de-offs are\npart of the life of the engineer; such maxims are also good in a pinch,\ne.g., when you don\u2019t know an answer to your boss\u2019s question, y ou might\nwant to try this gem. However , it is almost always better to kn ow why it\ndepends, which is what we discuss here.\nWhat it depends on here is the relative time of seeking as comp ared\nto rotation. If, in our example, seek time is much higher than rotational\ndelay , then SSTF (and variants) are just \ufb01ne. However , imagi ne if seek is\nquite a bit faster than rotation. Then, in our example, it wou ld make more\nsense to seek further to service request 8 on the outer track than it would\nto perform the shorter seek to the middle track to service 16, which has to\nrotate all the way around before passing under the disk head.\nOn modern drives, as we saw above, both seek and rotation are r oughly\nequivalent (depending, of course, on the exact requests), a nd thus SPTF\nis useful and improves performance. However , it is even more dif\ufb01cult\nto implement in an OS, which generally does not have a good ide a where\ntrack boundaries are or where the disk head currently is (in a rotational\nsense). Thus, SPTF is usually performed inside a drive, desc ribed below .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nHA R D DI S K DR I V E S 415\nTI P : I T ALWAY S DE P E N D S (L I V N Y \u2019 S LAW )\nAlmost any question can be answered with \u201cit depends\u201d, as our colleague\nMiron Livny always says. However , use with caution, as if you answer\ntoo many questions this way , people will stop asking you ques tions alto-\ngether . For example, somebody asks: \u201cwant to go to lunch?\u201d Y o u reply:\n\u201cit depends, are you coming along?\u201d\nOther Scheduling Issues\nThere are many other issues we do not discuss in this brief des cription\nof basic disk operation, scheduling, and related topics. On e such is-\nsue is this: where is disk scheduling performed on modern systems? In\nolder systems, the operating system did all the scheduling; after looking\nthrough the set of pending requests, the OS would pick the bes t one, and\nissue it to the disk. When that request completed, the next on e would be\nchosen, and so forth. Disks were simpler then, and so was life .\nIn modern systems, disks can accommodate multiple outstand ing re-\nquests, and have sophisticated internal schedulers themse lves (which can\nimplement SPTF accurately; inside the disk controller , all relevant details\nare available, including exact head position). Thus, the OS scheduler usu-\nally picks what it thinks the best few requests are (say 16) an d issues them\nall to disk; the disk then uses its internal knowledge of head position and\ndetailed track layout information to service said requests in the best pos-\nsible (SPTF) order .\nAnother important related task performed by disk scheduler s is I/O\nmerging. For example, imagine a series of requests to read blocks 33,\nthen 8, then 34, as in Figure\n37.6. In this case, the scheduler should merge\nthe requests for blocks 33 and 34 into a single two-block requ est; any re-\nordering that the scheduler does is performed upon the merge d requests.\nMerging is particularly important at the OS level, as it redu ces the num-\nber of requests sent to the disk and thus lowers overheads.\nOne \ufb01nal problem that modern schedulers address is this: how long\nshould the system wait before issuing an I/O to disk? One migh t naively\nthink that the disk, once it has even a single I/O, should imme diately\nissue the request to the drive; this approach is called work-conserving, as\nthe disk will never be idle if there are requests to serve. How ever , research\non anticipatory disk scheduling has shown that sometimes it is better to\nwait for a bit [ID01], in what is called a non-work-conserving approach.\nBy waiting, a new"
  },
  {
    "content": "ively\nthink that the disk, once it has even a single I/O, should imme diately\nissue the request to the drive; this approach is called work-conserving, as\nthe disk will never be idle if there are requests to serve. How ever , research\non anticipatory disk scheduling has shown that sometimes it is better to\nwait for a bit [ID01], in what is called a non-work-conserving approach.\nBy waiting, a new and \u201cbetter \u201d request may arrive at the disk, and thus\noverall ef\ufb01ciency is increased. Of course, deciding when to wait, and for\nhow long, can be tricky; see the research paper for details, o r check out\nthe Linux kernel implementation to see how such ideas are tra nsitioned\ninto practice (if you are the ambitious sort).\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n416 HA R D DI S K DR I V E S\n37.6 Summary\nW e have presented a summary of how disks work. The summary is\nactually a detailed functional model; it does not describe t he amazing\nphysics, electronics, and material science that goes into a ctual drive de-\nsign. For those interested in even more details of that natur e, we suggest\na different major (or perhaps minor); for those that are happ y with this\nmodel, good! W e can now proceed to using the model to build mor e in-\nteresting systems on top of these incredible devices.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nHA R D DI S K DR I V E S 417\nReferences\n[ADR03] \u201cMore Than an Interface: SCSI vs. A T A \u201d\nDave Anderson, Jim Dykes, Erik Riedel\nF AST \u201903, 2003\nOne of the best recent-ish references on how modern disk driv es really work; a must read for anyone\ninterested in knowing more.\n[CKR72] \u201cAnalysis of Scanning Policies for Reducing Disk Se ek Times\u201d\nE.G. Coffman, L.A. Klimko, B. Ryan\nSIAM Journal of Computing, September 1972, V ol 1. No 3.\nSome of the early work in the \ufb01eld of disk scheduling.\n[ID01] \u201cAnticipatory Scheduling: A Disk-scheduling Frame work\nT o Overcome Deceptive Idleness In Synchronous I/O\u201d\nSitaram Iyer , Peter Druschel\nSOSP \u201901, October 2001\nA cool paper showing how waiting can improve disk scheduling : better requests may be on their way!\n[JW91] \u201cDisk Scheduling Algorithms Based On Rotational Pos ition\u201d\nD. Jacobson, J. Wilkes\nT echnical Report HPL-CSP-91-7rev1, Hewlett-Packard (Feb ruary 1991)\nA more modern take on disk scheduling. It remains a technical report (and not a published paper)\nbecause the authors were scooped by Seltzer et al. [SCO90].\n[RW92] \u201cAn Introduction to Disk Drive Modeling\u201d\nC. Ruemmler , J. Wilkes\nIEEE Computer , 27:3, pp. 17-28, March 1994\nA terri\ufb01c introduction to the basics of disk operation. Some pieces are out of date, but most of the basics\nremain.\n[SCO90] \u201cDisk Scheduling Revisited\u201d\nMargo Seltzer , Peter Chen, John Ousterhout\nUSENIX 1990\nA paper that talks about how rotation matters too in the world of disk scheduling.\n[SG04] \u201cMEMS-based storage devices and standard disk inter faces: A square peg in a round\nhole?\u201d\nSteven W . Schlosser , Gregory R. Ganger\nF AST \u201904, pp. 87-100, 2004\nWhile the MEMS aspect of this paper hasn\u2019t yet made an impact, the discussion of the contract between\n\ufb01le systems and disks is wonderful and a lasting contributio n.\n[S09a] \u201cBarracuda ES.2 data sheet\u201d\nhttp://www.seagate.com/docs/pdf/datasheet/"
  },
  {
    "content": "losser , Gregory R. Ganger\nF AST \u201904, pp. 87-100, 2004\nWhile the MEMS aspect of this paper hasn\u2019t yet made an impact, the discussion of the contract between\n\ufb01le systems and disks is wonderful and a lasting contributio n.\n[S09a] \u201cBarracuda ES.2 data sheet\u201d\nhttp://www.seagate.com/docs/pdf/datasheet/disc/ds\ncheetah 15k 5.pdf A data\nsheet; read at your own risk. Risk of what? Boredom.\n[S09b] \u201cCheetah 15K.5\u201d\nhttp://www.seagate.com/docs/pdf/datasheet/disc/ds\nbarracuda es.pdf See above\ncommentary on data sheets.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n418 HA R D DI S K DR I V E S\nHomework\nThis homework uses disk.py to familiarize you with how a modern\nhard drive works. It has a lot of different options, and unlik e most of\nthe other simulations, has a graphical animator to show you e xactly what\nhappens when the disk is in action. See the README for details .\n1. Compute the seek, rotation, and transfer times for the fol lowing\nsets of requests: -a 0, -a 6, -a 30, -a 7,30,8, and \ufb01nally -a\n10,11,12,13.\n2. Do the same requests above, but change the seek rate to diff erent\nvalues: -S 2, -S 4, -S 8, -S 10, -S 40, -S 0.1. How do the\ntimes change?\n3. Do the same requests above, but change the rotation rate: -R 0.1,\n-R 0.5, -R 0.01. How do the times change?\n4. Y ou might have noticed that some request streams would be b et-\nter served with a policy better than FIFO. For example, with t he\nrequest stream -a 7,30,8, what order should the requests be pro-\ncessed in? Now run the shortest seek-time \ufb01rst (SSTF) schedu ler\n(-p SSTF) on the same workload; how long should it take (seek,\nrotation, transfer) for each request to be served?\n5. Now do the same thing, but using the shortest access-time \ufb01 rst\n(SA TF) scheduler ( -p SATF). Does it make any difference for the\nset of requests as speci\ufb01ed by -a 7,30,8? Find a set of requests\nwhere SA TF does noticeably better than SSTF; what are the con di-\ntions for a noticeable difference to arise?\n6. Y ou might have noticed that the request stream -a 10,11,12,13\nwasn\u2019t particularly well handled by the disk. Why is that? Ca n you\nintroduce a track skew to address this problem ( -o skew, where\nskew is a non-negative integer)? Given the default seek rate, wha t\nshould the skew be to minimize the total time for this set of re -\nquests? What about for different seek rates (e.g., -S 2, -S 4)? In\ngeneral, could you write a formula to \ufb01gure out the skew , give n the\nseek rate and sector layout information?\n7. Multi-zone disks pack more sectors into the outer tracks. T o con\ufb01g-\nure this disk in such a way , run with the -z \ufb02ag. Speci\ufb01cally , try\nrunning some requests against a disk run with -z 10,20,30 (the\nnumbers specify the angular space occupied by a sector , per t rack;\nin this example, the outer track will be packed with a sector e very\n10 degrees, the middle track every 20 degrees, and the inner t rack\nwith a sector every 30 degrees). Run some random requests (e. g.,\n-a -1 -A 5,-1,0, which speci\ufb01es that random requests should\nbe used via the -a -1 \ufb02ag and that \ufb01ve requests ranging from 0 to\nthe max be"
  },
  {
    "content": "in this example, the outer track will be packed with a sector e very\n10 degrees, the middle track every 20 degrees, and the inner t rack\nwith a sector every 30 degrees). Run some random requests (e. g.,\n-a -1 -A 5,-1,0, which speci\ufb01es that random requests should\nbe used via the -a -1 \ufb02ag and that \ufb01ve requests ranging from 0 to\nthe max be generated), and see if you can compute the seek, rot a-\ntion, and transfer times. Use different random seeds ( -s 1, -s 2,\netc.). What is the bandwidth (in sectors per unit time) on the outer ,\nmiddle, and inner tracks?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nHA R D DI S K DR I V E S 419\n8. Scheduling windows determine how many sector requests a d isk\ncan examine at once in order to determine which sector to serv e\nnext. Generate some random workloads of a lot of requests (e. g.,\n-A 1000,-1,0, with different seeds perhaps) and see how long\nthe SA TF scheduler takes when the scheduling window is chang ed\nfrom 1 up to the number of requests (e.g., -w 1 up to -w 1000,\nand some values in between). How big of scheduling window is\nneeded to approach the best possible performance? Make a gra ph\nand see. Hint: use the -c \ufb02ag and don\u2019t turn on graphics with -G\nto run these more quickly . When the scheduling window is set t o 1,\ndoes it matter which policy you are using?\n9. A voiding starvation is important in a scheduler . Can you t hink of a\nseries of requests such that a particular sector is delayed f or a very\nlong time given a policy such as SA TF? Given that sequence, ho w\ndoes it perform if you use a bounded SA TF or BSA TF scheduling\napproach? In this approach, you specify the scheduling wind ow\n(e.g., -w 4) as well as the BSA TF policy ( -p BSATF); the scheduler\nthen will only move onto the next window of requests when all of\nthe requests in the current window have been serviced. Does t his\nsolve the starvation problem? How does it perform, as compar ed\nto SA TF? In general, how should a disk make this trade-off bet ween\nperformance and starvation avoidance?\n10. All the scheduling policies we have looked at thus far are greedy,\nin that they simply pick the next best option instead of looki ng for\nthe optimal schedule over a set of requests. Can you \ufb01nd a set o f\nrequests in which this greedy approach is not optimal?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n38\nRedundant Arrays of Inexpensive Disks\n(RAIDs)\nWhen we use a disk, we sometimes wish it to be faster; I/O opera tions\nare slow and thus can be the bottleneck for the entire system. When we\nuse a disk, we sometimes wish it to be larger; more and more dat a is being\nput online and thus our disks are getting fuller and fuller . W hen we use\na disk, we sometimes wish for it to be more reliable; when a dis k fails, if\nour data isn\u2019t backed up, all that valuable data is gone.\nCR U X : H O W TO MA K E A L A R G E , F A S T, R E L I A B L E DI S K\nHow can we make a large, fast, and reliable storage system? Wh at are\nthe key techniques? What are trade-offs between different a pproaches?\nIn this chapter , we introduce the Redundant Array of Inexpensive\nDisks better known as RAID [P+88], a technique to use multiple disks in\nconcert to build a faster , bigger , and more reliable disk sys tem. The term\nwas introduced in the late 1980s by a group of researchers at U .C. Berke-\nley (led by Professors David Patterson and Randy Katz and the n student\nGarth Gibson); it was around this time that many different re searchers si-\nmultaneously arrived upon the basic idea of using multiple d isks to build"
  },
  {
    "content": "+88], a technique to use multiple disks in\nconcert to build a faster , bigger , and more reliable disk sys tem. The term\nwas introduced in the late 1980s by a group of researchers at U .C. Berke-\nley (led by Professors David Patterson and Randy Katz and the n student\nGarth Gibson); it was around this time that many different re searchers si-\nmultaneously arrived upon the basic idea of using multiple d isks to build\na better storage system [BG88, K86,K88,PB86,SG86].\nExternally , a RAID looks like a disk: a group of blocks one can read\nor write. Internally , the RAID is a complex beast, consistin g of multiple\ndisks, memory (both volatile and non-), and one or more proce ssors to\nmanage the system. A hardware RAID is very much like a compute r\nsystem, specialized for the task of managing a group of disks .\nRAIDs offer a number of advantages over a single disk. One adv an-\ntage is performance. Using multiple disks in parallel can greatly speed\nup I/O times. Another bene\ufb01t is capacity. Large data sets demand large\ndisks. Finally , RAIDs can improve reliability; spreading data across mul-\ntiple disks (without RAID techniques) makes the data vulner able to the\nloss of a single disk; with some form of redundancy, RAIDs can tolerate\nthe loss of a disk and keep operating as if nothing were wrong.\n421\n422 R E D U N D A N T AR R AY S O F IN E X P E N S I V E DI S K S (RAID S)\nTI P : T R A N S PA R E N C Y EN A B L E S DE P L O Y M E N T\nWhen considering how to add new functionality to a system, on e should\nalways consider whether such functionality can be added transparently,\nin a way that demands no changes to the rest of the system. Requ iring a\ncomplete rewrite of the existing software (or radical hardw are changes)\nlessens the chance of impact of an idea. RAID is a perfect exam ple, and\ncertainly its transparency contributed to its success; adm inistrators could\ninstall a SCSI-based RAID storage array instead of a SCSI dis k, and the\nrest of the system (host computer , OS, etc.) did not have to ch ange one bit\nto start using it. By solving this problem of deployment, RAID was made\nmore successful from day one.\nAmazingly , RAIDs provide these advantages transparently to systems\nthat use them, i.e., a RAID just looks like a big disk to the hos t system. The\nbeauty of transparency , of course, is that it enables one to s imply replace\na disk with a RAID and not change a single line of software; the operat-\ning system and client applications continue to operate with out modi\ufb01ca-\ntion. In this manner , transparency greatly improves the deployability of\nRAID, enabling users and administrators to put a RAID to use w ithout\nworries of software compatibility .\nW e now discuss some of the important aspects of RAIDs. W e begi n\nwith the interface, fault model, and then discuss how one can evaluate a\nRAID design along three important axes: capacity , reliabil ity , and perfor-\nmance. W e then discuss a number of other issues that are impor tant to\nRAID design and implementation.\n38.1 Interface And RAID Internals\nT o a \ufb01le system above, a RAID looks like a big, (hopefully) fas t, and\n(hopefully) reliable disk. Just as with a single disk, it pre sents itself as\na linear array of blocks, each of which can be read or written b y the \ufb01le\nsystem (or other client).\nWhen a \ufb01le system issues a logical I/O request to the RAID, the RAID\ninternally must calculate which disk (or disks) to access in order to com-\nplete the request, and then issue one or more physical I/Os to do so. The\nexact nature of these physical I/Os depends on the RAID level , as we will\ndiscuss in detail below . However , as a simple example, consi der a RAID\nthat keeps two copies of each block (each one on a separate dis k); when\nwriting to such a mirrored RAID system, the RAID will have to perform\ntwo physical I/Os for every one logical I/O it"
  },
  {
    "content": " and then issue one or more physical I/Os to do so. The\nexact nature of these physical I/Os depends on the RAID level , as we will\ndiscuss in detail below . However , as a simple example, consi der a RAID\nthat keeps two copies of each block (each one on a separate dis k); when\nwriting to such a mirrored RAID system, the RAID will have to perform\ntwo physical I/Os for every one logical I/O it is issued.\nA RAID system is often built as a separate hardware box, with a stan-\ndard connection (e.g., SCSI, or SA T A) to a host. Internally , however ,\nRAIDs are fairly complex, consisting of a microcontroller t hat runs \ufb01rmware\nto direct the operation of the RAID, volatile memory such as D RAM\nto buffer data blocks as they are read and written, and in some cases,\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nRE D U N D A N T AR R AY S O F IN E X P E N S I V E DI S K S (RAID S) 423\nnon-volatile memory to buffer writes safely and perhaps eve n special-\nized logic to perform parity calculations (useful in some RA ID levels, as\nwe will also see below). At a high level, a RAID is very much a sp ecial-\nized computer system: it has a processor , memory , and disks; however ,\ninstead of running applications, it runs specialized softw are designed to\noperate the RAID.\n38.2 Fault Model\nT o understand RAID and compare different approaches, we mus t have\na fault model in mind. RAIDs are designed to detect and recove r from\ncertain kinds of disk faults; thus, knowing exactly which fa ults to expect\nis critical in arriving upon a working design.\nThe \ufb01rst fault model we will assume is quite simple, and has be en\ncalled the fail-stop fault model [S84]. In this model, a disk can be in\nexactly one of two states: working or failed. With a working d isk, all\nblocks can be read or written. In contrast, when a disk has fai led, we\nassume it is permanently lost.\nOne critical aspect of the fail-stop model is what it assumes about fault\ndetection. Speci\ufb01cally , when a disk has failed, we assume th at this is\neasily detected. For example, in a RAID array , we would assum e that the\nRAID controller hardware (or software) can immediately obs erve when a\ndisk has failed.\nThus, for now , we do not have to worry about more complex \u201csile nt\u201d\nfailures such as disk corruption. W e also do not have to worry about a sin-\ngle block becoming inaccessible upon an otherwise working d isk (some-\ntimes called a latent sector error). W e will consider these m ore complex\n(and unfortunately , more realistic) disk faults later .\n38.3 How T o Evaluate A RAID\nAs we will soon see, there are a number of different approache s to\nbuilding a RAID. Each of these approaches has different char acteristics\nwhich are worth evaluating, in order to understand their str engths and\nweaknesses.\nSpeci\ufb01cally , we will evaluate each RAID design along three a xes. The\n\ufb01rst axis is capacity; given a set of N disks, how much useful capacity is\navailable to systems that use the RAID? Without redundancy , the answer\nis obviously N; however , if we have a system that keeps a two co pies of\neach block, we will obtain a useful capacity of N/2. Differen t schemes\n(e.g., parity-based ones) tend to fall in between.\nThe second axis of evaluation is reliability. How many disk faults can\nthe given design tolerate? In alignment with our fault model , we assume\nonly that an entire disk can fail; in later chapters (i.e., on data integrity),\nwe\u2019ll think about how to handle more complex failure modes.\nFinally , the third axis is performance. Performance is somewhat chal-\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n424 R E D U N D A N T AR R AY S O F IN E X"
  },
  {
    "content": " fail; in later chapters (i.e., on data integrity),\nwe\u2019ll think about how to handle more complex failure modes.\nFinally , the third axis is performance. Performance is somewhat chal-\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n424 R E D U N D A N T AR R AY S O F IN E X P E N S I V E DI S K S (RAID S)\nlenging to evaluate, because it depends heavily on the workl oad pre-\nsented to the disk array . Thus, before evaluating performan ce, we will\n\ufb01rst present a set of typical workloads that one should consi der .\nW e now consider three important RAID designs: RAID Level 0 (s trip-\ning), RAID Level 1 (mirroring), and RAID Levels 4/5 (parity- based re-\ndundancy). The naming of each of these designs as a \u201clevel\u201d st ems from\nthe pioneering work of Patterson, Gibson, and Katz at Berkel ey [P+88].\n38.4 RAID Level 0: Striping\nThe \ufb01rst RAID level is actually not a RAID level at all, in that there is\nno redundancy . However , RAID level 0, or striping as it is better known,\nserves as an excellent upper-bound on performance and capac ity and\nthus is worth understanding.\nThe simplest form of striping will stripe blocks across the disks of the\nsystem as follows (assume here a 4-disk array):\nDisk 0 Disk 1 Disk 2 Disk 3\n0 1 2 3\n4 5 6 7\n8 9 10 11\n12 13 14 15\nT able 38.1: RAID-0: Simple Striping\nFrom T able\n38.1, you get the basic idea: spread the blocks of the array\nacross the disks in a round-robin fashion. This approach is d esigned to\nextract the most parallelism from the array when requests ar e made for\ncontiguous chunks of the array (as in a large, sequential rea d, for exam-\nple). W e call the blocks in the same row a stripe; thus, blocks 0, 1, 2, and\n3 are in the same stripe above.\nIn the example, we have made the simplifying assumption that only 1\nblock (each of say size 4KB) is placed on each disk before movi ng on to\nthe next. However , this arrangement need not be the case. For example,\nwe could arrange the blocks across disks as in T able 38.2:\nDisk 0 Disk 1 Disk 2 Disk 3\n0 2 4 6 chunk size:\n1 3 5 7 2 blocks\n8 10 12 14\n9 11 13 15\nT able 38.2: Striping with a Bigger Chunk Size\nIn this example, we place two 4KB blocks on each disk before mo ving\non to the next disk. Thus, the chunk size of this RAID array is 8KB, and\na stripe thus consists of 4 chunks or 32KB of data.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nRE D U N D A N T AR R AY S O F IN E X P E N S I V E DI S K S (RAID S) 425\nAS I D E : TH E RAID M A P P I N G PR O B L E M\nBefore studying the capacity , reliability , and performanc e characteristics\nof the RAID, we \ufb01rst present an aside on what we call the mapping prob-\nlem. This problem arises in all RAID arrays; simply put, given a l ogical\nblock to read or write, how does the RAID know exactly which ph ysical\ndisk and offset to access?\nFor these simple RAID levels, we do not need much sophisticat ion in\norder to correctly map logical blocks onto their physical lo cations. T ake\nthe \ufb01rst striping example above (chunk size = 1 block = 4KB). I n this case,\ngiven a logical block address A, the RAID can easily compute t he desired\ndisk and offset with two simple equations:\nDisk = A % number_of_disks\nOffset = A / number_of_disks\nNote that these are all integer operations (e.g., 4 / 3 = 1 not 1 .33333...).\nLet\ufffd"
  },
  {
    "content": " \ufb01rst striping example above (chunk size = 1 block = 4KB). I n this case,\ngiven a logical block address A, the RAID can easily compute t he desired\ndisk and offset with two simple equations:\nDisk = A % number_of_disks\nOffset = A / number_of_disks\nNote that these are all integer operations (e.g., 4 / 3 = 1 not 1 .33333...).\nLet\u2019s see how these equations work for a simple example. Imag ine in the\n\ufb01rst RAID above that a request arrives for block 14. Given tha t there are\n4 disks, this would mean that the disk we are interested in is ( 14 % 4 = 2):\ndisk 2. The exact block is calculated as (14 / 4 = 3): block 3. Th us, block\n14 should be found on the fourth block (block 3, starting at 0) of the third\ndisk (disk 2, starting at 0), which is exactly where it is.\nY ou can think about how these equations would be modi\ufb01ed to su pport\ndifferent chunk sizes. T ry it! It\u2019s not too hard.\nChunk Sizes\nChunk size mostly affects performance of the array . For exam ple, a small\nchunk size implies that many \ufb01les will get striped across man y disks, thus\nincreasing the parallelism of reads and writes to a single \ufb01l e; however , the\npositioning time to access blocks across multiple disks inc reases, because\nthe positioning time for the entire request is determined by the maximum\nof the positioning times of the requests across all drives.\nA big chunk size, on the other hand, reduces such intra-\ufb01le pa ral-\nlelism, and thus relies on multiple concurrent requests to a chieve high\nthroughput. However , large chunk sizes reduce positioning time; if, for\nexample, a single \ufb01le \ufb01ts within a chunk and thus is placed on a single\ndisk, the positioning time incurred while accessing it will just be the po-\nsitioning time of a single disk.\nThus, determining the \u201cbest\u201d chunk size is hard to do, as it re quires a\ngreat deal of knowledge about the workload presented to the d isk system\n[CL95]. For the rest of this discussion, we will assume that t he array uses\na chunk size of a single block (4KB). Most arrays use larger ch unk sizes\n(e.g., 64 KB), but for the issues we discuss below , the exact c hunk size\ndoes not matter; thus we use a single block for the sake of simp licity .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n426 R E D U N D A N T AR R AY S O F IN E X P E N S I V E DI S K S (RAID S)\nBack T o RAID-0 Analysis\nLet us now evaluate the capacity , reliability , and performa nce of striping.\nFrom the perspective of capacity , it is perfect: given N disk s, striping de-\nlivers N disks worth of useful capacity . From the standpoint of reliability ,\nstriping is also perfect, but in the bad way: any disk failure will lead to\ndata loss. Finally , performance is excellent: all disks are utilized, often in\nparallel, to service user I/O requests.\nEvaluating RAID Performance\nIn analyzing RAID performance, one can consider two differe nt perfor-\nmance metrics. The \ufb01rst is single-request latency . Understanding the la-\ntency of a single I/O request to a RAID is useful as it reveals h ow much\nparallelism can exist during a single logical I/O operation . The second\nis steady-state throughput of the RAID, i.e., the total bandwidth of many\nconcurrent requests. Because RAIDs are often used in high-p erformance\nenvironments, the steady-state bandwidth is critical, and thus will be the\nmain focus of our analyses.\nT o understand throughput in more detail, we need to put forth some\nworkloads of interest. W e will assume, for this discussion, that there\nare two types of workloads: sequential and random. With a sequential\nworkload, we assume that requests to the array come in large c ontiguous\nchunks; for example, a request (or series of requests) that a ccesses 1 MB"
  },
  {
    "content": " critical, and thus will be the\nmain focus of our analyses.\nT o understand throughput in more detail, we need to put forth some\nworkloads of interest. W e will assume, for this discussion, that there\nare two types of workloads: sequential and random. With a sequential\nworkload, we assume that requests to the array come in large c ontiguous\nchunks; for example, a request (or series of requests) that a ccesses 1 MB\nof data, starting at block (B) and ending at block (B + 1 MB), wo uld be\ndeemed sequential. Sequential workloads are common in many environ-\nments (think of searching through a large \ufb01le for a keyword), and thus\nare considered important.\nFor random workloads, we assume that each request is rather s mall,\nand that each request is to a different random location on dis k. For exam-\nple, a random stream of requests may \ufb01rst access 4KB at logica l address\n10, then at logical address 550,000, then at 20,100, and so fo rth. Some im-\nportant workloads, such as transactional workloads on a dat abase man-\nagement system (DBMS), exhibit this type of access pattern, and thus it is\nconsidered an important workload.\nOf course, real workloads are not so simple, and often have a m ix\nof sequential and random-seeming components as well as beha viors in-\nbetween the two. For simplicity , we just consider these two p ossibilities.\nAs you can tell, sequential and random workloads will result in widely\ndifferent performance characteristics from a disk. With se quential access,\na disk operates in its most ef\ufb01cient mode, spending little ti me seeking and\nwaiting for rotation and most of its time transferring data. With random\naccess, just the opposite is true: most time is spent seeking and waiting\nfor rotation and relatively little time is spent transferri ng data. T o capture\nthis difference in our analysis, we will assume that a disk ca n transfer\ndata at S MB/s under a sequential workload, and R MB/s when und er a\nrandom workload. In general, S is much greater than R.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nRE D U N D A N T AR R AY S O F IN E X P E N S I V E DI S K S (RAID S) 427\nT o make sure we understand this difference, let\u2019s do a simple exer-\ncise. Speci\ufb01cally , lets calculate S and R given the followin g disk charac-\nteristics. Assume a sequential transfer of size 10 MB on aver age, and a\nrandom transfer of 10 KB on average. Also, assume the followi ng disk\ncharacteristics:\nA verage seek time 7 ms\nA verage rotational delay 3 ms\nT ransfer rate of disk 50 MB/s\nT o compute S, we need to \ufb01rst \ufb01gure out how time is spent in a typ ical\n10 MB transfer . First, we spend 7 ms seeking, and then 3 ms rota ting.\nFinally , transfer begins; 10 MB @ 50 MB/s leads to 1/5th of a se cond, or\n200 ms, spent in transfer . Thus, for each 10 MB request, we spe nd 210 ms\ncompleting the request. T o compute S, we just need to divide:\nS = Amount of Data\nT ime to access = 10 M B\n210 ms = 47. 62 M B/s\nAs we can see, because of the large time spent transferring da ta, S is\nvery near the peak bandwidth of the disk (the seek and rotatio nal costs\nhave been amortized).\nW e can compute R similarly . Seek and rotation are the same; we then\ncompute the time spent in transfer , which is 10 KB @ 50 MB/s, or 0.195\nms.\nR = Amount of Data\nT ime to access = 10 KB\n10.195 ms = 0. 981 M B/s\nAs we can see, R is less than 1 MB/s, and S/R is almost 50.\nBack T o RAID-0 Analysis, Again\nLet\u2019s now evaluate the performance of striping. As we said ab ove, it is\ngenerally good"
  },
  {
    "content": " @ 50 MB/s, or 0.195\nms.\nR = Amount of Data\nT ime to access = 10 KB\n10.195 ms = 0. 981 M B/s\nAs we can see, R is less than 1 MB/s, and S/R is almost 50.\nBack T o RAID-0 Analysis, Again\nLet\u2019s now evaluate the performance of striping. As we said ab ove, it is\ngenerally good. From a latency perspective, for example, th e latency of a\nsingle-block request should be just about identical to that of a single disk;\nafter all, RAID-0 will simply redirect that request to one of its disks.\nFrom the perspective of steady-state throughput, we\u2019d expe ct to get\nthe full bandwidth of the system. Thus, throughput equals N ( the number\nof disks) multiplied by S (the sequential bandwidth of a sing le disk). For\na large number of random I/Os, we can again use all of the disks , and\nthus obtain N \u00b7R MB/s. As we will see below , these values are both\nthe simplest to calculate and will serve as an upper bound in c omparison\nwith other RAID levels.\n38.5 RAID Level 1: Mirroring\nOur \ufb01rst RAID level beyond striping is known as RAID level 1, o r\nmirroring. With a mirrored system, we simply make more than o ne copy\nof each block in the system; each copy should be placed on a sep arate\ndisk, of course. By doing so, we can tolerate disk failures.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n428 R E D U N D A N T AR R AY S O F IN E X P E N S I V E DI S K S (RAID S)\nIn a typical mirrored system, we will assume that for each log ical\nblock, the RAID keeps two physical copies of it. Here is an exa mple:\nDisk 0 Disk 1 Disk 2 Disk 3\n0 0 1 1\n2 2 3 3\n4 4 5 5\n6 6 7 7\nT able 38.3: Simple RAID-1: Mirroring\nIn the example, disk 0 and disk 1 have identical contents, and disk 2\nand disk 3 do as well; the data is striped across these mirror p airs. In fact,\nyou may have noticed that there are a number of different ways to place\nblock copies across the disks. The arrangement above is a com mon one\nand is sometimes called RAID-10 or ( RAID 1+0 ) because it uses mirrored\npairs (RAID-1) and then stripes (RAID-0) on top of them; anot her com-\nmon arrangement is RAID-01 (or RAID 0+1 ), which contains two large\nstriping (RAID-0) arrays, and then mirrors (RAID-1) on top o f them. For\nnow , we will just talk about mirroring assuming the above lay out.\nWhen reading a block from a mirrored array , the RAID has a choi ce: it\ncan read either copy . For example, if a read to logical block 5 is issued to\nthe RAID, it is free to read it from either disk 2 or disk 3. When writing\na block, though, no such choice exists: the RAID must update both copies\nof the data, in order to preserve reliability . Do note, thoug h, that these\nwrites can take place in parallel; for example, a write to log ical block 5\ncould proceed to disks 2 and 3 at the same time.\nRAID-1 Analysis\nLet us assess RAID-1. From a capacity standpoint, RAID-1 is e xpensive;\nwith the mirroring level = 2, we only obtain half of our peak us eful ca-\npacity . Thus, with N disks, the useful capacity of mirroring is N/2.\nFrom a reliability standpoint, RAID-1 does well. It can tole rate the fail-\nure of any one disk. Y ou may also notice RAID-1 can actually do better\nthan this, with a little luck. Imagine, in the \ufb01gure above, th at disk 0 and\ndisk 2 both failed. In such a situation, there is no data loss! More gen-\nerally , a mirrored system (with mirroring level of 2) can tol erate 1 disk\nfailure for certain, and up to N/2 failures depending on whic h disks fail"
  },
  {
    "content": " Y ou may also notice RAID-1 can actually do better\nthan this, with a little luck. Imagine, in the \ufb01gure above, th at disk 0 and\ndisk 2 both failed. In such a situation, there is no data loss! More gen-\nerally , a mirrored system (with mirroring level of 2) can tol erate 1 disk\nfailure for certain, and up to N/2 failures depending on whic h disks fail.\nIn practice, we generally don\u2019t like to leave things like thi s to chance; thus\nmost people consider mirroring to be good for handling a sing le failure.\nFinally , we analyze performance. From the perspective of th e latency\nof a single read request, we can see it is the same as the latenc y on a single\ndisk; all the RAID-1 does is direct the read to one of its copie s. A write\nis a little different: it requires two physical writes to com plete before it\nis done. These two writes happen in parallel, and thus the tim e will be\nroughly equivalent to the time of a single write; however , be cause the\nlogical write must wait for both physical writes to complete , it suffers the\nworst-case seek and rotational delay of the two requests, an d thus (on\naverage) will be slightly higher than a write to a single disk .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nRE D U N D A N T AR R AY S O F IN E X P E N S I V E DI S K S (RAID S) 429\nAS I D E : TH E RAID C O N S I S T E N T-U PDAT E PR O B L E M\nBefore analyzing RAID-1, let us \ufb01rst discuss a problem that a rises in\nany multi-disk RAID system, known as the consistent-update problem\n[DAA05]. The problem occurs on a write to any RAID that has to u p-\ndate multiple disks during a single logical operation. In th is case, let us\nassume we are considering a mirrored disk array .\nImagine the write is issued to the RAID, and then the RAID deci des that\nit must be written to two disks, disk 0 and disk 1. The RAID then issues\nthe write to disk 0, but just before the RAID can issue the requ est to disk\n1, a power loss (or system crash) occurs. In this unfortunate case, let us\nassume that the request to disk 0 completed (but clearly the r equest to\ndisk 1 did not, as it was never issued).\nThe result of this untimely power loss is that the two copies o f the block\nare now inconsistent; the copy on disk 0 is the new version, and the copy\non disk 1 is the old. What we would like to happen is for the stat e of both\ndisks to change atomically, i.e., either both should end up as the new\nversion or neither .\nThe general way to solve this problem is to use a write-ahead log of some\nkind to \ufb01rst record what the RAID is about to do (i.e., update t wo disks\nwith a certain piece of data) before doing it. By taking this a pproach, we\ncan ensure that in the presence of a crash, the right thing wil l happen; by\nrunning a recovery procedure that replays all pending transactions to the\nRAID, we can ensure that no two mirrored copies (in the RAID-1 case)\nare out of sync.\nOne last note: because logging to disk on every write is prohi bitively\nexpensive, most RAID hardware includes a small amount of non -volatile\nRAM (e.g., battery-backed) where it performs this type of lo gging. Thus,\nconsistent update is provided without the high cost of loggi ng to disk.\nT o analyze steady-state throughput, let us start with the se quential\nworkload. When writing out to disk sequentially , each logic al write must\nresult in two physical writes; for example, when we write log ical block\n0 (in the \ufb01gure above), the RAID internally would write it to b oth disk\n0 and disk 1. Thus, we can conclude that the maximum bandwidth ob-\ntained during sequential writing to a mirrored array is ( N\n2 \u00b7S), or half the\npeak bandwidth.\nUnfortunately , we obtain the exact same performance during"
  },
  {
    "content": " disk sequentially , each logic al write must\nresult in two physical writes; for example, when we write log ical block\n0 (in the \ufb01gure above), the RAID internally would write it to b oth disk\n0 and disk 1. Thus, we can conclude that the maximum bandwidth ob-\ntained during sequential writing to a mirrored array is ( N\n2 \u00b7S), or half the\npeak bandwidth.\nUnfortunately , we obtain the exact same performance during a se-\nquential read. One might think that a sequential read could d o better ,\nbecause it only needs to read one copy of the data, not both. Ho wever ,\nlet\u2019s use an example to illustrate why this doesn\u2019t help much . Imagine we\nneed to read blocks 0, 1, 2, 3, 4, 5, 6, and 7. Let\u2019s say we issue t he read of\n0 to disk 0, the read of 1 to disk 2, the read of 2 to disk 1, and the read of\n3 to disk 3. W e continue by issuing reads to 4, 5, 6, and 7 to disk s 0, 2, 1,\nand 3, respectively . One might naively think that because we are utilizing\nall disks, we are achieving the full bandwidth of the array .\nT o see that this is not the case, however , consider the reques ts a single\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n430 R E D U N D A N T AR R AY S O F IN E X P E N S I V E DI S K S (RAID S)\ndisk receives (say disk 0). First, it gets a request for block 0; then, it gets a\nrequest for block 4 (skipping block 2). In fact, each disk rec eives a request\nfor every other block. While it is rotating over the skipped b lock, it is\nnot delivering useful bandwidth to the client. Thus, each di sk will only\ndeliver half its peak bandwidth. And thus, the sequential re ad will only\nobtain a bandwidth of ( N\n2 \u00b7S) MB/s.\nRandom reads are the best case for a mirrored RAID. In this cas e, we\ncan distribute the reads across all the disks, and thus obtai n the full pos-\nsible bandwidth. Thus, for random reads, RAID-1 delivers N \u00b7R MB/s.\nFinally , random writes perform as you might expect: N\n2 \u00b7R MB/s. Each\nlogical write must turn into two physical writes, and thus wh ile all the\ndisks will be in use, the client will only perceive this as hal f the available\nbandwidth. Even though a write to logical block X turns into t wo parallel\nwrites to two different physical disks, the bandwidth of man y small re-\nquests only achieves half of what we saw with striping. As we w ill soon\nsee, getting half the available bandwidth is actually prett y good!\n38.6 RAID Level 4: Saving Space With Parity\nW e now present a different method of adding redundancy to a di sk ar-\nray known as parity. Parity-based approaches attempt to use less capac-\nity and thus overcome the huge space penalty paid by mirrored systems.\nThey do so at a cost, however: performance.\nIn a \ufb01ve-disk RAID-4 system, we might observe the following l ayout:\nDisk 0 Disk 1 Disk 2 Disk 3 Disk 4\n0 1 2 3 P0\n4 5 6 7 P1\n8 9 10 11 P2\n12 13 14 15 P3\nAs you can see, for each stripe of data, we have added a single par-\nity block that stores the redundant information for that stripe of blocks.\nFor example, parity block P1 has redundant information that it calculated\nfrom blocks 4, 5, 6, and 7.\nT o compute parity , we need to use a mathematical function tha t en-\nables us to withstand the loss of any one block from our stripe . It turns\nout the simple function XOR does the trick quite nicely . For a given set of\nbits, the XOR of all of those bits returns a 0 if there are an eve n number of\n1\u2019s in the bits, and a 1 if there are an odd number of 1\u2019s. For exa mple:\nC0 C1 C2 C3 P\n0 0 1 1 XOR(0,0,1,1) = 0\n0 1 0 0"
  },
  {
    "content": " simple function XOR does the trick quite nicely . For a given set of\nbits, the XOR of all of those bits returns a 0 if there are an eve n number of\n1\u2019s in the bits, and a 1 if there are an odd number of 1\u2019s. For exa mple:\nC0 C1 C2 C3 P\n0 0 1 1 XOR(0,0,1,1) = 0\n0 1 0 0 XOR(0,1,0,0) = 1\nIn the \ufb01rst row (0,0,1,1), there are two 1\u2019s (C2, C3), and thus XOR of\nall of those values will be 0 (P); similarly , in the second row there is only\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nRE D U N D A N T AR R AY S O F IN E X P E N S I V E DI S K S (RAID S) 431\none 1 (C1), and thus the XOR must be 1 (P). Y ou can remember this in a\nvery simple way: that the number of 1\u2019s in any row must be an eve n (not\nodd) number; that is the invariant that the RAID must maintain in order\nfor parity to be correct.\nFrom the example above, you might also be able to guess how par ity\ninformation can be used to recover from a failure. Imagine th e column la-\nbeled C2 is lost. T o \ufb01gure out what values must have been in the column,\nwe simply have to read in all the other values in that row (incl uding the\nXOR\u2019d parity bit) and reconstruct the right answer . Speci\ufb01cally , assume\nthe \ufb01rst row\u2019s value in column C2 is lost (it is a 1); by reading the other\nvalues in that row (0 from C0, 0 from C1, 1 from C3, and 0 from the parity\ncolumn P), we get the values 0, 0, 1, and 0. Because we know that XOR\nkeeps an even number of 1\u2019s in each row , we know what the missin g data\nmust be: a 1. And that is how reconstruction works in a XOR-bas ed par-\nity scheme! Note also how we compute the reconstructed value : we just\nXOR the data bits and the parity bits together , in the same way that we\ncalculated the parity in the \ufb01rst place.\nNow you might be wondering: we are talking about XORing all of\nthese bits, and yet above we know that the RAID places 4KB (or l arger)\nblocks on each disk; how do we apply XOR to a bunch of blocks to c om-\npute the parity? It turns out this is easy as well. Simply perf orm a bitwise\nXOR across each bit of the data blocks; put the result of each b itwise XOR\ninto the corresponding bit slot in the parity block. For exam ple, if we had\nblocks of size 4 bits (yes, this is still quite a bit smaller th an a 4KB block,\nbut you get the picture), they might look something like this :\nBlock0 Block1 Block2 Block3 Parity\n00 10 11 10 11\n10 01 00 01 10\nAs you can see from the \ufb01gure, the parity is computed for each b it of\neach block and the result placed in the parity block.\nRAID-4 Analysis\nLet us now analyze RAID-4. From a capacity standpoint, RAID- 4 uses 1\ndisk for parity information for every group of disks it is pro tecting. Thus,\nour useful capacity for a RAID group is (N-1).\nReliability is also quite easy to understand: RAID-4 tolera tes 1 disk\nfailure and no more. If more than one disk is lost, there is sim ply no way\nto reconstruct the lost data.\nFinally , there is performance. This time, let us start by ana lyzing steady-\nstate throughput. Sequential read performance can utilize all of the disks\nexcept for the parity disk, and thus deliver a peak effective bandwidth of\n(N \u2212 1) \u00b7S MB/s (an easy case).\nT o understand the performance of sequential writes, we must \ufb01rst un-\nderstand how they are"
  },
  {
    "content": " sim ply no way\nto reconstruct the lost data.\nFinally , there is performance. This time, let us start by ana lyzing steady-\nstate throughput. Sequential read performance can utilize all of the disks\nexcept for the parity disk, and thus deliver a peak effective bandwidth of\n(N \u2212 1) \u00b7S MB/s (an easy case).\nT o understand the performance of sequential writes, we must \ufb01rst un-\nderstand how they are done. When writing a big chunk of data to disk,\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n432 R E D U N D A N T AR R AY S O F IN E X P E N S I V E DI S K S (RAID S)\nRAID-4 can perform a simple optimization known as a full-stripe write .\nFor example, imagine the case where the blocks 0, 1, 2, and 3 ha ve been\nsent to the RAID as part of a write request (T able 38.4).\nDisk 0 Disk 1 Disk 2 Disk 3 Disk 4\n0 1 2 3 P0\n4 5 6 7 P1\n8 9 10 11 P2\n12 13 14 15 P3\nT able 38.4: Full-stripe W rites In RAID-4\nIn this case, the RAID can simply calculate the new value of P0 (by\nperforming an XOR across the blocks 0, 1, 2, and 3) and then wri te all of\nthe blocks (including the parity block) to the \ufb01ve disks abov e in parallel\n(highlighted in gray in the \ufb01gure). Thus, full-stripe write s are the most\nef\ufb01cient way for RAID-4 to write to disk.\nOnce we understand the full-stripe write, calculating the p erformance\nof sequential writes on RAID-4 is easy; the effective bandwi dth is also\n(N \u22121) \u00b7S MB/s. Even though the parity disk is constantly in use during\nthe operation, the client does not gain performance advanta ge from it.\nNow let us analyze the performance of random reads. As you can also\nsee from the \ufb01gure above, a set of 1-block random reads will be spread\nacross the data disks of the system but not the parity disk. Th us, the\neffective performance is: (N \u2212 1) \u00b7R MB/s.\nRandom writes, which we have saved for last, present the most in-\nteresting case for RAID-4. Imagine we wish to overwrite bloc k 1 in the\nexample above. W e could just go ahead and overwrite it, but th at would\nleave us with a problem: the parity block P0 would no longer ac curately\nre\ufb02ect the correct parity value for the stripe. Thus, in this example, P0\nmust also be updated. But how can we update it both correctly a nd ef\ufb01-\nciently?\nIt turns out there are two methods. The \ufb01rst, known as additive parity ,\nrequires us to do the following. T o compute the value of the ne w parity\nblock, read in all of the other data blocks in the stripe in par allel (in the\nexample, blocks 0, 2, and 3) and XOR those with the new block (1 ). The\nresult is your new parity block. T o complete the write, you ca n then write\nthe new data and new parity to their respective disks, also in parallel.\nThe problem with this technique is that it scales with the num ber of\ndisks, and thus in larger RAIDs requires a high number of read s to com-\npute parity . Thus, the subtractive parity method.\nFor example, imagine this string of bits (4 data bits, one par ity):\nC0 C1 C2 C3 P\n0 0 1 1 XOR(0,0,1,1) = 0\nLet\u2019s imagine that we wish to overwrite bit C2 with a new value which\nwe will call C2(new). The subtractive method works in three s teps. First,\nwe read in the old data at C2 (C2(old) = 1) and the old parity (P( old) =\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nRE D U N D A"
  },
  {
    "content": " which\nwe will call C2(new). The subtractive method works in three s teps. First,\nwe read in the old data at C2 (C2(old) = 1) and the old parity (P( old) =\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nRE D U N D A N T AR R AY S O F IN E X P E N S I V E DI S K S (RAID S) 433\n0). Then, we compare the old data and the new data; if they are t he same\n(e.g., C2(new) = C2(old)), then we know the parity bit will al so remain\nthe same (i.e., P(new) = P(old)). If, however , they are diffe rent, then we\nmust \ufb02ip the old parity bit to the opposite of its current stat e, that is, if\n(P(old) == 1), P(new) will be set to 0; if (P(old) == 0), P(new) will be set to\n1. W e can express this whole mess neatly with XOR as it turns ou t (if you\nunderstand XOR, this will now make sense to you):\nP(new) = (C(old) XOR C(new)) XOR P(old)\nBecause we are dealing with blocks, not bits, we perform this calcula-\ntion over all the bits in the block (e.g., 4096 bytes in each bl ock multiplied\nby 8 bits per byte). Thus, in most cases, the new block will be d ifferent\nthan the old block and thus the new parity block will too.\nY ou should now be able to \ufb01gure out when we would use the additi ve\nparity calculation and when we would use the subtractive met hod. Think\nabout how many disks would need to be in the system so that the a dditive\nmethod performs fewer I/Os than the subtractive method; wha t is the\ncross-over point?\nFor this performance analysis, let us assume we are using the subtrac-\ntive method. Thus, for each write, the RAID has to perform 4 ph ysical\nI/Os (two reads and two writes). Now imagine there are lots of writes\nsubmitted to the RAID; how many can RAID-4 perform in paralle l? T o\nunderstand, let us again look at the RAID-4 layout (Figure 38.5).\nDisk 0 Disk 1 Disk 2 Disk 3 Disk 4\n0 1 2 3 P0\n\u22174 5 6 7 +P1\n8 9 10 11 P2\n12 \u221713 14 15 +P3\nT able 38.5: Example: W rites T o 4, 13, And Respective Parity Blocks\nNow imagine there were 2 small writes submitted to the RAID-4 at\nabout the same time, to blocks 4 and 13 (marked with \u2217 in the diagram).\nThe data for those disks is on disks 0 and 1, and thus the read an d write\nto data could happen in parallel, which is good. The problem t hat arises\nis with the parity disk; both the requests have to read the rel ated parity\nblocks for 4 and 13, parity blocks 1 and 3 (marked with +). Hopefully , the\nissue is now clear: the parity disk is a bottleneck under this type of work-\nload; we sometimes thus call this the small-write problem for parity-\nbased RAIDs. Thus, even though the data disks could be access ed in\nparallel, the parity disk prevents any parallelism from mat erializing; all\nwrites to the system will be serialized because of the parity disk. Because\nthe parity disk has to perform two I/Os (one read, one write) p er logical\nI/O, we can compute the performance of small random writes in RAID-4\nby computing the parity disk\u2019s performance on those two I/Os , and thus\nwe achieve (R/2) MB/s. RAID-4 throughput under random small writes\nis terrible; it does not improve as you add disks to the system .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n434 R E D U N D A N T AR R AY S O F IN E X P E N S I V E DI"
  },
  {
    "content": "\nwe achieve (R/2) MB/s. RAID-4 throughput under random small writes\nis terrible; it does not improve as you add disks to the system .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n434 R E D U N D A N T AR R AY S O F IN E X P E N S I V E DI S K S (RAID S)\nW e conclude by analyzing I/O latency in RAID-4. As you now kno w ,\na single read (assuming no failure) is just mapped to a single disk, and\nthus its latency is equivalent to the latency of a single disk request. The\nlatency of a single write requires two reads and then two writ es; the reads\ncan happen in parallel, as can the writes, and thus total late ncy is about\ntwice that of a single disk (with some differences because we have to wait\nfor both reads to complete and thus get the worst-case positi oning time,\nbut then the updates don\u2019t incur seek cost and thus may be a bet ter-than-\naverage positioning cost).\n38.7 RAID Level 5: Rotating Parity\nT o address the small-write problem (at least, partially), P atterson, Gib-\nson, and Katz introduced RAID-5. RAID-5 works almost identi cally to\nRAID-4, except that it rotates the parity block across drives (Figure 38.6).\nDisk 0 Disk 1 Disk 2 Disk 3 Disk 4\n0 1 2 3 P0\n5 6 7 P1 4\n10 11 P2 8 9\n15 P3 12 13 14\nP4 16 17 18 19\nT able 38.6: RAID-5 With Rotated Parity\nAs you can see, the parity block for each stripe is now rotated across\nthe disks, in order to remove the parity-disk bottleneck for RAID-4.\nRAID-5 Analysis\nMuch of the analysis for RAID-5 is identical to RAID-4. For ex ample, the\neffective capacity and failure tolerance of the two levels a re identical. So\nare sequential read and write performance. The latency of a s ingle request\n(whether a read or a write) is also the same as RAID-4.\nRandom read performance is a little better , because we can ut ilize all of\nthe disks. Finally , random write performance improves noti ceably over\nRAID-4, as it allows for parallelism across requests. Imagi ne a write to\nblock 1 and a write to block 10; this will turn into requests to disk 1 and\ndisk 4 (for block 1 and its parity) and requests to disk 0 and di sk 2 (for\nblock 10 and its parity). Thus, they can proceed in parallel. In fact, we\ncan generally assume that that given a large number of random requests,\nwe will be able to keep all the disks about evenly busy . If that is the case,\nthen our total bandwidth for small writes will be N\n4 \u00b7R MB/s. The factor\nof four loss is due to the fact that each RAID-5 write still gen erates 4 total\nI/O operations, which is simply the cost of using parity-bas ed RAID.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nRE D U N D A N T AR R AY S O F IN E X P E N S I V E DI S K S (RAID S) 435\nRAID-0 RAID-1 RAID-4 RAID-5\nCapacity N N/ 2 N \u2212 1 N \u2212 1\nReliability 0 1 (for sure) 1 1\nN\n2 (if lucky)\nThroughput\nSequential Read N \u00b7S (N/ 2) \u00b7S (N \u2212 1) \u00b7S (N \u2212 1) \u00b7S\nSequential W rite N \u00b7S (N/ 2) \u00b7S (N \u2212 1) \u00b7S (N \u2212 1) \u00b7S\nRandom Read N \u00b7R N \u00b7R (N \u2212 1) \u00b7R N \u00b7R\nRandom W rite N \u00b7R (N/ 2) \u00b7R 1\n2 \u00b7R N\n4 R\nLatency\nRead D D D D\nW rite D D 2D 2D\nT able 38.7: RAID Capacity , Reliability , and Performance\nBecause RAID-5 is basically identical to RAID-4 except in th e few cases\nwhere it is better ,"
  },
  {
    "content": "S\nRandom Read N \u00b7R N \u00b7R (N \u2212 1) \u00b7R N \u00b7R\nRandom W rite N \u00b7R (N/ 2) \u00b7R 1\n2 \u00b7R N\n4 R\nLatency\nRead D D D D\nW rite D D 2D 2D\nT able 38.7: RAID Capacity , Reliability , and Performance\nBecause RAID-5 is basically identical to RAID-4 except in th e few cases\nwhere it is better , it has almost completely replaced RAID-4 in the market-\nplace. The only place where it has not is in systems that know t hey will\nnever perform anything other than a large write, thus avoidi ng the small-\nwrite problem altogether [HLM94]; in those cases, RAID-4 is sometimes\nused as it is slightly simpler to build.\n38.8 RAID Comparison: A Summary\nW e now summarize our simpli\ufb01ed comparison of RAID levels in T a-\nble 38.7. Note that we have omitted a number of details to simplify our\nanalysis. For example, when writing in a mirrored system, th e average\nseek time is a little higher than when writing to just a single disk, because\nthe seek time is the max of two seeks (one on each disk). Thus, r andom\nwrite performance to two disks will generally be a little les s than random\nwrite performance of a single disk. Also, when updating the p arity disk\nin RAID-4/5, the \ufb01rst read of the old parity will likely cause a full seek\nand rotation, but the second write of the parity will only res ult in rotation.\nHowever , our comparison does capture the essential differe nces, and\nis useful for understanding tradeoffs across RAID levels. W e present a\nsummary in the table below; for the latency analysis, we simp ly use D to\nrepresent the time that a request to a single disk would take.\nT o conclude, if you strictly want performance and do not care about\nreliability , striping is obviously best. If, however , you w ant random I/O\nperformance and reliability , mirroring is the best; the cos t you pay is in\nlost capacity . If capacity and reliability are your main goa ls, then RAID-\n5 is the winner; the cost you pay is in small-write performanc e. Finally ,\nif you are always doing sequential I/O and want to maximize ca pacity ,\nRAID-5 also makes the most sense.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n436 R E D U N D A N T AR R AY S O F IN E X P E N S I V E DI S K S (RAID S)\n38.9 Other Interesting RAID Issues\nThere are a number of other interesting ideas that one could ( and per-\nhaps should) discuss when thinking about RAID. Here are some things\nwe might eventually write about.\nFor example, there are many other RAID designs, including Le vels 2\nand 3 from the original taxonomy , and Level 6 to tolerate mult iple disk\nfaults [C+04]. There is also what the RAID does when a disk fai ls; some-\ntimes it has a hot spare sitting around to \ufb01ll in for the failed disk. What\nhappens to performance under failure, and performance duri ng recon-\nstruction of the failed disk? There are also more realistic f ault models,\nto take into account latent sector errors or block corruption [B+08], and\nlots of techniques to handle such faults (see the data integr ity chapter for\ndetails). Finally , you can even build raid as a software laye r: such soft-\nware RAID systems are cheaper but have other problems, including the\nconsistent-update problem [DAA05].\n38.10 Summary\nW e have discussed RAID. RAID transforms a number of independ ent\ndisks into a large, more capacious, and more reliable single entity; impor-\ntantly , it does so transparently , and thus hardware and soft ware above is\nrelatively oblivious to the change.\nThere are many possible RAID levels to choose from, and the ex act\nRAID level to use depends heavily on what is important to the e nd-user .\nFor example, mirrored RAID is simple, reliable, and general ly provides\ngood performance but at a high capacity cost. RAID-5, in cont rast, is\nreliable and better from a capacity standpoint, but perform s quite poorly\nwhen there are small writes"
  },
  {
    "content": " is\nrelatively oblivious to the change.\nThere are many possible RAID levels to choose from, and the ex act\nRAID level to use depends heavily on what is important to the e nd-user .\nFor example, mirrored RAID is simple, reliable, and general ly provides\ngood performance but at a high capacity cost. RAID-5, in cont rast, is\nreliable and better from a capacity standpoint, but perform s quite poorly\nwhen there are small writes in the workload. Picking a RAID an d setting\nits parameters (chunk size, number of disks, etc.) properly for a particular\nworkload is challenging, and remains more of an art than a sci ence.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nRE D U N D A N T AR R AY S O F IN E X P E N S I V E DI S K S (RAID S) 437\nReferences\n[B+08] \u201cAn Analysis of Data Corruption in the Storage Stack\u201d\nLakshmi N. Bairavasundaram, Garth R. Goodson, Bianca Schro eder , Andrea C. Arpaci-Dusseau,\nRemzi H. Arpaci-Dusseau\nF AST \u201908, San Jose, CA, February 2008\nOur own work analyzing how often disks actually corrupt your data. Not often, but sometimes! And\nthus something a reliable storage system must consider .\n[BJ88] \u201cDisk Shadowing\u201d\nD. Bitton and J. Gray\nVLDB 1988\nOne of the \ufb01rst papers to discuss mirroring, herein called \u201cs hadowing\u201d.\n[CL95] \u201cStriping in a RAID level 5 disk array\u201d\nPeter M. Chen, Edward K. Lee\nSIGMETRICS 1995\nA nice analysis of some of the important parameters in a RAID- 5 disk array.\n[C+04] \u201cRow-Diagonal Parity for Double Disk Failure Correc tion\u201d\nP . Corbett, B. English, A. Goel, T . Grcanac, S. Kleiman, J. Le ong, S. Sankar\nF AST \u201904, February 2004\nThough not the \ufb01rst paper on a RAID system with two disks for pa rity, it is a recent and highly-\nunderstandable version of said idea. Read it to learn more.\n[DAA05] \u201cJournal-guided Resynchronization for Software R AID\u201d\nTimothy E. Denehy , A. Arpaci-Dusseau, R. Arpaci-Dusseau\nF AST 2005\nOur own work on the consistent-update problem. Here we solve it for Software RAID by integrating\nthe journaling machinery of the \ufb01le system above with the sof tware RAID beneath it.\n[HLM94] \u201cFile System Design for an NFS File Server Appliance \u201d\nDave Hitz, James Lau, Michael Malcolm\nUSENIX Winter 1994, San Francisco, California, 1994\nThe sparse paper introducing a landmark product in storage, the write-anywhere \ufb01le layout or W AFL\n\ufb01le system that underlies the NetApp \ufb01le server .\n[K86] \u201cSynchronized Disk Interleaving\u201d\nM.Y . Kim.\nIEEE T ransactions on Computers, V olume C-35: 11, November 1 986\nSome of the earliest work on RAID is found here.\n[K88] \u201cSmall Disk Arrays - The Emerging Approach to High Perf ormance\u201d\nF . Kurzweil.\nPresentation at Spring COMPCON \u201988, March 1, 1988, San Franc isco, California\nAnother early RAID reference.\n[P+88] \u201cRedundant Arrays of Inexpensive Disks\u201d\nD. Patterson, G. Gibson, R. Katz.\nSIGMOD 1988\nThis is considered the RAID paper , written by famous authors Patterson, Gibson, an d Katz. The paper\nhas since won many test-of-time awards and ushered in the RAI D era, including the name RAID itself!\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n438 R E D U N D A N T AR R AY"
  },
  {
    "content": "MOD 1988\nThis is considered the RAID paper , written by famous authors Patterson, Gibson, an d Katz. The paper\nhas since won many test-of-time awards and ushered in the RAI D era, including the name RAID itself!\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n438 R E D U N D A N T AR R AY S O F IN E X P E N S I V E DI S K S (RAID S)\n[PB86] \u201cProviding Fault T olerance in Parallel Secondary St orage Systems\u201d\nA. Park and K. Balasubramaniam\nDepartment of Computer Science, Princeton, CS-TR-O57-86, November 1986\nAnother early work on RAID.\n[SG86] \u201cDisk Striping\u201d\nK. Salem and H. Garcia-Molina.\nIEEE International Conference on Data Engineering, 1986\nAnd yes, another early RAID work. There are a lot of these, whi ch kind of came out of the woodwork\nwhen the RAID paper was published in SIGMOD.\n[S84] \u201cByzantine Generals in Action: Implementing Fail-St op Processors\u201d\nF .B. Schneider .\nACM T ransactions on Computer Systems, 2(2):145154, May 198 4\nFinally, a paper that is not about RAID! This paper is actuall y about how systems fail, and how to make\nsomething behave in a fail-stop manner .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nRE D U N D A N T AR R AY S O F IN E X P E N S I V E DI S K S (RAID S) 439\nHomework\nThis section introduces raid.py, a simple RAID simulator you can\nuse to shore up your knowledge of how RAID systems work. See th e\nREADME for details.\nQuestions\n1. Use the simulator to perform some basic RAID mapping tests . Run\nwith different levels (0, 1, 4, 5) and see if you can \ufb01gure out t he\nmappings of a set of requests. For RAID-5, see if you can \ufb01gure out\nthe difference between left-symmetric and left-asymmetri c layouts.\nUse some different random seeds to generate different probl ems\nthan above.\n2. Do the same as the \ufb01rst problem, but this time vary the chunk size\nwith -C. How does chunk size change the mappings?\n3. Do the same as above, but use the -r \ufb02ag to reverse the nature of\neach problem.\n4. Now use the reverse \ufb02ag but increase the size of each reques t with\nthe -S \ufb02ag. T ry specifying sizes of 8k, 12k, and 16k, while varying\nthe RAID level. What happens to the underlying I/O pattern wh en\nthe size of the request increases? Make sure to try this with t he\nsequential workload too ( -W sequential); for what request sizes\nare RAID-4 and RAID-5 much more I/O ef\ufb01cient?\n5. Use the timing mode of the simulator ( -t) to estimate the perfor-\nmance of 100 random reads to the RAID, while varying the RAID\nlevels, using 4 disks.\n6. Do the same as above, but increase the number of disks. How d oes\nthe performance of each RAID level scale as the number of disk s\nincreases?\n7. Do the same as above, but use all writes ( -w 100) instead of reads.\nHow does the performance of each RAID level scale now? Can you\ndo a rough estimate of the time it will take to complete the wor kload\nof 100 random writes?\n8. Run the timing mode one last time, but this time with a seque n-\ntial workload ( -W sequential). How does the performance vary\nwith RAID level, and when doing reads versus writes? How abou t\nwhen varying the size of each request? What size should you wr ite\nto a RAID when using RAID-4 or RAID-5?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n39"
  },
  {
    "content": " n-\ntial workload ( -W sequential). How does the performance vary\nwith RAID level, and when doing reads versus writes? How abou t\nwhen varying the size of each request? What size should you wr ite\nto a RAID when using RAID-4 or RAID-5?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n39\nInterlude: File and Directories\nThus far we have seen the development of two key operating sys tem ab-\nstractions: the process, which is a virtualization of the CP U, and the ad-\ndress space, which is a virtualization of memory . In tandem, these two\nabstractions allow a program to run as if it is in its own priva te, isolated\nworld; as if it has its own processor (or processors); as if it has its own\nmemory . This illusion makes programming the system much eas ier and\nthus is prevalent today not only on desktops and servers but i ncreasingly\non all programmable platforms including mobile phones and t he like.\nIn this section, we add one more critical piece to the virtual ization puz-\nzle: persistent storage . A persistent-storage device, such as a classic hard\ndisk drive or a more modern solid-state storage device , stores informa-\ntion permanently (or at least, for a long time). Unlike memor y , whose\ncontents are lost when there is a power loss, a persistent-st orage device\nkeeps such data intact. Thus, the OS must take extra care with such a\ndevice: this is where users keep data that they really care ab out.\nCR U X : H O W TO MA N A G E A P E R S I S T E N T DE V I C E\nHow should the OS manage a persistent device? What are the API s?\nWhat are the important aspects of the implementation?\nThus, in the next few chapters, we will explore critical tech niques for\nmanaging persistent data, focusing on methods to improve pe rformance\nand reliability . W e begin, however , with an overview of the A PI: the in-\nterfaces you\u2019ll expect to see when interacting with a U N I X \ufb01le system.\n39.1 Files and Directories\nT wo key abstractions have developed over time in the virtual ization\nof storage. The \ufb01rst is the \ufb01le . A \ufb01le is simply a linear array of bytes,\neach of which you can read or write. Each \ufb01le has some kind of low-level\n441\n442 IN T E R L U D E : F I L E A N D DI R E C TO R I E S\nname, usually a number of some kind; often, the user is not aware of\nthis name (as we will see). For historical reasons, the low-l evel name of a\n\ufb01le is often referred to as its inode number . W e\u2019ll be learning a lot more\nabout inodes in future chapters; for now , just assume that ea ch \ufb01le has an\ninode number associated with it.\nIn most systems, the OS does not know much about the structure of\nthe \ufb01le (e.g., whether it is a picture, or a text \ufb01le, or C code) ; rather , the\nresponsibility of the \ufb01le system is simply to store such data persistently\non disk and make sure that when you request the data again, you get\nwhat you put there in the \ufb01rst place. Doing so is not as simple a s it seems!\nThe second abstraction is that of a directory. A directory , like a \ufb01le,\nalso has a low-level name (i.e., an inode number), but its con tents are\nquite speci\ufb01c: it contains a list of (user-readable name, lo w-level name)\npairs. For example, let\u2019s say there is a \ufb01le with the low-leve l name \u201c10\u201d,\nand it is referred to by the user-readable name of \u201cfoo\u201d. The d irectory\n\u201cfoo\u201d resides in thus would have an entry (\u201cfoo\u201d, \u201c10\u201d) that m aps the\nuser-readable name to the low-level name. Each entry in a dir ectory refers\nto either \ufb01les or other directories"
  },
  {
    "content": "le with the low-leve l name \u201c10\u201d,\nand it is referred to by the user-readable name of \u201cfoo\u201d. The d irectory\n\u201cfoo\u201d resides in thus would have an entry (\u201cfoo\u201d, \u201c10\u201d) that m aps the\nuser-readable name to the low-level name. Each entry in a dir ectory refers\nto either \ufb01les or other directories. By placing directories within other di-\nrectories, users are able to build an arbitrary directory tree (or directory\nhierarchy), under which all \ufb01les and directories are stored.\n/\nfoo\nbar.txt\nbar\nfoobar\nbar.txt\nFigure 39.1: An Example Directory T ree\nThe directory hierarchy starts at a root directory (in U N I X-based sys-\ntems, the root directory is simply referred to as /) and uses some kind\nof separator to name subsequent sub-directories until the desired \ufb01le or\ndirectory is named. For example, if a user created a director y foo in the\nroot directory /, and then created a \ufb01le bar.txt in the directory foo,\nwe could refer to the \ufb01le by its absolute pathname , which in this case\nwould be /foo/bar.txt. See Figure 39.1 for a more complex directory\ntree; valid directories in the example are /, /foo, /bar, /bar/bar,\n/bar/foo and valid \ufb01les are /foo/bar.txt and /bar/foo/bar.txt.\nDirectories and \ufb01les can have the same name as long as they are in dif-\nferent locations in the \ufb01le-system tree (e.g., there are two \ufb01les named\nbar.txt in the \ufb01gure, /foo/bar.txt and /bar/foo/bar.txt).\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : F I L E A N D DI R E C TO R I E S 443\nTI P : T H I N K CA R E F U L LY AB O U T NA M I N G\nNaming is an important aspect of computer systems [SK09]. In UN I X\nsystems, virtually everything that you can think of is named through the\n\ufb01le system. Beyond just \ufb01les, devices, pipes, and even proce sses [K84]\ncan be found in what looks like a plain old \ufb01le system. This uni formity\nof naming eases your conceptual model of the system, and make s the\nsystem simpler and more modular . Thus, whenever creating a s ystem or\ninterface, think carefully about what names you are using.\nY ou may also notice that the \ufb01le name in this example often has two\nparts: bar and txt, separated by a period. The \ufb01rst part is an arbitrary\nname, whereas the second part of the \ufb01le name is usually used t o indi-\ncate the type of the \ufb01le, e.g., whether it is C code (e.g., .c), or an image\n(e.g., .jpg), or a music \ufb01le (e.g., .mp3). However , this is usually just a\nconvention: there is usually no enforcement that the data contained in a\n\ufb01le named main.c is indeed C source code.\nThus, we can see one great thing provided by the \ufb01le system: a c onve-\nnient way to name all the \ufb01les we are interested in. Names are important\nin systems as the \ufb01rst step to accessing any resource is being able to name\nit. In U N I X systems, the \ufb01le system thus provides a uni\ufb01ed way to access\n\ufb01les on disk, USB stick, CD-ROM, many other devices, and in fa ct many\nother things, all located under the single directory tree.\n39.2 The File System Interface\nLet\u2019s now discuss the \ufb01le system interface in more detail. W e \u2019ll start\nwith the basics of creating, accessing, and deleting \ufb01les. Y ou may think\nthis straightforward, but along the way"
  },
  {
    "content": " to access\n\ufb01les on disk, USB stick, CD-ROM, many other devices, and in fa ct many\nother things, all located under the single directory tree.\n39.2 The File System Interface\nLet\u2019s now discuss the \ufb01le system interface in more detail. W e \u2019ll start\nwith the basics of creating, accessing, and deleting \ufb01les. Y ou may think\nthis straightforward, but along the way we\u2019ll discover the m ysterious call\nthat is used to remove \ufb01les, known as unlink(). Hopefully , by the end\nof this chapter , this mystery won\u2019t be so mysterious to you!\n39.3 Creating Files\nW e\u2019ll start with the most basic of operations: creating a \ufb01le . This can be\naccomplished with the open system call; by calling open() and passing\nit the O CREAT \ufb02ag, a program can create a new \ufb01le. Here is some exam-\nple code to create a \ufb01le called \u201cfoo\u201d in the current working di rectory .\nint fd = open(\"foo\", O_CREAT | O_WRONLY | O_TRUNC);\nThe routine open() takes a number of different \ufb02ags. In this exam-\nple, the program creates the \ufb01le ( O CREAT), can only write to that \ufb01le\nwhile opened in this manner ( O WRONLY), and, if the \ufb01le already exists,\n\ufb01rst truncate it to a size of zero bytes thus removing any exis ting content\n(O TRUNC).\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n444 IN T E R L U D E : F I L E A N D DI R E C TO R I E S\nAS I D E : TH E CREAT () SY S T E M CA L L\nThe older way of creating a \ufb01le is to call creat(), as follows:\nint fd = creat(\"foo\");\nY ou can think of creat() as open() with the following \ufb02ags:\nO CREAT | O WRONLY | O TRUNC. Because open() can create a \ufb01le,\nthe usage of creat() has somewhat fallen out of favor (indeed, it could\njust be implemented as a library call to open()); however , it does hold a\nspecial place in U N I X lore. Speci\ufb01cally , when Ken Thompson was asked\nwhat he would do differently if he were redesigning U N I X, he replied:\n\u201cI\u2019d spell creat with an e.\u201d\nOne important aspect of open() is what it returns: a \ufb01le descriptor . A\n\ufb01le descriptor is just an integer , private per process, and i s used in U N I X\nsystems to access \ufb01les; thus, once a \ufb01le is opened, you use the \ufb01le de-\nscriptor to read or write the \ufb01le, assuming you have permissi on to do so.\nIn this way , a \ufb01le descriptor is a capability [L84], i.e., an opaque handle\nthat gives you the power to perform certain operations. Anot her way to\nthink of a \ufb01le descriptor is as a pointer to an object of type \ufb01l e; once you\nhave such an object, you can call other \u201cmethods\u201d to access th e \ufb01le, like\nread() and write(). W e\u2019ll see just how a \ufb01le descriptor is used below .\n39.4 Reading and W riting Files\nOnce we have some \ufb01les, of course we might like to read or write them.\nLet\u2019s start by reading an existing \ufb01le. If we were typing at a c ommand\nline, we might just use the program cat to dump the contents of the \ufb01le\nto the screen.\nprompt> echo hello > foo\nprompt> cat foo\nhello\nprompt>\nIn this code snippet, we redirect the output of the program echo to\nthe \ufb01le foo, which then contains the word \u201chello\u201d in it. W e then use cat\nto see the contents of the \ufb01le. But how does the cat program access the\n\ufb01le foo?"
  },
  {
    "content": " contents of the \ufb01le\nto the screen.\nprompt> echo hello > foo\nprompt> cat foo\nhello\nprompt>\nIn this code snippet, we redirect the output of the program echo to\nthe \ufb01le foo, which then contains the word \u201chello\u201d in it. W e then use cat\nto see the contents of the \ufb01le. But how does the cat program access the\n\ufb01le foo?\nT o \ufb01nd this out, we\u2019ll use an incredibly useful tool to trace t he system\ncalls made by a program. On Linux, the tool is called strace; other sys-\ntems have similar tools (see dtruss on Mac OS X, or truss on some older\nUN I X variants). What strace does is trace every system call made by a\nprogram while it runs, and dump the trace to the screen for you to see.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : F I L E A N D DI R E C TO R I E S 445\nTI P : U S E STRACE (A N D SI M I L A R TO O L S )\nThe strace tool provides an awesome way to see what programs are up\nto. By running it, you can trace which system calls a program m akes, see\nthe arguments and return codes, and generally get a very good idea of\nwhat is going on.\nThe tool also takes some arguments which can be quite useful. For ex-\nample, -f follows any fork\u2019d children too; -t reports the time of day\nat each call; -e trace=open,close,read,write only traces calls to\nthose system calls and ignores all others. There are many mor e powerful\n\ufb02ags \u2013 read the man pages and \ufb01nd out how to harness this wonder ful\ntool.\nHere is an example of using strace to \ufb01gure out what cat is doing\n(some calls removed for readability):\nprompt> strace cat foo\n...\nopen(\"foo\", O_RDONLY|O_LARGEFILE) = 3\nread(3, \"hello\\n\", 4096) = 6\nwrite(1, \"hello\\n\", 6) = 6\nhello\nread(3, \"\", 4096) = 0\nclose(3) = 0\n...\nprompt>\nThe \ufb01rst thing that cat does is open the \ufb01le for reading. A couple\nof things we should note about this; \ufb01rst, that the \ufb01le is only opened for\nreading (not writing), as indicated by the O\nRDONLY \ufb02ag; second, that\nthe 64-bit offset be used ( O LARGEFILE); third, that the call to open()\nsucceeds and returns a \ufb01le descriptor , which has the value of 3.\nWhy does the \ufb01rst call to open() return 3, not 0 or perhaps 1 as you\nmight expect? As it turns out, each running process already h as three\n\ufb01les open, standard input (which the process can read to rece ive input),\nstandard output (which the process can write to in order to du mp infor-\nmation to the screen), and standard error (which the process can write\nerror messages to). These are represented by \ufb01le descriptor s 0, 1, and 2,\nrespectively . Thus, when you \ufb01rst open another \ufb01le (as cat does above),\nit will almost certainly be \ufb01le descriptor 3.\nAfter the open succeeds, cat uses the read() system call to repeat-\nedly read some bytes from a \ufb01le. The \ufb01rst argument to read() is the \ufb01le\ndescriptor , thus telling the \ufb01le system which \ufb01le to read; a p rocess can of\ncourse have multiple \ufb01les open at once, and thus the descript or enables\nthe operating system to know which \ufb01le a particular read refe rs to. The\nsecond argument points to a buffer where the result of the read() will be\nplaced; in the system-call trace above, strace shows the res ults of the read\nin this spot (\u201chello\u201d). The third argument is the size of the b uffer , which\n"
  },
  {
    "content": "\ncourse have multiple \ufb01les open at once, and thus the descript or enables\nthe operating system to know which \ufb01le a particular read refe rs to. The\nsecond argument points to a buffer where the result of the read() will be\nplaced; in the system-call trace above, strace shows the res ults of the read\nin this spot (\u201chello\u201d). The third argument is the size of the b uffer , which\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n446 IN T E R L U D E : F I L E A N D DI R E C TO R I E S\nin this case is 4 KB. The call to read() returns successfully as well, here\nreturning the number of bytes it read (6, which includes 5 for the letters\nin the word \u201chello\u201d and one for an end-of-line marker).\nAt this point, you see another interesting result of the stra ce: a single\ncall to the write() system call, to the \ufb01le descriptor 1. As we mentioned\nabove, this descriptor is known as the standard output, and t hus is used\nto write the word \u201chello\u201d to the screen as the program cat is meant to\ndo. But does it call write() directly? Maybe (if it is highly optimized).\nBut if not, what cat might do is call the library routine printf(); in-\nternally , printf() \ufb01gures out all the formatting details passed to it, and\neventually calls write on the standard output to print the re sults to the\nscreen.\nThe cat program then tries to read more from the \ufb01le, but since there\nare no bytes left in the \ufb01le, the read() returns 0 and the program knows\nthat this means it has read the entire \ufb01le. Thus, the program c alls close()\nto indicate that it is done with the \ufb01le \u201cfoo\u201d, passing in the c orresponding\n\ufb01le descriptor . The \ufb01le is thus closed, and the reading of it t hus complete.\nW riting a \ufb01le is accomplished via a similar set of steps. Firs t, a \ufb01le\nis opened for writing, then the write() system call is called, perhaps\nrepeatedly for larger \ufb01les, and then close(). Use strace to trace writes\nto a \ufb01le, perhaps of a program you wrote yourself, or by tracin g the dd\nutility , e.g., dd if=foo of=bar.\n39.5 Reading And W riting, But Not Sequentially\nThus far , we\u2019ve discussed how to read and write \ufb01les, but all a ccess\nhas been sequential; that is, we have either read a \ufb01le from the beginning\nto the end, or written a \ufb01le out from beginning to end.\nSometimes, however , it is useful to be able to read or write to a spe-\nci\ufb01c offset within a \ufb01le; for example, if you build an index ov er a text\ndocument, and use it to look up a speci\ufb01c word, you may end up re ading\nfrom some random offsets within the document. T o do so, we will use\nthe lseek() system call. Here is the function prototype:\noff_t lseek(int fildes, off_t offset, int whence);\nThe \ufb01rst argument is familiar (a \ufb01le descriptor). The second argu-\nment is the offset, which positions the \ufb01le offset to a particular location\nwithin the \ufb01le. The third argument, called whence for historical reasons,\ndetermines exactly how the seek is performed. From the man pa ge:\nIf whence is SEEK_SET, the offset is set to offset bytes.\nIf whence is SEEK_CUR, the offset is set to its current\nlocation plus offset bytes.\nIf whence is SEEK_END, the offset is set to the size of\nthe file plus offset bytes.\nAs you can tell from this description, for each \ufb01le a process o pens, the\nOS tracks a \u201ccurrent\u201d offset, which determines where the nex t read or\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S"
  },
  {
    "content": ".\nIf whence is SEEK_END, the offset is set to the size of\nthe file plus offset bytes.\nAs you can tell from this description, for each \ufb01le a process o pens, the\nOS tracks a \u201ccurrent\u201d offset, which determines where the nex t read or\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : F I L E A N D DI R E C TO R I E S 447\nAS I D E : CA L L I N G LSEEK () DO E S NO T PE R F O R M A D I S K SE E K\nThe poorly-named system call lseek() confuses many a student try-\ning to understand disks and how the \ufb01le systems atop them work . Do\nnot confuse the two! The lseek() call simply changes a variable in OS\nmemory that tracks, for a particular process, at which offse t to which its\nnext read or write will start. A disk seek occurs when a read or write\nissued to the disk is not on the same track as the last read or wr ite, and\nthus necessitates a head movement. Making this even more con fusing is\nthe fact that calling lseek() to read or write from/to random parts of a\n\ufb01le, and then reading/writing to those random parts, will in deed lead to\nmore disk seeks. Thus, calling lseek() can certainly lead to a seek in an\nupcoming read or write, but absolutely does not cause any dis k I/O to\noccur itself.\nwrite will begin reading from or writing to within the \ufb01le. Th us, part\nof the abstraction of an open \ufb01le is that it has a current offse t, which\nis updated in one of two ways. The \ufb01rst is when a read or write of N\nbytes takes place, N is added to the current offset; thus each read or write\nimplicitly updates the offset. The second is explicitly with lseek, which\nchanges the offset as speci\ufb01ed above.\nNote that this call lseek() has nothing to do with the seek operation\nof a disk, which moves the disk arm. The call to lseek() simply changes\nthe value of a variable within the kernel; when the I/O is perf ormed,\ndepending on where the disk head is, the disk may or may not per form\nan actual seek to ful\ufb01ll the request.\n39.6 W riting Immediately with fsync()\nMost times when a program calls write(), it is just telling the \ufb01le\nsystem: please write this data to persistent storage, at som e point in the\nfuture. The \ufb01le system, for performance reasons, will buffer such writes\nin memory for some time (say 5 seconds, or 30); at that later po int in\ntime, the write(s) will actually be issued to the storage dev ice. From the\nperspective of the calling application, writes seem to comp lete quickly ,\nand only in rare cases (e.g., the machine crashes after the write() call\nbut before the write to disk) will data be lost.\nHowever , some applications require something more than thi s even-\ntual guarantee. For example, in a database management syste m (DBMS),\ndevelopment of a correct recovery protocol requires the abi lity to force\nwrites to disk from time to time.\nT o support these types of applications, most \ufb01le systems pro vide some\nadditional control APIs. In the U N I X world, the interface provided to ap-\nplications is known as fsync(int fd). When a process calls fsync()\nfor a particular \ufb01le descriptor , the \ufb01le system responds by f orcing all dirty\n(i.e., not yet written) data to disk, for the \ufb01le referred to b y the speci\ufb01ed\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n448 IN T E R L U D E : F I L E A N D DI R E C TO R I E S\n\ufb01le descriptor . The fsync() routine returns once all of these writes are\ncomplete.\nHere is a simple example of how to use fsync(). The code opens\n"
  },
  {
    "content": "c\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n448 IN T E R L U D E : F I L E A N D DI R E C TO R I E S\n\ufb01le descriptor . The fsync() routine returns once all of these writes are\ncomplete.\nHere is a simple example of how to use fsync(). The code opens\nthe \ufb01le foo, writes a single chunk of data to it, and then calls fsync()\nto ensure the writes are forced immediately to disk. Once the fsync()\nreturns, the application can safely move on, knowing that th e data has\nbeen persisted (if fsync() is correctly implemented, that is).\nint fd = open(\"foo\", O_CREAT | O_WRONLY | O_TRUNC);\nassert(fd > -1);\nint rc = write(fd, buffer, size);\nassert(rc == size);\nrc = fsync(fd);\nassert(rc == 0);\nInterestingly , this sequence does not guarantee everythin g that you\nmight expect; in some cases, you also need to fsync() the directory that\ncontains the \ufb01le foo. Adding this step ensures not only that the \ufb01le itself\nis on disk, but that the \ufb01le, if newly created, also is durably a part of the\ndirectory . Not surprisingly , this type of detail is often ov erlooked, leading\nto many application-level bugs [P+13].\n39.7 Renaming Files\nOnce we have a \ufb01le, it is sometimes useful to be able to give a \ufb01l e a\ndifferent name. When typing at the command line, this is acco mplished\nwith mv command; in this example, the \ufb01le foo is renamed bar:\nprompt> mv foo bar\nUsing strace, we can see that mv uses the system call rename(char\n*old, char *new), which takes precisely two arguments: the original\nname of the \ufb01le ( old) and the new name ( new).\nOne interesting guarantee provided by the rename() call is that it is\n(usually) implemented as an atomic call with respect to system crashes;\nif the system crashes during the renaming, the \ufb01le will eithe r be named\nthe old name or the new name, and no odd in-between state can ar ise.\nThus, rename() is critical for supporting certain kinds of applications\nthat require an atomic update to \ufb01le state.\nLet\u2019s be a little more speci\ufb01c here. Imagine that you are usin g a \ufb01le ed-\nitor (e.g., emacs), and you insert a line into the middle of a \ufb01 le. The \ufb01le\u2019s\nname, for the example, is foo.txt. The way the editor might update the\n\ufb01le to guarantee that the new \ufb01le has the original contents pl us the line\ninserted is as follows (ignoring error-checking for simpli city):\nint fd = open(\"foo.txt.tmp\", O_WRONLY|O_CREAT|O_TRUNC);\nwrite(fd, buffer, size); // write out new version of file\nfsync(fd);\nclose(fd);\nrename(\"foo.txt.tmp\", \"foo.txt\");\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : F I L E A N D DI R E C TO R I E S 449\nWhat the editor does in this example is simple: write out the n ew\nversion of the \ufb01le under temporary name ( foot.txt.tmp), force it to\ndisk with fsync(), and then, when the application is certain the new\n\ufb01le metadata and contents are on the disk, rename the tempora ry \ufb01le to\nthe original \ufb01le\u2019s name. This last step atomically swaps the new \ufb01le into\nplace, while concurrently deleting the old version of the \ufb01l e, and thus an\natomic \ufb01le update is achieved.\n39.8 Getting Information About Files\nBeyond \ufb01le access, we expect the \ufb01le system to keep a fair am"
  },
  {
    "content": " are on the disk, rename the tempora ry \ufb01le to\nthe original \ufb01le\u2019s name. This last step atomically swaps the new \ufb01le into\nplace, while concurrently deleting the old version of the \ufb01l e, and thus an\natomic \ufb01le update is achieved.\n39.8 Getting Information About Files\nBeyond \ufb01le access, we expect the \ufb01le system to keep a fair amou nt of\ninformation about each \ufb01le it is storing. W e generally call s uch data about\n\ufb01les metadata. T o see the metadata for a certain \ufb01le, we can use stat()\nor fstat() system call \u2013 read their man pages for details on how to call\nthem. These calls take a pathname (or \ufb01le descriptor) to a \ufb01le and \ufb01ll in a\nstat structure as seen here:\nstruct stat {\ndev_t st_dev; / * ID of device containing file */\nino_t st_ino; / * inode number */\nmode_t st_mode; / * protection */\nnlink_t st_nlink; / * number of hard links */\nuid_t st_uid; / * user ID of owner */\ngid_t st_gid; / * group ID of owner */\ndev_t st_rdev; / * device ID (if special file) */\noff_t st_size; / * total size, in bytes */\nblksize_t st_blksize; /* blocksize for filesystem I/O */\nblkcnt_t st_blocks; / * number of blocks allocated */\ntime_t st_atime; / * time of last access */\ntime_t st_mtime; / * time of last modification */\ntime_t st_ctime; / * time of last status change */\n};\nY ou can see that there is a lot of information kept about each \ufb01 le, in-\ncluding its size (in bytes), its low-level name (i.e., inode number), some\nownership information, and some information about when the \ufb01le was\naccessed or modi\ufb01ed, among other things. T o see this informa tion, you\ncan use the command line tool stat:\nprompt> echo hello > file\nprompt> stat file\nFile: \u2018file\u2019\nSize: 6 Blocks: 8 IO Block: 4096 regular file\nDevice: 811h/2065d Inode: 67158084 Links: 1\nAccess: (0640/-rw-r-----) Uid: (30686/ remzi) Gid: (30686/ remzi)\nAccess: 2011-05-03 15:50:20.157594748 -0500\nModify: 2011-05-03 15:50:20.157594748 -0500\nChange: 2011-05-03 15:50:20.157594748 -0500\nAs it turns out, each \ufb01le system usually keeps this type of inf ormation\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n450 IN T E R L U D E : F I L E A N D DI R E C TO R I E S\nin a structure called an inode1. W e\u2019ll be learning a lot more about inodes\nwhen we talk about \ufb01le system implementation. For now , you sh ould just\nthink of an inode as a persistent data structure kept by the \ufb01l e system that\nhas information like we see above inside of it.\n39.9 Removing Files\nAt this point, we know how to create \ufb01les and access them, eith er se-\nquentially or not. But how do you delete \ufb01les? If you\u2019ve used U N I X, you\nprobably think you know: just run the program rm. But what system call\ndoes rm use to remove a \ufb01le?\nLet\u2019s use our old friend strace again to \ufb01nd out. Here we remove\nthat pesky \ufb01le \u201cfoo\u201d:\nprompt> strace rm foo\n...\nunlink(\"foo\") = 0\n...\nW e\u2019ve removed a bunch of unrelated cruft from the traced outp ut,\nleaving just a single call to the mysteriously-"
  },
  {
    "content": " what system call\ndoes rm use to remove a \ufb01le?\nLet\u2019s use our old friend strace again to \ufb01nd out. Here we remove\nthat pesky \ufb01le \u201cfoo\u201d:\nprompt> strace rm foo\n...\nunlink(\"foo\") = 0\n...\nW e\u2019ve removed a bunch of unrelated cruft from the traced outp ut,\nleaving just a single call to the mysteriously-named system call unlink().\nAs you can see, unlink() just takes the name of the \ufb01le to be removed,\nand returns zero upon success. But this leads us to a great puz zle: why\nis this system call named \u201cunlink\u201d? Why not just \u201cremove\u201d or \u201c delete\u201d.\nT o understand the answer to this puzzle, we must \ufb01rst underst and more\nthan just \ufb01les, but also directories.\n39.10 Making Directories\nBeyond \ufb01les, a set of directory-related system calls enable you to make,\nread, and delete directories. Note you can never write to a di rectory di-\nrectly; because the format of the directory is considered \ufb01l e system meta-\ndata, you can only update a directory indirectly by , for exam ple, creating\n\ufb01les, directories, or other object types within it. In this w ay , the \ufb01le system\nmakes sure that the contents of the directory always are as ex pected.\nT o create a directory , a single system call, mkdir(), is available. The\neponymous mkdir program can be used to create such a directory . Let\u2019s\ntake a look at what happens when we run the mkdir program to make a\nsimple directory called foo:\nprompt> strace mkdir foo\n...\nmkdir(\"foo\", 0777) = 0\n...\nprompt>\n1 Some \ufb01le systems call these structures similar , but slightl y different, names, such as\ndnodes; the basic idea is similar however .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : F I L E A N D DI R E C TO R I E S 451\nTI P : B E WA RY OF PO W E R F U L CO M M A N D S\nThe program rm provides us with a great example of powerful com-\nmands, and how sometimes too much power can be a bad thing. For\nexample, to remove a bunch of \ufb01les at once, you can type someth ing like:\nprompt> rm *\nwhere the * will match all \ufb01les in the current directory . But sometimes\nyou want to also delete the directories too, and in fact all of their contents.\nY ou can do this by telling rm to recursively descend into each directory ,\nand remove its contents too:\nprompt> rm -rf *\nWhere you get into trouble with this small string of characte rs is when\nyou issue the command, accidentally , from the root director y of a \ufb01le sys-\ntem, thus removing every \ufb01le and directory from it. Oops!\nThus, remember the double-edged sword of powerful commands ; while\nthey give you the ability to do a lot of work with a small number of\nkeystrokes, they also can quickly and readily do a great deal of harm.\nWhen such a directory is created, it is considered \u201cempty\u201d, a lthough it\ndoes have a bare minimum of contents. Speci\ufb01cally , an empty d irectory\nhas two entries: one entry that refers to itself, and one entr y that refers\nto its parent. The former is referred to as the \u201c.\u201d (dot) direc tory , and the\nlatter as \u201c..\u201d (dot-dot). Y ou can see these directories by pa ssing a \ufb02ag ( -a)\nto the program ls:\nprompt> ls -a\n./ ../\nprompt> ls -al\ntotal 8\ndrwxr-x--- 2 remzi remzi 6 Apr 30 16:17 ./\ndrwxr-x--- 26 remzi remzi 4096 Apr 30 16:17 ../\n39.11 Reading Directories\nNow that we\u2019ve created a directory , we might wish to read one t oo."
  },
  {
    "content": "\ufffdag ( -a)\nto the program ls:\nprompt> ls -a\n./ ../\nprompt> ls -al\ntotal 8\ndrwxr-x--- 2 remzi remzi 6 Apr 30 16:17 ./\ndrwxr-x--- 26 remzi remzi 4096 Apr 30 16:17 ../\n39.11 Reading Directories\nNow that we\u2019ve created a directory , we might wish to read one t oo.\nIndeed, that is exactly what the program ls does. Let\u2019s write our own\nlittle tool like ls and see how it is done.\nInstead of just opening a directory as if it were a \ufb01le, we inst ead use\na new set of calls. Below is an example program that prints the contents\nof a directory . The program uses three calls, opendir(), readdir(),\nand closedir(), to get the job done, and you can see how simple the\ninterface is; we just use a simple loop to read one directory e ntry at a time,\nand print out the name and inode number of each \ufb01le in the direc tory .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n452 IN T E R L U D E : F I L E A N D DI R E C TO R I E S\nint main(int argc, char *argv[]) {\nDIR *dp = opendir(\".\");\nassert(dp != NULL);\nstruct dirent *d;\nwhile ((d = readdir(dp)) != NULL) {\nprintf(\"%d %s\\n\", (int) d->d_ino, d->d_name);\n}\nclosedir(dp);\nreturn 0;\n}\nThe declaration below shows the information available with in each\ndirectory entry in the struct dirent data structure:\nstruct dirent {\nchar d_name[256]; / * filename */\nino_t d_ino; / * inode number */\noff_t d_off; / * offset to the next dirent */\nunsigned short d_reclen; / * length of this record */\nunsigned char d_type; / * type of file */\n};\nBecause directories are light on information (basically , j ust mapping\nthe name to the inode number , along with a few other details), a program\nmay want to call stat() on each \ufb01le to get more information on each,\nsuch as its length or other detailed information. Indeed, th is is exactly\nwhat ls does when you pass it the -l \ufb02ag; try strace on ls with and\nwithout that \ufb02ag to see for yourself.\n39.12 Deleting Directories\nFinally , you can delete a directory with a call to rmdir() (which is\nused by the program of the same name, rmdir). Unlike \ufb01le deletion,\nhowever , removing directories is more dangerous, as you cou ld poten-\ntially delete a large amount of data with a single command. Th us, rmdir()\nhas the requirement that the directory be empty (i.e., only h as \u201c.\u201d and \u201c..\u201d\nentries) before it is deleted. If you try to delete a non-empt y directory , the\ncall to rmdir() simply will fail.\n39.13 Hard Links\nW e now come back to the mystery of why removing a \ufb01le is perform ed\nvia unlink(), by understanding a new way to make an entry in the\n\ufb01le system tree, through a system call known as link(). The link()\nsystem call takes two arguments, an old pathname and a new one ; when\nyou \u201clink\u201d a new \ufb01le name to an old one, you essentially create another\nway to refer to the same \ufb01le. The command-line program ln is used to\ndo this, as we see in this example:\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : F I L E A N D DI R E C TO R I E S 453\nprompt> echo hello > file\nprompt> cat file\nhello\nprompt> ln file file2\nprompt> cat file2\nhello\nHere we created a \ufffd"
  },
  {
    "content": "SY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : F I L E A N D DI R E C TO R I E S 453\nprompt> echo hello > file\nprompt> cat file\nhello\nprompt> ln file file2\nprompt> cat file2\nhello\nHere we created a \ufb01le with the word \u201chello\u201d in it, and called th e \ufb01le\nfile2. W e then create a hard link to that \ufb01le using the ln program. After\nthis, we can examine the \ufb01le by either opening file or file2.\nThe way link works is that it simply creates another name in the di-\nrectory you are creating the link to, and refers it to the same inode number\n(i.e., low-level name) of the original \ufb01le. The \ufb01le is not cop ied in any way;\nrather , you now just have two human names ( file and file2) that both\nrefer to the same \ufb01le. W e can even see this in the directory its elf, by print-\ning out the inode number of each \ufb01le:\nprompt> ls -i file file2\n67158084 file\n67158084 file2\nprompt>\nBy passing the -i \ufb02ag to ls, it prints out the inode number of each \ufb01le\n(as well as the \ufb01le name). And thus you can see what link really has done:\njust make a new reference to the same exact inode number (6715 8084 in\nthis example).\nBy now you might be starting to see why unlink() is called unlink().\nWhen you create a \ufb01le, you are really doing two things. First, you are\nmaking a structure (the inode) that will track virtually all relevant infor-\nmation about the \ufb01le, including its size, where its blocks ar e on disk, and\nso forth. Second, you are linking a human-readable name to that \ufb01le, and\nputting that link into a directory .\nAfter creating a hard link to a \ufb01le, to the \ufb01le system, there is no dif-\nference between the original \ufb01le name ( file) and the newly created \ufb01le\nname ( file2); indeed, they are both just links to the underlying meta-\ndata about the \ufb01le, which is found in inode number 67158084.\nThus, to remove a \ufb01le from the \ufb01le system, we call unlink(). In the\nexample above, we could for example remove the \ufb01le named file, and\nstill access the \ufb01le without dif\ufb01culty:\nprompt> rm file\nremoved \u2018file\u2019\nprompt> cat file2\nhello\nThe reason this works is because when the \ufb01le system unlinks \ufb01 le, it\nchecks a reference count within the inode number . This reference count\n2 Note how creative the authors of this book are. W e also used to have a cat named \u201cCat\u201d\n(true story). However , she died, and we now have a hamster nam ed \u201cHammy .\u201d\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n454 IN T E R L U D E : F I L E A N D DI R E C TO R I E S\n(sometimes called the link count ) allows the \ufb01le system to track how\nmany different \ufb01le names have been linked to this particular inode. When\nunlink() is called, it removes the \u201clink\u201d between the human-readable\nname (the \ufb01le that is being deleted) to the given inode number , and decre-\nments the reference count; only when the reference count rea ches zero\ndoes the \ufb01le system also free the inode and related data block s, and thus\ntruly \u201cdelete\u201d the \ufb01le.\nY ou can see the reference count of a \ufb01le using stat() of course. Let\u2019s\nsee what it is when we create and delete hard links to a \ufb01le. In t his exam"
  },
  {
    "content": "-\nments the reference count; only when the reference count rea ches zero\ndoes the \ufb01le system also free the inode and related data block s, and thus\ntruly \u201cdelete\u201d the \ufb01le.\nY ou can see the reference count of a \ufb01le using stat() of course. Let\u2019s\nsee what it is when we create and delete hard links to a \ufb01le. In t his exam-\nple, we\u2019ll create three links to the same \ufb01le, and then delete them. W atch\nthe link count!\nprompt> echo hello > file\nprompt> stat file\n... Inode: 67158084 Links: 1 ...\nprompt> ln file file2\nprompt> stat file\n... Inode: 67158084 Links: 2 ...\nprompt> stat file2\n... Inode: 67158084 Links: 2 ...\nprompt> ln file2 file3\nprompt> stat file\n... Inode: 67158084 Links: 3 ...\nprompt> rm file\nprompt> stat file2\n... Inode: 67158084 Links: 2 ...\nprompt> rm file2\nprompt> stat file3\n... Inode: 67158084 Links: 1 ...\nprompt> rm file3\n39.14 Symbolic Links\nThere is one other type of link that is really useful, and it is called a\nsymbolic link or sometimes a soft link . As it turns out, hard links are\nsomewhat limited: you can\u2019t create one to a directory (for fe ar that you\nwill create a cycle in the directory tree); you can\u2019t hard lin k to \ufb01les in\nother disk partitions (because inode numbers are only uniqu e within a\nparticular \ufb01le system, not across \ufb01le systems); etc. Thus, a new type of\nlink called the symbolic link was created.\nT o create such a link, you can use the same program ln, but with the\n-s \ufb02ag. Here is an example:\nprompt> echo hello > file\nprompt> ln -s file file2\nprompt> cat file2\nhello\nAs you can see, creating a soft link looks much the same, and th e orig-\ninal \ufb01le can now be accessed through the \ufb01le name file as well as the\nsymbolic link name file2.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : F I L E A N D DI R E C TO R I E S 455\nHowever , beyond this surface similarity , symbolic links ar e actually\nquite different from hard links. The \ufb01rst difference is that a symbolic\nlink is actually a \ufb01le itself, of a different type. W e\u2019ve alre ady talked about\nregular \ufb01les and directories; symbolic links are a third typ e the \ufb01le system\nknows about. A stat on the symlink reveals all:\nprompt> stat file\n... regular file ...\nprompt> stat file2\n... symbolic link ...\nRunning ls also reveals this fact. If you look closely at the \ufb01rst char-\nacter of the long-form of the output from ls, you can see that the \ufb01rst\ncharacter in the left-most column is a - for regular \ufb01les, a d for directo-\nries, and an l for soft links. Y ou can also see the size of the symbolic link\n(4 bytes in this case), as well as what the link points to (the \ufb01 le named\nfile).\nprompt> ls -al\ndrwxr-x--- 2 remzi remzi 29 May 3 19:10 ./\ndrwxr-x--- 27 remzi remzi 4096 May 3 15:14 ../\n-rw-r----- 1 remzi remzi 6 May 3 19:10 file\nlrwxrwxrwx 1 remzi remzi 4 May 3 19:10 file2 -> file\nThe reason that file2 is 4 bytes is because the way a symbolic link is\nformed is by holding the pathname of the linked-to \ufb01le as the d ata of the\nlink \ufb01le. Because we\u2019ve linked to a \ufb01le named file, our"
  },
  {
    "content": "r----- 1 remzi remzi 6 May 3 19:10 file\nlrwxrwxrwx 1 remzi remzi 4 May 3 19:10 file2 -> file\nThe reason that file2 is 4 bytes is because the way a symbolic link is\nformed is by holding the pathname of the linked-to \ufb01le as the d ata of the\nlink \ufb01le. Because we\u2019ve linked to a \ufb01le named file, our link \ufb01le file2\nis small (4 bytes). If we link to a longer pathname, our link \ufb01l e would be\nbigger:\nprompt> echo hello > alongerfilename\nprompt> ln -s alongerfilename file3\nprompt> ls -al alongerfilename file3\n-rw-r----- 1 remzi remzi 6 May 3 19:17 alongerfilename\nlrwxrwxrwx 1 remzi remzi 15 May 3 19:17 file3 -> alongerfilen ame\nFinally , because of the way symbolic links are created, they leave the\npossibility for what is known as a dangling reference :\nprompt> echo hello > file\nprompt> ln -s file file2\nprompt> cat file2\nhello\nprompt> rm file\nprompt> cat file2\ncat: file2: No such file or directory\nAs you can see in this example, quite unlike hard links, remov ing the\noriginal \ufb01le named file causes the link to point to a pathname that no\nlonger exists.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n456 IN T E R L U D E : F I L E A N D DI R E C TO R I E S\n39.15 Making and Mounting a File System\nW e\u2019ve now toured the basic interfaces to access \ufb01les, direct ories, and\ncertain types of special types of links. But there is one more topic we\nshould discuss: how to assemble a full directory tree from ma ny under-\nlying \ufb01le systems. This task is accomplished via \ufb01rst making \ufb01le systems,\nand then mounting them to make their contents accessible.\nT o make a \ufb01le system, most \ufb01le systems provide a tool, usually re-\nferred to as mkfs (pronounced \u201cmake fs\u201d), that performs exactly this task.\nThe idea is as follows: give the tool, as input, a device (such as a disk\npartition, e.g., /dev/sda1) a \ufb01le system type (e.g., ext3), and it simply\nwrites an empty \ufb01le system, starting with a root directory , o nto that disk\npartition. And mkfs said, let there be a \ufb01le system!\nHowever , once such a \ufb01le system is created, it needs to be made ac-\ncessible within the uniform \ufb01le-system tree. This task is ac hieved via the\nmount program (which makes the underlying system call mount() to do\nthe real work). What mount does, quite simply is take an exist ing direc-\ntory as a target mount point and essentially paste a new \ufb01le system onto\nthe directory tree at that point.\nAn example here might be useful. Imagine we have an unmounted\next3 \ufb01le system, stored in device partition /dev/sda1, that has the fol-\nlowing contents: a root directory which contains two sub-di rectories, a\nand b, each of which in turn holds a single \ufb01le named foo. Let\u2019s say we\nwish to mount this \ufb01le system at the mount point /home/users. W e\nwould type something like this:\nprompt> mount -t ext3 /dev/sda1 /home/users\nIf successful, the mount would thus make this new \ufb01le system a vail-\nable. However , note how the new \ufb01le system is now accessed. T o look at\nthe contents of the root directory , we would use ls like this:\nprompt> ls /home/users/\na b\nAs you can see, the pathname /home/users/ now refers to the root\nof the newly-mounted directory . Similarly , we could access \ufb01les a and\nb with the pathnames /home/users/a and /"
  },
  {
    "content": ". However , note how the new \ufb01le system is now accessed. T o look at\nthe contents of the root directory , we would use ls like this:\nprompt> ls /home/users/\na b\nAs you can see, the pathname /home/users/ now refers to the root\nof the newly-mounted directory . Similarly , we could access \ufb01les a and\nb with the pathnames /home/users/a and /home/users/b. Finally ,\nthe \ufb01les named foo could be accessed via /home/users/a/foo and\n/home/users/b/foo. And thus the beauty of mount: instead of having\na number of separate \ufb01le systems, mount uni\ufb01es all \ufb01le system s into one\ntree, making naming uniform and convenient.\nT o see what is mounted on your system, and at which points, sim ply\nrun the mount program. Y ou\u2019ll see something like this:\n/dev/sda1 on / type ext3 (rw)\nproc on /proc type proc (rw)\nsysfs on /sys type sysfs (rw)\n/dev/sda5 on /tmp type ext3 (rw)\n/dev/sda7 on /var/vice/cache type ext3 (rw)\ntmpfs on /dev/shm type tmpfs (rw)\nAFS on /afs type afs (rw)\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : F I L E A N D DI R E C TO R I E S 457\nThis crazy mix shows that a whole number of different \ufb01le syst ems,\nincluding ext3 (a standard disk-based \ufb01le system), the proc \ufb01le system (a\n\ufb01le system for accessing information about current process es), tmpfs (a\n\ufb01le system just for temporary \ufb01les), and AFS (a distributed \ufb01 le system)\nare all glued together onto this one machine\u2019s \ufb01le-system tr ee.\n39.16 Summary\nThe \ufb01le system interface in U N I X systems (and indeed, in any system)\nis seemingly quite rudimentary , but there is a lot to underst and if you\nwish to master it. Nothing is better , of course, than simply u sing it (a lot).\nSo please do so! Of course, read more; as always, Stevens [SR0 5] is the\nplace to begin.\nW e\u2019ve toured the basic interfaces, and hopefully understoo d a little bit\nabout how they work. Even more interesting is how to implemen t a \ufb01le\nsystem that meets the needs of the API, a topic we will delve in to in great\ndetail next.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n458 IN T E R L U D E : F I L E A N D DI R E C TO R I E S\nReferences\n[K84] \u201cProcesses as Files\u201d\nT om J. Killian\nUSENIX, June 1984\nThe paper that introduced the /proc \ufb01le system, where each pr ocess can be treated as a \ufb01le within a\npseudo \ufb01le system. A clever idea that you can still see in mode rn UNIX systems.\n[L84] \u201cCapability-Based Computer Systems\u201d\nHenry M. Levy\nDigital Press, 1984\nA vailable: http://homes.cs.washington.edu/ levy/capab ook\nAn excellent overview of early capability-based systems.\n[P+13] \u201cT owards Ef\ufb01cient, Portable Application-Level Con sistency\u201d\nThanumalayan S. Pillai, Vijay Chidambaram, Joo-Y oung Hwan g, Andrea C. Arpaci-Dusseau,\nand Remzi H. Arpaci-Dusseau\nHotDep \u201913, November 2013\nOur own work that shows how readily applications can make mis takes in committing data to disk; in\nparticular , assumptions about the \ufb01le system creep into app lications and thus make the applications\nwork correctly"
  },
  {
    "content": " Pillai, Vijay Chidambaram, Joo-Y oung Hwan g, Andrea C. Arpaci-Dusseau,\nand Remzi H. Arpaci-Dusseau\nHotDep \u201913, November 2013\nOur own work that shows how readily applications can make mis takes in committing data to disk; in\nparticular , assumptions about the \ufb01le system creep into app lications and thus make the applications\nwork correctly only if they are running on a speci\ufb01c \ufb01le syste m.\n[SK09] \u201cPrinciples of Computer System Design\u201d\nJerome H. Saltzer and M. Frans Kaashoek\nMorgan-Kaufmann, 2009\nThis tour de force of systems is a must-read for anybody inter ested in the \ufb01eld. It\u2019s how they teach\nsystems at MIT . Read it once, and then read it a few more times t o let it all soak in.\n[SR05] \u201cAdvanced Programming in the U NIX Environment\u201d\nW . Richard Stevens and Stephen A. Rago\nAddison-W esley , 2005\nWe have probably referenced this book a few hundred thousand times. It is that useful to you, if you care\nto become an awesome systems programmer .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nIN T E R L U D E : F I L E A N D DI R E C TO R I E S 459\nHomework\nIn this homework, we\u2019ll just familiarize ourselves with how the APIs\ndescribed in the chapter work. T o do so, you\u2019ll just write a fe w different\nprograms, mostly based on various U N I X utilities.\nQuestions\n1. Stat: W rite your own version of the command line program stat,\nwhich simply calls the stat() system call on a given \ufb01le or di-\nrectory . Print out \ufb01le size, number of blocks allocated, ref erence\n(link) count, and so forth. What is the link count of a directo ry , as\nthe number of entries in the directory changes? Useful inter faces:\nstat()\n2. List Files: W rite a program that lists \ufb01les in the given directory .\nWhen called without any arguments, the program should just p rint\nthe \ufb01le names. When invoked with the -l \ufb02ag, the program should\nprint out information about each \ufb01le, such as the owner , grou p, per-\nmissions, and other information obtained from the stat() system\ncall. The program should take one additional argument, whic h is\nthe directory to read, e.g., myls -l directory. If no directory is\ngiven, the program should just use the current working direc tory .\nUseful interfaces: stat(), opendir(), readdir(), getcwd().\n3. T ail: W rite a program that prints out the last few lines of a \ufb01le. The\nprogram should be ef\ufb01cient, in that it seeks to near the end of the\n\ufb01le, reads in a block of data, and then goes backwards until it \ufb01nds\nthe requested number of lines; at this point, it should print out those\nlines from beginning to the end of the \ufb01le. T o invoke the progr am,\none should type: mytail -n file, where n is the number of lines\nat the end of the \ufb01le to print. Useful interfaces: stat(), lseek(),\nopen(), read(), close().\n4. Recursive Search: W rite a program that prints out the names of\neach \ufb01le and directory in the \ufb01le system tree, starting at a gi ven\npoint in the tree. For example, when run without arguments, t he\nprogram should start with the current working directory and print\nits contents, as well as the contents of any sub-directories , etc., until\nthe entire tree, root at the CWD, is printed. If given a single argu-\nment (of a directory name), use that as the root of the tree ins tead.\nRe\ufb01ne your recursive search with more fun options, similar t o the\npowerful find command line tool. Useful interfaces: you \ufb01gure it\nout.\nc\u20dd 2014, A R PA C I"
  },
  {
    "content": " any sub-directories , etc., until\nthe entire tree, root at the CWD, is printed. If given a single argu-\nment (of a directory name), use that as the root of the tree ins tead.\nRe\ufb01ne your recursive search with more fun options, similar t o the\npowerful find command line tool. Useful interfaces: you \ufb01gure it\nout.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n40\nFile System Implementation\nIn this chapter , we introduce a simple \ufb01le system implementa tion, known\nas vsfs (the V ery Simple File System ). This \ufb01le system is a simpli\ufb01ed\nversion of a typical U N I X \ufb01le system and thus serves to introduce some\nof the basic on-disk structures, access methods, and variou s policies that\nyou will \ufb01nd in many \ufb01le systems today .\nThe \ufb01le system is pure software; unlike our development of CP U and\nmemory virtualization, we will not be adding hardware featu res to make\nsome aspect of the \ufb01le system work better (though we will want to pay at-\ntention to device characteristics to make sure the \ufb01le syste m works well).\nBecause of the great \ufb02exibility we have in building a \ufb01le syst em, many\ndifferent ones have been built, literally from AFS (the Andr ew File Sys-\ntem) [H+88] to ZFS (Sun\u2019s Zettabyte File System) [B07]. All o f these \ufb01le\nsystems have different data structures and do some things be tter or worse\nthan their peers. Thus, the way we will be learning about \ufb01le s ystems is\nthrough case studies: \ufb01rst, a simple \ufb01le system (vsfs) in thi s chapter to\nintroduce most concepts, and then a series of studies of real \ufb01le systems\nto understand how they can differ in practice.\nTH E CR U X : H O W TO IM P L E M E N T A S I M P L E FI L E SY S T E M\nHow can we build a simple \ufb01le system? What structures are need ed\non the disk? What do they need to track? How are they accessed?\n40.1 The W ay T o Think\nT o think about \ufb01le systems, we usually suggest thinking abou t two\ndifferent aspects of them; if you understand both of these as pects, you\nprobably understand how the \ufb01le system basically works.\nThe \ufb01rst is the data structures of the \ufb01le system. In other words, what\ntypes of on-disk structures are utilized by the \ufb01le system to organize its\ndata and metadata? The \ufb01rst \ufb01le systems we\u2019ll see (including vsfs below)\nemploy simple structures, like arrays of blocks or other obj ects, whereas\n461\n462 FI L E SY S T E M IM P L E M E N TAT IO N\nAS I D E : ME N TA L MO D E L S OF FI L E SY S T E M S\nAs we\u2019ve discussed before, mental models are what you are rea lly trying\nto develop when learning about systems. For \ufb01le systems, you r mental\nmodel should eventually include answers to questions like: what on-disk\nstructures store the \ufb01le system\u2019s data and metadata? What ha ppens when\na process opens a \ufb01le? Which on-disk structures are accessed during a\nread or write? By working on and improving your mental model, you\ndevelop an abstract understanding of what is going on, inste ad of just\ntrying to understand the speci\ufb01cs of some \ufb01le-system code (t hough that\nis also useful, of course!).\nmore sophisticated \ufb01le systems, like SGI\u2019s XFS, use more com plicated\ntree-based structures [S+96].\nThe second aspect of a \ufb01le system is its access methods . How does\nit map the calls made by a process, such as open(), read(), write(),\netc., onto its structures? Which structures are read during the execution\nof a particular system call? Which are written? How ef\ufffd"
  },
  {
    "content": "!).\nmore sophisticated \ufb01le systems, like SGI\u2019s XFS, use more com plicated\ntree-based structures [S+96].\nThe second aspect of a \ufb01le system is its access methods . How does\nit map the calls made by a process, such as open(), read(), write(),\netc., onto its structures? Which structures are read during the execution\nof a particular system call? Which are written? How ef\ufb01cient ly are all of\nthese steps performed?\nIf you understand the data structures and access methods of a \ufb01le sys-\ntem, you have developed a good mental model of how it truly wor ks, a\nkey part of the systems mindset. T ry to work on developing you r mental\nmodel as we delve into our \ufb01rst implementation.\n40.2 Overall Organization\nW e now develop the overall on-disk organization of the data s truc-\ntures of the vsfs \ufb01le system. The \ufb01rst thing we\u2019ll need to do is divide the\ndisk into blocks; simple \ufb01le systems use just one block size, and that\u2019s\nexactly what we\u2019ll do here. Let\u2019s choose a commonly-used siz e of 4 KB.\nThus, our view of the disk partition where we\u2019re building our \ufb01le sys-\ntem is simple: a series of blocks, each of size 4 KB. The blocks are ad-\ndressed from 0 to N \u2212 1, in a partition of size N 4-KB blocks. Assume we\nhave a really small disk, with just 64 blocks:\n0 7 8 15 16 23 24 31\n32 39 40 47 48 55 56 63\nLet\u2019s now think about what we need to store in these blocks to b uild\na \ufb01le system. Of course, the \ufb01rst thing that comes to mind is us er data.\nIn fact, most of the space in any \ufb01le system is (and should be) u ser data.\nLet\u2019s call the region of the disk we use for user data the data region , and,\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nFI L E SY S T E M IM P L E M E N TATI O N 463\nagain for simplicity , reserve a \ufb01xed portion of the disk for t hese blocks,\nsay the last 56 of 64 blocks on the disk:\n0 7\nD\n8\nD D D D D D D\n15\nD\n16\nD D D D D D D\n23\nD\n24\nD D D D D D D\n31\nD\n32\nD D D D D D D\n39\nD\n40\nD D D D D D D\n47\nD\n48\nD D D D D D D\n55\nD\n56\nD D D D D D D\n63\nData Region\nData Region\nAs we learned about (a little) last chapter , the \ufb01le system ha s to track\ninformation about each \ufb01le. This information is a key piece o f metadata,\nand tracks things like which data blocks (in the data region) comprise\na \ufb01le, the size of the \ufb01le, its owner and access rights, access and mod-\nify times, and other similar kinds of information. T o store t his informa-\ntion, \ufb01le system usually have a structure called an inode (we\u2019ll read more\nabout inodes below).\nT o accommodate inodes, we\u2019ll need to reserve some space on th e disk\nfor them as well. Let\u2019s call this portion of the disk the inode table , which\nsimply holds an array of on-disk inodes. Thus, our on-disk im age now\nlooks like this picture, assuming that we use 5 of our 64 block s for inodes\n(denoted by I\u2019s in the diagram):\n0\nI I I I I\n7\nD\n8\nD D D D D D D\n15\nD\n16\nD D D D D D D\n23\nD\n24\nD D D D D D D\n31\nD\n32\nD D D D D D D\n39\nD\n40\nD D D D D D D\n47\nD\n48\nD D D D D D D\n55"
  },
  {
    "content": "\ufffds in the diagram):\n0\nI I I I I\n7\nD\n8\nD D D D D D D\n15\nD\n16\nD D D D D D D\n23\nD\n24\nD D D D D D D\n31\nD\n32\nD D D D D D D\n39\nD\n40\nD D D D D D D\n47\nD\n48\nD D D D D D D\n55\nD\n56\nD D D D D D D\n63\nData Region\nData Region\nInodes\nW e should note here that inodes are typically not that big, fo r example\n128 or 256 bytes. Assuming 256 bytes per inode, a 4-KB block ca n hold 16\ninodes, and our \ufb01le system above contains 80 total inodes. In our simple\n\ufb01le system, built on a tiny 64-block partition, this number r epresents the\nmaximum number of \ufb01les we can have in our \ufb01le system; however , do\nnote that the same \ufb01le system, built on a larger disk, could si mply allocate\na larger inode table and thus accommodate more \ufb01les.\nOur \ufb01le system thus far has data blocks (D), and inodes (I), bu t a few\nthings are still missing. One primary component that is stil l needed, as\nyou might have guessed, is some way to track whether inodes or data\nblocks are free or allocated. Such allocation structures are thus a requisite\nelement in any \ufb01le system.\nMany allocation-tracking methods are possible, of course. For exam-\nple, we could use a free list that points to the \ufb01rst free block, which then\npoints to the next free block, and so forth. W e instead choose a simple and\npopular structure known as a bitmap, one for the data region (the data\nbitmap), and one for the inode table (the inode bitmap ). A bitmap is a\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n464 FI L E SY S T E M IM P L E M E N TAT IO N\nsimple structure: each bit is used to indicate whether the co rresponding\nobject/block is free (0) or in-use (1). And thus our new on-di sk layout,\nwith an inode bitmap (i) and a data bitmap (d):\n0\ni d I I I I I\n7\nD\n8\nD D D D D D D\n15\nD\n16\nD D D D D D D\n23\nD\n24\nD D D D D D D\n31\nD\n32\nD D D D D D D\n39\nD\n40\nD D D D D D D\n47\nD\n48\nD D D D D D D\n55\nD\n56\nD D D D D D D\n63\nData Region\nData Region\nInodes\nY ou may notice that it is a bit of overkill to use an entire 4-KB block for\nthese bitmaps; such a bitmap can track whether 32K objects ar e allocated,\nand yet we only have 80 inodes and 56 data blocks. However , we j ust use\nan entire 4-KB block for each of these bitmaps for simplicity .\nThe careful reader (i.e., the reader who is still awake) may h ave no-\nticed there is one block left in the design of the on-disk stru cture of our\nvery simple \ufb01le system. W e reserve this for the superblock, denoted by\nan S in the diagram below . The superblock contains informati on about\nthis particular \ufb01le system, including, for example, how man y inodes and\ndata blocks are in the \ufb01le system (80 and 56, respectively in t his instance),\nwhere the inode table begins (block 3), and so forth. It will l ikely also\ninclude a magic number of some kind to identify the \ufb01le system type (in\nthis case, vsfs).\nS\n0\ni d I I I I I\n7\nD\n8\nD D D D D D D\n15\nD\n16\nD D D D D D D\n23\nD\n24\nD D D D D D D\n31\nD\n32\nD D D D D D D\n39\n"
  },
  {
    "content": "ikely also\ninclude a magic number of some kind to identify the \ufb01le system type (in\nthis case, vsfs).\nS\n0\ni d I I I I I\n7\nD\n8\nD D D D D D D\n15\nD\n16\nD D D D D D D\n23\nD\n24\nD D D D D D D\n31\nD\n32\nD D D D D D D\n39\nD\n40\nD D D D D D D\n47\nD\n48\nD D D D D D D\n55\nD\n56\nD D D D D D D\n63\nData Region\nData Region\nInodes\nThus, when mounting a \ufb01le system, the operating system will r ead\nthe superblock \ufb01rst, to initialize various parameters, and then attach the\nvolume to the \ufb01le-system tree. When \ufb01les within the volume ar e accessed,\nthe system will thus know exactly where to look for the needed on-disk\nstructures.\n40.3 File Organization: The Inode\nOne of the most important on-disk structures of a \ufb01le system i s the\ninode; virtually all \ufb01le systems have a structure similar to this. The name\ninode is short for index node , the historical name given to it by U N I X in-\nventor Ken Thompson [RT74], used because these nodes were or iginally\narranged in an array , and the array indexed into when accessing a partic-\nular inode.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nFI L E SY S T E M IM P L E M E N TATI O N 465\nAS I D E : DATA ST R U C T U R E \u2013 T H E IN O D E\nThe inode is the generic name that is used in many \ufb01le systems to de-\nscribe the structure that holds the metadata for a given \ufb01le, such as its\nlength, permissions, and the location of its constituent bl ocks. The name\ngoes back at least as far as U N I X (and probably further back to Multics\nif not earlier systems); it is short for index node , as the inode number is\nused to index into an array of on-disk inodes in order to \ufb01nd th e inode\nof that number . As we\u2019ll see, design of the inode is one key par t of \ufb01le\nsystem design. Most modern systems have some kind of structu re like\nthis for every \ufb01le they track, but perhaps call them differen t things (such\nas dnodes, fnodes, etc.).\nEach inode is implicitly referred to by a number (called the inumber),\nwhich we\u2019ve earlier called the low-level name of the \ufb01le. In vsfs (and\nother simple \ufb01le systems), given an i-number , you should dir ectly be able\nto calculate where on the disk the corresponding inode is loc ated. For ex-\nample, take the inode table of vsfs as above: 20-KB in size (5 4 -KB blocks)\nand thus consisting of 80 inodes (assuming each inode is 256 b ytes); fur-\nther assume that the inode region starts at 12KB (i.e, the sup erblock starts\nat 0KB, the inode bitmap is at address 4KB, the data bitmap at 8 KB, and\nthus the inode table comes right after). In vsfs, we thus have the following\nlayout for the beginning of the \ufb01le system partition (in clos eup view):\nSuper i-bmap d-bmap\n0KB 4KB 8KB 12KB 16KB 20KB 24KB 28KB 32KB\nThe Inode Table (Closeup)\n0 1 2 3\n4 5 6 7\n8 9 10 11\n12 13 14 15\n16 17 18 19\n20 21 22 23\n24 25 26 27\n28 29 30 31\n32 33 34 35\n36 37 38 39\n40 41 42 43\n44 45 46 47\n48 49 50 51\n52 53 54 55\n56 57 58 59\n60 61 62 63\n64 65 66 67\n68 69 70 71\n72 73 74 75\n76 77 78 79\niblock 0 iblock 1 iblock 2 iblock 3 iblock 4\nT o read inode"
  },
  {
    "content": " 17 18 19\n20 21 22 23\n24 25 26 27\n28 29 30 31\n32 33 34 35\n36 37 38 39\n40 41 42 43\n44 45 46 47\n48 49 50 51\n52 53 54 55\n56 57 58 59\n60 61 62 63\n64 65 66 67\n68 69 70 71\n72 73 74 75\n76 77 78 79\niblock 0 iblock 1 iblock 2 iblock 3 iblock 4\nT o read inode number 32, the \ufb01le system would \ufb01rst calculate t he offset\ninto the inode region ( 32\u00b7sizeof (inode) or 8192, add it to the start address\nof the inode table on disk ( inodeStartAddr = 12KB ), and thus arrive\nupon the correct byte address of the desired block of inodes: 20KB . Re-\ncall that disks are not byte addressable, but rather consist of a large num-\nber of addressable sectors, usually 512 bytes. Thus, to fetc h the block of\ninodes that contains inode 32, the \ufb01le system would issue a re ad to sector\n20\u00d71024\n512 , or 40, to fetch the desired inode block. More generally , the sector\naddress iaddr of the inode block can be calculated as follows:\nblk = (inumber * sizeof(inode_t)) / blockSize;\nsector = ((blk * blockSize) + inodeStartAddr) / sectorSize;\nInside each inode is virtually all of the information you nee d about a\n\ufb01le: its type (e.g., regular \ufb01le, directory , etc.), its size, the number of blocks\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n466 FI L E SY S T E M IM P L E M E N TAT IO N\nSize Name What is this inode \ufb01eld for?\n2 mode can this \ufb01le be read/written/executed?\n2 uid who owns this \ufb01le?\n4 size how many bytes are in this \ufb01le?\n4 time what time was this \ufb01le last accessed?\n4 ctime what time was this \ufb01le created?\n4 mtime what time was this \ufb01le last modi\ufb01ed?\n4 dtime what time was this inode deleted?\n2 gid which group does this \ufb01le belong to?\n2 links\ncount how many hard links are there to this \ufb01le?\n4 blocks how many blocks have been allocated to this \ufb01le?\n4 \ufb02ags how should ext2 use this inode?\n4 osd1 an OS-dependent \ufb01eld\n60 block a set of disk pointers (15 total)\n4 generation \ufb01le version (used by NFS)\n4 \ufb01le\nacl a new permissions model beyond mode bits\n4 dir acl called access control lists\n4 faddr an unsupported \ufb01eld\n12 i osd2 another OS-dependent \ufb01eld\nT able 40.1: The ext2 inode\nallocated to it, protection information (such as who owns the \ufb01le, as well\nas who can access it), some time information, including when the \ufb01le was\ncreated, modi\ufb01ed, or last accessed, as well as information a bout where its\ndata blocks reside on disk (e.g., pointers of some kind). W e r efer to all\nsuch information about a \ufb01le as metadata; in fact, any information inside\nthe \ufb01le system that isn\u2019t pure user data is often referred to a s such. An\nexample inode from ext2 [P09] is shown below in T able 40.1.\nOne of the most important decisions in the design of the inode is how\nit refers to where data blocks are. One simple approach would be to\nhave one or more direct pointers (disk addresses) inside the inode; each\npointer refers to one disk block that belongs to the \ufb01le. Such an approach\nis limited: for example, if you want to have a \ufb01le that is reall y big (e.g.,\nbigger than the size of a block multiplied by the number of dir ect point-\ners), you are out of luck.\nThe Multi-Level Index\nT o support bigger \ufb01les, \ufb01le system"
  },
  {
    "content": " the inode; each\npointer refers to one disk block that belongs to the \ufb01le. Such an approach\nis limited: for example, if you want to have a \ufb01le that is reall y big (e.g.,\nbigger than the size of a block multiplied by the number of dir ect point-\ners), you are out of luck.\nThe Multi-Level Index\nT o support bigger \ufb01les, \ufb01le system designers have had to intr oduce dif-\nferent structures within inodes. One common idea is to have a special\npointer known as an indirect pointer . Instead of pointing to a block that\ncontains user data, it points to a block that contains more po inters, each\nof which point to user data. Thus, an inode may have some \ufb01xed n umber\nof direct pointers (e.g., 12), and a single indirect pointer . If a \ufb01le grows\nlarge enough, an indirect block is allocated (from the data- block region\nof the disk), and the inode\u2019s slot for an indirect pointer is s et to point to\nit. Assuming that a block is 4KB and 4-byte disk addresses, th at adds\nanother 1024 pointers; the \ufb01le can grow to be (12 + 1024)\u00b74K or 4144KB.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nFI L E SY S T E M IM P L E M E N TATI O N 467\nTI P : C O N S I D E R EX T E N T-B A S E D AP P R O A C H E S\nA different approach is to use extents instead of pointers. An extent is\nsimply a disk pointer plus a length (in blocks); thus, instea d of requiring\na pointer for every block of a \ufb01le, all one needs is a pointer an d a length\nto specify the on-disk location of a \ufb01le. Just a single extent is limiting, as\none may have trouble \ufb01nding a contiguous chunk of on-disk fre e space\nwhen allocating a \ufb01le. Thus, extent-based \ufb01le systems often allow for\nmore than one extent, thus giving more freedom to the \ufb01le syst em during\n\ufb01le allocation.\nIn comparing the two approaches, pointer-based approaches are the most\n\ufb02exible but use a large amount of metadata per \ufb01le (particula rly for large\n\ufb01les). Extent-based approaches are less \ufb02exible but more co mpact; in par-\nticular , they work well when there is enough free space on the disk and\n\ufb01les can be laid out contiguously (which is the goal for virtu ally any \ufb01le\nallocation policy anyhow).\nNot surprisingly , in such an approach, you might want to supp ort\neven larger \ufb01les. T o do so, just add another pointer to the ino de: the dou-\nble indirect pointer . This pointer refers to a block that contains pointers\nto indirect blocks, each of which contain pointers to data bl ocks. A dou-\nble indirect block thus adds the possibility to grow \ufb01les wit h an additional\n1024 \u00b71024 or 1-million 4KB blocks, in other words supporting \ufb01les that\nare over 4GB in size. Y ou may want even more, though, and we bet you\nknow where this is headed: the triple indirect pointer .\nOverall, this imbalanced tree is referred to as the multi-level index ap-\nproach to pointing to \ufb01le blocks. Let\u2019s examine an example wi th twelve\ndirect pointers, as well as both a single and a double indirec t block. As-\nsuming a block size of 4 KB, and 4-byte pointers, this structu re can accom-\nmodate a \ufb01le of just over 4 GB in size (i.e., (12 + 1024 + 10242 ) \u00d7 4 KB ).\nCan you \ufb01gure out how big of a \ufb01le can be handled with the additi on of\na triple-indirect block? (hint: pretty big)\nMany \ufb01le systems use a multi-level index, including commonl y-used\n\ufb01le systems such as Linux ext2 [P09"
  },
  {
    "content": "le of just over 4 GB in size (i.e., (12 + 1024 + 10242 ) \u00d7 4 KB ).\nCan you \ufb01gure out how big of a \ufb01le can be handled with the additi on of\na triple-indirect block? (hint: pretty big)\nMany \ufb01le systems use a multi-level index, including commonl y-used\n\ufb01le systems such as Linux ext2 [P09] and ext3, NetApp\u2019s W AFL, as well as\nthe original U N I X \ufb01le system. Other \ufb01le systems, including SGI XFS and\nLinux ext4, use extents instead of simple pointers; see the earlier aside for\ndetails on how extent-based schemes work (they are akin to se gments in\nthe discussion of virtual memory).\nY ou might be wondering: why use an imbalanced tree like this? Why\nnot a different approach? W ell, as it turns out, many researc hers have\nstudied \ufb01le systems and how they are used, and virtually ever y time they\n\ufb01nd certain \u201ctruths\u201d that hold across the decades. One such \ufb01 nding is\nthat most \ufb01les are small . This imbalanced design re\ufb02ects such a reality; if\nmost \ufb01les are indeed small, it makes sense to optimize for thi s case. Thus,\nwith a small number of direct pointers (12 is a typical number ), an inode\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n468 FI L E SY S T E M IM P L E M E N TAT IO N\nAS I D E : LI N K E D -B A S ED AP P R O A C H E S\nAnother simpler approach in designing inodes is to use a linked list .\nThus, inside an inode, instead of having multiple pointers, you just need\none, to point to the \ufb01rst block of the \ufb01le. T o handle larger \ufb01le s, add an-\nother pointer at the end of that data block, and so on, and thus you can\nsupport large \ufb01les.\nAs you might have guessed, linked \ufb01le allocation performs po orly for\nsome workloads; think about reading the last block of a \ufb01le, f or example,\nor just doing random access. Thus, to make linked allocation work better ,\nsome systems will keep an in-memory table of link informatio n, instead\nof storing the next pointers with the data blocks themselves . The table\nis indexed by the address of a data block D; the content of an entry is\nsimply D\u2019s next pointer , i.e., the address of the next block in a \ufb01le wh ich\nfollows D. A null-value could be there too (indicating an end-of-\ufb01le) , or\nsome other marker to indicate that a particular block is free . Having such\na table of next pointers makes it so that a linked allocation s cheme can\neffectively do random \ufb01le accesses, simply by \ufb01rst scanning through the\n(in memory) table to \ufb01nd the desired block, and then accessin g (on disk)\nit directly .\nDoes such a table sound familiar? What we have described is th e basic\nstructure of what is known as the \ufb01le allocation table , or FA T\ufb01le system.\nY es, this classic old Windows \ufb01le system, before NTFS [C94], is based on a\nsimple linked-based allocation scheme. There are other dif ferences from\na standard U N I X \ufb01le system too; for example, there are no inodes per se,\nbut rather directory entries which store metadata about a \ufb01l e and refer\ndirectly to the \ufb01rst block of said \ufb01le, which makes creating h ard links\nimpossible. See Brouwer [B02] for more of the inelegant deta ils.\ncan directly point to 48 KB of data, needing one (or more) indi rect blocks\nfor larger \ufb01les. See Agrawal et. al [A+07] for a recent study; T able\n40.2\nsummarizes those results.\nOf course, in the space of inode design, many other possibili"
  },
  {
    "content": "\nimpossible. See Brouwer [B02] for more of the inelegant deta ils.\ncan directly point to 48 KB of data, needing one (or more) indi rect blocks\nfor larger \ufb01les. See Agrawal et. al [A+07] for a recent study; T able\n40.2\nsummarizes those results.\nOf course, in the space of inode design, many other possibili ties ex-\nist; after all, the inode is just a data structure, and any dat a structure that\nstores the relevant information, and can query it effective ly , is suf\ufb01cient.\nAs \ufb01le system software is readily changed, you should be will ing to ex-\nplore different designs should workloads or technologies c hange.\nMost \ufb01les are small Roughly 2K is the most common size\nA verage \ufb01le size is growing Almost 200K is the average\nMost bytes are stored in large \ufb01les A few big \ufb01les use most of the space\nFile systems contains lots of \ufb01les Almost 100K on average\nFile systems are roughly half full Even as disks grow , \ufb01le systems remain \u02dc50% full\nDirectories are typically small Many have few entries; most have 20 or fewer\nT able 40.2: File System Measurement Summary\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nFI L E SY S T E M IM P L E M E N TATI O N 469\n40.4 Directory Organization\nIn vsfs (as in many \ufb01le systems), directories have a simple or ganiza-\ntion; a directory basically just contains a list of (entry na me, inode num-\nber) pairs. For each \ufb01le or directory in a given directory , th ere is a string\nand a number in the data block(s) of the directory . For each st ring, there\nmay also be a length (assuming variable-sized names).\nFor example, assume a directory dir (inode number 5) has three \ufb01les\nin it ( foo, bar, and foobar), and their inode numbers are 12, 13, and 24\nrespectively . The on-disk data for dir might look like this:\ninum | reclen | strlen | name\n5 4 2 .\n2 4 3 ..\n12 4 4 foo\n13 4 4 bar\n24 8 7 foobar\nIn this example, each entry has an inode number , record lengt h (the\ntotal bytes for the name plus any left over space), string len gth (the actual\nlength of the name), and \ufb01nally the name of the entry . Note tha t each di-\nrectory has two extra entries, . \u201cdot\u201d and .. \u201cdot-dot\u201d; the dot directory\nis just the current directory (in this example, dir), whereas dot-dot is the\nparent directory (in this case, the root).\nDeleting a \ufb01le (e.g., calling unlink()) can leave an empty space in\nthe middle of the directory , and hence there should be some wa y to mark\nthat as well (e.g., with a reserved inode number such as zero) . Such a\ndelete is one reason the record length is used: a new entry may reuse an\nold, bigger entry and thus have extra space within.\nY ou might be wondering where exactly directories are stored . Often,\n\ufb01le systems treat directories as a special type of \ufb01le. Thus, a directory has\nan inode, somewhere in the inode table (with the type \ufb01eld of t he inode\nmarked as \u201cdirectory\u201d instead of \u201cregular \ufb01le\u201d). The direct ory has data\nblocks pointed to by the inode (and perhaps, indirect blocks ); these data\nblocks live in the data block region of our simple \ufb01le system. Our on-disk\nstructure thus remains unchanged.\nW e should also note again that this simple linear list of dire ctory en-\ntries is not the only way to store such information. As before , any data\nstructure is possible. For example, XFS [S+96] stores direc tories in B-tree\nform, making \ufb01le create operations (which have to ensure tha t a \ufb01le name"
  },
  {
    "content": "\ufffdle system. Our on-disk\nstructure thus remains unchanged.\nW e should also note again that this simple linear list of dire ctory en-\ntries is not the only way to store such information. As before , any data\nstructure is possible. For example, XFS [S+96] stores direc tories in B-tree\nform, making \ufb01le create operations (which have to ensure tha t a \ufb01le name\nhas not been used before creating it) faster than systems wit h simple lists\nthat must be scanned in their entirety .\n40.5 Free Space Management\nA \ufb01le system must track which inodes and data blocks are free, and\nwhich are not, so that when a new \ufb01le or directory is allocated , it can \ufb01nd\nspace for it. Thus free space management is important for all \ufb01le systems.\nIn vsfs, we have two simple bitmaps for this task.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n470 FI L E SY S T E M IM P L E M E N TAT IO N\nAS I D E : FR E E SPA C E MA N A G E M E N T\nThere are many ways to manage free space; bitmaps are just one way .\nSome early \ufb01le systems used free lists , where a single pointer in the super\nblock was kept to point to the \ufb01rst free block; inside that blo ck the next\nfree pointer was kept, thus forming a list through the free bl ocks of the\nsystem. When a block was needed, the head block was used and th e list\nupdated accordingly .\nModern \ufb01le systems use more sophisticated data structures. For example,\nSGI\u2019s XFS [S+96] uses some form of a B-tree to compactly represent which\nchunks of the disk are free. As with any data structure, diffe rent time-\nspace trade-offs are possible.\nFor example, when we create a \ufb01le, we will have to allocate an i node\nfor that \ufb01le. The \ufb01le system will thus search through the bitm ap for an in-\node that is free, and allocate it to the \ufb01le; the \ufb01le system wil l have to mark\nthe inode as used (with a 1) and eventually update the on-disk bitmap\nwith the correct information. A similar set of activities ta ke place when a\ndata block is allocated.\nSome other considerations might also come into play when all ocating\ndata blocks for a new \ufb01le. For example, some Linux \ufb01le systems , such\nas ext2 and ext3, will look for a sequence of blocks (say 8) tha t are free\nwhen a new \ufb01le is created and needs data blocks; by \ufb01nding such a se-\nquence of free blocks, and then allocating them to the newly- created \ufb01le,\nthe \ufb01le system guarantees that a portion of the \ufb01le will be on t he disk and\ncontiguous, thus improving performance. Such a pre-allocation policy is\nthus a commonly-used heuristic when allocating space for da ta blocks.\n40.6 Access Paths: Reading and W riting\nNow that we have some idea of how \ufb01les and directories are stor ed on\ndisk, we should be able to follow the \ufb02ow of operation during t he activity\nof reading or writing a \ufb01le. Understanding what happens on th is access\npath is thus the second key in developing an understanding of how a \ufb01le\nsystem works; pay attention!\nFor the following examples, let us assume that the \ufb01le system has been\nmounted and thus that the superblock is already in memory . Ev erything\nelse (i.e., inodes, directories) is still on the disk.\nReading A File From Disk\nIn this simple example, let us \ufb01rst assume that you want to sim ply open\na \ufb01le (e.g., /foo/bar, read it, and then close it. For this simple example,\nlet\u2019s assume the \ufb01le is just 4KB in size (i.e., 1 block).\nWhen you issue an open(\"/foo/bar\", O\nRDONLY) call, the \ufb01le sys-\ntem \ufb01r"
  },
  {
    "content": " \ufb01rst assume that you want to sim ply open\na \ufb01le (e.g., /foo/bar, read it, and then close it. For this simple example,\nlet\u2019s assume the \ufb01le is just 4KB in size (i.e., 1 block).\nWhen you issue an open(\"/foo/bar\", O\nRDONLY) call, the \ufb01le sys-\ntem \ufb01rst needs to \ufb01nd the inode for the \ufb01le bar, to obtain some basic in-\nformation about the \ufb01le (permissions information, \ufb01le size , etc.). T o do so,\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nFI L E SY S T E M IM P L E M E N TATI O N 471\ndata inode root foo bar root foo bar bar bar\nbitmap bitmap inode inode inode data data data[0] data[1] da ta[1]\nread\nread\nopen(bar) read\nread\nread\nread\nread() read\nwrite\nread\nread() read\nwrite\nread\nread() read\nwrite\nT able 40.3: File Read Timeline (Time Increasing Downward)\nthe \ufb01le system must be able to \ufb01nd the inode, but all it has righ t now is\nthe full pathname. The \ufb01le system must traverse the pathname and thus\nlocate the desired inode.\nAll traversals begin at the root of the \ufb01le system, in the root directory\nwhich is simply called /. Thus, the \ufb01rst thing the FS will read from disk\nis the inode of the root directory . But where is this inode? T o \ufb01nd an\ninode, we must know its i-number . Usually , we \ufb01nd the i-numbe r of a \ufb01le\nor directory in its parent directory; the root has no parent ( by de\ufb01nition).\nThus, the root inode number must be \u201cwell known\u201d; the FS must k now\nwhat it is when the \ufb01le system is mounted. In most U N I X \ufb01le systems,\nthe root inode number is 2. Thus, to begin the process, the FS r eads in the\nblock that contains inode number 2 (the \ufb01rst inode block).\nOnce the inode is read in, the FS can look inside of it to \ufb01nd poi nters to\ndata blocks, which contain the contents of the root director y . The FS will\nthus use these on-disk pointers to read through the director y , in this case\nlooking for an entry for foo. By reading in one or more directory data\nblocks, it will \ufb01nd the entry for foo; once found, the FS will a lso have\nfound the inode number of foo (say it is 44) which it will need next.\nThe next step is to recursively traverse the pathname until t he desired\ninode is found. In this example, the FS would next read the blo ck contain-\ning the inode of foo and then read in its directory data, \ufb01nally \ufb01nding the\ninode number of bar. The \ufb01nal step of open(), then, is to read its inode\ninto memory; the FS can then do a \ufb01nal permissions check, allo cate a \ufb01le\ndescriptor for this process in the per-process open-\ufb01le tab le, and return it\nto the user .\nOnce open, the program can then issue a read() system call to read\nfrom the \ufb01le. The \ufb01rst read (at offset 0 unless lseek() has been called)\nwill thus read in the \ufb01rst block of the \ufb01le, consulting the ino de to \ufb01nd\nthe location of such a block; it may also update the inode with a new last-\naccessed time. The read will further update the in-memory op en \ufb01le table\nfor this \ufb01le descriptor , updating the \ufb01le offset such that th e next read will\nread the second \ufb01le block, etc.\nc\u20dd 2014, A R PA C I-D U S"
  },
  {
    "content": " ino de to \ufb01nd\nthe location of such a block; it may also update the inode with a new last-\naccessed time. The read will further update the in-memory op en \ufb01le table\nfor this \ufb01le descriptor , updating the \ufb01le offset such that th e next read will\nread the second \ufb01le block, etc.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n472 FI L E SY S T E M IM P L E M E N TAT IO N\nAS I D E : RE A D S DO N \u2019 T AC C E S S AL L O C AT I O N ST R U C T U R E S\nW e\u2019ve seen many students get confused by allocation structu res such\nas bitmaps. In particular , many often think that when you are simply\nreading a \ufb01le, and not allocating any new blocks, that the bit map will still\nbe consulted. This is not true! Allocation structures, such as bitmaps,\nare only accessed when allocation is needed. The inodes, dir ectories, and\nindirect blocks have all the information they need to comple te a read re-\nquest; there is no need to make sure a block is allocated when t he inode\nalready points to it.\nAt some point, the \ufb01le will be closed. There is much less work t o be\ndone here; clearly , the \ufb01le descriptor should be deallocate d, but for now ,\nthat is all the FS really needs to do. No disk I/Os take place.\nA depiction of this entire process is found in Figure 40.3 (time increases\ndownward). In the \ufb01gure, the open causes numerous reads to ta ke place\nin order to \ufb01nally locate the inode of the \ufb01le. Afterwards, re ading each\nblock requires the \ufb01le system to \ufb01rst consult the inode, then read the\nblock, and then update the inode\u2019s last-accessed-time \ufb01eld with a write.\nSpend some time and try to understand what is going on.\nAlso note that the amount of I/O generated by the open is propo r-\ntional to the length of the pathname. For each additional dir ectory in the\npath, we have to read its inode as well as its data. Making this worse\nwould be the presence of large directories; here, we only hav e to read one\nblock to get the contents of a directory , whereas with a large directory , we\nmight have to read many data blocks to \ufb01nd the desired entry . Y es, life\ncan get pretty bad when reading a \ufb01le; as you\u2019re about to \ufb01nd ou t, writing\nout a \ufb01le (and especially , creating a new one) is even worse.\nW riting to Disk\nW riting to a \ufb01le is a similar process. First, the \ufb01le must be op ened (as\nabove). Then, the application can issue write() calls to update the \ufb01le\nwith new contents. Finally , the \ufb01le is closed.\nUnlike reading, writing to the \ufb01le may also allocate a block (unless\nthe block is being overwritten, for example). When writing o ut a new\n\ufb01le, each write not only has to write data to disk but has to \ufb01rs t decide\nwhich block to allocate to the \ufb01le and thus update other struc tures of the\ndisk accordingly (e.g., the data bitmap). Thus, each write t o a \ufb01le logically\ngenerates three I/Os: one to read the data bitmap, which is th en updated\nto mark the newly-allocated block as used, one to write the bi tmap (to\nre\ufb02ect its new state to disk), and one to write the actual bloc k itself.\nThe amount of write traf\ufb01c is even worse when one considers a s im-\nple and common operation such as \ufb01le creation. T o create a \ufb01le , the \ufb01le\nsystem must not only allocate an inode, but also allocate spa ce within\nthe directory containing the new \ufb01le. The total amount of I/O traf\ufb01c to\ndo so is quite high"
  },
  {
    "content": " actual bloc k itself.\nThe amount of write traf\ufb01c is even worse when one considers a s im-\nple and common operation such as \ufb01le creation. T o create a \ufb01le , the \ufb01le\nsystem must not only allocate an inode, but also allocate spa ce within\nthe directory containing the new \ufb01le. The total amount of I/O traf\ufb01c to\ndo so is quite high: one read to the inode bitmap (to \ufb01nd a free i node),\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nFI L E SY S T E M IM P L E M E N TATI O N 473\ndata inode root foo bar root foo bar bar bar\nbitmap bitmap inode inode inode data data data[0] data[1] da ta[1]\nread\nread\nread\nread\ncreate read\n(/foo/bar) write\nwrite\nread\nwrite\nwrite\nread\nread\nwrite() write\nwrite\nwrite\nread\nread\nwrite() write\nwrite\nwrite\nread\nread\nwrite() write\nwrite\nwrite\nT able 40.4: File Creation Timeline (Time Increasing Downward)\none write to the inode bitmap (to mark it allocated), one writ e to the new\ninode itself (to initialize it), one to the data of the direct ory (to link the\nhigh-level name of the \ufb01le to its inode number), and one read a nd write\nto the directory inode to update it. If the directory needs to grow to ac-\ncommodate the new entry , additional I/Os (i.e., to the data b itmap, and\nthe new directory block) will be needed too. All that just to c reate a \ufb01le!\nLet\u2019s look at a speci\ufb01c example, where the \ufb01le /foo/bar is created,\nand three blocks are written to it. Figure 40.4 shows what happens during\nthe open() (which creates the \ufb01le) and during each of three 4KB writes.\nIn the \ufb01gure, reads and writes to the disk are grouped under wh ich\nsystem call caused them to occur , and the rough ordering they might take\nplace in goes from top to bottom of the \ufb01gure. Y ou can see how mu ch\nwork it is to create the \ufb01le: 10 I/Os in this case, to walk the pa thname\nand then \ufb01nally create the \ufb01le. Y ou can also see that each allo cating write\ncosts 5 I/Os: a pair to read and update the inode, another pair to read\nand update the data bitmap, and then \ufb01nally the write of the da ta itself.\nHow can a \ufb01le system accomplish any of this with reasonable ef \ufb01ciency?\nTH E CR U X : H O W TO RE D U C E FI L E SY S T E M I/O C O S T S\nEven the simplest of operations like opening, reading, or wr iting a \ufb01le\nincurs a huge number of I/O operations, scattered over the di sk. What\ncan a \ufb01le system do to reduce the high costs of doing so many I/O s?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n474 FI L E SY S T E M IM P L E M E N TAT IO N\n40.7 Caching and Buffering\nAs the examples above show , reading and writing \ufb01les can be ex pen-\nsive, incurring many I/Os to the (slow) disk. T o remedy what w ould\nclearly be a huge performance problem, most \ufb01le systems aggr essively\nuse system memory (DRAM) to cache important blocks.\nImagine the open example above: without caching, every \ufb01le o pen\nwould require at least two reads for every level in the direct ory hierarchy\n(one to read the inode of the directory in question, and at lea st one to read\nits data). With a long pathname (e.g., /1/2/3/ ... /100/"
  },
  {
    "content": "\ufffdle systems aggr essively\nuse system memory (DRAM) to cache important blocks.\nImagine the open example above: without caching, every \ufb01le o pen\nwould require at least two reads for every level in the direct ory hierarchy\n(one to read the inode of the directory in question, and at lea st one to read\nits data). With a long pathname (e.g., /1/2/3/ ... /100/\ufb01le. txt), the \ufb01le\nsystem would literally perform hundreds of reads just to ope n the \ufb01le!\nEarly \ufb01le systems thus introduced a \ufb01x-sized cache to hold popular\nblocks. As in our discussion of virtual memory , strategies s uch as LRU\nand different variants would decide which blocks to keep in c ache. This\n\ufb01x-sized cache would usually be allocated at boot time to be r oughly 10%\nof total memory . Modern systems integrate virtual memory pa ges and \ufb01le\nsystem pages into a uni\ufb01ed page cache [S00]. In this way , memory can be\nallocated more \ufb02exibly across virtual memory and \ufb01le system , depending\non which needs more memory at a given time.\nNow imagine the \ufb01le open example with caching. The \ufb01rst open m ay\ngenerate a lot of I/O traf\ufb01c to read in directory inode and dat a, but sub-\nsequent \ufb01le opens of that same \ufb01le (or \ufb01les in the same directo ry) will\nmostly hit in the cache and thus no I/O is needed.\nLet us also consider the effect of caching on writes. Whereas read I/O\ncan be avoided altogether with a suf\ufb01ciently large cache, wr ite traf\ufb01c has\nto go to disk in order to become persistent. Thus, a cache does not serve\nas the same kind of \ufb01lter on write traf\ufb01c that it does for reads . That said,\nwrite buffering (as it is sometimes called) certainly has a number of per-\nformance bene\ufb01ts. First, by delaying writes, the \ufb01le system can batch\nsome updates into a smaller set of I/Os; for example, if an ino de bitmap\nis updated when one \ufb01le is created and then updated moments la ter as\nanother \ufb01le is created, the \ufb01le system saves an I/O by delayin g the write\nafter the \ufb01rst update. Second, by buffering a number of write s in memory ,\nthe system can then schedule the subsequent I/Os and thus increase per-\nformance. Finally , some writes are avoided altogether by de laying them;\nfor example, if an application creates a \ufb01le and then deletes it, delaying\nthe writes to re\ufb02ect the \ufb01le creation to disk avoids them entirely . In this\ncase, laziness (in writing blocks to disk) is a virtue.\nFor the reasons above, most modern \ufb01le systems buffer writes in mem-\nory for anywhere between \ufb01ve and thirty seconds, representi ng yet an-\nother trade-off: if the system crashes before the updates ha ve been prop-\nagated to disk, the updates are lost; however , by keeping wri tes in mem-\nory longer , performance can be improved by batching, schedu ling, and\neven avoiding writes.\nSome applications (such as databases) don\u2019t enjoy this trad e-off. Thus,\nto avoid unexpected data loss due to write buffering, they si mply force\nwrites to disk, by calling fsync(), by using direct I/O interfaces that\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nFI L E SY S T E M IM P L E M E N TATI O N 475\nwork around the cache, or by using the raw disk interface and avoiding\nthe \ufb01le system altogether 1 . While most applications live with the trade-\noffs made by the \ufb01le system, there are enough controls in plac e to get the\nsystem to do what you want it to, should the default not be sati sfying.\n40.8 Summary\nW e have seen the basic machinery required in building a \ufb01le"
  },
  {
    "content": "I O N 475\nwork around the cache, or by using the raw disk interface and avoiding\nthe \ufb01le system altogether 1 . While most applications live with the trade-\noffs made by the \ufb01le system, there are enough controls in plac e to get the\nsystem to do what you want it to, should the default not be sati sfying.\n40.8 Summary\nW e have seen the basic machinery required in building a \ufb01le sy stem.\nThere needs to be some information about each \ufb01le (metadata) , usually\nstored in a structure called an inode. Directories are just a speci\ufb01c type\nof \ufb01le that store name \u2192inode-number mappings. And other structures\nare needed too; for example, \ufb01le systems often use a structur e such as a\nbitmap to track which inodes or data blocks are free or alloca ted.\nThe terri\ufb01c aspect of \ufb01le system design is its freedom; the \ufb01l e systems\nwe explore in the coming chapters each take advantage of this freedom\nto optimize some aspect of the \ufb01le system. There are also clea rly many\npolicy decisions we have left unexplored. For example, when a new \ufb01le\nis created, where should it be placed on disk? This policy and others will\nalso be the subject of future chapters. Or will they?\n1 T ake a database class to learn more about old-school databas es and their former insis-\ntence on avoiding the OS and controlling everything themsel ves. But watch out! Those\ndatabase types are always trying to bad mouth the OS. Shame on you, database people. Shame.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n476 FI L E SY S T E M IM P L E M E N TAT IO N\nReferences\n[A+07] Nitin Agrawal, William J. Bolosky , John R. Douceur , J acob R. Lorch\nA Five-Y ear Study of File-System Metadata\nF AST \u201907, pages 31\u201345, February 2007, San Jose, CA\nAn excellent recent analysis of how \ufb01le systems are actually used. Use the bibliography within to follow\nthe trail of \ufb01le-system analysis papers back to the early 198 0s.\n[B07] \u201cZFS: The Last W ord in File Systems\u201d\nJeff Bonwick and Bill Moore\nA vailable: http://opensolaris.org/os/community/zfs/d ocs/zfs\nlast.pdf\nOne of the most recent important \ufb01le systems, full of feature s and awesomeness. We should have a\nchapter on it, and perhaps soon will.\n[B02] \u201cThe F A T File System\u201d\nAndries Brouwer\nSeptember , 2002\nA vailable: http://www .win.tue.nl/\u02dcaeb/linux/fs/fat/fat.html\nA nice clean description of F AT . The \ufb01le system kind, not the b acon kind. Though you have to admit,\nbacon fat probably tastes better .\n[C94] \u201cInside the Windows NT File System\u201d\nHelen Custer\nMicrosoft Press, 1994\nA short book about NTFS; there are probably ones with more tec hnical details elsewhere.\n[H+88] \u201cScale and Performance in a Distributed File System\u201d\nJohn H. Howard, Michael L. Kazar , Sherri G. Menees, David A. N ichols, M. Satyanarayanan,\nRobert N. Sidebotham, Michael J. W est.\nACM T ransactions on Computing Systems (ACM TOCS), page 51-8 1, V olume 6, Number 1,\nFebruary 1988\nA classic distributed \ufb01le system; we\u2019ll be learning more abo ut it later , don\u2019t worry.\n[P09] \u201cThe Second Extended File System: Internal Layout\u201d\nDave Poirier , 2009\nA vailable: http://www .nongnu.org/ext2-doc/ext2.html\nSome details on ext2, a very simple Linux \ufb01le system based on F FS, the Berkeley Fast File System. We\u2019ll\nbe reading about it in the next chapter ."
  },
  {
    "content": "o ut it later , don\u2019t worry.\n[P09] \u201cThe Second Extended File System: Internal Layout\u201d\nDave Poirier , 2009\nA vailable: http://www .nongnu.org/ext2-doc/ext2.html\nSome details on ext2, a very simple Linux \ufb01le system based on F FS, the Berkeley Fast File System. We\u2019ll\nbe reading about it in the next chapter .\n[RT74] \u201cThe U NIX Time-Sharing System\u201d\nM. Ritchie and K. Thompson\nCACM, V olume 17:7, pages 365-375, 1974\nThe original paper about UNIX . Read it to see the underpinnings of much of modern operating systems.\n[S00] \u201cUBC: An Ef\ufb01cient Uni\ufb01ed I/O and Memory Caching Subsys tem for NetBSD\u201d\nChuck Silvers\nFREENIX, 2000\nA nice paper about NetBSD\u2019s integration of \ufb01le-system buffe r caching and the virtual-memory page\ncache. Many other systems do the same type of thing.\n[S+96] \u201cScalability in the XFS File System\u201d\nAdan Sweeney , Doug Doucette, W ei Hu, Curtis Anderson,\nMike Nishimoto, Geoff Peck\nUSENIX \u201996, January 1996, San Diego, CA\nThe \ufb01rst attempt to make scalability of operations, includi ng things like having millions of \ufb01les in a\ndirectory, a central focus. A great example of pushing an ide a to the extreme. The key idea behind this\n\ufb01le system: everything is a tree. We should have a chapter on t his \ufb01le system too.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nFI L E SY S T E M IM P L E M E N TATI O N 477\nHomework\nUse this tool, vsfs.py, to study how \ufb01le system state changes as var-\nious operations take place. The \ufb01le system begins in an empty state, with\njust a root directory . As the simulation takes place, variou s operations are\nperformed, thus slowly changing the on-disk state of the \ufb01le system. See\nthe README for details.\nQuestions\n1. Run the simulator with some different random seeds (say 17 , 18, 19,\n20), and see if you can \ufb01gure out which operations must have ta ken\nplace between each state change.\n2. Now do the same, using different random seeds (say 21, 22, 2 3,\n24), except run with the -r \ufb02ag, thus making you guess the state\nchange while being shown the operation. What can you conclud e\nabout the inode and data-block allocation algorithms, in te rms of\nwhich blocks they prefer to allocate?\n3. Now reduce the number of data blocks in the \ufb01le system, to ve ry\nlow numbers (say two), and run the simulator for a hundred or s o\nrequests. What types of \ufb01les end up in the \ufb01le system in this hi ghly-\nconstrained layout? What types of operations would fail?\n4. Now do the same, but with inodes. With very few inodes, what\ntypes of operations can succeed? Which will usually fail? Wh at is\nthe \ufb01nal state of the \ufb01le system likely to be?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n41\nLocality and The Fast File System\nWhen the U N I X operating system was \ufb01rst introduced, the U N I X wizard\nhimself Ken Thompson wrote the \ufb01rst \ufb01le system. W e will call t hat the\n\u201cold U N I X \ufb01le system\u201d, and it was really simple. Basically , its data st ruc-\ntures looked like this on the disk:\nS Inodes Data\nThe super block (S) contained information about the entire \ufb01 le system:\nhow big the volume is, how many inodes there are, a pointer to t he head\nof a free list of blocks, and so forth."
  },
  {
    "content": " will call t hat the\n\u201cold U N I X \ufb01le system\u201d, and it was really simple. Basically , its data st ruc-\ntures looked like this on the disk:\nS Inodes Data\nThe super block (S) contained information about the entire \ufb01 le system:\nhow big the volume is, how many inodes there are, a pointer to t he head\nof a free list of blocks, and so forth. The inode region of the d isk contained\nall the inodes for the \ufb01le system. Finally , most of the disk wa s taken up\nby data blocks.\nThe good thing about the old \ufb01le system was that it was simple, and\nsupported the basic abstractions the \ufb01le system was trying t o deliver:\n\ufb01les and the directory hierarchy . This easy-to-use system w as a real step\nforward from the clumsy , record-based storage systems of th e past, and\nthe directory hierarchy a true advance over simpler , one-le vel hierarchies\nprovided by earlier systems.\n41.1 The Problem: Poor Performance\nThe problem: performance was terrible. As measured by Kirk M cKu-\nsick and his colleagues at Berkeley [MJLF84], performance s tarted off bad\nand got worse over time, to the point where the \ufb01le system was d elivering\nonly 2% of overall disk bandwidth!\nThe main issue was that the old U N I X \ufb01le system treated the disk like it\nwas a random-access memory; data was spread all over the plac e without\nregard to the fact that the medium holding the data was a disk, and thus\nhad real and expensive positioning costs. For example, the d ata blocks of\na \ufb01le were often very far away from its inode, thus inducing an expensive\nseek whenever one \ufb01rst read the inode and then the data blocks of a \ufb01le\n(a pretty common operation).\n479\n480 LO C A L I T Y A N D TH E FA S T FI L E SY S T E M\nW orse, the \ufb01le system would end up getting quite fragmented, as the\nfree space was not carefully managed. The free list would end up point-\ning to a bunch of blocks spread across the disk, and as \ufb01les got allocated,\nthey would simply take the next free block. The result was tha t a logi-\ncally contiguous \ufb01le would be accessed by going back and fort h across\nthe disk, thus reducing performance dramatically .\nFor example, imagine the following data block region, which contains\nfour \ufb01les (A, B, C, and D), each of size 2 blocks:\nA1 A2 B1 B2 C1 C2 D1 D2\nIf B and D are deleted, the resulting layout is:\nA1 A2 C1 C2\nAs you can see, the free space is fragmented into two chunks of two\nblocks, instead of one nice contiguous chunk of four . Let\u2019s s ay we now\nwish to allocate a \ufb01le E, of size four blocks:\nA1 A2 E1 E2 C1 C2 E3 E4\nY ou can see what happens: E gets spread across the disk, and as a\nresult, when accessing E, you don\u2019t get peak (sequential) pe rformance\nfrom the disk. Rather , you \ufb01rst read E1 and E2, then seek, then read E3\nand E4. This fragmentation problem happened all the time in t he old\nUN I X \ufb01le system, and it hurt performance. (A side note: this probl em is\nexactly what disk defragmentation tools help with; they wil l reorganize\non-disk data to place \ufb01les contiguously and make free space o ne or a few\ncontiguous regions, moving data around and then rewriting i nodes and\nsuch to re\ufb02ect the changes)\nOne other problem: the original block size was too small (512 bytes).\nThus, transferring data from the disk was inherently inef\ufb01c ient. Smaller\nblocks were good because they minimized internal fragmentation (waste\nwithin the block), but bad for transfer as each block might re quire a posi-\ntioning overhead to reach it. W e can summarize the problem as follows:\nTH E CR U X :\nHO W TO OR G A N I Z E ON -D I S K DATA TO IM P R O V"
  },
  {
    "content": "Thus, transferring data from the disk was inherently inef\ufb01c ient. Smaller\nblocks were good because they minimized internal fragmentation (waste\nwithin the block), but bad for transfer as each block might re quire a posi-\ntioning overhead to reach it. W e can summarize the problem as follows:\nTH E CR U X :\nHO W TO OR G A N I Z E ON -D I S K DATA TO IM P R O V E PE R F O R M A N C E\nHow can we organize \ufb01le system data structures so as to improv e per-\nformance? What types of allocation policies do we need on top of those\ndata structures? How do we make the \ufb01le system \u201cdisk aware\u201d?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C A L I T Y A N D TH E FA S T FI L E SY S T E M 481\n41.2 FFS: Disk A wareness Is The Solution\nA group at Berkeley decided to build a better , faster \ufb01le syst em, which\nthey cleverly called the Fast File System (FFS) . The idea was to design\nthe \ufb01le system structures and allocation policies to be \u201cdis k aware\u201d and\nthus improve performance, which is exactly what they did. FF S thus ush-\nered in a new era of \ufb01le system research; by keeping the same interface\nto the \ufb01le system (the same APIs, including open(), read(), write(),\nclose(), and other \ufb01le system calls) but changing the internal implemen-\ntation, the authors paved the path for new \ufb01le system construction, work\nthat continues today . Virtually all modern \ufb01le systems adhe re to the ex-\nisting interface (and thus preserve compatibility with app lications) while\nchanging their internals for performance, reliability , or other reasons.\n41.3 Organizing Structure: The Cylinder Group\nThe \ufb01rst step was to change the on-disk structures. FFS divid es the\ndisk into a bunch of groups known as cylinder groups (some modern \ufb01le\nsystems like Linux ext2 and ext3 just call them block groups ). W e can\nthus imagine a disk with ten cylinder groups:\nG0 G1 G2 G3 G4 G5 G6 G7 G8 G9\nThese groups are the central mechanism that FFS uses to impro ve per-\nformance; by placing two \ufb01les within the same group, FFS can e nsure that\naccessing one after the other will not result in long seeks ac ross the disk.\nThus, FFS needs to have the ability to allocate \ufb01les and direc tories\nwithin each of these groups. Each group looks like this:\nS ib db Inodes Data\nW e now describe the components of a cylinder group. A copy of t he\nsuper block (S) is found in each group for reliability reasons (e.g., if o ne\ngets corrupted or scratched, you can still mount and access t he \ufb01le system\nby using one of the others).\nThe inode bitmap (ib) and data bitmap (db) track whether each inode\nor data block is free, respectively . Bitmaps are an excellen t way to manage\nfree space in a \ufb01le system because it is easy to \ufb01nd a large chun k of free\nspace and allocate it to a \ufb01le, perhaps avoiding some of the fr agmentation\nproblems of the free list in the old \ufb01le system.\nFinally , the inode and data block regions are just like in the previous\nvery simple \ufb01le system. Most of each cylinder group, as usual , is com-\nprised of data blocks.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n482 LO C A L I T Y A N D TH E FA S T FI L E SY S T E M\nAS I D E : F F S F I L E CR E AT I O N\nAs an example, think about what data structures must be updat ed when\na \ufb01le is created; assume, for this example, that the user crea tes a new \ufb01le\n/foo/bar.txt and that the"
  },
  {
    "content": " E S\n482 LO C A L I T Y A N D TH E FA S T FI L E SY S T E M\nAS I D E : F F S F I L E CR E AT I O N\nAs an example, think about what data structures must be updat ed when\na \ufb01le is created; assume, for this example, that the user crea tes a new \ufb01le\n/foo/bar.txt and that the \ufb01le is one block long (4KB). The \ufb01le is new ,\nand thus needs a new inode; thus, both the inode bitmap and the newly-\nallocated inode will be written to disk. The \ufb01le also has data in it and\nthus it too must be allocated; the data bitmap and a data block will thus\n(eventually) be written to disk. Hence, at least four writes to the current\ncylinder group will take place (recall that these writes may be buffered\nin memory for a while before the write takes place). But this i s not all!\nIn particular , when creating a new \ufb01le, we must also place the \ufb01le in the\n\ufb01le-system hierarchy; thus, the directory must be updated. Speci\ufb01cally ,\nthe parent directory foo must be updated to add the entry for bar.txt;\nthis update may \ufb01t in an existing data block of foo or require a new block\nto be allocated (with associated data bitmap). The inode of foo must also\nbe updated, both to re\ufb02ect the new length of the directory as w ell as to\nupdate time \ufb01elds (such as last-modi\ufb01ed-time). Overall, it is a lot of work\njust to create a new \ufb01le! Perhaps next time you do so, you shoul d be more\nthankful, or at least surprised that it all works so well.\n41.4 Policies: How T o Allocate Files and Directories\nWith this group structure in place, FFS now has to decide how t o place\n\ufb01les and directories and associated metadata on disk to impr ove perfor-\nmance. The basic mantra is simple: keep related stuff together (and its corol-\nlary , keep unrelated stuff far apart).\nThus, to obey the mantra, FFS has to decide what is \u201crelated\u201d a nd\nplace it within the same block group; conversely , unrelated items should\nbe placed into different block groups. T o achieve this end, F FS makes use\nof a few simple placement heuristics.\nThe \ufb01rst is the placement of directories. FFS employs a simpl e ap-\nproach: \ufb01nd the cylinder group with a low number of allocated directo-\nries (because we want to balance directories across groups) and a high\nnumber of free inodes (because we want to subsequently be abl e to allo-\ncate a bunch of \ufb01les), and put the directory data and inode in t hat group.\nOf course, other heuristics could be used here (e.g., taking into account\nthe number of free data blocks).\nFor \ufb01les, FFS does two things. First, it makes sure (in the gen eral case)\nto allocate the data blocks of a \ufb01le in the same group as its ino de, thus\npreventing long seeks between inode and data (as in the old \ufb01l e sys-\ntem). Second, it places all \ufb01les that are in the same director y in the cylin-\nder group of the directory they are in. Thus, if a user creates four \ufb01les,\n/dir1/1.txt, /dir1/2.txt, /dir1/3.txt, and /dir99/4.txt, FFS\nwould try to place the \ufb01rst three near one another (same group ) and the\nfourth far away (in some other group).\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C A L I T Y A N D TH E FA S T FI L E SY S T E M 483\n0 2 4 6 8 10\n0%\n20%\n40%\n60%\n80%\n100%\nFFS Locality\nPath Difference\nCumulative Frequency\nTrace"
  },
  {
    "content": "\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C A L I T Y A N D TH E FA S T FI L E SY S T E M 483\n0 2 4 6 8 10\n0%\n20%\n40%\n60%\n80%\n100%\nFFS Locality\nPath Difference\nCumulative Frequency\nTrace\nRandom\nFigure 41.1: FFS Locality For SEER T races\nIt should be noted that these heuristics are not based on exte nsive\nstudies of \ufb01le-system traf\ufb01c or anything particularly nuan ced; rather , they\nare based on good old-fashioned common sense (isn\u2019t that wha t CS stands\nfor after all?). Files in a directory are often accessed together (imagine\ncompiling a bunch of \ufb01les and then linking them into a single e xecutable).\nBecause they are, FFS will often improve performance, makin g sure that\nseeks between related \ufb01les are short.\n41.5 Measuring File Locality\nT o understand better whether these heuristics make sense, w e decided\nto analyze some traces of \ufb01le system access and see if indeed t here is\nnamespace locality; for some reason, there doesn\u2019t seem to b e a good\nstudy of this topic in the literature.\nSpeci\ufb01cally , we took the SEER traces [K94] and analyzed how \u201c far\naway\u201d \ufb01le accesses were from one another in the directory tre e. For ex-\nample, if \ufb01le f is opened, and then re-opened next in the trace (before\nany other \ufb01les are opened), the distance between these two op ens in the\ndirectory tree is zero (as they are the same \ufb01le). If a \ufb01le f in directory\ndir (i.e., dir/f) is opened, and followed by an open of \ufb01le g in the same\ndirectory (i.e., dir/g), the distance between the two \ufb01le accesses is one,\nas they share the same directory but are not the same \ufb01le. Our d istance\nmetric, in other words, measures how far up the directory tre e you have\nto travel to \ufb01nd the common ancestor of two \ufb01les; the closer they are in the\ntree, the lower the metric.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n484 LO C A L I T Y A N D TH E FA S T FI L E SY S T E M\nFigure 41.1 shows the locality observed in the SEER traces over all\nworkstations in the SEER cluster over the entirety of all tra ces. The graph\nplots the difference metric along the x-axis, and shows the c umulative\npercentage of \ufb01le opens that were of that difference along th e y-axis.\nSpeci\ufb01cally , for the SEER traces (marked \u201cT race\u201d in the grap h), you can\nsee that about 7% of \ufb01le accesses were to the \ufb01le that was opene d previ-\nously , and that nearly 40% of \ufb01le accesses were to either the s ame \ufb01le or\nto one in the same directory (i.e., a difference of zero or one ). Thus, the\nFFS locality assumption seems to make sense (at least for the se traces).\nInterestingly , another 25% or so of \ufb01le accesses were to \ufb01les that had a\ndistance of two. This type of locality occurs when the user ha s structured\na set of related directories in a multi-level fashion and con sistently jumps\nbetween them. For example, if a user has a src directory and builds\nobject \ufb01les ( .o \ufb01les) into a obj directory , and both of these directories\nare sub-directories of a main proj directory , a common access pattern\nwill be proj/src/foo.c followed by proj/obj/foo.o. The distance\nbetween these two accesses is two, as proj is the common ancestor . FFS\ndoes not capture this type of locality in its policies, and thus more s eeking\nwill"
  },
  {
    "content": "\ufffdles ( .o \ufb01les) into a obj directory , and both of these directories\nare sub-directories of a main proj directory , a common access pattern\nwill be proj/src/foo.c followed by proj/obj/foo.o. The distance\nbetween these two accesses is two, as proj is the common ancestor . FFS\ndoes not capture this type of locality in its policies, and thus more s eeking\nwill occur between such accesses.\nW e also show what locality would be for a \u201cRandom\u201d trace for th e\nsake of comparison. W e generated the random trace by selecti ng \ufb01les\nfrom within an existing SEER trace in random order , and calcu lating the\ndistance metric between these randomly-ordered accesses. As you can\nsee, there is less namespace locality in the random traces, a s expected.\nHowever , because eventually every \ufb01le shares a common ances tor (e.g.,\nthe root), there is some locality eventually , and thus rando m trace is use-\nful as a comparison point.\n41.6 The Large-File Exception\nIn FFS, there is one important exception to the general polic y of \ufb01le\nplacement, and it arises for large \ufb01les. Without a different rule, a large\n\ufb01le would entirely \ufb01ll the block group it is \ufb01rst placed withi n (and maybe\nothers). Filling a block group in this manner is undesirable , as it prevents\nsubsequent \u201crelated\u201d \ufb01les from being placed within this blo ck group, and\nthus may hurt \ufb01le-access locality .\nThus, for large \ufb01les, FFS does the following. After some numb er of\nblocks are allocated into the \ufb01rst block group (e.g., 12 bloc ks, or the num-\nber of direct pointers available within an inode), FFS place s the next \u201clarge\u201d\nchunk of the \ufb01le (e.g., those pointed to by the \ufb01rst indirect b lock) in an-\nother block group (perhaps chosen for its low utilization). Then, the next\nchunk of the \ufb01le is placed in yet another different block grou p, and so on.\nLet\u2019s look at some pictures to understand this policy better . Without\nthe large-\ufb01le exception, a single large \ufb01le would place all o f its blocks into\none part of the disk. W e use a small example of a \ufb01le with 10 bloc ks to\nillustrate the behavior visually .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C A L I T Y A N D TH E FA S T FI L E SY S T E M 485\nHere is the depiction of FFS without the large-\ufb01le exception :\nG0 G1 G2 G3 G4 G5 G6 G7 G8 G9\n0 1 2 3 4\n5 6 7 8 9\nWith the large-\ufb01le exception, we might see something more li ke this, with\nthe \ufb01le spread across the disk in chunks:\nG0 G1 G2 G3 G4 G5 G6 G7 G8 G9\n0 1 2 3 4 5 6 78 9\nThe astute reader will note that spreading blocks of a \ufb01le acr oss the\ndisk will hurt performance, particularly in the relatively common case\nof sequential \ufb01le access (e.g., when a user or application re ads chunks 0\nthrough 9 in order). And you are right! It will. W e can help thi s a little,\nby choosing our chunk size carefully .\nSpeci\ufb01cally , if the chunk size is large enough, we will still spend most\nof our time transferring data from disk and just a relatively little time\nseeking between chunks of the block. This process of reducin g an over-\nhead by doing more work per overhead paid is called amortization and\nis a common technique in computer systems.\nLet\u2019s do an example: assume that the average positioning tim e (i.e.,\nseek and rotation) for a disk is 10 ms. Assume further that the disk trans-\nfers data at 40 MB/s. If our goal was to spend half our time seek ing be-\nt"
  },
  {
    "content": ". This process of reducin g an over-\nhead by doing more work per overhead paid is called amortization and\nis a common technique in computer systems.\nLet\u2019s do an example: assume that the average positioning tim e (i.e.,\nseek and rotation) for a disk is 10 ms. Assume further that the disk trans-\nfers data at 40 MB/s. If our goal was to spend half our time seek ing be-\ntween chunks and half our time transferring data (and thus ac hieve 50%\nof peak disk performance), we would thus need to spend 10 ms tr ansfer-\nring data for every 10 ms positioning. So the question become s: how big\ndoes a chunk have to be in order to spend 10 ms in transfer? Easy , just\nuse our old friend, math, in particular the dimensional anal ysis we spoke\nof in the chapter on disks:\n40 \u0018\u0018M B\n\b\bsec \u00b71024 KB\n1 \u0018\u0018M B \u00b7 1 \b\bsec\n1000 \b\bms \u00b710 \b\bms = 409. 6 KB (41.1)\nBasically , what this equation says is this: if you transfer d ata at 40\nMB/s, you need to transfer only 409.6 KB every time you seek in order to\nspend half your time seeking and half your time transferring . Similarly ,\nyou can compute the size of the chunk you would need to achieve 90%\nof peak bandwidth (turns out it is about 3.69 MB), or even 99% o f peak\nbandwidth (40.6 MB!). As you can see, the closer you want to ge t to peak,\nthe bigger these chunks get (see Figure 41.2 for a plot of these values).\nFFS did not use this type of calculation in order to spread lar ge \ufb01les\nacross groups, however . Instead, it took a simple approach, based on the\nstructure of the inode itself. The \ufb01rst twelve direct blocks were placed\nin the same group as the inode; each subsequent indirect bloc k, and all\nthe blocks it pointed to, was placed in a different group. Wit h a block\nsize of 4-KB, and 32-bit disk addresses, this strategy impli es that every\n1024 blocks of the \ufb01le (4 MB) were placed in separate groups, t he lone\nexception being the \ufb01rst 48-KB of the \ufb01le as pointed to by dire ct pointers.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n486 LO C A L I T Y A N D TH E FA S T FI L E SY S T E M\n0% 25% 50% 75% 100%\n1K\n32K\n1M\n10M\nThe Challenges of Amortization\nPercent Bandwidth (Desired)\nLog(Chunk Size Needed)\n50%, 409.6K\n90%, 3.69M\nFigure 41.2: Amortization: How Big Do Chunks Have T o Be?\nW e should note that the trend in disk drives is that transfer r ate im-\nproves fairly rapidly , as disk manufacturers are good at cra mming more\nbits into the same surface, but the mechanical aspects of dri ves related\nto seeks (disk arm speed and the rate of rotation) improve rat her slowly\n[P98]. The implication is that over time, mechanical costs b ecome rel-\natively more expensive, and thus, to amortize said costs, yo u have to\ntransfer more data between seeks.\n41.7 A Few Other Things About FFS\nFFS introduced a few other innovations too. In particular , t he design-\ners were extremely worried about accommodating small \ufb01les; as it turned\nout, many \ufb01les were 2 KB or so in size back then, and using 4-KB b locks,\nwhile good for transferring data, was not so good for space ef \ufb01ciency .\nThis internal fragmentation could thus lead to roughly half the disk be-\ning wasted for a typical \ufb01le system.\nThe solution the FFS designers hit upon was simple and solved the\nproblem. They decided to introduce sub-blocks, which were 512-byte lit-\ntle blocks that the \ufb01le system could allocate to \ufb01les. Thus, i f you created a\nsmall \ufb01le (say 1 KB in size), it would occupy two sub-blocks an d thus not\nwaste an"
  },
  {
    "content": " disk be-\ning wasted for a typical \ufb01le system.\nThe solution the FFS designers hit upon was simple and solved the\nproblem. They decided to introduce sub-blocks, which were 512-byte lit-\ntle blocks that the \ufb01le system could allocate to \ufb01les. Thus, i f you created a\nsmall \ufb01le (say 1 KB in size), it would occupy two sub-blocks an d thus not\nwaste an entire 4-KB block. As the \ufb01le grew , the \ufb01le system wil l continue\nallocating 512-byte blocks to it until it acquires a full 4-K B of data. At that\npoint, FFS will \ufb01nd a 4-KB block, copy the sub-blocks into it, and free the\nsub-blocks for future use.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C A L I T Y A N D TH E FA S T FI L E SY S T E M 487\n0\n11\n1098\n7\n6\n5\n4 3 2\n1\nSpindle\n0\n11\n5104\n9\n3\n8\n2 7 1\n6\nSpindle\nFigure 41.3: FFS: Standard V ersus Parameterized Placement\nY ou might observe that this process is inef\ufb01cient, requirin g a lot of ex-\ntra work for the \ufb01le system (in particular , a lot of extra I/O t o perform the\ncopy). And you\u2019d be right again! Thus, FFS generally avoided this pes-\nsimal behavior by modifying the libc library; the library would buffer\nwrites and then issue them in 4-KB chunks to the \ufb01le system, th us avoid-\ning the sub-block specialization entirely in most cases.\nA second neat thing that FFS introduced was a disk layout that was\noptimized for performance. In those times (before SCSI and o ther more\nmodern device interfaces), disks were much less sophistica ted and re-\nquired the host CPU to control their operation in a more hands -on way .\nA problem arose in FFS when a \ufb01le was placed on consecutive sec tors of\nthe disk, as on the left in Figure 41.3.\nIn particular , the problem arose during sequential reads. F FS would\n\ufb01rst issue a read to block 0; by the time the read was complete, and FFS\nissued a read to block 1, it was too late: block 1 had rotated un der the\nhead and now the read to block 1 would incur a full rotation.\nFFS solved this problem with a different layout, as you can se e on the\nright in Figure 41.3. By skipping over every other block (in the example),\nFFS has enough time to request the next block before it went pa st the\ndisk head. In fact, FFS was smart enough to \ufb01gure out for a part icular\ndisk how many blocks it should skip in doing layout in order to avoid the\nextra rotations; this technique was called parameterization, as FFS would\n\ufb01gure out the speci\ufb01c performance parameters of the disk and use those\nto decide on the exact staggered layout scheme.\nY ou might be thinking: this scheme isn\u2019t so great after all. I n fact, you\nwill only get 50% of peak bandwidth with this type of layout, b ecause\nyou have to go around each track twice just to read each block o nce. For-\ntunately , modern disks are much smarter: they internally re ad the entire\ntrack in and buffer it in an internal disk cache (often called a track buffer\nfor this very reason). Then, on subsequent reads to the track , the disk will\njust return the desired data from its cache. File systems thu s no longer\nhave to worry about these incredibly low-level details. Abs traction and\nhigher-level interfaces can be a good thing, when designed p roperly .\nSome other usability improvements were added as well. FFS wa s one\nof the \ufb01rst \ufb01le systems to allow for long \ufb01le names , thus enabling more\nexpressive names in the \ufb01le system instead of a the tradition al \ufb01xed-size\napproach (e.g., 8 characters). Further , a new concept was in troduced\nc"
  },
  {
    "content": " be a good thing, when designed p roperly .\nSome other usability improvements were added as well. FFS wa s one\nof the \ufb01rst \ufb01le systems to allow for long \ufb01le names , thus enabling more\nexpressive names in the \ufb01le system instead of a the tradition al \ufb01xed-size\napproach (e.g., 8 characters). Further , a new concept was in troduced\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n488 LO C A L I T Y A N D TH E FA S T FI L E SY S T E M\nTI P : M A K E TH E SY S T E M US A B L E\nProbably the most basic lesson from FFS is that not only did it intro-\nduce the conceptually good idea of disk-aware layout, but it also added\na number of features that simply made the system more usable. Long \ufb01le\nnames, symbolic links, and a rename operation that worked at omically\nall improved the utility of a system; while hard to write a res earch pa-\nper about (imagine trying to read a 14-pager about \u201cThe Symbo lic Link:\nHard Link\u2019s Long Lost Cousin\u201d), such small features made FFS more use-\nful and thus likely increased its chances for adoption. Maki ng a system\nusable is often as or more important than its deep technical i nnovations.\ncalled a symbolic link . As discussed in a previous chapter , hard links are\nlimited in that they both could not point to directories (for fear of intro-\nducing loops in the \ufb01le system hierarchy) and that they can on ly point to\n\ufb01les within the same volume (i.e., the inode number must stil l be mean-\ningful). Symbolic links allow the user to create an \u201calias\u201d t o any other\n\ufb01le or directory on a system and thus are much more \ufb02exible. FF S also\nintroduced an atomic rename() operation for renaming \ufb01les. Usabil-\nity improvements, beyond the basic technology , also likely gained FFS a\nstronger user base.\n41.8 Summary\nThe introduction of FFS was a watershed moment in \ufb01le system h is-\ntory , as it made clear that the problem of \ufb01le management was o ne of the\nmost interesting issues within an operating system, and sho wed how one\nmight begin to deal with that most important of devices, the h ard disk.\nSince that time, hundreds of new \ufb01le systems have developed, but still\ntoday many \ufb01le systems take cues from FFS (e.g., Linux ext2 an d ext3 are\nobvious intellectual descendants). Certainly all modern s ystems account\nfor the main lesson of FFS: treat the disk like it\u2019s a disk.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO C A L I T Y A N D TH E FA S T FI L E SY S T E M 489\nReferences\n[MJLF84] \u201cA Fast File System for U NIX \u201d\nMarshall K. McKusick, William N. Joy , Sam J. Lef\ufb02er , Robert S . Fabry\nACM T ransactions on Computing Systems.\nAugust, 1984. V olume 2, Number 3.\npages 181-197.\nMcKusick was recently honored with the IEEE Reynold B. Johns on award for his contributions to \ufb01le\nsystems, much of which was based on his work building FFS. In h is acceptance speech, he discussed the\noriginal FFS software: only 1200 lines of code! Modern versi ons are a little more complex, e.g., the BSD\nFFS descendant now is in the 50-thousand lines-of-code rang e.\n[P98] \u201cHardware T echnology T rends and Database Opportunit ies\u201d\nDavid A. Patterson\nKeynote Lecture at the ACM SIGMOD Conference (SIGMOD \u201998)\nJune, 1998\nA great and simple overview of disk technology trends and how they change over time.\n[K94] \u201cThe Design of the SEER Predictive Caching System\u201d"
  },
  {
    "content": "-thousand lines-of-code rang e.\n[P98] \u201cHardware T echnology T rends and Database Opportunit ies\u201d\nDavid A. Patterson\nKeynote Lecture at the ACM SIGMOD Conference (SIGMOD \u201998)\nJune, 1998\nA great and simple overview of disk technology trends and how they change over time.\n[K94] \u201cThe Design of the SEER Predictive Caching System\u201d\nG. H. Kuenning\nMOBICOMM \u201994, Santa Cruz, California, December 1994\nAccording to Kuenning, this is the best overview of the SEER p roject, which led to (among other things)\nthe collection of these traces.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n42\nCrash Consistency: FSCK and Journaling\nAs we\u2019ve seen thus far , the \ufb01le system manages a set of data str uctures to\nimplement the expected abstractions: \ufb01les, directories, a nd all of the other\nmetadata needed to support the basic abstraction that we exp ect from a\n\ufb01le system. Unlike most data structures (for example, those found in\nmemory of a running program), \ufb01le system data structures mus t persist,\ni.e., they must survive over the long haul, stored on devices that retain\ndata despite power loss (such as hard disks or \ufb02ash-based SSD s).\nOne major challenge faced by a \ufb01le system is how to update pers is-\ntent data structures despite the presence of a power loss or system crash .\nSpeci\ufb01cally , what happens if, right in the middle of updatin g on-disk\nstructures, someone trips over the power cord and the machin e loses\npower? Or the operating system encounters a bug and crashes? Because\nof power losses and crashes, updating a persistent data stru cture can be\nquite tricky , and leads to a new and interesting problem in \ufb01l e system\nimplementation, known as the crash-consistency problem .\nThis problem is quite simple to understand. Imagine you have to up-\ndate two on-disk structures, A and B, in order to complete a particular\noperation. Because the disk only services a single request a t a time, one\nof these requests will reach the disk \ufb01rst (either A or B). If the system\ncrashes or loses power after one write completes, the on-dis k structure\nwill be left in an inconsistent state. And thus, we have a problem that all\n\ufb01le systems need to solve:\nTH E CR U X : H O W TO UP D AT E TH E DI S K DE S P I T E CR A S H E S\nThe system may crash or lose power between any two writes, and\nthus the on-disk state may only partially get updated. After the crash,\nthe system boots and wishes to mount the \ufb01le system again (in o rder to\naccess \ufb01les and such). Given that crashes can occur at arbitr ary points\nin time, how do we ensure the \ufb01le system keeps the on-disk imag e in a\nreasonable state?\n491\n492 C R A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G\nIn this chapter , we\u2019ll describe this problem in more detail, and look\nat some methods \ufb01le systems have used to overcome it. W e\u2019ll be gin by\nexamining the approach taken by older \ufb01le systems, known as fsck or the\n\ufb01le system checker . W e\u2019ll then turn our attention to another approach,\nknown as journaling (also known as write-ahead logging ), a technique\nwhich adds a little bit of overhead to each write but recovers more quickly\nfrom crashes or power losses. W e will discuss the basic machi nery of\njournaling, including a few different \ufb02avors of journaling that Linux ext3\n[T98,P AA05] (a relatively modern journaling \ufb01le system) im plements.\n42.1 A Detailed Example\nT o kick off our investigation of journaling, let\u2019s look at an example.\nW e\u2019ll need to use a workload that updates on-disk structures in some\nway . Assume here that"
  },
  {
    "content": " of\njournaling, including a few different \ufb02avors of journaling that Linux ext3\n[T98,P AA05] (a relatively modern journaling \ufb01le system) im plements.\n42.1 A Detailed Example\nT o kick off our investigation of journaling, let\u2019s look at an example.\nW e\u2019ll need to use a workload that updates on-disk structures in some\nway . Assume here that the workload is simple: the append of a s ingle\ndata block to an existing \ufb01le. The append is accomplished by o pening the\n\ufb01le, calling lseek() to move the \ufb01le offset to the end of the \ufb01le, and then\nissuing a single 4KB write to the \ufb01le before closing it.\nLet\u2019s also assume we are using standard simple \ufb01le system str uctures\non the disk, similar to \ufb01le systems we have seen before. This t iny example\nincludes an inode bitmap (with just 8 bits, one per inode), a data bitmap\n(also 8 bits, one per data block), inodes (8 total, numbered 0 to 7, and\nspread across four blocks), and data blocks (8 total, number ed 0 to 7).\nHere is a diagram of this \ufb01le system:\nInode\nBmap\nData\nBmap Inodes Data Blocks\nI[v1] Da\nIf you look at the structures in the picture, you can see that a single inode\nis allocated (inode number 2), which is marked in the inode bi tmap, and a\nsingle allocated data block (data block 4), also marked in th e data bitmap.\nThe inode is denoted I[v1], as it is the \ufb01rst version of this in ode; it will\nsoon be updated (due to the workload described above).\nLet\u2019s peek inside this simpli\ufb01ed inode too. Inside of I[v1], we see:\nowner : remzi\npermissions : read-only\nsize : 1\npointer : 4\npointer : null\npointer : null\npointer : null\nIn this simpli\ufb01ed inode, the size of the \ufb01le is 1 (it has one block al-\nlocated), the \ufb01rst direct pointer points to block 4 (the \ufb01rst data block of\nthe \ufb01le, Da), and all three other direct pointers are set to null (indicating\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCR A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G 493\nthat they are not used). Of course, real inodes have many more \ufb01elds; see\nprevious chapters for more information.\nWhen we append to the \ufb01le, we are adding a new data block to it, a nd\nthus must update three on-disk structures: the inode (which must point\nto the new block as well as have a bigger size due to the append) , the\nnew data block Db, and a new version of the data bitmap (call it B[v2]) to\nindicate that the new data block has been allocated.\nThus, in the memory of the system, we have three blocks which w e\nmust write to disk. The updated inode (inode version 2, or I[v 2] for short)\nnow looks like this:\nowner : remzi\npermissions : read-only\nsize : 2\npointer : 4\npointer : 5\npointer : null\npointer : null\nThe updated data bitmap (B[v2]) now looks like this: 0000110 0. Finally ,\nthere is the data block (Db), which is just \ufb01lled with whateve r it is users\nput into \ufb01les. Stolen music perhaps?\nWhat we would like is for the \ufb01nal on-disk image of the \ufb01le syst em to\nlook like this:\nInode\nBmap\nData\nBmap Inodes Data Blocks\nI[v2] Da Db\nT o achieve this transition, the \ufb01le system must perform thre e sepa-\nrate writes to the disk, one each for the inode (I[v2]),"
  },
  {
    "content": "olen music perhaps?\nWhat we would like is for the \ufb01nal on-disk image of the \ufb01le syst em to\nlook like this:\nInode\nBmap\nData\nBmap Inodes Data Blocks\nI[v2] Da Db\nT o achieve this transition, the \ufb01le system must perform thre e sepa-\nrate writes to the disk, one each for the inode (I[v2]), bitma p (B[v2]), and\ndata block (Db). Note that these writes usually don\u2019t happen immedi-\nately when the user issues a write() system call; rather , the dirty in-\node, bitmap, and new data will sit in main memory (in the page cache\nor buffer cache ) for some time \ufb01rst; then, when the \ufb01le system \ufb01nally\ndecides to write them to disk (after say 5 seconds or 30 second s), the \ufb01le\nsystem will issue the requisite write requests to the disk. U nfortunately ,\na crash may occur and thus interfere with these updates to the disk. In\nparticular , if a crash happens after one or two of these write s have taken\nplace, but not all three, the \ufb01le system could be left in a funn y state.\nCrash Scenarios\nT o understand the problem better , let\u2019s look at some example crash sce-\nnarios. Imagine only a single write succeeds; there are thus three possible\noutcomes, which we list here:\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n494 C R A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G\n\u2022 Just the data block (Db) is written to disk. In this case, the data is\non disk, but there is no inode that points to it and no bitmap th at\neven says the block is allocated. Thus, it is as if the write ne ver\noccurred. This case is not a problem at all, from the perspect ive of\n\ufb01le-system crash consistency 1 .\n\u2022 Just the updated inode (I[v2]) is written to disk. In this case, the\ninode points to the disk address (5) where Db was about to be wr it-\nten, but Db has not yet been written there. Thus, if we trust th at\npointer , we will read garbage data from the disk (the old contents\nof disk address 5).\nFurther , we have a new problem, which we call a \ufb01le-system incon-\nsistency. The on-disk bitmap is telling us that data block 5 has not\nbeen allocated, but the inode is saying that it has. This disa gree-\nment in the \ufb01le system data structures is an inconsistency in the\ndata structures of the \ufb01le system; to use the \ufb01le system, we mu st\nsomehow resolve this problem (more on that below).\n\u2022 Just the updated bitmap (B[v2]) is written to disk. In this case, the\nbitmap indicates that block 5 is allocated, but there is no in ode that\npoints to it. Thus the \ufb01le system is inconsistent again; if le ft unre-\nsolved, this write would result in a space leak , as block 5 would\nnever be used by the \ufb01le system.\nThere are also three more crash scenarios in this attempt to w rite three\nblocks to disk. In these cases, two writes succeed and the las t one fails:\n\u2022 The inode (I[v2]) and bitmap (B[v2]) are written to disk, but not\ndata (Db). In this case, the \ufb01le system metadata is completely con-\nsistent: the inode has a pointer to block 5, the bitmap indica tes that\n5 is in use, and thus everything looks OK from the perspective of\nthe \ufb01le system\u2019s metadata. But there is one problem: 5 has gar bage\nin it again.\n\u2022 The inode (I[v2]) and the data block (Db) are written, but not the\nbitmap (B[v2]). In this case, we have the inode pointing to the cor-\nrect data on disk, but again have an inconsistency between th e in-\node and the old version of"
  },
  {
    "content": " perspective of\nthe \ufb01le system\u2019s metadata. But there is one problem: 5 has gar bage\nin it again.\n\u2022 The inode (I[v2]) and the data block (Db) are written, but not the\nbitmap (B[v2]). In this case, we have the inode pointing to the cor-\nrect data on disk, but again have an inconsistency between th e in-\node and the old version of the bitmap (B1). Thus, we once again\nneed to resolve the problem before using the \ufb01le system.\n\u2022 The bitmap (B[v2]) and data block (Db) are written, but not th e\ninode (I[v2]). In this case, we again have an inconsistency between\nthe inode and the data bitmap. However , even though the block\nwas written and the bitmap indicates its usage, we have no ide a\nwhich \ufb01le it belongs to, as no inode points to the \ufb01le.\n1 However , it might be a problem for the user , who just lost some data!\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCR A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G 495\nThe Crash Consistency Problem\nHopefully , from these crash scenarios, you can see the many p roblems\nthat can occur to our on-disk \ufb01le system image because of cras hes: we can\nhave inconsistency in \ufb01le system data structures; we can hav e space leaks;\nwe can return garbage data to a user; and so forth. What we\u2019d li ke to do\nideally is move the \ufb01le system from one consistent state (e.g ., before the\n\ufb01le got appended to) to another atomically (e.g., after the inode, bitmap,\nand new data block have been written to disk). Unfortunately , we can\u2019t\ndo this easily because the disk only commits one write at a tim e, and\ncrashes or power loss may occur between these updates. W e cal l this\ngeneral problem the crash-consistency problem (we could also call it the\nconsistent-update problem ).\n42.2 Solution #1: The File System Checker\nEarly \ufb01le systems took a simple approach to crash consistenc y . Basi-\ncally , they decided to let inconsistencies happen and then \ufb01 x them later\n(when rebooting). A classic example of this lazy approach is found in a\ntool that does this: fsck2 . fsck is a U N I X tool for \ufb01nding such inconsis-\ntencies and repairing them [M86]; similar tools to check and repair a disk\npartition exist on different systems. Note that such an appr oach can\u2019t \ufb01x\nall problems; consider , for example, the case above where th e \ufb01le system\nlooks consistent but the inode points to garbage data. The on ly real goal\nis to make sure the \ufb01le system metadata is internally consist ent.\nThe tool fsck operates in a number of phases, as summarized in\nMcKusick and Kowalski\u2019s paper [MK96]. It is run before the \ufb01le system\nis mounted and made available ( fsck assumes that no other \ufb01le-system\nactivity is on-going while it runs); once \ufb01nished, the on-di sk \ufb01le system\nshould be consistent and thus can be made accessible to users .\nHere is a basic summary of what fsck does:\n\u2022 Superblock: fsck \ufb01rst checks if the superblock looks reasonable,\nmostly doing sanity checks such as making sure the \ufb01le system size\nis greater than the number of blocks allocated. Usually the g oal of\nthese sanity checks is to \ufb01nd a suspect (corrupt) superblock ; in this\ncase, the system (or administrator) may decide to use an alte rnate\ncopy of the superblock.\n\u2022 Free blocks: Next, fsck scans the inodes, indirect blocks, double\nindirect blocks, etc., to build an understanding of which bl ocks are\ncurrently allocated within the \ufb01le system. It uses this know ledge\nto produce a correct version of the allocation bit"
  },
  {
    "content": "\ufffdnd a suspect (corrupt) superblock ; in this\ncase, the system (or administrator) may decide to use an alte rnate\ncopy of the superblock.\n\u2022 Free blocks: Next, fsck scans the inodes, indirect blocks, double\nindirect blocks, etc., to build an understanding of which bl ocks are\ncurrently allocated within the \ufb01le system. It uses this know ledge\nto produce a correct version of the allocation bitmaps; thus , if there\nis any inconsistency between bitmaps and inodes, it is resol ved by\ntrusting the information within the inodes. The same type of check\nis performed for all the inodes, making sure that all inodes t hat look\nlike they are in use are marked as such in the inode bitmaps.\n2 Pronounced either \u201ceff-ess-see-kay\u201d, \u201ceff-ess-check\u201d, o r , if you don\u2019t like the tool, \u201ceff-\nsuck\u201d. Y es, serious professional people use this term.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n496 C R A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G\n\u2022 Inode state: Each inode is checked for corruption or other prob-\nlems. For example, fsck makes sure that each allocated inode has\na valid type \ufb01eld (e.g., regular \ufb01le, directory , symbolic li nk, etc.). If\nthere are problems with the inode \ufb01elds that are not easily \ufb01x ed, the\ninode is considered suspect and cleared by fsck; the inode bitmap\nis correspondingly updated.\n\u2022 Inode links: fsck also veri\ufb01es the link count of each allocated in-\node. As you may recall, the link count indicates the number of dif-\nferent directories that contain a reference (i.e., a link) t o this par-\nticular \ufb01le. T o verify the link count, fsck scans through the en-\ntire directory tree, starting at the root directory , and bui lds its own\nlink counts for every \ufb01le and directory in the \ufb01le system. If t here\nis a mismatch between the newly-calculated count and that fo und\nwithin an inode, corrective action must be taken, usually by \ufb01xing\nthe count within the inode. If an allocated inode is discover ed but\nno directory refers to it, it is moved to the lost+found directory .\n\u2022 Duplicates: fsck also checks for duplicate pointers, i.e., cases where\ntwo different inodes refer to the same block. If one inode is o bvi-\nously bad, it may be cleared. Alternately , the pointed-to bl ock could\nbe copied, thus giving each inode its own copy as desired.\n\u2022 Bad blocks: A check for bad block pointers is also performed while\nscanning through the list of all pointers. A pointer is consi dered\n\u201cbad\u201d if it obviously points to something outside its valid r ange,\ne.g., it has an address that refers to a block greater than the parti-\ntion size. In this case, fsck can\u2019t do anything too intelligent; it just\nremoves (clears) the pointer from the inode or indirect bloc k.\n\u2022 Directory checks: fsck does not understand the contents of user\n\ufb01les; however , directories hold speci\ufb01cally formatted inf ormation\ncreated by the \ufb01le system itself. Thus, fsck performs additional\nintegrity checks on the contents of each directory , making s ure that\n\u201c.\u201d and \u201c..\u201d are the \ufb01rst entries, that each inode referred to in a\ndirectory entry is allocated, and ensuring that no director y is linked\nto more than once in the entire hierarchy .\nAs you can see, building a working fsck requires intricate knowledge\nof the \ufb01le system; making sure such a piece of code works corre ctly in all\ncases can be challenging [G+08]. However , fsck (and similar approaches)\nhave a bigger and perhaps more fundamental problem: they are too slow .\nWith a very large disk volume, scanning the entire disk to \ufffd"
  },
  {
    "content": " y is linked\nto more than once in the entire hierarchy .\nAs you can see, building a working fsck requires intricate knowledge\nof the \ufb01le system; making sure such a piece of code works corre ctly in all\ncases can be challenging [G+08]. However , fsck (and similar approaches)\nhave a bigger and perhaps more fundamental problem: they are too slow .\nWith a very large disk volume, scanning the entire disk to \ufb01nd all the\nallocated blocks and read the entire directory tree may take many minutes\nor hours. Performance of fsck, as disks grew in capacity and RAIDs\ngrew in popularity , became prohibitive (despite recent adv ances [M+13]).\nAt a higher level, the basic premise of fsck seems just a tad irra-\ntional. Consider our example above, where just three blocks are written\nto the disk; it is incredibly expensive to scan the entire dis k to \ufb01x prob-\nlems that occurred during an update of just three blocks. Thi s situation is\nakin to dropping your keys on the \ufb02oor in your bedroom, and the n com-\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCR A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G 497\nmencing a search-the-entire-house-for-keys recovery algorithm, starting in\nthe basement and working your way through every room. It work s but is\nwasteful. Thus, as disks (and RAIDs) grew , researchers and p ractitioners\nstarted to look for other solutions.\n42.3 Solution #2: Journaling (or W rite-Ahead Logging)\nProbably the most popular solution to the consistent update problem\nis to steal an idea from the world of database management syst ems. That\nidea, known as write-ahead logging , was invented to address exactly this\ntype of problem. In \ufb01le systems, we usually call write-ahead logging jour-\nnaling for historical reasons. The \ufb01rst \ufb01le system to do this was Ced ar\n[H87], though many modern \ufb01le systems use the idea, includin g Linux\next3 and ext4, reiserfs, IBM\u2019s JFS, SGI\u2019s XFS, and Windows NT FS.\nThe basic idea is as follows. When updating the disk, before o ver-\nwriting the structures in place, \ufb01rst write down a little not e (somewhere\nelse on the disk, in a well-known location) describing what y ou are about\nto do. W riting this note is the \u201cwrite ahead\u201d part, and we writ e it to a\nstructure that we organize as a \u201clog\u201d; hence, write-ahead lo gging.\nBy writing the note to disk, you are guaranteeing that if a cra sh takes\nplaces during the update (overwrite) of the structures you a re updating,\nyou can go back and look at the note you made and try again; thus , you\nwill know exactly what to \ufb01x (and how to \ufb01x it) after a crash, in stead\nof having to scan the entire disk. By design, journaling thus adds a bit\nof work during updates to greatly reduce the amount of work re quired\nduring recovery .\nW e\u2019ll now describe how Linux ext3 , a popular journaling \ufb01le system,\nincorporates journaling into the \ufb01le system. Most of the on- disk struc-\ntures are identical to Linux ext2 , e.g., the disk is divided into block groups,\nand each block group has an inode and data bitmap as well as ino des and\ndata blocks. The new key structure is the journal itself, whi ch occupies\nsome small amount of space within the partition or on another device.\nThus, an ext2 \ufb01le system (without journaling) looks like thi s:\nSuper Group 0 Group 1 . . . Group N\nAssuming the journal is placed within the same \ufb01le system ima ge\n(though sometimes it is placed on a separate device, or as a \ufb01l e within\nthe \ufb01le system), an ext3 \ufb01le system with a journal looks like t his:\nSuper Journal Group 0 Group 1 ."
  },
  {
    "content": " an ext2 \ufb01le system (without journaling) looks like thi s:\nSuper Group 0 Group 1 . . . Group N\nAssuming the journal is placed within the same \ufb01le system ima ge\n(though sometimes it is placed on a separate device, or as a \ufb01l e within\nthe \ufb01le system), an ext3 \ufb01le system with a journal looks like t his:\nSuper Journal Group 0 Group 1 . . . Group N\nThe real difference is just the presence of the journal, and o f course,\nhow it is used.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n498 C R A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G\nData Journaling\nLet\u2019s look at a simple example to understand how data journaling works.\nData journaling is available as a mode with the Linux ext3 \ufb01le system,\nfrom which much of this discussion is based.\nSay we have our canonical update again, where we wish to write the\n\u2018inode (I[v2]), bitmap (B[v2]), and data block (Db) to disk a gain. Before\nwriting them to their \ufb01nal disk locations, we are now \ufb01rst goi ng to write\nthem to the log (a.k.a. journal). This is what this will look l ike in the log:\nJournal\nTxB I[v2] B[v2] Db TxE\nY ou can see we have written \ufb01ve blocks here. The transaction b egin\n(TxB) tells us about this update, including information abo ut the pend-\ning update to the \ufb01le system (e.g., the \ufb01nal addresses of the b locks I[v2],\nB[v2], and Db), as well as some kind of transaction identi\ufb01er (TID). The\nmiddle three blocks just contain the exact contents of the bl ocks them-\nselves; this is known as physical logging as we are putting the exact\nphysical contents of the update in the journal (an alternate idea, logi-\ncal logging , puts a more compact logical representation of the update in\nthe journal, e.g., \u201cthis update wishes to append data block D b to \ufb01le X\u201d,\nwhich is a little more complex but can save space in the log and perhaps\nimprove performance). The \ufb01nal block (TxE) is a marker of the end of this\ntransaction, and will also contain the TID.\nOnce this transaction is safely on disk, we are ready to overw rite the\nold structures in the \ufb01le system; this process is called checkpointing.\nThus, to checkpoint the \ufb01le system (i.e., bring it up to date with the pend-\ning update in the journal), we issue the writes I[v2], B[v2], and Db to\ntheir disk locations as seen above; if these writes complete successfully ,\nwe have successfully checkpointed the the \ufb01le system and are basically\ndone. Thus, our initial sequence of operations:\n1. Journal write: W rite the transaction, including a transaction-begin\nblock, all pending data and metadata updates, and a transact ion-\nend block, to the log; wait for these writes to complete.\n2. Checkpoint: W rite the pending metadata and data updates to their\n\ufb01nal locations in the \ufb01le system.\nIn our example, we would write TxB, I[v2], B[v2], Db, and TxE t o the\njournal \ufb01rst. When these writes complete, we would complete the update\nby checkpointing I[v2], B[v2], and Db, to their \ufb01nal locatio ns on disk.\nThings get a little trickier when a crash occurs during the wr ites to\nthe journal. Here, we are trying to write the set of blocks in t he transac-\ntion (e.g., TxB, I[v2], B[v2], Db, TxE) to disk. One simple wa y to do this\nwould be to issue each one at a time, waiting for each to comple te, and\nthen issuing the next. However , this is slow . Ideally , we\ufffd"
  },
  {
    "content": " during the wr ites to\nthe journal. Here, we are trying to write the set of blocks in t he transac-\ntion (e.g., TxB, I[v2], B[v2], Db, TxE) to disk. One simple wa y to do this\nwould be to issue each one at a time, waiting for each to comple te, and\nthen issuing the next. However , this is slow . Ideally , we\u2019d l ike to issue\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCR A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G 499\nAS I D E : FO R C I N G WR I T E S TO DI S K\nT o enforce ordering between two disk writes, modern \ufb01le syst ems have\nto take a few extra precautions. In olden times, forcing orde ring between\ntwo writes, A and B, was easy: just issue the write of A to the disk, wait\nfor the disk to interrupt the OS when the write is complete, an d then issue\nthe write of B.\nThings got slightly more complex due to the increased use of w rite caches\nwithin disks. With write buffering enabled (sometimes call ed immediate\nreporting), a disk will inform the OS the write is complete when it simpl y\nhas been placed in the disk\u2019s memory cache, and has not yet rea ched\ndisk. If the OS then issues a subsequent write, it is not guara nteed to\nreach the disk after previous writes; thus ordering between writes is not\npreserved. One solution is to disable write buffering. Howe ver , more\nmodern systems take extra precautions and issue explicit write barriers ;\nsuch a barrier , when it completes, guarantees that all write s issued before\nthe barrier will reach disk before any writes issued after th e barrier .\nAll of this machinery requires a great deal of trust in the cor rect oper-\nation of the disk. Unfortunately , recent research shows tha t some disk\nmanufacturers, in an effort to deliver \u201chigher performing\u201d disks, explic-\nitly ignore write-barrier requests, thus making the disks s eemingly run\nfaster but at the risk of incorrect operation [C+13, R+11]. A s Kahan said,\nthe fast almost always beats out the slow , even if the fast is w rong.\nall \ufb01ve block writes at once, as this would turn \ufb01ve writes int o a single\nsequential write and thus be faster . However , this is unsafe , for the fol-\nlowing reason: given such a big write, the disk internally ma y perform\nscheduling and complete small pieces of the big write in any o rder . Thus,\nthe disk internally may (1) write TxB, I[v2], B[v2], and TxE a nd only later\n(2) write Db. Unfortunately , if the disk loses power between (1) and (2),\nthis is what ends up on disk:\nJournal\nTxB\nid=1\nI[v2] B[v2] ?? TxE\nid=1\nWhy is this a problem? W ell, the transaction looks like a vali d trans-\naction (it has a begin and an end with matching sequence numbe rs). Fur-\nther , the \ufb01le system can\u2019t look at that fourth block and know i t is wrong;\nafter all, it is arbitrary user data. Thus, if the system now r eboots and\nruns recovery , it will replay this transaction, and ignoran tly copy the con-\ntents of the garbage block \u2019??\u2019 to the location where Db is sup posed to\nlive. This is bad for arbitrary user data in a \ufb01le; it is much wo rse if it hap-\npens to a critical piece of \ufb01le system, such as the superblock , which could\nrender the \ufb01le system unmountable.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n500 C R A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G\nAS I D E : OP T I M I"
  },
  {
    "content": ", such as the superblock , which could\nrender the \ufb01le system unmountable.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n500 C R A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G\nAS I D E : OP T I M I Z I N G LO G WR I T E S\nY ou may have noticed a particular inef\ufb01ciency of writing to t he log.\nNamely , the \ufb01le system \ufb01rst has to write out the transaction- begin block\nand contents of the transaction; only after these writes com plete can the\n\ufb01le system send the transaction-end block to disk. The perfo rmance im-\npact is clear , if you think about how a disk works: usually an e xtra rota-\ntion is incurred (think about why).\nOne of our former graduate students, Vijayan Prabhakaran, h ad a simple\nidea to \ufb01x this problem [P+05]. When writing a transaction to the journal,\ninclude a checksum of the contents of the journal in the begin and end\nblocks. Doing so enables the \ufb01le system to write the entire tr ansaction at\nonce, without incurring a wait; if, during recovery , the \ufb01le system sees\na mismatch in the computed checksum versus the stored checks um in\nthe transaction, it can conclude that a crash occurred durin g the write\nof the transaction and thus discard the \ufb01le-system update. T hus, with a\nsmall tweak in the write protocol and recovery system, a \ufb01le s ystem can\nachieve faster common-case performance; on top of that, the system is\nslightly more reliable, as any reads from the journal are now protected by\na checksum.\nThis simple \ufb01x was attractive enough to gain the notice of Lin ux \ufb01le sys-\ntem developers, who then incorporated it into the next gener ation Linux\n\ufb01le system, called (you guessed it!) Linux ext4 . It now ships on mil-\nlions of machines worldwide, including the Android handhel d platform.\nThus, every time you write to disk on many Linux-based system s, a little\ncode developed at Wisconsin makes your system a little faste r and more\nreliable.\nT o avoid this problem, the \ufb01le system issues the transaction al write in\ntwo steps. First, it writes all blocks except the TxE block to the journal,\nissuing these writes all at once. When these writes complete , the journal\nwill look something like this (assuming our append workload again):\nJournal\nTxB\nid=1\nI[v2] B[v2] Db\nWhen those writes complete, the \ufb01le system issues the write o f the TxE\nblock, thus leaving the journal in this \ufb01nal, safe state:\nJournal\nTxB\nid=1\nI[v2] B[v2] Db TxE\nid=1\nAn important aspect of this process is the atomicity guarant ee pro-\nvided by the disk. It turns out that the disk guarantees that a ny 512-byte\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCR A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G 501\nwrite will either happen or not (and never be half-written); thus, to make\nsure the write of TxE is atomic, one should make it a single 512 -byte block.\nThus, our current protocol to update the \ufb01le system, with eac h of its three\nphases labeled:\n1. Journal write: W rite the contents of the transaction (including TxB,\nmetadata, and data) to the log; wait for these writes to compl ete.\n2. Journal commit: W rite the transaction commit block (containing\nTxE) to the log; wait for write to complete; transaction is sa id to be\ncommitted.\n3. Checkpoint: W rite the contents of the update (metadata and data)\nto their \ufb01nal on-disk locations.\nRecovery\nLet"
  },
  {
    "content": " transaction (including TxB,\nmetadata, and data) to the log; wait for these writes to compl ete.\n2. Journal commit: W rite the transaction commit block (containing\nTxE) to the log; wait for write to complete; transaction is sa id to be\ncommitted.\n3. Checkpoint: W rite the contents of the update (metadata and data)\nto their \ufb01nal on-disk locations.\nRecovery\nLet\u2019s now understand how a \ufb01le system can use the contents of t he jour-\nnal to recover from a crash. A crash may happen at any time during this\nsequence of updates. If the crash happens before the transac tion is writ-\nten safely to the log (i.e., before Step 2 above completes), t hen our job\nis easy: the pending update is simply skipped. If the crash ha ppens af-\nter the transaction has committed to the log, but before the c heckpoint is\ncomplete, the \ufb01le system can recover the update as follows. When the\nsystem boots, the \ufb01le system recovery process will scan the l og and look\nfor transactions that have committed to the disk; these tran sactions are\nthus replayed (in order), with the \ufb01le system again attempting to write\nout the blocks in the transaction to their \ufb01nal on-disk locat ions. This form\nof logging is one of the simplest forms there is, and is called redo logging .\nBy recovering the committed transactions in the journal, th e \ufb01le system\nensures that the on-disk structures are consistent, and thu s can proceed\nby mounting the \ufb01le system and readying itself for new reques ts.\nNote that it is \ufb01ne for a crash to happen at any point during che ck-\npointing, even after some of the updates to the \ufb01nal location s of the blocks\nhave completed. In the worst case, some of these updates are s imply per-\nformed again during recovery . Because recovery is a rare ope ration (only\ntaking place after an unexpected system crash), a few redund ant writes\nare nothing to worry about 3 .\nBatching Log Updates\nY ou might have noticed that the basic protocol could add a lot of extra\ndisk traf\ufb01c. For example, imagine we create two \ufb01les in a row , called\nfile1 and file2, in the same directory . T o create one \ufb01le, one has to\nupdate a number of on-disk structures, minimally including : the inode\nbitmap (to allocated a new inode), the newly-created inode o f the \ufb01le, the\n3 Unless you worry about everything, in which case we can\u2019t hel p you. Stop worrying so\nmuch, it is unhealthy! But now you\u2019re probably worried about over-worrying.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n502 C R A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G\ndata block of the parent directory containing the new direct ory entry , as\nwell as the parent directory inode (which now has a new modi\ufb01c ation\ntime). With journaling, we logically commit all of this info rmation to\nthe journal for each of our two \ufb01le creations; because the \ufb01le s are in the\nsame directory , and let\u2019s assume even have inodes within the same inode\nblock, this means that if we\u2019re not careful, we\u2019ll end up writ ing these same\nblocks over and over .\nT o remedy this problem, some \ufb01le systems do not commit each up date\nto disk one at a time (e.g., Linux ext3); rather , one can buffe r all updates\ninto a global transaction. In our example above, when the two \ufb01les are\ncreated, the \ufb01le system just marks the in-memory inode bitma p, inodes\nof the \ufb01les, directory data, and directory inode as dirty , an d adds them to\nthe list of blocks that form the current transaction. When it is \ufb01nally time\nto write these blocks to disk (say , after a timeout of 5 second s), this single\nglobal transaction is committed containing all of the updat es described\n"
  },
  {
    "content": "\ncreated, the \ufb01le system just marks the in-memory inode bitma p, inodes\nof the \ufb01les, directory data, and directory inode as dirty , an d adds them to\nthe list of blocks that form the current transaction. When it is \ufb01nally time\nto write these blocks to disk (say , after a timeout of 5 second s), this single\nglobal transaction is committed containing all of the updat es described\nabove. Thus, by buffering updates, a \ufb01le system can avoid exc essive write\ntraf\ufb01c to disk in many cases.\nMaking The Log Finite\nW e thus have arrived at a basic protocol for updating \ufb01le-sys tem on-disk\nstructures. The \ufb01le system buffers updates in memory for som e time;\nwhen it is \ufb01nally time to write to disk, the \ufb01le system \ufb01rst car efully writes\nout the details of the transaction to the journal (a.k.a. wri te-ahead log);\nafter the transaction is complete, the \ufb01le system checkpoin ts those blocks\nto their \ufb01nal locations on disk.\nHowever , the log is of a \ufb01nite size. If we keep adding transact ions to\nit (as in this \ufb01gure), it will soon \ufb01ll. What do you think happe ns then?\nJournal\nTx1 Tx2 Tx3 Tx4 Tx5 ...\nT wo problems arise when the log becomes full. The \ufb01rst is simp ler ,\nbut less critical: the larger the log, the longer recovery wi ll take, as the\nrecovery process must replay all the transactions within th e log (in order)\nto recover . The second is more of an issue: when the log is full (or nearly\nfull), no further transactions can be committed to the disk, thus making\nthe \ufb01le system \u201cless than useful\u201d (i.e., useless).\nT o address these problems, journaling \ufb01le systems treat the log as a\ncircular data structure, re-using it over and over; this is w hy the journal is\nsometimes referred to as a circular log . T o do so, the \ufb01le system must take\naction some time after a checkpoint. Speci\ufb01cally , once a tra nsaction has\nbeen checkpointed, the \ufb01le system should free the space it wa s occupying\nwithin the journal, allowing the log space to be reused. Ther e are many\nways to achieve this end; for example, you could simply mark t he oldest\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCR A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G 503\nand newest transactions in the log in a journal superblock ; all other space\nis free. Here is a graphical depiction of such a mechanism:\nJournal\nJournal\nSuper Tx1 Tx2 Tx3 Tx4 Tx5 ...\nIn the journal superblock (not to be confused with the main \ufb01l e system\nsuperblock), the journaling system records enough informa tion to know\nwhich transactions have not yet been checkpointed, and thus reduces re-\ncovery time as well as enables re-use of the log in a circular f ashion. And\nthus we add another step to our basic protocol:\n1. Journal write: W rite the contents of the transaction (containing TxB\nand the contents of the update) to the log; wait for these writ es to\ncomplete.\n2. Journal commit: W rite the transaction commit block (containing\nTxE) to the log; wait for the write to complete; the transacti on is\nnow committed.\n3. Checkpoint: W rite the contents of the update to their \ufb01nal locations\nwithin the \ufb01le system.\n4. Free: Some time later , mark the transaction free in the journal by\nupdating the journal superblock.\nThus we have our \ufb01nal data journaling protocol. But there is s till a\nproblem: we are writing each data block to the disk twice, which is a\nheavy cost to pay , especially for something as rare as a syste m crash. Can\nyou \ufb01gure out a way to retain consistency without writing"
  },
  {
    "content": "le system.\n4. Free: Some time later , mark the transaction free in the journal by\nupdating the journal superblock.\nThus we have our \ufb01nal data journaling protocol. But there is s till a\nproblem: we are writing each data block to the disk twice, which is a\nheavy cost to pay , especially for something as rare as a syste m crash. Can\nyou \ufb01gure out a way to retain consistency without writing dat a twice?\nMetadata Journaling\nAlthough recovery is now fast (scanning the journal and repl aying a few\ntransactions as opposed to scanning the entire disk), norma l operation\nof the \ufb01le system is slower than we might desire. In particula r , for each\nwrite to disk, we are now also writing to the journal \ufb01rst, thu s doubling\nwrite traf\ufb01c; this doubling is especially painful during se quential write\nworkloads, which now will proceed at half the peak write band width of\nthe drive. Further , between writes to the journal and writes to the main\n\ufb01le system, there is a costly seek, which adds noticeable ove rhead for\nsome workloads.\nBecause of the high cost of writing every data block to disk tw ice, peo-\nple have tried a few different things in order to speed up perf ormance.\nFor example, the mode of journaling we described above is oft en called\ndata journaling (as in Linux ext3), as it journals all user data (in addition\nto the metadata of the \ufb01le system). A simpler (and more common ) form\nof journaling is sometimes called ordered journaling (or just metadata\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n504 C R A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G\njournaling), and it is nearly the same, except that user data is not writ-\nten to the journal. Thus, when performing the same update as a bove, the\nfollowing information would be written to the journal:\nJournal\nTxB I[v2] B[v2] TxE\nThe data block Db, previously written to the log, would inste ad be\nwritten to the \ufb01le system proper , avoiding the extra write; g iven that most\nI/O traf\ufb01c to the disk is data, not writing data twice substan tially reduces\nthe I/O load of journaling. The modi\ufb01cation does raise an int eresting\nquestion, though: when should we write data blocks to disk?\nLet\u2019s again consider our example append of a \ufb01le to understan d the\nproblem better . The update consists of three blocks: I[v2], B[v2], and\nDb. The \ufb01rst two are both metadata and will be logged and then c heck-\npointed; the latter will only be written once to the \ufb01le syste m. When\nshould we write Db to disk? Does it matter?\nAs it turns out, the ordering of the data write does matter for metadata-\nonly journaling. For example, what if we write Db to disk after the trans-\naction (containing I[v2] and B[v2]) completes? Unfortunat ely , this ap-\nproach has a problem: the \ufb01le system is consistent but I[v2] m ay end up\npointing to garbage data. Speci\ufb01cally , consider the case wh ere I[v2] and\nB[v2] are written but Db did not make it to disk. The \ufb01le system will then\ntry to recover . Because Db is not in the log, the \ufb01le system will replay\nwrites to I[v2] and B[v2], and produce a consistent \ufb01le syste m (from the\nperspective of \ufb01le-system metadata). However , I[v2] will b e pointing to\ngarbage data, i.e., at whatever was in the the slot where Db wa s headed.\nT o ensure this situation does not arise, some \ufb01le systems (e. g., Linux\next3) write data blocks (of regular \ufb01les) to the disk \ufb01rst , before related\nmetadata is written to"
  },
  {
    "content": "perspective of \ufb01le-system metadata). However , I[v2] will b e pointing to\ngarbage data, i.e., at whatever was in the the slot where Db wa s headed.\nT o ensure this situation does not arise, some \ufb01le systems (e. g., Linux\next3) write data blocks (of regular \ufb01les) to the disk \ufb01rst , before related\nmetadata is written to disk. Speci\ufb01cally , the protocol is as follows:\n1. Data write: W rite data to \ufb01nal location; wait for completion\n(the wait is optional; see below for details).\n2. Journal metadata write: W rite the begin block and metadata to the\nlog; wait for writes to complete.\n3. Journal commit: W rite the transaction commit block (containing\nTxE) to the log; wait for the write to complete; the transacti on (in-\ncluding data) is now committed.\n4. Checkpoint metadata: W rite the contents of the metadata update\nto their \ufb01nal locations within the \ufb01le system.\n5. Free: Later , mark the transaction free in journal superblock.\nBy forcing the data write \ufb01rst, a \ufb01le system can guarantee tha t a pointer\nwill never point to garbage. Indeed, this rule of \u201cwrite the p ointed to ob-\nject before the object with the pointer to it\u201d is at the core of crash consis-\ntency , and is exploited even further by other crash consiste ncy schemes\n[GP94] (see below for details).\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCR A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G 505\nIn most systems, metadata journaling (akin to ordered journ aling of\next3) is more popular than full data journaling. For example , Windows\nNTFS and SGI\u2019s XFS both use non-ordered metadata journaling . Linux\next3 gives you the option of choosing either data, ordered, o r unordered\nmodes (in unordered mode, data can be written at any time). Al l of these\nmodes keep metadata consistent; they vary in their semantic s for data.\nFinally , note that forcing the data write to complete (Step 1 ) before\nissuing writes to the journal (Step 2) is not required for cor rectness, as\nindicated in the protocol above. Speci\ufb01cally , it would be \ufb01n e to issue data\nwrites as well as the transaction-begin block and metadata t o the journal;\nthe only real requirement is that Steps 1 and 2 complete befor e the issuing\nof the journal commit block (Step 3).\nT ricky Case: Block Reuse\nThere are some interesting corner cases that make journalin g more tricky ,\nand thus are worth discussing. A number of them revolve aroun d block\nreuse; as Stephen T weedie (one of the main forces behind ext3 ) said:\n\u201cWhat\u2019s the hideous part of the entire system? ... It\u2019s delet ing \ufb01les.\nEverything to do with delete is hairy . Everything to do with d elete...\nyou have nightmares around what happens if blocks get delete d and\nthen reallocated.\u201d [T00]\nThe particular example T weedie gives is as follows. Suppose you are\nusing some form of metadata journaling (and thus data blocks for \ufb01les\nare not journaled). Let\u2019s say you have a directory called foo. The user\nadds an entry to foo (say by creating a \ufb01le), and thus the contents of\nfoo (because directories are considered metadata) are written to the log;\nassume the location of the foo directory data is block 1000. The log thus\ncontains something like this:\nJournal\nTxB\nid=1\nI[foo]\nptr:1000\nD[foo]\n[final addr:1000]\nTxE\nid=1\nAt this point, the user deletes everything in the directory a s well as the\ndirectory itself, freeing up block 1000 for reuse. Finally , the user creates a\nnew \ufb01le (say foobar), which ends up reusing the same block (1000) that\nused to belong to foo"
  },
  {
    "content": "Journal\nTxB\nid=1\nI[foo]\nptr:1000\nD[foo]\n[final addr:1000]\nTxE\nid=1\nAt this point, the user deletes everything in the directory a s well as the\ndirectory itself, freeing up block 1000 for reuse. Finally , the user creates a\nnew \ufb01le (say foobar), which ends up reusing the same block (1000) that\nused to belong to foo. The inode of foobar is committed to disk, as is\nits data; note, however , because metadata journaling is in u se, only the\ninode of foobar is committed to the journal; the newly-written data in\nblock 1000 in the \ufb01le foobar is not journaled.\nJournal\nTxB\nid=1\nI[foo]\nptr:1000\nD[foo]\n[final addr:1000]\nTxE\nid=1\nTxB\nid=2\nI[foobar]\nptr:1000\nTxE\nid=2\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n506 C R A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G\nJournal File System\nTxB Contents TxE Metadata Data\n(metadata) (data)\nissue issue issue\ncomplete\ncomplete\ncomplete\nissue\ncomplete\nissue issue\ncomplete\ncomplete\nT able 42.1: Data Journaling Timeline\nNow assume a crash occurs and all of this information is still in the\nlog. During replay , the recovery process simply replays eve rything in\nthe log, including the write of directory data in block 1000; the replay\nthus overwrites the user data of current \ufb01le foobar with old directory\ncontents! Clearly this is not a correct recovery action, and certainly it will\nbe a surprise to the user when reading the \ufb01le foobar.\nThere are a number of solutions to this problem. One could, fo r ex-\nample, never reuse blocks until the delete of said blocks is c heckpointed\nout of the journal. What Linux ext3 does instead is to add a new type\nof record to the journal, known as a revoke record. In the case above,\ndeleting the directory would cause a revoke record to be writ ten to the\njournal. When replaying the journal, the system \ufb01rst scans f or such re-\nvoke records; any such revoked data is never replayed, thus a voiding the\nproblem mentioned above.\nW rapping Up Journaling: A T imeline\nBefore ending our discussion of journaling, we summarize th e protocols\nwe have discussed with timelines depicting each of them. T ab le\n42.1\nshows the protocol when journaling data as well as metadata, whereas\nT able 42.2 shows the protocol when journaling only metadata.\nIn each table, time increases in the downward direction, and each row\nin the table shows the logical time that a write can be issued o r might\ncomplete. For example, in the data journaling protocol ( 42.1), the writes\nof the transaction begin block (TxB) and the contents of the t ransaction\ncan logically be issued at the same time, and thus can be compl eted in\nany order; however , the write to the transaction end block (T xE) must not\nbe issued until said previous writes complete. Similarly , t he checkpoint-\ning writes to data and metadata blocks cannot begin until the transaction\nend block has committed. Horizontal dashed lines show where write-\nordering requirements must be obeyed.\nA similar timeline is shown for the metadata journaling prot ocol. Note\nthat the data write can logically be issued at the same time as the writes\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCR A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G 507\nJournal File System\nTxB Contents TxE Metadata Data\n(metadata)\nissue issue issue\ncomplete\ncomplete\ncomplete\nissue\ncomplete\nissue\ncomplete\nT able 42.2: Metadata Journaling Timeline\nto the transaction begin and the contents of the journal; how ever , it must\nbe issued and complete before the transaction end has been is sued.\n"
  },
  {
    "content": " C Y: F SCK A N D JO U R N A L I N G 507\nJournal File System\nTxB Contents TxE Metadata Data\n(metadata)\nissue issue issue\ncomplete\ncomplete\ncomplete\nissue\ncomplete\nissue\ncomplete\nT able 42.2: Metadata Journaling Timeline\nto the transaction begin and the contents of the journal; how ever , it must\nbe issued and complete before the transaction end has been is sued.\nFinally , note that the time of completion marked for each wri te in the\ntimelines is arbitrary . In a real system, completion time is determined by\nthe I/O subsystem, which may reorder writes to improve perfo rmance.\nThe only guarantees about ordering that we have are those tha t must\nbe enforced for protocol correctness (and are shown via the h orizontal\ndashed lines in the tables).\n42.4 Solution #3: Other Approaches\nW e\u2019ve thus far described two options in keeping \ufb01le system me tadata\nconsistent: a lazy approach based on fsck, and a more active approach\nknown as journaling. However , these are not the only two appr oaches.\nOne such approach, known as Soft Updates [GP94], was introdu ced by\nGanger and Patt. This approach carefully orders all writes t o the \ufb01le sys-\ntem to ensure that the on-disk structures are never left in an inconsis-\ntent state. For example, by writing a pointed-to data block t o disk before\nthe inode that points to it, we can ensure that the inode never points to\ngarbage; similar rules can be derived for all the structures of the \ufb01le sys-\ntem. Implementing Soft Updates can be a challenge, however; whereas\nthe journaling layer described above can be implemented wit h relatively\nlittle knowledge of the exact \ufb01le system structures, Soft Up dates requires\nintricate knowledge of each \ufb01le system data structure and th us adds a fair\namount of complexity to the system.\nAnother approach is known as copy-on-write (yes, COW), and is used\nin a number of popular \ufb01le systems, including Sun\u2019s ZFS [B07] . This tech-\nnique never overwrites \ufb01les or directories in place; rather , it places new\nupdates to previously unused locations on disk. After a numb er of up-\ndates are completed, COW \ufb01le systems \ufb02ip the root structure o f the \ufb01le\nsystem to include pointers to the newly updated structures. Doing so\nmakes keeping the \ufb01le system consistent straightforward. W e\u2019ll be learn-\ning more about this technique when we discuss the log-struct ured \ufb01le\nsystem (LFS) in a future chapter; LFS is an early example of a C OW .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n508 C R A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G\nAnother approach is one we just developed here at Wisconsin. In this\ntechnique, entitled backpointer-based consistency (or BBC), no ordering\nis enforced between writes. T o achieve consistency , an addi tional back\npointer is added to every block in the system; for example, each data\nblock has a reference to the inode to which it belongs. When ac cessing\na \ufb01le, the \ufb01le system can determine if the \ufb01le is consistent by checking if\nthe forward pointer (e.g., the address in the inode or direct block) points\nto a block that refers back to it. If so, everything must have s afely reached\ndisk and thus the \ufb01le is consistent; if not, the \ufb01le is inconsi stent, and an\nerror is returned. By adding back pointers to the \ufb01le system, a new form\nof lazy crash consistency can be attained [C+12].\nFinally , we also have explored techniques to reduce the numb er of\ntimes a journal protocol has to wait for disk writes to comple te. Entitled\noptimistic crash consistency [C+13], this new approach issues as many\nwrites to disk as possible and uses a generalized form of the transaction\nchecksum [P+05], as well as a few other techniques, to detect inconsis ten-\ncies should they arise. For"
  },
  {
    "content": " consistency can be attained [C+12].\nFinally , we also have explored techniques to reduce the numb er of\ntimes a journal protocol has to wait for disk writes to comple te. Entitled\noptimistic crash consistency [C+13], this new approach issues as many\nwrites to disk as possible and uses a generalized form of the transaction\nchecksum [P+05], as well as a few other techniques, to detect inconsis ten-\ncies should they arise. For some workloads, these optimisti c techniques\ncan improve performance by an order of magnitude. However , t o truly\nfunction well, a slightly different disk interface is requi red [C+13].\n42.5 Summary\nW e have introduced the problem of crash consistency , and dis cussed\nvarious approaches to attacking this problem. The older app roach of\nbuilding a \ufb01le system checker works but is likely too slow to r ecover on\nmodern systems. Thus, many \ufb01le systems now use journaling. J ournaling\nreduces recovery time from O(size-of-the-disk-volume) to O(size-of-the-\nlog), thus speeding recovery substantially after a crash an d restart. For\nthis reason, many modern \ufb01le systems use journaling. W e have also seen\nthat journaling can come in many different forms; the most co mmonly\nused is ordered metadata journaling, which reduces the amou nt of traf\ufb01c\nto the journal while still preserving reasonable consisten cy guarantees for\nboth \ufb01le system metadata as well as user data.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCR A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G 509\nReferences\n[B07] \u201cZFS: The Last W ord in File Systems\u201d\nJeff Bonwick and Bill Moore\nA vailable: http://opensolaris.org/os/community/zfs/d ocs/zfs\nlast.pdf\nZFS uses copy-on-write and journaling, actually, as in some cases, logging writes to disk will perform\nbetter .\n[C+12] \u201cConsistency Without Ordering\u201d\nVijay Chidambaram, T ushar Sharma, Andrea C. Arpaci-Dussea u, Remzi H. Arpaci-Dusseau\nF AST \u201912, San Jose, California\nA recent paper of ours about a new form of crash consistency ba sed on back pointers. Read it for the\nexciting details!\n[C+13] \u201cOptimistic Crash Consistency\u201d\nVijay Chidambaram, Thanu S. Pillai, Andrea C. Arpaci-Dusse au, Remzi H. Arpaci-Dusseau\nSOSP \u201913, Nemacolin W oodlands Resort, P A, November 2013\nOur work on a more optimistic and higher performance journal ing protocol. For workloads that call\nfsync() a lot, performance can be greatly improved.\n[GP94] \u201cMetadata Update Performance in File Systems\u201d\nGregory R. Ganger and Y ale N. Patt\nOSDI \u201994\nA clever paper about using careful ordering of writes as the m ain way to achieve consistency. Imple-\nmented later in BSD-based systems.\n[G+08] \u201cSQCK: A Declarative File System Checker \u201d\nHaryadi S. Gunawi, Abhishek Rajimwale, Andrea C. Arpaci-Du sseau, Remzi H. Arpaci-Dusseau\nOSDI \u201908, San Diego, California\nOur own paper on a new and better way to build a \ufb01le system check er using SQL queries. We also show\nsome problems with the existing checker , \ufb01nding numerous bu gs and odd behaviors, a direct result of\nthe complexity of fsck.\n[H87] \u201cReimplementing the Cedar File System Using Logging a nd Group Commit\u201d\nRobert Hagmann\nSOSP \u201987, Austin, T exas, November 1987\nThe \ufb01rst work (that we know of) that applied write-ahead logg ing (a.k.a. journaling) to a \ufb01le system.\n"
  },
  {
    "content": " and odd behaviors, a direct result of\nthe complexity of fsck.\n[H87] \u201cReimplementing the Cedar File System Using Logging a nd Group Commit\u201d\nRobert Hagmann\nSOSP \u201987, Austin, T exas, November 1987\nThe \ufb01rst work (that we know of) that applied write-ahead logg ing (a.k.a. journaling) to a \ufb01le system.\n[M+13] \u201cffsck: The Fast File System Checker \u201d\nAo Ma, Chris Dragga, Andrea C. Arpaci-Dusseau, Remzi H. Arpa ci-Dusseau\nF AST \u201913, San Jose, California, February 2013\nA recent paper of ours detailing how to make fsck an order of ma gnitude faster . Some of the ideas have\nalready been incorporated into the BSD \ufb01le system checker [M K96] and are deployed today.\n[MK96] \u201cFsck - The U NIX File System Check Program\u201d\nMarshall Kirk McKusick and T . J. Kowalski\nRevised in 1996\nDescribes the \ufb01rst comprehensive \ufb01le-system checking tool , the eponymous fsck. Written by some of\nthe same people who brought you FFS.\n[MJLF84] \u201cA Fast File System for UNIX\u201d\nMarshall K. McKusick, William N. Joy , Sam J. Lef\ufb02er , Robert S . Fabry\nACM T ransactions on Computing Systems.\nAugust 1984, V olume 2:3\nY ou already know enough about FFS, right? But yeah, it is OK to reference papers like this more than\nonce in a book.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n510 C R A S H CO N S I S T E N C Y: F SCK A N D JO U R N A L I N G\n[P+05] \u201cIRON File Systems\u201d\nVijayan Prabhakaran, Lakshmi N. Bairavasundaram, Nitin Ag rawal, Haryadi S. Gunawi, An-\ndrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau\nSOSP \u201905, Brighton, England, October 2005\nA paper mostly focused on studying how \ufb01le systems react to di sk failures. T owards the end, we intro-\nduce a transaction checksum to speed up logging, which was ev entually adopted into Linux ext4.\n[P AA05] \u201cAnalysis and Evolution of Journaling File Systems \u201d\nVijayan Prabhakaran, Andrea C. Arpaci-Dusseau, Remzi H. Ar paci-Dusseau\nUSENIX \u201905, Anaheim, California, April 2005\nAn early paper we wrote analyzing how journaling \ufb01le systems work.\n[R+11] \u201cCoerced Cache Eviction and Discreet-Mode Journali ng\u201d\nAbhishek Rajimwale, Vijay Chidambaram, Deepak Ramamurthi ,\nAndrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau\nDSN \u201911, Hong Kong, China, June 2011\nOur own paper on the problem of disks that buffer writes in a me mory cache instead of forcing them to\ndisk, even when explicitly told not to do that! Our solution t o overcome this problem: if you want A to\nbe written to disk before B, \ufb01rst write A, then send a lot of \u201cdummy\u201d writes to disk, hopefully causing\nA to be forced to disk to make room for them in the cache. A neat if impractical solution.\n[T98] \u201cJournaling the Linux ext2fs File System\u201d\nStephen C. T weedie\nThe Fourth Annual Linux Expo, May 1998\nT weedie did much of the heavy lifting in adding journaling to the Linux ext2 \ufb01le system; the result,\nnot surprisingly, is called ext3. Some nice design decision s include the strong focus on backwards\ncompatibility, e.g., you can just add a journaling \ufb01le to an e xisting ext2 \ufb01le system and then mount it\nas an"
  },
  {
    "content": " C. T weedie\nThe Fourth Annual Linux Expo, May 1998\nT weedie did much of the heavy lifting in adding journaling to the Linux ext2 \ufb01le system; the result,\nnot surprisingly, is called ext3. Some nice design decision s include the strong focus on backwards\ncompatibility, e.g., you can just add a journaling \ufb01le to an e xisting ext2 \ufb01le system and then mount it\nas an ext3 \ufb01le system.\n[T00] \u201cEXT3, Journaling Filesystem\u201d\nStephen T weedie\nT alk at the Ottawa Linux Symposium, July 2000\nolstrans.sourceforge.net/release/OLS2000-ext3/OLS2000-ext3.html\nA transcript of a talk given by T weedie on ext3.\n[T01] \u201cThe Linux ext2 File System\u201d\nTheodore T s\u2019o, June, 2001.\nA vailable: http://e2fsprogs.sourceforge.net/ext2.htm l\nA simple Linux \ufb01le system based on the ideas found in FFS. For a while it was quite heavily used; now\nit is really just in the kernel as an example of a simple \ufb01le sys tem.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n43\nLog-structured File Systems\nIn the early 90\u2019s, a group at Berkeley led by Professor John Ou sterhout\nand graduate student Mendel Rosenblum developed a new \ufb01le sy stem\nknown as the log-structured \ufb01le system [RO91]. Their motiva tion to do\nso was based on the following observations:\n\u2022 Memory sizes were growing : As memory got bigger , more data\ncould be cached in memory . As more data is cached, disk traf\ufb01c\nwould increasingly consist of writes, as reads would be serv iced in\nthe cache. Thus, \ufb01le system performance would largely be det er-\nmined by its performance for writes.\n\u2022 There was a large and growing gap between random I/O perfor-\nmance and sequential I/O performance : T ransfer bandwidth in-\ncreases roughly 50%-100% every year; seek and rotational de lay\ncosts decrease much more slowly , maybe at 5%-10% per year [P9 8].\nThus, if one is able to use disks in a sequential manner , one ge ts a\nhuge performance advantage, which grows over time.\n\u2022 Existing \ufb01le systems perform poorly on many common workload s:\nFor example, FFS [MJLF84] would perform a large number of wri tes\nto create a new \ufb01le of size one block: one for a new inode, one to\nupdate the inode bitmap, one to the directory data block that the\n\ufb01le is in, one to the directory inode to update it, one to the ne w data\nblock that is apart of the new \ufb01le, and one to the data bitmap to\nmark the data block as allocated. Thus, although FFS would pl ace\nall of these blocks within the same block group, FFS would inc ur\nmany short seeks and subsequent rotational delays and thus p er-\nformance would fall far short of peak sequential bandwidth.\n\u2022 File systems were not RAID-aware : For example, RAID-4 and RAID-\n5 have the small-write problem where a logical write to a single\nblock causes 4 physical I/Os to take place. Existing \ufb01le syst ems do\nnot try to avoid this worst-case RAID writing behavior .\nAn ideal \ufb01le system would thus focus on write performance, an d try\nto make use of the sequential bandwidth of the disk. Further , it would\nperform well on common workloads that not only write out data but also\n511\n512 LO G -S T R U C T U R E D FI L E SY S T E M S\nupdate on-disk metadata structures frequently . Finally , i t would work\nwell on RAIDs as well as single disks.\nThe new type of \ufb01le system Rosenblum and Ousterhout introduc ed\nwas called LFS, short for the Log-structured File System . When writ-\ning to disk, LFS \ufb01rst buffers all updates (including metadat a!) in an in-\n"
  },
  {
    "content": " E SY S T E M S\nupdate on-disk metadata structures frequently . Finally , i t would work\nwell on RAIDs as well as single disks.\nThe new type of \ufb01le system Rosenblum and Ousterhout introduc ed\nwas called LFS, short for the Log-structured File System . When writ-\ning to disk, LFS \ufb01rst buffers all updates (including metadat a!) in an in-\nmemory segment; when the segment is full, it is written to disk in one\nlong, sequential transfer to an unused part of the disk, i.e. , LFS never\noverwrites existing data, but rather always writes segments to free loca-\ntions. Because segments are large, the disk is used ef\ufb01cient ly , and perfor-\nmance of the \ufb01le system approaches its zenith.\nTH E CR U X :\nHO W TO MA K E AL L WR I T E S SE Q U E N T I A L WR I T E S ?\nHow can a \ufb01le system turns all writes into sequential writes? For\nreads, this task is impossible, as the desired block to be rea d may be any-\nwhere on disk. For writes, however , the \ufb01le system always has a choice,\nand it is exactly this choice we hope to exploit.\n43.1 W riting T o Disk Sequentially\nW e thus have our \ufb01rst challenge: how do we transform all updat es to\n\ufb01le-system state into a series of sequential writes to disk? T o understand\nthis better , let\u2019s use a simple example. Imagine we are writi ng a data block\nD to a \ufb01le. W riting the data block to disk might result in the fol lowing\non-disk layout, with D written at disk address A0:\nD\nA0\nHowever , when a user writes a data block, it is not only data th at gets\nwritten to disk; there is also other metadata that needs to be updated.\nIn this case, let\u2019s also write the inode (I ) of the \ufb01le to disk, and have it\npoint to the data block D. When written to disk, the data block and inode\nwould look something like this (note that the inode looks as b ig as the\ndata block, which generally isn\u2019t the case; in most systems, data blocks\nare 4 KB in size, whereas an inode is much smaller , around 128 b ytes):\nD\nA0\nI\nblk[0]:A0\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO G -S T R U C T U R ED FI L E SY S T E M S 513\nTI P : D E TA I L S MAT T E R\nAll interesting systems are comprised of a few general ideas and a\nnumber of details. Sometimes, when you are learning about th ese sys-\ntems, you think to yourself \u201cOh, I get the general idea; the re st is just de-\ntails,\u201d and you use this to only half-learn how things really work. Don\u2019t\ndo this! Many times, the details are critical. As we\u2019ll see wi th LFS, the\ngeneral idea is easy to understand, but to really build a work ing system,\nyou have to think through all of the tricky cases.\nThis basic idea, of simply writing all updates (such as data b locks,\ninodes, etc.) to the disk sequentially , sits at the heart of L FS. If you un-\nderstand this, you get the basic idea. But as with all complic ated systems,\nthe devil is in the details.\n43.2 W riting Sequentially And Effectively\nUnfortunately , writing to disk sequentially is not (alone) enough to\nguarantee ef\ufb01cient writes. For example, imagine if we wrote a single\nblock to address A, at time T . W e then wait a little while, and write to\nthe disk at address A + 1 (the next block address in sequential order),\nbut at time T + \u03b4 . In-between the \ufb01rst and second writes, unfortunately ,\nthe disk has rotated; when you issue the second write, it will thus wait\nfor most of a rotation before being committed (speci\ufb01c"
  },
  {
    "content": " if we wrote a single\nblock to address A, at time T . W e then wait a little while, and write to\nthe disk at address A + 1 (the next block address in sequential order),\nbut at time T + \u03b4 . In-between the \ufb01rst and second writes, unfortunately ,\nthe disk has rotated; when you issue the second write, it will thus wait\nfor most of a rotation before being committed (speci\ufb01cally , if the rotation\ntakes time Trotation , the disk will wait Trotation \u2212 \u03b4 before it can commit\nthe second write to the disk surface). And thus you can hopefu lly see\nthat simply writing to disk in sequential order is not enough to achieve\npeak performance; rather , you must issue a large number of contiguous\nwrites (or one large write) to the drive in order to achieve go od write\nperformance.\nT o achieve this end, LFS uses an ancient technique known as write\nbuffering1. Before writing to the disk, LFS keeps track of updates in\nmemory; when it has received a suf\ufb01cient number of updates, i t writes\nthem to disk all at once, thus ensuring ef\ufb01cient use of the dis k.\nThe large chunk of updates LFS writes at one time is referred t o by\nthe name of a segment. Although this term is over-used in computer\nsystems, here it just means a large-ish chunk which LFS uses t o group\nwrites. Thus, when writing to disk, LFS buffers updates in an in-memory\nsegment, and then writes the segment all at once to the disk. A s long as\nthe segment is large enough, these writes will be ef\ufb01cient.\nHere is an example, in which LFS buffers two sets updates into a small\nsegment; actual segments are larger (a few MB). The \ufb01rst upda te is of\n1 Indeed, it is hard to \ufb01nd a good citation for this idea, since i t was likely invented by many\nand very early on in the history of computing. For a study of th e bene\ufb01ts of write buffering,\nsee Solworth and Orji [SO90]; to learn about its potential ha rms, see Mogul [M94].\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n514 LO G -S T R U C T U R E D FI L E SY S T E M S\nfour block writes to \ufb01le j; the second is one block being added to \ufb01le k.\nLFS then commits the entire segment of seven blocks to disk at once. The\nresulting on-disk layout of these blocks is as follows:\nD[j,0]\nA0\nD[j,1]\nA1\nD[j,2]\nA2\nD[j,3]\nA3\nblk[0]:A0\nblk[1]:A1\nblk[2]:A2\nblk[3]:A3\nInode[j]\nD[k,0]\nA5\nblk[0]:A5\nInode[k]\n43.3 How Much T o Buffer?\nThis raises the following question: how many updates LFS sho uld\nbuffer before writing to disk? The answer , of course, depend s on the disk\nitself, speci\ufb01cally how high the positioning overhead is in comparison to\nthe transfer rate; see the FFS chapter for a similar analysis .\nFor example, assume that positioning (i.e., rotation and se ek over-\nheads) before each write takes roughly Tposition seconds. Assume further\nthat the disk transfer rate is Rpeak MB/s. How much should LFS buffer\nbefore writing when running on such a disk?\nThe way to think about this is that every time you write, you pa y a\n\ufb01xed overhead of the positioning cost. Thus, how much do you h ave\nto write in order to amortize that cost? The more you write, the better\n(obviously), and the closer you get to achieving peak bandwi dth.\nT o obtain a concrete answer , let\u2019s assume we are writing out D MB.\nThe time to write out this chunk of data ( Twrite ) is the positioning time\nTposition plus the time to transfer D ( D\nRpeak\n), or:\nTwrite ="
  },
  {
    "content": " h ave\nto write in order to amortize that cost? The more you write, the better\n(obviously), and the closer you get to achieving peak bandwi dth.\nT o obtain a concrete answer , let\u2019s assume we are writing out D MB.\nThe time to write out this chunk of data ( Twrite ) is the positioning time\nTposition plus the time to transfer D ( D\nRpeak\n), or:\nTwrite = Tposition + D\nRpeak\n(43.1)\nAnd thus the effective rate of writing ( Ref f ective), which is just the\namount of data written divided by the total time to write it, i s:\nRef f ective = D\nTwrite\n= D\nTposition + D\nRpeak\n. (43.2)\nWhat we\u2019re interested in is getting the effective rate ( Ref f ective) close\nto the peak rate. Speci\ufb01cally , we want the effective rate to b e some fraction\nF of the peak rate, where 0 < F < 1 (a typical F might be 0.9, or 90% of\nthe peak rate). In mathematical form, this means we want Ref f ective =\nF \u00d7 Rpeak .\nAt this point, we can solve for D:\nRef f ective = D\nTposition + D\nRpeak\n= F \u00d7 Rpeak (43.3)\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO G -S T R U C T U R ED FI L E SY S T E M S 515\nD = F \u00d7 Rpeak \u00d7 (Tposition + D\nRpeak\n) (43.4)\nD = (F \u00d7 Rpeak \u00d7 Tposition ) + (F \u00d7 Rpeak \u00d7 D\nRpeak\n) (43.5)\nD = F\n1 \u2212 F \u00d7 Rpeak \u00d7 Tposition (43.6)\nLet\u2019s do an example, with a disk with a positioning time of 10 m il-\nliseconds and peak transfer rate of 100 MB/s; assume we want a n ef-\nfective bandwidth of 90% of peak ( F = 0 . 9). In this case, D = 0.9\n0.1 \u00d7\n100 M B/s \u00d7 0. 01 seconds = 9 M B. T ry some different values to see\nhow much we need to buffer in order to approach peak bandwidth . How\nmuch is needed to reach 95% of peak? 99%?\n43.4 Problem: Finding Inodes\nT o understand how we \ufb01nd an inode in LFS, let us brie\ufb02y review h ow\nto \ufb01nd an inode in a typical U N I X \ufb01le system. In a typical \ufb01le system such\nas FFS, or even the old U N I X \ufb01le system, \ufb01nding inodes is easy , because\nthey are organized in an array and placed on disk at \ufb01xed locat ions.\nFor example, the old U N I X \ufb01le system keeps all inodes at a \ufb01xed por-\ntion of the disk. Thus, given an inode number and the start add ress, to\n\ufb01nd a particular inode, you can calculate its exact disk addr ess simply by\nmultiplying the inode number by the size of an inode, and addi ng that\nto the start address of the on-disk array; array-based index ing, given an\ninode number , is fast and straightforward.\nFinding an inode given an inode number in FFS is only slightly more\ncomplicated, because FFS splits up the inode table into chun ks and places\na group of inodes within each cylinder group. Thus, one must k now how\nbig each chunk of inodes is and the start addresses of each. Af ter that, the\ncalculations are similar and also easy .\nIn LFS, life is more dif\ufb01cult. Why? W ell, we\u2019ve managed to sca tter the\ninodes all throughout the disk! W orse, we never overwrite in place, and\nthus the latest version of an inode (i.e., the one we want) kee ps moving.\n43.5 Solution Through Indirection: The Inode Map\nT o remedy this, the designers of LFS introduced a level of indirection\n"
  },
  {
    "content": " life is more dif\ufb01cult. Why? W ell, we\u2019ve managed to sca tter the\ninodes all throughout the disk! W orse, we never overwrite in place, and\nthus the latest version of an inode (i.e., the one we want) kee ps moving.\n43.5 Solution Through Indirection: The Inode Map\nT o remedy this, the designers of LFS introduced a level of indirection\nbetween inode numbers and the inodes through a data structur e called\nthe inode map (imap) . The imap is a structure that takes an inode number\nas input and produces the disk address of the most recent vers ion of the\ninode. Thus, you can imagine it would often be implemented as a simple\narray, with 4 bytes (a disk pointer) per entry . Any time an inode is w ritten\nto disk, the imap is updated with its new location.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n516 LO G -S T R U C T U R E D FI L E SY S T E M S\nTI P : U S E A L E V E L OF IN D I R E C T I O N\nPeople often say that the solution to all problems in Compute r Science\nis simply a level of indirection . This is clearly not true; it is just the\nsolution to most problems. Y ou certainly can think of every virtualization\nwe have studied, e.g., virtual memory , as simply a level of in direction.\nAnd certainly the inode map in LFS is a virtualization of inod e numbers.\nHopefully you can see the great power of indirection in these examples,\nallowing us to freely move structures around (such as pages i n the VM\nexample, or inodes in LFS) without having to change every ref erence to\nthem. Of course, indirection can have a downside too: extra overhead. So\nnext time you have a problem, try solving it with indirection . But make\nsure to think about the overheads of doing so \ufb01rst.\nThe imap, unfortunately , needs to be kept persistent (i.e., written to\ndisk); doing so allows LFS to keep track of the locations of in odes across\ncrashes, and thus operate as desired. Thus, a question: wher e should the\nimap reside on disk?\nIt could live on a \ufb01xed part of the disk, of course. Unfortunat ely , as it\ngets updated frequently , this would then require updates to \ufb01le structures\nto be followed by writes to the imap, and hence performance wo uld suffer\n(i.e., there would be more disk seeks, between each update an d the \ufb01xed\nlocation of the imap).\nInstead, LFS places chunks of the inode map right next to wher e it is\nwriting all of the other new information. Thus, when appendi ng a data\nblock to a \ufb01le k, LFS actually writes the new data block, its inode, and a\npiece of the inode map all together onto the disk, as follows:\nD\nA0\nI[k]\nblk[0]:A0\nA1\nimap\nmap[k]:A1\nIn this picture, the piece of the imap array stored in the bloc k marked\nimap tells LFS that the inode k is at disk address A1; this inode, in turn,\ntells LFS that its data block D is at address A0.\n43.6 The Checkpoint Region\nThe clever reader (that\u2019s you, right?) might have noticed a p roblem\nhere. How do we \ufb01nd the inode map, now that pieces of it are also now\nspread across the disk? In the end, there is no magic: the \ufb01le s ystem must\nhave some \ufb01xed and known location on disk to begin a \ufb01le lookup.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO G -S T R U C T U R ED FI L E SY S T E M S 517\nLFS has just such a \ufb01xed place on disk for this, known as the check-\npoint region (CR"
  },
  {
    "content": " a \ufb01le lookup.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO G -S T R U C T U R ED FI L E SY S T E M S 517\nLFS has just such a \ufb01xed place on disk for this, known as the check-\npoint region (CR) . The checkpoint region contains pointers to (i.e., ad-\ndresses of) the latest pieces of the inode map, and thus the in ode map\npieces can be found by reading the CR \ufb01rst. Note the checkpoin t region\nis only updated periodically (say every 30 seconds or so), an d thus perfor-\nmance is not ill-affected. Thus, the overall structure of th e on-disk layout\ncontains a checkpoint region (which points to the latest pie ces of the in-\node map); the inode map pieces each contain addresses of the i nodes; the\ninodes point to \ufb01les (and directories) just like typical U N I X \ufb01le systems.\nHere is an example of the checkpoint region (note it is all the way at\nthe beginning of the disk, at address 0), and a single imap chu nk, inode,\nand data block. A real \ufb01le system would of course have a much bi gger\nCR (indeed, it would have two, as we\u2019ll come to understand lat er), many\nimap chunks, and of course many more inodes, data blocks, etc .\nimap\n[k...k+N]:\nA2\nCR\n0\nD\nA0\nI[k]\nblk[0]:A0\nA1\nimap\nmap[k]:A1\nA2\n43.7 Reading A File From Disk: A Recap\nT o make sure you understand how LFS works, let us now walk thro ugh\nwhat must happen to read a \ufb01le from disk. Assume we have nothin g in\nmemory to begin. The \ufb01rst on-disk data structure we must read is the\ncheckpoint region. The checkpoint region contains pointer s (i.e., disk ad-\ndresses) to the entire inode map, and thus LFS then reads in th e entire in-\node map and caches it in memory . After this point, when given a n inode\nnumber of a \ufb01le, LFS simply looks up the inode-number to inode -disk-\naddress mapping in the imap, and reads in the most recent vers ion of the\ninode. T o read a block from the \ufb01le, at this point, LFS proceed s exactly\nas a typical U N I X \ufb01le system, by using direct pointers or indirect pointers\nor doubly-indirect pointers as need be. In the common case, L FS should\nperform the same number of I/Os as a typical \ufb01le system when re ading a\n\ufb01le from disk; the entire imap is cached and thus the extra wor k LFS does\nduring a read is to look up the inode\u2019s address in the imap.\n43.8 What About Directories?\nThus far , we\u2019ve simpli\ufb01ed our discussion a bit by only consid ering in-\nodes and data blocks. However , to access a \ufb01le in a \ufb01le system ( such as\n/home/remzi/foo, one of our favorite fake \ufb01le names), some directo-\nries must be accessed too. So how does LFS store directory dat a?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n518 LO G -S T R U C T U R E D FI L E SY S T E M S\nFortunately , directory structure is basically identical t o classic U N I X\n\ufb01le systems, in that a directory is just a collection of (name , inode number)\nmappings. For example, when creating a \ufb01le on disk, LFS must b oth write\na new inode, some data, as well as the directory data and its in ode that\nrefer to this \ufb01le. Remember that LFS will do so sequentially o n the disk\n(after buffering the updates for"
  },
  {
    "content": " X\n\ufb01le systems, in that a directory is just a collection of (name , inode number)\nmappings. For example, when creating a \ufb01le on disk, LFS must b oth write\na new inode, some data, as well as the directory data and its in ode that\nrefer to this \ufb01le. Remember that LFS will do so sequentially o n the disk\n(after buffering the updates for some time). Thus, creating a \ufb01le foo in a\ndirectory would lead to the following new structures on disk :\nD[k]\nA0\nI[k]\nblk[0]:A0\nA1\n(foo, k)\nD[dir]\nA2\nI[dir]\nblk[0]:A2\nA3\nmap[k]:A1\nmap[dir]:A3\nimap\nThe piece of the inode map contains the information for the lo cation of\nboth the directory \ufb01le dir as well as the newly-created \ufb01le f . Thus, when\naccessing \ufb01le foo (with inode number f ), you would \ufb01rst look in the\ninode map (usually cached in memory) to \ufb01nd the location of th e inode\nof directory dir (A3); you then read the directory inode, which gives you\nthe location of the directory data ( A2); reading this data block gives you\nthe name-to-inode-number mapping of ( foo, k). Y ou then consult the\ninode map again to \ufb01nd the location of inode number k (A1), and \ufb01nally\nread the desired data block at address A0.\nThere is one other serious problem in LFS that the inode map so lves,\nknown as the recursive update problem [Z+12]. The problem arises\nin any \ufb01le system that never updates in place (such as LFS), bu t rather\nmoves updates to new locations on the disk.\nSpeci\ufb01cally , whenever an inode is updated, its location on d isk changes.\nIf we hadn\u2019t been careful, this would have also entailed an up date to\nthe directory that points to this \ufb01le, which then would have m andated\na change to the parent of that directory , and so on, all the way up the \ufb01le\nsystem tree.\nLFS cleverly avoids this problem with the inode map. Even tho ugh\nthe location of an inode may change, the change is never re\ufb02ec ted in the\ndirectory itself; rather , the imap structure is updated whi le the directory\nholds the same name-to-inumber mapping. Thus, through indi rection,\nLFS avoids the recursive update problem.\n43.9 A New Problem: Garbage Collection\nY ou may have noticed another problem with LFS; it keeps writi ng\nnewer version of a \ufb01le, its inode, and in fact all data to new pa rts of the\ndisk. This process, while keeping writes ef\ufb01cient, implies that LFS leaves\nolder versions of \ufb01le structures all over the disk, scattere d throughout the\ndisk. W e call such old stuff garbage.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO G -S T R U C T U R ED FI L E SY S T E M S 519\nFor example, let\u2019s imagine the case where we have an existing \ufb01le re-\nferred to by inode number k, which points to a single data block D0. W e\nnow overwrite that block, generating both a new inode and a ne w data\nblock. The resulting on-disk layout of LFS would look someth ing like this\n(note we omit the imap and other structures for simplicity; a new chunk\nof imap would also have to be written to disk to point to the new inode):\nD0\nA0\nI[k]\nblk[0]:A0\n(both garbage)\nD0\nA4\nI[k]\nblk[0]:A4\nIn the diagram, you can see that both the inode and data block h ave\ntwo versions on disk, one old (the one on the left) and one curr ent and\n"
  },
  {
    "content": " would also have to be written to disk to point to the new inode):\nD0\nA0\nI[k]\nblk[0]:A0\n(both garbage)\nD0\nA4\nI[k]\nblk[0]:A4\nIn the diagram, you can see that both the inode and data block h ave\ntwo versions on disk, one old (the one on the left) and one curr ent and\nthus live (the one on the right). By the simple act of overwriting a data\nblock, a number of new structures must be persisted by LFS, th us leaving\nold versions of said blocks on the disk.\nAs another example, imagine we instead append a block to that orig-\ninal \ufb01le k. In this case, a new version of the inode is generated, but the\nold data block is still pointed to by the inode. Thus, it is sti ll live and very\nmuch apart of the current \ufb01le system:\nD0\nA0\nI[k]\nblk[0]:A0\n(garbage)\nD1\nA4\nI[k]\nblk[0]:A0\nblk[1]:A4\nSo what should we do with these older versions of inodes, data blocks,\nand so forth? One could keep those older versions around and a llow\nusers to restore old \ufb01le versions (for example, when they acc identally\noverwrite or delete a \ufb01le, it could be quite handy to do so); su ch a \ufb01le\nsystem is known as a versioning \ufb01le system because it keeps track of the\ndifferent versions of a \ufb01le.\nHowever , LFS instead keeps only the latest live version of a \ufb01 le; thus\n(in the background), LFS must periodically \ufb01nd these old dea d versions\nof \ufb01le data, inodes, and other structures, and clean them; cleaning should\nthus make blocks on disk free again for use in a subsequent wri tes. Note\nthat the process of cleaning is a form of garbage collection , a technique\nthat arises in programming languages that automatically fr ee unused mem-\nory for programs.\nEarlier we discussed segments as important as they are the me chanism\nthat enables large writes to disk in LFS. As it turns out, they are also quite\nintegral to effective cleaning. Imagine what would happen i f the LFS\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n520 LO G -S T R U C T U R E D FI L E SY S T E M S\ncleaner simply went through and freed single data blocks, in odes, etc.,\nduring cleaning. The result: a \ufb01le system with some number of free holes\nmixed between allocated space on disk. W rite performance wo uld drop\nconsiderably , as LFS would not be able to \ufb01nd a large contiguo us region\nto write to disk sequentially and with high performance.\nInstead, the LFS cleaner works on a segment-by-segment basi s, thus\nclearing up large chunks of space for subsequent writing. Th e basic clean-\ning process works as follows. Periodically , the LFS cleaner reads in a\nnumber of old (partially-used) segments, determines which blocks are\nlive within these segments, and then write out a new set of seg ments\nwith just the live blocks within them, freeing up the old ones for writing.\nSpeci\ufb01cally , we expect the cleaner to read in M existing segments, com-\npact their contents into N new segments (where N < M ), and then write\nthe N segments to disk in new locations. The old M segments are then\nfreed and can be used by the \ufb01le system for subsequent writes.\nW e are now left with two problems, however . The \ufb01rst is mechan ism:\nhow can LFS tell which blocks within a segment are live, and wh ich are\ndead? The second is policy: how often should the cleaner run, and which\nsegments should it pick to clean?\n43.10 Determining Block Liveness\nW e address the mechanism \ufb01rst. Given a data block D within an o n-\ndisk segment S, LFS must be able to determine whether D is live . T o do\nso, LFS adds a little extra"
  },
  {
    "content": " which blocks within a segment are live, and wh ich are\ndead? The second is policy: how often should the cleaner run, and which\nsegments should it pick to clean?\n43.10 Determining Block Liveness\nW e address the mechanism \ufb01rst. Given a data block D within an o n-\ndisk segment S, LFS must be able to determine whether D is live . T o do\nso, LFS adds a little extra information to each segment that d escribes each\nblock. Speci\ufb01cally , LFS includes, for each data block D, its inode number\n(which \ufb01le it belongs to) and its offset (which block of the \ufb01l e this is). This\ninformation is recorded in a structure at the head of the segm ent known\nas the segment summary block .\nGiven this information, it is straightforward to determine whether a\nblock is live or dead. For a block D located on disk at address A , look\nin the segment summary block and \ufb01nd its inode number N and off set\nT . Next, look in the imap to \ufb01nd where N lives and read N from dis k\n(perhaps it is already in memory , which is even better). Fina lly , using\nthe offset T , look in the inode (or some indirect block) to see where the\ninode thinks the Tth block of this \ufb01le is on disk. If it points e xactly to disk\naddress A, LFS can conclude that the block D is live. If it points anywhere\nelse, LFS can conclude that D is not in use (i.e., it is dead) an d thus know\nthat this version is no longer needed. A pseudocode summary o f this\nprocess is shown here:\n(N, T) = SegmentSummary[A];\ninode = Read(imap[N]);\nif (inode[T] == A)\n// block D is alive\nelse\n// block D is garbage\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO G -S T R U C T U R ED FI L E SY S T E M S 521\nHere is a diagram depicting the mechanism, in which the segme nt\nsummary block (marked SS ) records that the data block at address A0\nis actually a part of \ufb01le k at offset 0. By checking the imap for k, you can\n\ufb01nd the inode, and see that it does indeed point to that locati on.\nD\nA0\nI[k]\nblk[0]:A0\nA1\nimap\nmap[k]:A1\nss\nA0:\n(k,0)\nThere are some shortcuts LFS takes to make the process of dete rmining\nliveness more ef\ufb01cient. For example, when a \ufb01le is truncated or deleted,\nLFS increases its version number and records the new version number in\nthe imap. By also recording the version number in the on-disk segment,\nLFS can short circuit the longer check described above simpl y by compar-\ning the on-disk version number with a version number in the im ap, thus\navoiding extra reads.\n43.11 A Policy Question: Which Blocks T o Clean, And When?\nOn top of the mechanism described above, LFS must include a se t of\npolicies to determine both when to clean and which blocks are worth\ncleaning. Determining when to clean is easier; either perio dically , dur-\ning idle time, or when you have to because the disk is full.\nDetermining which blocks to clean is more challenging, and h as been\nthe subject of many research papers. In the original LFS pape r [RO91],\nthe authors describe an approach which tries to segregate hot and cold\nsegment. A hot segment is one in which the contents are being f requently\nover-written; thus, for such a segment, the best policy is to wait a long\ntime before cleaning it, as more and more blocks are getting o ver-written\n(in new segments) and thus being freed for use. A cold segment , in con-\ntrast, may have a few dead blocks but the rest of its contents a re relatively\nstable. Thus, the authors conclude that one should clean col d segments\nsooner and hot segments later , and develop"
  },
  {
    "content": "over-written; thus, for such a segment, the best policy is to wait a long\ntime before cleaning it, as more and more blocks are getting o ver-written\n(in new segments) and thus being freed for use. A cold segment , in con-\ntrast, may have a few dead blocks but the rest of its contents a re relatively\nstable. Thus, the authors conclude that one should clean col d segments\nsooner and hot segments later , and develop a heuristic that d oes exactly\nthat. However , as with most policies, this is just one approa ch, and by\nde\ufb01nition is not \u201cthe best\u201d approach; later approaches show how to do\nbetter [MR+97].\n43.12 Crash Recovery And The Log\nOne \ufb01nal problem: what happens if the system crashes while LF S is\nwriting to disk? As you may recall in the previous chapter abo ut jour-\nnaling, crashes during updates are tricky for \ufb01le systems, a nd thus some-\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n522 LO G -S T R U C T U R E D FI L E SY S T E M S\nthing LFS must consider as well.\nDuring normal operation, LFS buffers writes in a segment, an d then\n(when the segment is full, or when some amount of time has elap sed),\nwrites the segment to disk. LFS organizes these writes in a log, i.e., the\ncheckpoint region points to a head and tail segment, and each segment\npoints to the next segment to be written. LFS also periodical ly updates the\ncheckpoint region. Crashes could clearly happen during eit her of these\noperations (write to a segment, write to the CR). So how does L FS handle\ncrashes during writes to these structures?\nLet\u2019s cover the second case \ufb01rst. T o ensure that the CR update happens\natomically , LFS actually keeps two CRs, one at either end of t he disk, and\nwrites to them alternately . LFS also implements a careful pr otocol when\nupdating the CR with the latest pointers to the inode map and o ther infor-\nmation; speci\ufb01cally , it \ufb01rst writes out a header (with times tamp), then the\nbody of the CR, and then \ufb01nally one last block (also with a time stamp). If\nthe system crashes during a CR update, LFS can detect this by s eeing an\ninconsistent pair of timestamps. LFS will always choose to u se the most\nrecent CR that has consistent timestamps, and thus consiste nt update of\nthe CR is achieved.\nLet\u2019s now address the \ufb01rst case. Because LFS writes the CR eve ry 30\nseconds or so, the last consistent snapshot of the \ufb01le system may be quite\nold. Thus, upon reboot, LFS can easily recover by simply read ing in the\ncheckpoint region, the imap pieces it points to, and subsequ ent \ufb01les and\ndirectories; however , the last many seconds of updates woul d be lost.\nT o improve upon this, LFS tries to rebuild many of those segme nts\nthrough a technique known as roll forward in the database community .\nThe basic idea is to start with the last checkpoint region, \ufb01n d the end of\nthe log (which is included in the CR), and then use that to read through\nthe next segments and see if there are any valid updates withi n it. If there\nare, LFS updates the \ufb01le system accordingly and thus recover s much of\nthe data and metadata written since the last checkpoint. See Rosenblum\u2019s\naward-winning dissertation for details [R92].\n43.13 Summary\nLFS introduces a new approach to updating the disk. Instead o f over-\nwriting \ufb01les in places, LFS always writes to an unused portio n of the\ndisk, and then later reclaims that old space through cleanin g. This ap-\nproach, which in database systems is called shadow paging [L77] and in\n\ufb01le-system-speak is sometimes called copy-on-write, enables highly ef\ufb01-\ncient writing, as LFS can gather all updates into an in-memor y segment\nand"
  },
  {
    "content": " in places, LFS always writes to an unused portio n of the\ndisk, and then later reclaims that old space through cleanin g. This ap-\nproach, which in database systems is called shadow paging [L77] and in\n\ufb01le-system-speak is sometimes called copy-on-write, enables highly ef\ufb01-\ncient writing, as LFS can gather all updates into an in-memor y segment\nand then write them out together sequentially .\nThe downside to this approach is that it generates garbage; o ld copies\nof the data are scattered throughout the disk, and if one want s to reclaim\nsuch space for subsequent usage, one must clean old segments periodi-\ncally . Cleaning became the focus of much controversy in LFS, and con-\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO G -S T R U C T U R ED FI L E SY S T E M S 523\nTI P : T U R N FL AW S IN TO VI RT U E S\nWhenever your system has a fundamental \ufb02aw , see if you can tur n it\naround into a feature or something useful. NetApp\u2019s W AFL doe s this\nwith old \ufb01le contents; by making old versions available, W AF L no longer\nhas to worry about cleaning, and thus provides a cool feature and re-\nmoves the LFS cleaning problem all in one wonderful twist. Ar e there\nother examples of this in systems? Undoubtedly , but you\u2019ll h ave to think\nof them yourself, because this chapter is over with a capital \u201cO\u201d. Over .\nDone. Kaput. W e\u2019re out. Peace!\ncerns over cleaning costs [SS+95] perhaps limited LFS\u2019s ini tial impact on\nthe \ufb01eld. However , some modern commercial \ufb01le systems, incl uding Ne-\ntApp\u2019s W AFL [HLM94], Sun\u2019s ZFS [B07], and Linux btrfs [M07] adopt\na similar copy-on-write approach to writing to disk, and thu s the intel-\nlectual legacy of LFS lives on in these modern \ufb01le systems. In particular ,\nW AFL got around cleaning problems by turning them into a feat ure; by\nproviding old versions of the \ufb01le system via snapshots, users could ac-\ncess old \ufb01les whenever they deleted current ones accidental ly .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n524 LO G -S T R U C T U R E D FI L E SY S T E M S\nReferences\n[B07] \u201cZFS: The Last W ord in File Systems\u201d\nJeff Bonwick and Bill Moore\nA vailable: http://opensolaris.org/os/community/zfs/d ocs/zfs\nlast.pdf\nSlides on ZFS; unfortunately, there is no great ZFS paper .\n[HLM94] \u201cFile System Design for an NFS File Server Appliance \u201d\nDave Hitz, James Lau, Michael Malcolm\nUSENIX Spring \u201994\nW AFL takes many ideas from LFS and RAID and puts it into a high- speed NFS appliance for the\nmulti-billion dollar storage company NetApp.\n[L77] \u201cPhysical Integrity in a Large Segmented Database\u201d\nR. Lorie\nACM T ransactions on Databases, 1977, V olume 2:1, pages 91-1 04\nThe original idea of shadow paging is presented here.\n[M07] \u201cThe Btrfs Filesystem\u201d\nChris Mason\nSeptember 2007\nA vailable: oss.oracle.com/projects/btrfs/dist/docume ntation/btrfs-ukuug.pdf\nA recent copy-on-write Linux \ufb01le system, slowly gaining in i mportance and usage.\n[MJLF84] \u201cA Fast File System for UNIX\u201d\nMarshall K. McKusick, William N. Joy , Sam J. Lef\ufb02er , Robert S . Fabry\nACM TOCS, August, 1984, V olume 2, Number 3\nThe original FFS paper"
  },
  {
    "content": "ukuug.pdf\nA recent copy-on-write Linux \ufb01le system, slowly gaining in i mportance and usage.\n[MJLF84] \u201cA Fast File System for UNIX\u201d\nMarshall K. McKusick, William N. Joy , Sam J. Lef\ufb02er , Robert S . Fabry\nACM TOCS, August, 1984, V olume 2, Number 3\nThe original FFS paper; see the chapter on FFS for more detail s.\n[MR+97] \u201cImproving the Performance of Log-structured File Systems with Adaptive Meth-\nods\u201d Jeanna Neefe Matthews, Drew Roselli, Adam M. Costello, Randolph Y . W ang, Thomas E.\nAnderson\nSOSP 1997, pages 238-251, October , Saint Malo, France\nA more recent paper detailing better policies for cleaning i n LFS.\n[M94] \u201cA Better Update Policy\u201d\nJeffrey C. Mogul\nUSENIX A TC \u201994, June 1994\nIn this paper , Mogul \ufb01nds that read workloads can be harmed by buffering writes for too long and then\nsending them to the disk in a big burst. Thus, he recommends se nding writes more frequently and in\nsmaller batches.\n[P98] \u201cHardware T echnology T rends and Database Opportunit ies\u201d\nDavid A. Patterson\nACM SIGMOD \u201998 Keynote Address, Presented June 3, 1998, Seat tle, W ashington\nA vailable: http://www .cs.berkeley .edu/\u02dcpattrsn/talks/keynote.html\nA great set of slides on technology trends in computer system s. Hopefully, Patterson will create another\nof these sometime soon.\n[RO91] \u201cDesign and Implementation of the Log-structured Fi le System\u201d\nMendel Rosenblum and John Ousterhout\nSOSP \u201991, Paci\ufb01c Grove, CA, October 1991\nThe original SOSP paper about LFS, which has been cited by hun dreds of other papers and inspired\nmany real systems.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nLO G -S T R U C T U R ED FI L E SY S T E M S 525\n[R92] \u201cDesign and Implementation of the Log-structured Fil e System\u201d\nMendel Rosenblum\nhttp://www .eecs.berkeley .edu/Pubs/T echRpts/1992/CSD-92-696.pdf\nThe award-winning dissertation about LFS, with many of the d etails missing from the paper .\n[SS+95] \u201cFile system logging versus clustering: a performa nce comparison\u201d\nMargo Seltzer , Keith A. Smith, Hari Balakrishnan, Jacqueli ne Chang, Sara McMains, V enkata\nPadmanabhan\nUSENIX 1995 T echnical Conference, New Orleans, Louisiana, 1995\nA paper that showed the LFS performance sometimes has proble ms, particularly for workloads with\nmany calls to fsync() (such as database workloads). The paper was controversial a t the time.\n[SO90] \u201cW rite-Only Disk Caches\u201d\nJon A. Solworth, Cyril U. Orji\nSIGMOD \u201990, Atlantic City , New Jersey , May 1990\nAn early study of write buffering and its bene\ufb01ts. However , b uffering for too long can be harmful: see\nMogul [M94] for details.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n44\nData Integrity and Protection\nBeyond the basic advances found in the \ufb01le systems we have stu died thus\nfar , a number of features are worth studying. In this chapter , we focus on\nreliability once again (having previously studied storage system reliabil-\nity in the RAID chapter). Speci\ufb01cally , how should a \ufb01le syste m or storage\nsystem ensure that data is safe, given the unreliable nature of modern\nstorage devices?\nThis general area is referred to as data integrity or data protection .\nThus, we will now investigate techniques used to ensure that"
  },
  {
    "content": " number of features are worth studying. In this chapter , we focus on\nreliability once again (having previously studied storage system reliabil-\nity in the RAID chapter). Speci\ufb01cally , how should a \ufb01le syste m or storage\nsystem ensure that data is safe, given the unreliable nature of modern\nstorage devices?\nThis general area is referred to as data integrity or data protection .\nThus, we will now investigate techniques used to ensure that the data\nyou put into your storage system is the same when the storage s ystem\nreturns it to you.\nCR U X : H O W TO EN S U R E DATA IN T E G R I T Y\nHow should systems ensure that the data written to storage is pro-\ntected? What techniques are required? How can such techniqu es be made\nef\ufb01cient, with both low space and time overheads?\n44.1 Disk Failure Modes\nAs you learned in the chapter about RAID, disks are not perfec t, and\ncan fail (on occasion). In early RAID systems, the model of fa ilure was\nquite simple: either the entire disk is working, or it fails c ompletely , and\nthe detection of such a failure is straightforward. This fail-stop model of\ndisk failure makes building RAID relatively simple [S90].\nWhat you didn\u2019t learn is about all of the other types of failur e modes\nmodern disks exhibit. Speci\ufb01cally , as Bairavasundaram et a l. studied\nin great detail [B+07, B+08], modern disks will occasionall y seem to be\nmostly working but have trouble successfully accessing one or more blocks.\nSpeci\ufb01cally , two types of single-block failures are common and worthy of\nconsideration: latent-sector errors (LSEs) and block corruption . W e\u2019ll\nnow discuss each in more detail.\n527\n528 DATA IN T E G R I T Y A N D PR O T E C T I O N\nCheap Costly\nLSEs 9.40% 1.40%\nCorruption 0.50% 0.05%\nT able 44.1: Frequency of LSEs and Block Corruption\nLSEs arise when a disk sector (or group of sectors) has been da maged\nin some way . For example, if the disk head touches the surface for some\nreason (a head crash , something which shouldn\u2019t happen during nor-\nmal operation), it may damage the surface, making the bits un readable.\nCosmic rays can also \ufb02ip bits, leading to incorrect contents . Fortunately ,\nin-disk error correcting codes (ECC) are used by the drive to determine\nwhether the on-disk bits in a block are good, and in some cases , to \ufb01x\nthem; if they are not good, and the drive does not have enough i nforma-\ntion to \ufb01x the error , the disk will return an error when a reque st is issued\nto read them.\nThere are also cases where a disk block becomes corrupt in a way not\ndetectable by the disk itself. For example, buggy disk \ufb01rmwa re may write\na block to the wrong location; in such a case, the disk ECC indi cates the\nblock contents are \ufb01ne, but from the client\u2019s perspective th e wrong block\nis returned when subsequently accessed. Similarly , a block may get cor-\nrupted when it is transferred from the host to the disk across a faulty\nbus; the resulting corrupt data is stored by the disk, but it i s not what\nthe client desires. These types of faults are particularly i nsidious because\nthe are silent faults ; the disk gives no indication of the problem when\nreturning the faulty data.\nPrabhakaran et al. describes this more modern view of disk fa ilure as\nthe fail-partial disk failure model [P+05]. In this view , disks can still fail\nin their entirety (as was the case in the traditional fail-st op model); how-\never , disks can also seemingly be working and have one or more blocks\nbecome inaccessible (i.e., LSEs) or hold the wrong contents (i.e., corrup-\ntion). Thus, when accessing a seemingly-working disk, once in a while\nit may either return an error when trying to read or write a giv en block\n(a non-silent partial fault), and once in a while it may simpl y return the\nwrong data (a silent partial fault).\n"
  },
  {
    "content": " be working and have one or more blocks\nbecome inaccessible (i.e., LSEs) or hold the wrong contents (i.e., corrup-\ntion). Thus, when accessing a seemingly-working disk, once in a while\nit may either return an error when trying to read or write a giv en block\n(a non-silent partial fault), and once in a while it may simpl y return the\nwrong data (a silent partial fault).\nBoth of these types of faults are somewhat rare, but just how r are? T a-\nble\n44.1 summarizes some of the \ufb01ndings from the two Bairavasundaram\nstudies [B+07,B+08].\nThe table shows the percent of drives that exhibited at least one LSE\nor block corruption over the course of the study (about 3 year s, over\n1.5 million disk drives). The table further sub-divides the results into\n\u201ccheap\u201d drives (usually SA T A drives) and \u201ccostly\u201d drives (u sually SCSI\nor FibreChannel). As you can see from the table, while buying better\ndrives reduces the frequency of both types of problem (by abo ut an or-\nder of magnitude), they still happen often enough that you ne ed to think\ncarefully about them.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nDATA IN T E G R I T Y A N D PR O T E C T I O N 529\nSome additional \ufb01ndings about LSEs are:\n\u2022 Costly drives with more than one LSE are as likely to develop a d-\nditional errors as cheaper drives\n\u2022 For most drives, annual error rate increases in year two\n\u2022 LSEs increase with disk size\n\u2022 Most disks with LSEs have less than 50\n\u2022 Disks with LSEs are more likely to develop additional LSEs\n\u2022 There exists a signi\ufb01cant amount of spatial and temporal loc ality\n\u2022 Disk scrubbing is useful (most LSEs were found this way)\nSome \ufb01ndings about corruption:\n\u2022 Chance of corruption varies greatly across different drive models\nwithin the same drive class\n\u2022 Age affects are different across models\n\u2022 W orkload and disk size have little impact on corruption\n\u2022 Most disks with corruption only have a few corruptions\n\u2022 Corruption is not independent with a disk or across disks in R AID\n\u2022 There exists spatial locality , and some temporal locality\n\u2022 There is a weak correlation with LSEs\nT o learn more about these failures, you should likely read th e original\npapers [B+07,B+08]. But hopefully the main point should be c lear: if you\nreally wish to build a reliable storage system, you must incl ude machin-\nery to detect and recovery from both LSEs and block corruptio n.\n44.2 Handling Latent Sector Errors\nGiven these two new modes of partial disk failure, we should n ow try\nto see what we can do about them. Let\u2019s \ufb01rst tackle the easier o f the two,\nnamely latent sector errors.\nCR U X : H O W TO HA N D L E LAT E N T SE C TO R ER R O R S\nHow should a storage system handle latent sector errors? How much\nextra machinery is needed to handle this form of partial fail ure?\nAs it turns out, latent sector errors are rather straightfor ward to han-\ndle, as they are (by de\ufb01nition) easily detected. When a stora ge system\ntries to access a block, and the disk returns an error , the sto rage system\nshould simply use whatever redundancy mechanism it has to re turn the\ncorrect data. In a mirrored RAID, for example, the system sho uld access\nthe alternate copy; in a RAID-4 or RAID-5 system based on pari ty , the\nsystem should reconstruct the block from the other blocks in the parity\ngroup. Thus, easily detected problems such as LSEs are readi ly recovered\nthrough standard redundancy mechanisms.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n530 DATA IN T E G R I T Y A N D PR O T E C T I O N\nThe growing prevalence of LSEs has in\ufb02uenced RAID designs ov er"
  },
  {
    "content": "group. Thus, easily detected problems such as LSEs are readi ly recovered\nthrough standard redundancy mechanisms.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n530 DATA IN T E G R I T Y A N D PR O T E C T I O N\nThe growing prevalence of LSEs has in\ufb02uenced RAID designs ov er the\nyears. One particularly interesting problem arises in RAID -4/5 systems\nwhen both full-disk faults and LSEs occur in tandem. Speci\ufb01c ally , when\nan entire disk fails, the RAID tries to reconstruct the disk (say , onto a\nhot spare) by reading through all of the other disks in the par ity group\nand recomputing the missing values. If, during reconstruct ion, an LSE\nis encountered on any one of the other disks, we have a problem : the\nreconstruction cannot successfully complete.\nT o combat this issue, some systems add an extra degree of redu ndancy .\nFor example, NetApp\u2019s RAID-DP has the equivalent of two parity disks\ninstead of one [C+04]. When an LSE is discovered during recon struction,\nthe extra parity helps to reconstruct the missing block. As a lways, there is\na cost, in that maintaining two parity blocks for each stripe is more costly;\nhowever , the log-structured nature of the NetApp W AFL \ufb01le system mit-\nigates that cost in many cases [HLM94]. The remaining cost is space, in\nthe form of an extra disk for the second parity block.\n44.3 Detecting Corruption: The Checksum\nLet\u2019s now tackle the more challenging problem, that of silen t failures\nvia data corruption. How can we prevent users from getting ba d data\nwhen corruption arises, and thus leads to disks returning ba d data?\nCR U X : H O W TO PR E S E RV E DATA IN T E G R I T Y DE S P I T E CO R R U P T I O N\nGiven the silent nature of such failures, what can a storage s ystem do\nto detect when corruption arises? What techniques are neede d? How can\none implement them ef\ufb01ciently?\nUnlike latent sector errors, detection of corruption is a key problem.\nHow can a client tell that a block has gone bad? Once it is known that a\nparticular block is bad, recovery is the same as before: you need to have\nsome other copy of the block around (and hopefully , one that i s not cor-\nrupt!). Thus, we focus here on detection techniques.\nThe primary mechanism used by modern storage systems to pres erve\ndata integrity is called the checksum. A checksum is simply the result\nof a function that takes a chunk of data (say a 4KB block) as inp ut and\ncomputes a function over said data, producing a small summar y of the\ncontents of the data (say 4 or 8 bytes). This summary is referr ed to as the\nchecksum. The goal of such a computation is to enable a system to detect\nif data has somehow been corrupted or altered by storing the c hecksum\nwith the data and then con\ufb01rming upon later access that the da ta\u2019s cur-\nrent checksum matches the original storage value.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nDATA IN T E G R I T Y A N D PR O T E C T I O N 531\nTI P : T H E R E \u2019 S NO FR E E LU N C H\nThere\u2019s No Such Thing As A Free Lunch, or TNST AAFL for short, i s\nan old American idiom that implies that when you are seemingl y get-\nting something for free, in actuality you are likely paying s ome cost for\nit. It comes from the old days when diners would advertise a fr ee lunch\nfor customers, hoping to draw them in; only when you went in, d id you\nrealize that to acquire the \u201cfree\u201d lunch, you had to purchase one or more\nalcoholic beverages. Of course, this may not actually be a pr oblem, partic-\nularly if you are an aspiring alcoholic (or typical undergra duate student).\nCommon Checksum Functions\nA number of different functions"
  },
  {
    "content": " days when diners would advertise a fr ee lunch\nfor customers, hoping to draw them in; only when you went in, d id you\nrealize that to acquire the \u201cfree\u201d lunch, you had to purchase one or more\nalcoholic beverages. Of course, this may not actually be a pr oblem, partic-\nularly if you are an aspiring alcoholic (or typical undergra duate student).\nCommon Checksum Functions\nA number of different functions are used to compute checksum s, and\nvary in strength (i.e., how good they are at protecting data i ntegrity) and\nspeed (i.e., how quickly can they be computed). A trade-off t hat is com-\nmon in systems arises here: usually , the more protection you get, the\ncostlier it is. There is no such thing as a free lunch.\nOne simple checksum function that some use is based on exclus ive\nor (XOR). With XOR-based checksums, the checksum is compute d sim-\nply by XOR\u2019ing each chunk of the data block being checksummed , thus\nproducing a single value that represents the XOR of the entir e block.\nT o make this more concrete, imagine we are computing a 4-byte check-\nsum over a block of 16 bytes (this block is of course too small t o really be a\ndisk sector or block, but it will serve for the example). The 1 6 data bytes,\nin hex, look like this:\n365e c4cd ba14 8a92 ecef 2c3a 40be f666\nIf we view them in binary , we get the following:\n0011 0110 0101 1110 1100 0100 1100 1101\n1011 1010 0001 0100 1000 1010 1001 0010\n1110 1100 1110 1111 0010 1100 0011 1010\n0100 0000 1011 1110 1111 0110 0110 0110\nBecause we\u2019ve lined up the data in groups of 4 bytes per row , it is easy\nto see what the resulting checksum will be: simply perform an XOR over\neach column to get the \ufb01nal checksum value:\n0010 0000 0001 1011 1001 0100 0000 0011\nThe result, in hex, is 0x201b9403.\nXOR is a reasonable checksum but has its limitations. If, for example,\ntwo bits in the same position within each checksummed unit ch ange, the\nchecksum will not detect the corruption. For this reason, pe ople have\ninvestigated other checksum functions.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n532 DATA IN T E G R I T Y A N D PR O T E C T I O N\nAnother simple checksum function is addition. This approac h has\nthe advantage of being fast; computing it just requires perf orming 2\u2019s-\ncomplement addition over each chunk of the data, ignoring ov er\ufb02ow . It\ncan detect many changes in data, but is not good if the data, fo r example,\nis shifted.\nA slightly more complex algorithm is known as the Fletcher check-\nsum, named (as you might guess) for the inventor , John G. Fletche r [F82].\nIt is quite simple and involves the computation of two check b ytes, s1\nand s2. Speci\ufb01cally , assume a block D consists of bytes d1 ... dn; s1 is\nsimply de\ufb01ned as follows: s1 = s1 + di mod 255 (computed over all di);\ns2 in turn is: s2 = s2 + s1 mod 255 (again over all di) [F04]. The \ufb02etcher\nchecksum is known to be almost as strong as the CRC (described next),\ndetecting all single-bit errors, all double-bit errors, an d a large percentage\nof burst errors [F04].\nOne \ufb01nal commonly-used checksum is known as a cyclic redundancy\ncheck (CRC). While this sounds fancy , the basic idea is quite simple. As -\nsume you wish to compute the checksum over a data block D. All you do\nis treat D as if it is a large binary number (it is just a string of bits aft er all)\nand divide it by an agreed upon value ( k). The remainder of this division\nis the value of the"
  },
  {
    "content": "nal commonly-used checksum is known as a cyclic redundancy\ncheck (CRC). While this sounds fancy , the basic idea is quite simple. As -\nsume you wish to compute the checksum over a data block D. All you do\nis treat D as if it is a large binary number (it is just a string of bits aft er all)\nand divide it by an agreed upon value ( k). The remainder of this division\nis the value of the CRC. As it turns out, one can implement this binary\nmodulo operation rather ef\ufb01ciently , and hence the populari ty of the CRC\nin networking as well. See elsewhere for more details [M13].\nWhatever the method used, it should be obvious that there is n o per-\nfect checksum: it is possible two data blocks with non-ident ical contents\nwill have identical checksums, something referred to as a collision. This\nfact should be intuitive: after all, computing a checksum is taking some-\nthing large (e.g., 4KB) and producing a summary that is much s maller\n(e.g., 4 or 8 bytes). In choosing a good checksum function, we are thus\ntrying to \ufb01nd one that minimizes the chance of collisions whi le remain-\ning easy to compute.\nChecksum Layout\nNow that you understand a bit about how to compute a checksum, let\u2019s\nnext analyze how to use checksums in a storage system. The \ufb01rs t question\nwe must address is the layout of the checksum, i.e., how shoul d check-\nsums be stored on disk?\nThe most basic approach simply stores a checksum with each di sk sec-\ntor (or block). Given a data block D, let us call the checksum over that\ndata C(D). Thus, without checksums, the disk layout looks like this:\nD0 D1 D2 D3 D4 D5 D6\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nDATA IN T E G R I T Y A N D PR O T E C T I O N 533\nWith checksums, the layout adds a single checksum for every b lock:\nC[D0]\nD0\nC[D1]\nD1\nC[D2]\nD2\nC[D3]\nD3\nC[D4]\nD4\nBecause checksums are usually small (e.g., 8 bytes), and dis ks only can\nwrite in sector-sized chunks (512 bytes) or multiples there of, one problem\nthat arises is how to achieve the above layout. One solution e mployed by\ndrive manufacturers is to format the drive with 520-byte sec tors; an extra\n8 bytes per sector can be used to store the checksum.\nIn disks that don\u2019t have such functionality , the \ufb01le system m ust \ufb01gure\nout a way to store the checksums packed into 512-byte blocks. One such\npossibility is as follows:\nC[D0]\nC[D1]\nC[D2]\nC[D3]\nC[D4]\nD0 D1 D2 D3 D4\nIn this scheme, the n checksums are stored together in a sector , fol-\nlowed by n data blocks, followed by another checksum sector for the nex t\nn blocks, and so forth. This scheme has the bene\ufb01t of working on all disks,\nbut can be less ef\ufb01cient; if the \ufb01le system, for example, want s to overwrite\nblock D1, it has to read in the checksum sector containing C(D1), update\nC(D1) in it, and then write out the checksum sector as well as the new\ndata block D1 (thus, one read and two writes). The earlier approach (of\none checksum per sector) just performs a single write.\n44.4 Using Checksums\nWith a checksum layout decided upon, we can now proceed to act u-\nally understand how to use the checksums. When reading a block D, the\nclient (i.e., \ufb01le system or storage controller) also reads i ts checksum from\ndisk Cs(D), which we call the stored checksum (hence the subscript Cs ).\nThe client then computes the checksum over the retrieved block"
  },
  {
    "content": ".\n44.4 Using Checksums\nWith a checksum layout decided upon, we can now proceed to act u-\nally understand how to use the checksums. When reading a block D, the\nclient (i.e., \ufb01le system or storage controller) also reads i ts checksum from\ndisk Cs(D), which we call the stored checksum (hence the subscript Cs ).\nThe client then computes the checksum over the retrieved block D, which\nwe call the computed checksum Cc (D). At this point, the client com-\npares the stored and computed checksums; if they are equal (i .e., Cs(D)\n== Cc (D), the data has likely not been corrupted, and thus can be safel y\nreturned to the user . If they do not match (i.e., Cs(D) != Cc (D)), this im-\nplies the data has changed since the time it was stored (since the stored\nchecksum re\ufb02ects the value of the data at that time). In this c ase, we have\na corruption, which our checksum has helped us to detect.\nGiven a corruption, the natural question is what should we do about\nit? If the storage system has a redundant copy , the answer is e asy: try to\nuse it instead. If the storage system has no such copy , the lik ely answer is\nto return an error . In either case, realize that corruption d etection is not a\nmagic bullet; if there is no other way to get the non-corrupte d data, you\nare simply out of luck.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n534 DATA IN T E G R I T Y A N D PR O T E C T I O N\n44.5 A New Problem: Misdirected W rites\nThe basic scheme described above works well in the general ca se of\ncorrupted blocks. However , modern disks have a couple of unu sual fail-\nure modes that require different solutions.\nThe \ufb01rst failure mode of interest is called a misdirected write . This\narises in disk and RAID controllers which write the data to di sk correctly ,\nexcept in the wrong location. In a single-disk system, this means that the\ndisk wrote block Dx not to address x (as desired) but rather to address\ny (thus \u201ccorrupting\u201d Dy ); in addition, within a multi-disk system, the\ncontroller may also write Di,x not to address x of disk i but rather to\nsome other disk j. Thus our question:\nCR U X : H O W TO HA N D L E MI S D I R E C T E D WR I T E S\nHow should a storage system or disk controller detect misdir ected\nwrites? What additional features are required from the chec ksum?\nThe answer , not surprisingly , is simple: add a little more in formation\nto each checksum. In this case, adding a physical identi\ufb01er (physical\nID) is quite helpful. For example, if the stored information no w contains\nthe checksum C(D) as well as the disk and sector number of the block,\nit is easy for the client to determine whether the correct inf ormation re-\nsides within the block. Speci\ufb01cally , if the client is readin g block 4 on disk\n10 ( D10,4 ), the stored information should include that disk number an d\nsector offset, as shown below . If the information does not ma tch, a misdi-\nrected write has taken place, and a corruption is now detecte d. Here is an\nexample of what this added information would look like on a tw o-disk\nsystem. Note that this \ufb01gure, like the others before it, is no t to scale, as the\nchecksums are usually small (e.g., 8 bytes) whereas the bloc ks are much\nlarger (e.g., 4 KB or bigger):\nDisk 0\nDisk 1\nC[D0]\ndisk=0\nblock=0\nD0\nC[D1]\ndisk=0\nblock=1\nD1\nC[D2]\ndisk=0\nblock=2\nD2\nC[D0]\ndisk=1\nblock=0\nD0\nC[D1]\ndisk=1\nblock=1\nD"
  },
  {
    "content": " (e.g., 4 KB or bigger):\nDisk 0\nDisk 1\nC[D0]\ndisk=0\nblock=0\nD0\nC[D1]\ndisk=0\nblock=1\nD1\nC[D2]\ndisk=0\nblock=2\nD2\nC[D0]\ndisk=1\nblock=0\nD0\nC[D1]\ndisk=1\nblock=1\nD1\nC[D2]\ndisk=1\nblock=2\nD2\nY ou can see from the on-disk format that there is now a fair amo unt of\nredundancy on disk: for each block, the disk number is repeat ed within\neach block, and the offset of the block in question is also kep t next to the\nblock itself. The presence of redundant information should be no sur-\nprise, though; redundancy is the key to error detection (in t his case) and\nrecovery (in others). A little extra information, while not strictly needed\nwith perfect disks, can go a long ways in helping detect probl ematic situ-\nations should they arise.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nDATA IN T E G R I T Y A N D PR O T E C T I O N 535\n44.6 One Last Problem: Lost W rites\nUnfortunately , misdirected writes are not the last problem we will\naddress. Speci\ufb01cally , some modern storage devices also hav e an issue\nknown as a lost write , which occurs when the device informs the upper\nlayer that a write has completed but in fact it never is persis ted; thus,\nwhat remains is left is the old contents of the block rather th an the up-\ndated new contents.\nThe obvious question here is: do any of our checksumming stra tegies\nfrom above (e.g., basic checksums, or physical identity) he lp to detect\nlost writes? Unfortunately , the answer is no: the old block l ikely has a\nmatching checksum, and the physical ID used above (disk numb er and\nblock offset) will also be correct. Thus our \ufb01nal problem:\nCR U X : H O W TO HA N D L E LO S T WR I T E S\nHow should a storage system or disk controller detect lost wr ites?\nWhat additional features are required from the checksum?\nThere are a number of possible solutions that can help [K+08] . One\nclassic approach [BS04] is to perform a write verify or read-after-write;\nby immediately reading back the data after a write, a system c an ensure\nthat the data indeed reached the disk surface. This approach , however , is\nquite slow , doubling the number of I/Os needed to complete a w rite.\nSome systems add a checksum elsewhere in the system to detect lost\nwrites. For example, Sun\u2019s Zettabyte File System (ZFS) includes a check-\nsum in each \ufb01le system inode and indirect block for every bloc k included\nwithin a \ufb01le. Thus, even if the write to a data block itself is l ost, the check-\nsum within the inode will not match the old data. Only if the wr ites to\nboth the inode and the data are lost simultaneously will such a scheme\nfail, an unlikely (but unfortunately , possible!) situatio n.\n44.7 Scrubbing\nGiven all of this discussion, you might be wondering: when do these\nchecksums actually get checked? Of course, some amount of ch ecking\noccurs when data is accessed by applications, but most data i s rarely\naccessed, and thus would remain unchecked. Unchecked data i s prob-\nlematic for a reliable storage system, as bit rot could event ually affect all\ncopies of a particular piece of data.\nT o remedy this problem, many systems utilize disk scrubbing of var-\nious forms [K+08]. By periodically reading through every block of the\nsystem, and checking whether checksums are still valid, the disk system\ncan reduce the chances that all copies of a certain data item b ecome cor-\nrupted. T ypical systems schedule scans on a nightly or weekl y basis.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E"
  },
  {
    "content": " forms [K+08]. By periodically reading through every block of the\nsystem, and checking whether checksums are still valid, the disk system\ncan reduce the chances that all copies of a certain data item b ecome cor-\nrupted. T ypical systems schedule scans on a nightly or weekl y basis.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n536 DATA IN T E G R I T Y A N D PR O T E C T I O N\n44.8 Overheads Of Checksumming\nBefore closing, we now discuss some of the overheads of using check-\nsums for data protection. There are two distinct kinds of ove rheads, as is\ncommon in computer systems: space and time.\nSpace overheads come in two forms. The \ufb01rst is on the disk (or o ther\nstorage medium) itself; each stored checksum takes up room o n the disk,\nwhich can no longer be used for user data. A typical ratio migh t be an 8-\nbyte checksum per 4 KB data block, for a 0.19% on-disk space ov erhead.\nThe second type of space overhead comes in the memory of the sy s-\ntem. When accessing data, there must now be room in memory for the\nchecksums as well as the data itself. However , if the system s imply checks\nthe checksum and then discards it once done, this overhead is short-lived\nand not much of a concern. Only if checksums are kept in memory (for\nan added level of protection against memory corruption [Z+1 3]) will this\nsmall overhead be observable.\nWhile space overheads are small, the time overheads induced by check-\nsumming can be quite noticeable. Minimally , the CPU must com pute the\nchecksum over each block, both when the data is stored (to det ermine\nthe value of the stored checksum) as well as when it is accesse d (to com-\npute the checksum again and compare it against the stored che cksum).\nOne approach to reducing CPU overheads, employed by many sys tems\nthat use checksums (including network stacks), is to combin e data copy-\ning and checksumming into one streamlined activity; becaus e the copy is\nneeded anyhow (e.g., to copy the data from the kernel page cac he into a\nuser buffer), combined copying/checksumming can be quite e ffective.\nBeyond CPU overheads, some checksumming schemes can induce ex-\ntra I/O overheads, particularly when checksums are stored d istinctly from\nthe data (thus requiring extra I/Os to access them), and for a ny extra I/O\nneeded for background scrubbing. The former can be reduced b y design;\nthe latter can be tuned and thus its impact limited, perhaps b y control-\nling when such scrubbing activity takes place. The middle of the night,\nwhen most (not all!) productive workers have gone to bed, may be a\ngood time to perform such scrubbing activity and increase th e robustness\nof the storage system.\n44.9 Summary\nW e have discussed data protection in modern storage systems , focus-\ning on checksum implementation and usage. Different checks ums protect\nagainst different types of faults; as storage devices evolv e, new failure\nmodes will undoubtedly arise. Perhaps such change will forc e the re-\nsearch community and industry to revisit some of these basic approaches,\nor invent entirely new approaches altogether . Time will tel l. Or it won\u2019t.\nTime is funny that way .\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nDATA IN T E G R I T Y A N D PR O T E C T I O N 537\nReferences\n[B+08] \u201cAn Analysis of Data Corruption in the Storage Stack\u201d\nLakshmi N. Bairavasundaram, Garth R. Goodson, Bianca Schro eder ,\nAndrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau\nF AST \u201908, San Jose, CA, February 2008\nThe \ufb01rst paper to truly study disk corruption in great detail , focusing on how often such corruption\noccurs over three years for over 1.5 million drives. Lakshmi did"
  },
  {
    "content": " Bairavasundaram, Garth R. Goodson, Bianca Schro eder ,\nAndrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau\nF AST \u201908, San Jose, CA, February 2008\nThe \ufb01rst paper to truly study disk corruption in great detail , focusing on how often such corruption\noccurs over three years for over 1.5 million drives. Lakshmi did this work while a graduate student at\nWisconsin under our supervision, but also in collaboration with his colleagues at NetApp where he was\nan intern for multiple summers. A great example of how workin g with industry can make for much\nmore interesting and relevant research.\n[BS04] \u201cCommercial Fault T olerance: A T ale of T wo Systems\u201d\nW endy Bartlett, Lisa Spainhower\nIEEE T ransactions on Dependable and Secure Computing, V ol. 1, No. 1, January 2004\nThis classic in building fault tolerant systems is an excell ent overview of the state of the art from both\nIBM and T andem. Another must read for those interested in the area.\n[C+04] \u201cRow-Diagonal Parity for Double Disk Failure Correc tion\u201d\nP . Corbett, B. English, A. Goel, T . Grcanac, S. Kleiman, J. Le ong, S. Sankar\nF AST \u201904, San Jose, CA, February 2004\nAn early paper on how extra redundancy helps to solve the comb ined full-disk-failure/partial-disk-failure\nproblem. Also a nice example of how to mix more theoretical wo rk with practical.\n[F04] \u201cChecksums and Error Control\u201d\nPeter M. Fenwick\nA vailable: www .cs.auckland.ac.nz/compsci314s2c/resources/Checksums.pdf\nA great simple tutorial on checksums, available to you for th e amazing cost of free.\n[F82] \u201cAn Arithmetic Checksum for Serial T ransmissions\u201d\nJohn G. Fletcher\nIEEE T ransactions on Communication, V ol. 30, No. 1, January 1982\nFletcher\u2019s original work on his eponymous checksum. Of cour se, he didn\u2019t call it the Fletcher checksum,\nrather he just didn\u2019t call it anything, and thus it became nat ural to name it after the inventor . So don\u2019t\nblame old Fletch for this seeming act of braggadocio.\n[HLM94] \u201cFile System Design for an NFS File Server Appliance \u201d\nDave Hitz, James Lau, Michael Malcolm\nUSENIX Spring \u201994\nThe pioneering paper that describes the ideas and product at the heart of NetApp\u2019s core. Based on this\nsystem, NetApp has grown into a multi-billion dollar storag e company. If you\u2019re interested in learning\nmore about its founding, read Hitz\u2019s autobiography \u201cHow to C astrate a Bull: Unexpected Lessons on\nRisk, Growth, and Success in Business\u201d (which is the actual t itle, no joking). And you thought you\ncould avoid bull castration by going into Computer Science.\n[K+08] \u201cParity Lost and Parity Regained\u201d\nAndrew Krioukov , Lakshmi N. Bairavasundaram, Garth R. Good son, Kiran Srinivasan,\nRandy Thelen, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Du sseau\nF AST \u201908, San Jose, CA, February 2008\nThis work of ours, joint with colleagues at NetApp, explores how different checksum schemes work (or\ndon\u2019t work) in protecting data. We reveal a number of interes ting \ufb02aws in current protection strategies,\nsome of which have led to \ufb01xes in commercial products.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n538 DATA IN T E G R I T Y A N D PR O T E C T I O N\n[M13] \u201cCyclic Redundancy Checks\u201d\nAuthor Unknown\nA vailable: http://www .mathpages.com/home/kmath458.htm\nNot sure who wrote this, but a super clear and"
  },
  {
    "content": " C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n538 DATA IN T E G R I T Y A N D PR O T E C T I O N\n[M13] \u201cCyclic Redundancy Checks\u201d\nAuthor Unknown\nA vailable: http://www .mathpages.com/home/kmath458.htm\nNot sure who wrote this, but a super clear and concise descrip tion of CRCs is available here. The internet\nis full of information, as it turns out.\n[P+05] \u201cIRON File Systems\u201d\nVijayan Prabhakaran, Lakshmi N. Bairavasundaram, Nitin Ag rawal, Haryadi S. Gunawi, An-\ndrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau\nSOSP \u201905, Brighton, England, October 2005\nOur paper on how disks have partial failure modes, which incl udes a detailed study of how \ufb01le systems\nsuch as Linux ext3 and Windows NTFS react to such failures. As it turns out, rather poorly! We found\nnumerous bugs, design \ufb02aws, and other oddities in this work. Some of this has fed back into the Linux\ncommunity, thus helping to yield a new more robust group of \ufb01l e systems to store your data.\n[RO91] \u201cDesign and Implementation of the Log-structured Fi le System\u201d\nMendel Rosenblum and John Ousterhout\nSOSP \u201991, Paci\ufb01c Grove, CA, October 1991\nAnother reference to this ground-breaking paper on how to im prove write performance in \ufb01le systems.\n[S90] \u201cImplementing Fault-T olerant Services Using The Sta te Machine Approach: A T utorial\u201d\nFred B. Schneider\nACM Surveys, V ol. 22, No. 4, December 1990\nThis classic paper talks generally about how to build fault t olerant services, and includes many basic\nde\ufb01nitions of terms. A must read for those building distribu ted systems.\n[Z+13] \u201cZettabyte Reliability with Flexible End-to-end Da ta Integrity\u201d\nY upu Zhang, Daniel S. Myers, Andrea C. Arpaci-Dusseau, Remz i H. Arpaci-Dusseau\nMSST \u201913, Long Beach, California, May 2013\nOur own work on adding data protection to the page cache of a sy stem, which protects against memory\ncorruption as well as on-disk corruption.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n45\nSummary Dialogue on Persistence\nStudent: Wow, \ufb01le systems seem interesting(!), and yet complicated.\nProfessor: That\u2019s why me and my spouse do our research in this space.\nStudent: Hold on. Are you one of the professors who wrote this book? I th ought\nwe were both just fake constructs, used to summarize some mai n points, and\nperhaps add a little levity in the study of operating systems .\nProfessor: Uh... er ... maybe. And none of your business! And who did you\nthink was writing these things? (sighs) Anyhow, let\u2019s get on with it: what did\nyou learn?\nStudent: Well, I think I got one of the main points, which is that it is mu ch\nharder to manage data for a long time (persistently) than it i s to manage data\nthat isn\u2019t persistent (like the stuff in memory). After all, if your machines crashes,\nmemory contents disappear! But the stuff in the \ufb01le system ne eds to live forever .\nProfessor: Well, as my friend Kevin Hultquist used to say, \u201cForever is a l ong\ntime\u201d; while he was talking about plastic golf tees, it\u2019s esp ecially true for the\ngarbage that is found in most \ufb01le systems.\nStudent: Well, you know what I mean! For a long time at least. And even si mple\nthings, such as updating a persistent storage device, are co mplicated, because you\nhave to care what happens if you crash. Recovery, something I had never even\nthought of when we were virtualizing"
  },
  {
    "content": " he was talking about plastic golf tees, it\u2019s esp ecially true for the\ngarbage that is found in most \ufb01le systems.\nStudent: Well, you know what I mean! For a long time at least. And even si mple\nthings, such as updating a persistent storage device, are co mplicated, because you\nhave to care what happens if you crash. Recovery, something I had never even\nthought of when we were virtualizing memory, is now a big deal !\nProfessor: T oo true. Updates to persistent storage have always been, an d re-\nmain, a fun and challenging problem.\nStudent: I also learned about cool things like disk scheduling, and ab out data\nprotection techniques like RAID and even checksums. That st uff is cool.\nProfessor: I like those topics too. Though, if you really get into it, the y can get a\nlittle mathematical. Check out some the latest on erasure co des if you want your\nbrain to hurt.\nStudent: I\u2019ll get right on that.\n539\n540 SU M M A RY DI A L O G U E O N PE R S I S T E N C E\nProfessor: (frowns) I think you\u2019re being sarcastic. Well, what else did you like?\nStudent: And I also liked all the thought that has gone into building te chnology-\naware systems, like FFS and LFS. Neat stuff! Being disk aware seems cool. But\nwill it matter anymore, with Flash and all the newest, latest technologies?\nProfessor: Good question! And a reminder to get working on that Flash cha p-\nter ... (scribbles note down to self) ... But yes, even with Fl ash, all of this stuff\nis still relevant, amazingly. For example, Flash T ranslati on Layers (FTLs) use\nlog-structuring internally, to improve performance and re liability of Flash-based\nSSDs. And thinking about locality is always useful. So while the technology\nmay be changing, many of the ideas we have studied will contin ue to be useful,\nfor a while at least.\nStudent: That\u2019s good. I just spent all this time learning it, and I didn \u2019t want it\nto all be for no reason!\nProfessor: Professors wouldn\u2019t do that to you, would they?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n46\nA Dialogue on Distribution\nProfessor: And thus we reach our \ufb01nal little piece in the world of operati ng\nsystems: distributed systems. Since we can\u2019t cover much her e, we\u2019ll sneak in a\nlittle intro here in the section on persistence, and focus mo stly on distributed \ufb01le\nsystems. Hope that is OK!\nStudent: Sounds OK. But what is a distributed system exactly, oh glori ous and\nall-knowing professor?\nProfessor: Well, I bet you know how this is going to go...\nStudent: There\u2019s a peach?\nProfessor: Exactly! But this time, it\u2019s far away from you, and may take so me\ntime to get the peach. And there are a lot of them! Even worse, s ometimes a\npeach becomes rotten. But you want to make sure that when anyb ody bites into\na peach, they will get a mouthful of deliciousness.\nStudent: This peach analogy is working less and less for me.\nProfessor: Come on! It\u2019s the last one, just go with it.\nStudent: Fine.\nProfessor: So anyhow, forget about the peaches. Building distributed s ystems\nis hard, because things fail all the time. Messages get lost, machines go down,\ndisks corrupt data. It\u2019s like the whole world is working agai nst you!\nStudent: But I use distributed systems all the time, right?\nProfessor: Y es! Y ou do. And... ?\nStudent: Well, it seems like they mostly work. After all, when I send a s earch\nrequest to google, it usually comes back in a snap, with some g reat results! Same\nthing when I use facebook, or Amazon, and so forth.\n541\n542 A D I A L O G U E O N DI S T R I B U T I O N\nProfessor: Y es, it is amazing. And"
  },
  {
    "content": ". And... ?\nStudent: Well, it seems like they mostly work. After all, when I send a s earch\nrequest to google, it usually comes back in a snap, with some g reat results! Same\nthing when I use facebook, or Amazon, and so forth.\n541\n542 A D I A L O G U E O N DI S T R I B U T I O N\nProfessor: Y es, it is amazing. And that\u2019s despite all of those failures t aking\nplace! Those companies build a huge amount of machinery into their systems so\nas to ensure that even though some machines have failed, the e ntire system stays\nup and running. They use a lot of techniques to do this: replic ation, retry, and\nvarious other tricks people have developed over time to dete ct and recover from\nfailures.\nStudent: Sounds interesting. Time to learn something for real?\nProfessor: It does seem so. Let\u2019s get to work! But \ufb01rst things \ufb01rst ...\n(bites into peach he has been holding, which unfortunately i s rotten)\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n47\nDistributed Systems\nDistributed systems have changed the face of the world. When your web\nbrowser connects to a web server somewhere else on the planet , it is par-\nticipating in what seems to be a simple form of a client/server distributed\nsystem. When you contact a modern web service such as Google o r face-\nbook, you are not just interacting with a single machine, how ever; be-\nhind the scenes, these complex services are built from a larg e collection\n(i.e., thousands) of machines, each of which cooperate to pr ovide the par-\nticular service of the site. Thus, it should be clear what mak es studying\ndistributed systems interesting. Indeed, it is worthy of an entire class;\nhere, we just introduce a few of the major topics.\nA number of new challenges arise when building a distributed system.\nThe major one we focus on is failure; machines, disks, networks, and\nsoftware all fail from time to time, as we do not (and likely , w ill never)\nknow how to build \u201cperfect\u201d components and systems. However , when\nwe build a modern web service, we\u2019d like it to appear to client s as if it\nnever fails; how can we accomplish this task?\nTH E CR U X :\nHO W TO BU I L D SY S T E M S TH AT WO R K WH E N CO M P O N E N T S FA I L\nHow can we build a working system out of parts that don\u2019t work c orrectly\nall the time? The basic question should remind you of some of t he topics\nwe discussed in RAID storage arrays; however , the problems h ere tend\nto be more complex, as are the solutions.\nInterestingly , while failure is a central challenge in cons tructing dis-\ntributed systems, it also represents an opportunity . Y es, m achines fail;\nbut the mere fact that a machine fails does not imply the entir e system\nmust fail. By collecting together a set of machines, we can bu ild a sys-\ntem that appears to rarely fail, despite the fact that its com ponents fail\nregularly . This reality is the central beauty and value of di stributed sys-\ntems, and why they underly virtually every modern web servic e you use,\nincluding Google, Facebook, etc.\n543\n544 DI S T R I B U T E D SY S T E M S\nTI P : C O M M U N I C AT I O N IS IN H E R E N T LY UN R E L I A B L E\nIn virtually all circumstances, it is good to view communica tion as a\nfundamentally unreliable activity . Bit corruption, down o r non-working\nlinks and machines, and lack of buffer space for incoming pac kets all lead\nto the same result: packets sometimes do not reach their dest ination. T o\nbuild reliable services atop such unreliable networks, we m ust consider\ntechniques that can cope with packet loss.\nOther important issues exist as well. System performance is often crit-\nical; with a network connecting our distributed system toge ther , system\ndesigners must often think carefully about how to accomplis h"
  },
  {
    "content": "links and machines, and lack of buffer space for incoming pac kets all lead\nto the same result: packets sometimes do not reach their dest ination. T o\nbuild reliable services atop such unreliable networks, we m ust consider\ntechniques that can cope with packet loss.\nOther important issues exist as well. System performance is often crit-\nical; with a network connecting our distributed system toge ther , system\ndesigners must often think carefully about how to accomplis h their given\ntasks, trying to reduce the number of messages sent and furth er make\ncommunication as ef\ufb01cient (low latency , high bandwidth) as possible.\nFinally , security is also a necessary consideration. When connecting\nto a remote site, having some assurance that the remote party is who\nthey say they are becomes a central problem. Further , ensuri ng that third\nparties cannot monitor or alter an on-going communication b etween two\nothers is also a challenge.\nIn this introduction, we\u2019ll cover the most basic new aspect t hat is new\nin a distributed system: communication. Namely , how should machines\nwithin a distributed system communicate with one another? W e\u2019ll start\nwith the most basic primitives available, messages, and bui ld a few higher-\nlevel primitives on top of them. As we said above, failure wil l be a central\nfocus: how should communication layers handle failures?\n47.1 Communication Basics\nThe central tenet of modern networking is that communicatio n is fun-\ndamentally unreliable. Whether in the wide-area Internet, or a local-area\nhigh-speed network such as In\ufb01niband, packets are regularl y lost, cor-\nrupted, or otherwise do not reach their destination.\nThere are a multitude of causes for packet loss or corruption . Some-\ntimes, during transmission, some bits get \ufb02ipped due to elec trical or other\nsimilar problems. Sometimes, an element in the system, such as a net-\nwork link or packet router or even the remote host, are someho w dam-\naged or otherwise not working correctly; network cables do a ccidentally\nget severed, at least sometimes.\nMore fundamental however is packet loss due to lack of buffer ing\nwithin a network switch, router , or endpoint. Speci\ufb01cally , even if we\ncould guarantee that all links worked correctly , and that al l the compo-\nnents in the system (switches, routers, end hosts) were up an d running as\nexpected, loss is still possible, for the following reason. Imagine a packet\narrives at a router; for the packet to be processed, it must be placed in\nmemory somewhere within the router . If many such packets arr ive at\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nDI S T R I B U T E D SY S T E M S 545\n// client code\nint main(int argc, char *argv[]) {\nint sd = UDP_Open(20000);\nstruct sockaddr_in addr, addr2;\nint rc = UDP_FillSockAddr(&addr, \"machine.cs.wisc.edu\", 10000);\nchar message[BUFFER_SIZE];\nsprintf(message, \"hello world\");\nrc = UDP_Write(sd, &addr, message, BUFFER_SIZE);\nif (rc > 0) {\nint rc = UDP_Read(sd, &addr2, buffer, BUFFER_SIZE);\n}\nreturn 0;\n}\n// server code\nint main(int argc, char *argv[]) {\nint sd = UDP_Open(10000);\nassert(sd > -1);\nwhile (1) {\nstruct sockaddr_in s;\nchar buffer[BUFFER_SIZE];\nint rc = UDP_Read(sd, &s, buffer, BUFFER_SIZE);\nif (rc > 0) {\nchar reply[BUFFER_SIZE];\nsprintf(reply, \"reply\");\nrc = UDP_Write(sd, &s, reply, BUFFER_SIZE);\n}\n}\nreturn 0;\n}\nFigure 47.1: Example UDP/IP Client/Server Code\nonce, it is possible that the memory within the router cannot accommo-\ndate all of the packets. The only choice the router has at that point is\nto drop one or more of the packets. This same behavior occurs at end\n"
  },
  {
    "content": "(reply, \"reply\");\nrc = UDP_Write(sd, &s, reply, BUFFER_SIZE);\n}\n}\nreturn 0;\n}\nFigure 47.1: Example UDP/IP Client/Server Code\nonce, it is possible that the memory within the router cannot accommo-\ndate all of the packets. The only choice the router has at that point is\nto drop one or more of the packets. This same behavior occurs at end\nhosts as well; when you send a large number of messages to a sin gle ma-\nchine, the machine\u2019s resources can easily become overwhelm ed, and thus\npacket loss again arises.\nThus, packet loss is fundamental in networking. The questio n thus\nbecomes: how should we deal with it?\n47.2 Unreliable Communication Layers\nOne simple way is this: we don\u2019t deal with it. Because some app li-\ncations know how to deal with packet loss, it is sometimes use ful to let\nthem communicate with a basic unreliable messaging layer , a n example\nof the end-to-end argument one often hears about (see the Aside at end\nof chapter). One excellent example of such an unreliable lay er is found\nin the UDP/IP networking stack available today on virtually all modern\nsystems. T o use UDP , a process uses the sockets API in order to create a\ncommunication endpoint ; processes on other machines (or on the same\nmachine) send UDP datagrams to the original process (a datagram is a\n\ufb01xed-sized message up to some max size).\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n546 DI S T R I B U T E D SY S T E M S\nint UDP_Open(int port) {\nint sd;\nif ((sd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) { return -1; }\nstruct sockaddr_in myaddr;\nbzero(&myaddr, sizeof(myaddr));\nmyaddr.sin_family = AF_INET;\nmyaddr.sin_port = htons(port);\nmyaddr.sin_addr.s_addr = INADDR_ANY;\nif (bind(sd, (struct sockaddr *) &myaddr, sizeof(myaddr)) == -1) {\nclose(sd);\nreturn -1;\n}\nreturn sd;\n}\nint UDP_FillSockAddr(struct sockaddr_in *addr, char *hostName, int port) {\nbzero(addr, sizeof(struct sockaddr_in));\naddr->sin_family = AF_INET; // host byte order\naddr->sin_port = htons(port); // short, network byte order\nstruct in_addr *inAddr;\nstruct hostent *hostEntry;\nif ((hostEntry = gethostbyname(hostName)) == NULL) { return -1; }\ninAddr = (struct in_addr *) hostEntry->h_addr;\naddr->sin_addr = *inAddr;\nreturn 0;\n}\nint UDP_Write(int sd, struct sockaddr_in *addr, char *buffer, int n) {\nint addrLen = sizeof(struct sockaddr_in);\nreturn sendto(sd, buffer, n, 0, (struct sockaddr *) addr, addrLen);\n}\nint UDP_Read(int sd, struct sockaddr_in *addr, char *buffer, int n) {\nint len = sizeof(struct sockaddr_in);\nreturn recvfrom(sd, buffer, n, 0, (struct sockaddr *) addr,\n(socklen_t *) &len);\nreturn rc;\n}\nFigure 47.2: A Simple UDP Library\nFigures\n47.1 and 47.2 show a simple client and server built on top of\nUDP/IP . The client can send a message to the server , which the n responds\nwith a reply . With this small amount of code, you have all you n eed to\nbegin building distributed systems!\nUDP is a great example of an unreliable communication layer . If you\nuse it, you will encounter situations where packets get lost (dropped) and\nthus do not reach their destination; the sender is never thus informed of\nthe loss. However , that does not mean that UDP does not guard a gainst\nany failures at all. For example, UDP includes a checksum to"
  },
  {
    "content": " this small amount of code, you have all you n eed to\nbegin building distributed systems!\nUDP is a great example of an unreliable communication layer . If you\nuse it, you will encounter situations where packets get lost (dropped) and\nthus do not reach their destination; the sender is never thus informed of\nthe loss. However , that does not mean that UDP does not guard a gainst\nany failures at all. For example, UDP includes a checksum to detect some\nforms of packet corruption.\nHowever , because many applications simply want to send data to a\ndestination and not worry about packet loss, we need more. Sp eci\ufb01cally ,\nwe need reliable communication on top of an unreliable netwo rk.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nDI S T R I B U T E D SY S T E M S 547\nTI P : U S E CH E C K S U M S FO R IN T E G R I T Y\nChecksums are a commonly-used method to detect corruption q uickly\nand effectively in modern systems. A simple checksum is addi tion: just\nsum up the bytes of a chunk of data; of course, many other more s ophis-\nticated checksums have been created, including basic cycli c redundancy\ncodes (CRCs), the Fletcher checksum, and many others [MK09] .\nIn networking, checksums are used as follows. Before sendin g a message\nfrom one machine to another , compute a checksum over the byte s of the\nmessage. Then send both the message and the checksum to the de sti-\nnation. At the destination, the receiver computes a checksu m over the\nincoming message as well; if this computed checksum matches the sent\nchecksum, the receiver can feel some assurance that the data likely did\nnot get corrupted during transmission.\nChecksums can be evaluated along a number of different axes. Effective-\nness is one primary consideration: does a change in the data l ead to a\nchange in the checksum? The stronger the checksum, the harde r it is for\nchanges in the data to go unnoticed. Performance is the other important\ncriterion: how costly is the checksum to compute? Unfortuna tely , effec-\ntiveness and performance are often at odds, meaning that che cksums of\nhigh quality are often expensive to compute. Life, again, is n\u2019t perfect.\n47.3 Reliable Communication Layers\nT o build a reliable communication layer , we need some new mec h-\nanisms and techniques to handle packet loss. Let us consider a simple\nexample in which a client is sending a message to a server over an unreli-\nable connection. The \ufb01rst question we must answer: how does t he sender\nknow that the receiver has actually received the message?\nThe technique that we will use is known as an acknowledgment, or\nack for short. The idea is simple: the sender sends a message to th e re-\nceiver; the receiver then sends a short message back to acknowledge its\nreceipt. Figure\n47.3 depicts the process.\nSender\n[send message]\nReceiver\n[receive message]\n[send ack]\n[receive ack]\nFigure 47.3: Message Plus Acknowledgment\nWhen the sender receives an acknowledgment of the message, i t can\nthen rest assured that the message did indeed receive the ori ginal mes-\nsage. However , what should the sender do if it does not receiv e an ac-\nknowledgment?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n548 DI S T R I B U T E D SY S T E M S\nSender\n[send message;\n keep copy;\n set timer]\nReceiver\n...\n (waiting for ack)\n...\n[timer goes off;\n set timer/retry]\n[receive message]\n[send ack]\n[receive ack;\n delete copy/timer off]\nFigure 47.4: Message Plus Acknowledgment: Dropped Request\nT o handle this case, we need an additional mechanism, known a s a\ntimeout. When the sender sends a message, the sender now sets a timer\nto go off after some period of time. If,"
  },
  {
    "content": "...\n[timer goes off;\n set timer/retry]\n[receive message]\n[send ack]\n[receive ack;\n delete copy/timer off]\nFigure 47.4: Message Plus Acknowledgment: Dropped Request\nT o handle this case, we need an additional mechanism, known a s a\ntimeout. When the sender sends a message, the sender now sets a timer\nto go off after some period of time. If, in that time, no acknow ledgment\nhas been received, the sender concludes that the message has been lost.\nThe sender then simply performs a retry of the send, sending the same\nmessage again with hopes that this time, it will get through. For this\napproach to work, the sender must keep a copy of the message ar ound,\nin case it needs to send it again. The combination of the timeo ut and\nthe retry have led some to call the approach timeout/retry; pretty clever\ncrowd, those networking types, no? Figure 47.4 shows an example.\nUnfortunately , timeout/retry in this form is not quite enou gh. Figure\n47.5 shows an example of packet loss which could lead to trouble. I n this\nexample, it is not the original message that gets lost, but th e acknowledg-\nment. From the perspective of the sender , the situation seem s the same:\nno ack was received, and thus a timeout and retry are in order . But from\nthe perspective of the receiver , it is quite different: now t he same message\nhas been received twice! While there may be cases where this i s OK, in\ngeneral it is not; imagine what would happen when you are down loading\na \ufb01le and extra packets are repeated inside the download. Thu s, when we\nare aiming for a reliable message layer , we also usually want to guarantee\nthat each message is received exactly once by the receiver .\nT o enable the receiver to detect duplicate message transmis sion, the\nsender has to identify each message in some unique way , and th e receiver\nneeds some way to track whether it has already seen each messa ge be-\nfore. When the receiver sees a duplicate transmission, it si mply acks the\nmessage, but (critically) does not pass the message to the application that\nreceives the data. Thus, the sender receives the ack but the m essage is not\nreceived twice, preserving the exactly-once semantics men tioned above.\nThere are myriad ways to detect duplicate messages. For exam ple, the\nsender could generate a unique ID for each message; the recei ver could\ntrack every ID it has ever seen. This approach could work, but it is pro-\nhibitively costly , requiring unbounded memory to track all IDs.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nDI S T R I B U T E D SY S T E M S 549\nSender\n[send message;\n keep copy;\n set timer]\nReceiver\n[receive message]\n[send ack]\n...\n (waiting for ack)\n...\n[timer goes off;\n set timer/retry]\n[receive message]\n[send ack]\n[receive ack;\n delete copy/timer off]\nFigure 47.5: Message Plus Acknowledgment: Dropped Reply\nA simpler approach, requiring little memory , solves this pr oblem, and\nthe mechanism is known as a sequence counter . With a sequence counter ,\nthe sender and receiver agree upon a start value (e.g., 1) for a counter\nthat each side will maintain. Whenever a message is sent, the current\nvalue of the counter is sent along with the message; this coun ter value\n(N ) serves as an ID for the message. After the message is sent, th e sender\nthen increments the value (to N + 1).\nThe receiver uses its counter value as the expected value for the ID\nof the incoming message from that sender . If the ID of a receiv ed mes-\nsage ( N ) matches the receiver \u2019s counter (also N ), it acks the message and\npasses it up to the application; in this case, the receiver co ncludes this\nis the \ufb01rst time this message has been received. The receiver then incre-\nments its counter (to N + 1), and waits for the next message.\nIf the ack is lost, the sender will"
  },
  {
    "content": " If the ID of a receiv ed mes-\nsage ( N ) matches the receiver \u2019s counter (also N ), it acks the message and\npasses it up to the application; in this case, the receiver co ncludes this\nis the \ufb01rst time this message has been received. The receiver then incre-\nments its counter (to N + 1), and waits for the next message.\nIf the ack is lost, the sender will timeout and re-send messag e N . This\ntime, the receiver \u2019s counter is higher ( N + 1), and thus the receiver knows\nit has already received this message. Thus it acks the messag e but does\nnot pass it up to the application. In this simple manner , sequenc e counters\ncan be used to avoid duplicates.\nThe most commonly used reliable communication layer is know n as\nTCP/IP, or just TCP for short. TCP has a great deal more sophistication\nthan we describe above, including machinery to handle conge stion in the\nnetwork [VJ90], multiple outstanding requests, and hundre ds of other\nsmall tweaks and optimizations. Read more about it if you\u2019re curious;\nbetter yet, take a networking course and learn that material well.\n47.4 Communication Abstractions\nGiven a basic messaging layer , we now approach the next quest ion\nin this chapter: what abstraction of communication should w e use when\nbuilding a distributed system?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n550 DI S T R I B U T E D SY S T E M S\nTI P : B E CA R E F U L SE T T I N G TH E TI M E O U T VA L U E\nAs you can probably guess from the discussion, setting the ti meout value\ncorrectly is an important aspect of using timeouts to retry m essage sends.\nIf the timeout is too small, the sender will re-send messages needlessly ,\nthus wasting CPU time on the sender and network resources. If the time-\nout is too large, the sender waits too long to re-send and thus perceived\nperformance at the sender is reduced. The \u201cright\u201d value, fro m the per-\nspective of a single client and server , is thus to wait just lo ng enough to\ndetect packet loss but no longer .\nHowever , there are often more than just a single client and se rver in a\ndistributed system, as we will see in future chapters. In a sc enario with\nmany clients sending to a single server , packet loss at the se rver may be\nan indicator that the server is overloaded. If true, clients might retry in\na different adaptive manner; for example, after the \ufb01rst tim eout, a client\nmight increase its timeout value to a higher amount, perhaps twice as\nhigh as the original value. Such an exponential back-off scheme, pio-\nneered in the early Aloha network and adopted in early Ethern et [A70],\navoid situations where resources are being overloaded by an excess of\nre-sends. Robust systems strive to avoid overload of this na ture.\nThe systems community developed a number of approaches over the\nyears. One body of work took OS abstractions and extended the m to\noperate in a distributed environment. For example, distributed shared\nmemory (DSM) systems enable processes on different machines to share\na large, virtual address space [LH89]. This abstraction tur ns a distributed\ncomputation into something that looks like a multi-threade d application;\nthe only difference is that these threads run on different ma chines instead\nof different processors within the same machine.\nThe way most DSM systems work is through the virtual memory sy s-\ntem of the OS. When a page is accessed on one machine, two thing s can\nhappen. In the \ufb01rst (best) case, the page is already local on t he machine,\nand thus the data is fetched quickly . In the second case, the p age is cur-\nrently on some other machine. A page fault occurs, and the pag e fault\nhandler sends a message to some other machine to fetch the pag e, install\nit in the page table of the requesting process, and continue e xecution.\nThis approach is not widely in use today for a number of reason s. The\nlargest problem for DSM is how it handles failure. Imagine, f or example,\nif a machine fails; what happens"
  },
  {
    "content": " the p age is cur-\nrently on some other machine. A page fault occurs, and the pag e fault\nhandler sends a message to some other machine to fetch the pag e, install\nit in the page table of the requesting process, and continue e xecution.\nThis approach is not widely in use today for a number of reason s. The\nlargest problem for DSM is how it handles failure. Imagine, f or example,\nif a machine fails; what happens to the pages on that machine? What if\nthe data structures of the distributed computation are spre ad across the\nentire address space? In this case, parts of these data struc tures would\nsuddenly become unavailable. Dealing with failure when par ts of your\naddress space go missing is hard; imagine a linked list that w here a next\npointer points into a portion of the address space that is gon e. Yikes!\nA further problem is performance. One usually assumes, when writ-\ning code, that access to memory is cheap. In DSM systems, some accesses\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nDI S T R I B U T E D SY S T E M S 551\nare inexpensive, but others cause page faults and expensive fetches from\nremote machines. Thus, programmers of such DSM systems had t o be\nvery careful to organize computations such that almost no co mmunica-\ntion occurred at all, defeating much of the point of such an ap proach.\nThough much research was performed in this space, there was l ittle prac-\ntical impact; nobody builds reliable distributed systems u sing DSM today .\n47.5 Remote Procedure Call (RPC)\nWhile OS abstractions turned out to be a poor choice for build ing dis-\ntributed systems, programming language (PL) abstractions make much\nmore sense. The most dominant abstraction is based on the ide a of a re-\nmote procedure call , or RPC for short [BN84] 1 .\nRemote procedure call packages all have a simple goal: to mak e the\nprocess of executing code on a remote machine as simple and st raight-\nforward as calling a local function. Thus, to a client, a proc edure call is\nmade, and some time later , the results are returned. The serv er simply\nde\ufb01nes some routines that it wishes to export. The rest of the magic is\nhandled by the RPC system, which in general has two pieces: a stub gen-\nerator (sometimes called a protocol compiler ), and the run-time library .\nW e\u2019ll now take a look at each of these pieces in more detail.\nStub Generator\nThe stub generator \u2019s job is simple: to remove some of the pain of packing\nfunction arguments and results into messages by automating it. Numer-\nous bene\ufb01ts arise: one avoids, by design, the simple mistake s that occur\nin writing such code by hand; further , a stub compiler can per haps opti-\nmize such code and thus improve performance.\nThe input to such a compiler is simply the set of calls a server wishes\nto export to clients. Conceptually , it could be something as simple as this:\ninterface {\nint func1(int arg1);\nint func2(int arg1, int arg2);\n};\nThe stub generator takes an interface like this and generate s a few dif-\nferent pieces of code. For the client, a client stub is generated, which\ncontains each of the functions speci\ufb01ed in the interface; a c lient program\nwishing to use this RPC service would link with this client st ub and call\ninto it in order to make RPCs.\nInternally , each of these functions in the client stub do all of the work\nneeded to perform the remote procedure call. T o the client, t he code just\n1 In modern programming languages, we might instead say remote method invocation\n(RMI), but who likes these languages anyhow , with all of their fan cy objects?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n552 DI S T R I B U T E D SY S T E M S\nappears as a function call (e.g., the client calls func1(x)); internally , the\ncode in the client stub for func1() does this:\n\u2022 Create a message buffer. A message"
  },
  {
    "content": " objects?\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n552 DI S T R I B U T E D SY S T E M S\nappears as a function call (e.g., the client calls func1(x)); internally , the\ncode in the client stub for func1() does this:\n\u2022 Create a message buffer. A message buffer is usually just a con-\ntiguous array of bytes of some size.\n\u2022 Pack the needed information into the message buffer. This infor-\nmation includes some kind of identi\ufb01er for the function to be called,\nas well as all of the arguments that the function needs (e.g., in our\nexample above, one integer for func1). The process of putting all\nof this information into a single contiguous buffer is somet imes re-\nferred to as the marshaling of arguments or the serialization of the\nmessage.\n\u2022 Send the message to the destination RPC server. The communi-\ncation with the RPC server , and all of the details required to make\nit operate correctly , are handled by the RPC run-time librar y , de-\nscribed further below .\n\u2022 W ait for the reply . Because function calls are usually synchronous,\nthe call will wait for its completion.\n\u2022 Unpack return code and other arguments. If the function just re-\nturns a single return code, this process is straightforward ; however ,\nmore complex functions might return more complex results (e .g., a\nlist), and thus the stub might need to unpack those as well. Th is\nstep is also known as unmarshaling or deserialization.\n\u2022 Return to the caller. Finally , just return from the client stub back\ninto the client code.\nFor the server , code is also generated. The steps taken on the server\nare as follows:\n\u2022 Unpack the message. This step, called unmarshaling or deserial-\nization, takes the information out of the incoming message. The\nfunction identi\ufb01er and arguments are extracted.\n\u2022 Call into the actual function. Finally! W e have reached the point\nwhere the remote function is actually executed. The RPC runt ime\ncalls into the function speci\ufb01ed by the ID and passes in the de sired\narguments.\n\u2022 Package the results. The return argument(s) are marshaled back\ninto a single reply buffer .\n\u2022 Send the reply . The reply is \ufb01nally sent to the caller .\nThere are a few other important issues to consider in a stub co mpiler .\nThe \ufb01rst is complex arguments, i.e., how does one package and send\na complex data structure? For example, when one calls the write()\nsystem call, one passes in three arguments: an integer \ufb01le de scriptor , a\npointer to a buffer , and a size indicating how many bytes (sta rting at the\npointer) are to be written. If an RPC package is passed a point er , it needs\nto be able to \ufb01gure out how to interpret that pointer , and perf orm the\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nDI S T R I B U T E D SY S T E M S 553\ncorrect action. Usually this is accomplished through eithe r well-known\ntypes (e.g., a buffer t that is used to pass chunks of data given a size,\nwhich the RPC compiler understands), or by annotating the da ta struc-\ntures with more information, enabling the compiler to know w hich bytes\nneed to be serialized.\nAnother important issue is the organization of the server wi th regards\nto concurrency . A simple server just waits for requests in a s imple loop,\nand handles each request one at a time. However , as you might h ave\nguessed, this can be grossly inef\ufb01cient; if one RPC call bloc ks (e.g., on\nI/O), server resources are wasted. Thus, most servers are co nstructed in\nsome sort of concurrent fashion. A common organization is a thread pool .\nIn this organization, a \ufb01nite set of threads are created when the server\nstarts; when a message arrives, it is dispatched to one of the se worker\nthreads, which then does the work of the RPC call, eventually"
  },
  {
    "content": "; if one RPC call bloc ks (e.g., on\nI/O), server resources are wasted. Thus, most servers are co nstructed in\nsome sort of concurrent fashion. A common organization is a thread pool .\nIn this organization, a \ufb01nite set of threads are created when the server\nstarts; when a message arrives, it is dispatched to one of the se worker\nthreads, which then does the work of the RPC call, eventually replying;\nduring this time, a main thread keeps receiving other reques ts, and per-\nhaps dispatching them to other workers. Such an organizatio n enables\nconcurrent execution within the server , thus increasing it s utilization; the\nstandard costs arise as well, mostly in programming complex ity , as the\nRPC calls may now need to use locks and other synchronization primi-\ntives in order to ensure their correct operation.\nRun-T ime Library\nThe run-time library handles much of the heavy lifting in an R PC system;\nmost performance and reliability issues are handled herein . W e\u2019ll now\ndiscuss some of the major challenges in building such a run-t ime layer .\nOne of the \ufb01rst challenges we must overcome is how to locate a r e-\nmote service. This problem, of naming, is a common one in distributed\nsystems, and in some sense goes beyond the scope of our curren t discus-\nsion. The simplest of approaches build on existing naming sy stems, e.g.,\nhostnames and port numbers provided by current internet pro tocols. In\nsuch a system, the client must know the hostname or IP address of the\nmachine running the desired RPC service, as well as the port n umber it is\nusing (a port number is just a way of identifying a particular communica-\ntion activity taking place on a machine, allowing multiple c ommunication\nchannels at once). The protocol suite must then provide a mec hanism to\nroute packets to a particular address from any other machine in the sys-\ntem. For a good discussion of naming, read either the Grapevi ne paper\nor about DNS and name resolution on the Internet, or better ye t just read\nthe excellent chapter in Saltzer and Kaashoek\u2019s book [SK09] .\nOnce a client knows which server it should talk to for a partic ular re-\nmote service, the next question is which transport-level pr otocol should\nRPC be built upon. Speci\ufb01cally , should the RPC system use a re liable pro-\ntocol such as TCP/IP , or be built upon an unreliable communic ation layer\nsuch as UDP/IP?\nNaively the choice would seem easy: clearly we would like for a re-\nquest to be reliably delivered to the remote server , and clea rly we would\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n554 DI S T R I B U T E D SY S T E M S\nlike to reliably receive a reply . Thus we should choose the re liable trans-\nport protocol such as TCP , right?\nUnfortunately , building RPC on top of a reliable communicat ion layer\ncan lead to a major inef\ufb01ciency in performance. Recall from t he discus-\nsion above how reliable communication layers work: with ack nowledg-\nments plus timeout/retry . Thus, when the client sends an RPC request\nto the server , the server responds with an acknowledgment so that the\ncaller knows the request was received. Similarly , when the s erver sends\nthe reply to the client, the client acks it so that the server k nows it was\nreceived. By building a request/response protocol (such as RPC) on top\nof a reliable communication layer , two \u201cextra\u201d messages are sent.\nFor this reason, many RPC packages are built on top of unrelia ble com-\nmunication layers, such as UDP . Doing so enables a more ef\ufb01ci ent RPC\nlayer , but does add the responsibility of providing reliabi lity to the RPC\nsystem. The RPC layer achieves the desired level of responsi bility by us-\ning timeout/retry and acknowledgments much like we describ ed above.\nBy using some form of sequence numbering, the communication layer\ncan guarantee that each RPC takes place exactly once (in the c ase of no\nfailure), or at most once (in the case where failure arises"
  },
  {
    "content": "ci ent RPC\nlayer , but does add the responsibility of providing reliabi lity to the RPC\nsystem. The RPC layer achieves the desired level of responsi bility by us-\ning timeout/retry and acknowledgments much like we describ ed above.\nBy using some form of sequence numbering, the communication layer\ncan guarantee that each RPC takes place exactly once (in the c ase of no\nfailure), or at most once (in the case where failure arises).\nOther Issues\nThere are some other issues an RPC run-time must handle as wel l. For\nexample, what happens when a remote call takes a long time to c om-\nplete? Given our timeout machinery , a long-running remote c all might\nappear as a failure to a client, thus triggering a retry , and t hus the need\nfor some care here. One solution is to use an explicit acknowl edgment\n(from the receiver to sender) when the reply isn\u2019t immediate ly generated;\nthis lets the client know the server received the request. Th en, after some\ntime has passed, the client can periodically ask whether the server is still\nworking on the request; if the server keeps saying \u201cyes\u201d, the client should\nbe happy and continue to wait (after all, sometimes a procedu re call can\ntake a long time to \ufb01nish executing).\nThe run-time must also handle procedure calls with large arg uments,\nlarger than what can \ufb01t into a single packet. Some lower-leve l network\nprotocols provide such sender-side fragmentation (of larger packets into\na set of smaller ones) and receiver-side reassembly (of smaller parts into\none larger logical whole); if not, the RPC run-time may have t o implement\nsuch functionality itself. See Birrell and Nelson\u2019s excell ent RPC paper for\ndetails [BN84].\nOne issue that many systems handle is that of byte ordering . As you\nmay know , some machines store values in what is known as big endian\nordering, whereas others use little endian ordering. Big endian stores\nbytes (say , of an integer) from most signi\ufb01cant to least sign i\ufb01cant bits,\nmuch like Arabic numerals; little endian does the opposite. Both are\nequally valid ways of storing numeric information; the ques tion here is\nhow to communicate between machines of different endianness.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nDI S T R I B U T E D SY S T E M S 555\nAside: The End-to-End Argument\nThe end-to-end argument makes the case that the highest level in a\nsystem, i.e., usually the application at \u201cthe end\u201d, is ultim ately the only\nlocale within a layered system where certain functionality can truly be\nimplemented. In their landmark paper , Saltzer et al. argue t his through\nan excellent example: reliable \ufb01le transfer between two mac hines. If you\nwant to transfer a \ufb01le from machine A to machine B, and make sure that\nthe bytes that end up on B are exactly the same as those that began on\nA, you must have an \u201cend-to-end\u201d check of this; lower-level re liable ma-\nchinery , e.g., in the network or disk, provides no such guara ntee.\nThe contrast is an approach which tries to solve the reliable -\ufb01le-\ntransfer problem by adding reliability to lower layers of th e system. For\nexample, say we build a reliable communication protocol and use it to\nbuild our reliable \ufb01le transfer . The communication protoco l guarantees\nthat every byte sent by a sender will be received in order by th e receiver ,\nsay using timeout/retry , acknowledgments, and sequence nu mbers. Un-\nfortunately , using such a protocol does not a reliable \ufb01le tr ansfer make;\nimagine the bytes getting corrupted in sender memory before the com-\nmunication even takes place, or something bad happening whe n the re-\nceiver writes the data to disk. In those cases, even though th e bytes were\ndelivered reliably across the network, our \ufb01le transfer was ultimately\nnot reliable. T o build a reliable \ufb01le transfer , one must incl ude end-to-\nend checks of reliability , e.g., after the entire transfer"
  },
  {
    "content": "agine the bytes getting corrupted in sender memory before the com-\nmunication even takes place, or something bad happening whe n the re-\nceiver writes the data to disk. In those cases, even though th e bytes were\ndelivered reliably across the network, our \ufb01le transfer was ultimately\nnot reliable. T o build a reliable \ufb01le transfer , one must incl ude end-to-\nend checks of reliability , e.g., after the entire transfer i s complete, read\nback the \ufb01le on the receiver disk, compute a checksum, and com pare that\nchecksum to that of the \ufb01le on the sender .\nThe corollary to this maxim is that sometimes having lower la yers pro-\nvide extra functionality can indeed improve system perform ance or oth-\nerwise optimize a system. Thus, you should not rule out havin g such\nmachinery at a lower-level in a system; rather , you should ca refully con-\nsider the utility of such machinery , given its eventual usag e in an overall\nsystem or application.\nRPC packages often handle this by providing a well-de\ufb01ned en dian-\nness within their message formats. In Sun\u2019s RPC package, the XDR (eX-\nternal Data Representation ) layer provides this functionality . If the ma-\nchine sending or receiving a message matches the endianness of XDR,\nmessages are just sent and received as expected. If, however , the machine\ncommunicating has a different endianness, each piece of inf ormation in\nthe message must be converted. Thus, the difference in endia nness can\nhave a small performance cost.\nA \ufb01nal issue is whether to expose the asynchronous nature of c om-\nmunication to clients, thus enabling some performance opti mizations.\nSpeci\ufb01cally , typical RPCs are made synchronously, i.e., when a client\nissues the procedure call, it must wait for the procedure cal l to return\nbefore continuing. Because this wait can be long, and becaus e the client\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n556 DI S T R I B U T E D SY S T E M S\nmay have other work it could be doing, some RPC packages enabl e you\nto invoke an RPC asynchronously. When an asynchronous RPC is is-\nsued, the RPC package sends the request and returns immediat ely; the\nclient is then free to do other work, such as call other RPCs or other use-\nful computation. The client at some point will want to see the results of\nthe asynchronous RPC; it thus calls back into the RPC layer , t elling it to\nwait for outstanding RPCs to complete, at which point return arguments\ncan be accessed.\n47.6 Summary\nW e have seen the introduction of a new topic, distributed sys tems, and\nits major issue: how to handle failure which is now a commonpl ace event.\nAs they say inside of Google, when you have just your desktop m achine,\nfailure is rare; when you\u2019re in a data center with thousands o f machines,\nfailure is happening all the time. The key to any distributed system is\nhow you deal with that failure.\nW e have also seen that communication forms the heart of any di s-\ntributed system. A common abstraction of that communicatio n is found\nin remote procedure call (RPC), which enables clients to mak e remote\ncalls on servers; the RPC package handles all of the gory deta ils, includ-\ning timeout/retry and acknowledgment, in order to deliver a service that\nclosely mirrors a local procedure call.\nThe best way to really understand an RPC package is of course t o use\none yourself. Sun\u2019s RPC system, using the stub compiler rpcgen, is a\ncommon one, and is widely available on systems today , includ ing Linux.\nT ry it out, and see what all the fuss is about.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nDI S T R I B U T E D SY S T E M S 557\nReferences\n[A70] \u201cThe ALOHA System \u2013 Another Alternative for Computer C ommunications\u201d\nN"
  },
  {
    "content": " it out, and see what all the fuss is about.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nDI S T R I B U T E D SY S T E M S 557\nReferences\n[A70] \u201cThe ALOHA System \u2013 Another Alternative for Computer C ommunications\u201d\nNorman Abramson\nThe 1970 Fall Joint Computer Conference\nThe ALOHA network pioneered some basic concepts in networki ng, including exponential back-off and\nretransmit, which formed the basis for communication in sha red-bus Ethernet networks for years.\n[BN84] \u201cImplementing Remote Procedure Calls\u201d\nAndrew D. Birrell, Bruce Jay Nelson\nACM TOCS, V olume 2:1, February 1984\nThe foundational RPC system upon which all others build. Y es , another pioneering effort from our\nfriends at Xerox P ARC.\n[MK09] \u201cThe Effectiveness of Checksums for Embedded Contro l Networks\u201d\nTheresa C. Maxino and Philip J. Koopman\nIEEE T ransactions on Dependable and Secure Computing, 6:1, January \u201909\nA nice overview of basic checksum machinery and some perform ance and robustness comparisons be-\ntween them.\n[LH89] \u201cMemory Coherence in Shared Virtual Memory Systems\u201d\nKai Li and Paul Hudak\nACM TOCS, 7:4, November 1989\nThe introduction of software-based shared memory via virtu al memory. An intriguing idea for sure, but\nnot a lasting or good one in the end.\n[SK09] \u201cPrinciples of Computer System Design\u201d\nJerome H. Saltzer and M. Frans Kaashoek\nMorgan-Kaufmann, 2009\nAn excellent book on systems, and a must for every bookshelf. One of the few terri\ufb01c discussions on\nnaming we\u2019ve seen.\n[SRC84] \u201cEnd-T o-End Arguments in System Design\u201d\nJerome H. Saltzer , David P . Reed, David D. Clark\nACM TOCS, 2:4, November 1984\nA beautiful discussion of layering, abstraction, and where functionality must ultimately reside in com-\nputer systems.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n48\nSun\u2019s Network File System (NFS)\nOne of the \ufb01rst uses of distributed client/server computing was in the\nrealm of distributed \ufb01le systems. In such an environment, th ere are a\nnumber of client machines and one server (or a few); the serve r stores the\ndata on its disks, and clients request data through well-for med protocol\nmessages. Figure 48.1 depicts the basic setup.\nClient 0\nClient 1\nClient 2\nClient 3\nServerNetwork\nFigure 48.1: A Generic Client/Server System\nAs you can see from the picture, the server has the disks, and c lients\nsend messages network to access their directories and \ufb01les o n those disks.\nWhy do we bother with this arrangement? (i.e., why don\u2019t we ju st let\nclients use their local disks?) W ell, primarily this setup a llows for easy\nsharing of data across clients. Thus, if you access a \ufb01le on one machin e\n(Client 0) and then later use another (Client 2), you will hav e the same\nview of the \ufb01le system. Y our data is naturally shared across t hese dif-\nferent machines. A secondary bene\ufb01t is centralized administration ; for\nexample, backing up \ufb01les can be done from the few server machi nes in-\nstead of from the multitude of clients. Another advantage co uld be secu-\nrity; having all servers in a locked machine room prevents certai n types\nof problems from arising.\n559\n560 SU N \u2019 S NE T W O R K FI L E SY S T E M (NF S)\nCR U X : H O W TO BU I L D A D I S T R I B U T E D FI L E SY S T E M\nHow do you build a distributed \ufb01le system? What are the key asp ects\nto think about"
  },
  {
    "content": " a locked machine room prevents certai n types\nof problems from arising.\n559\n560 SU N \u2019 S NE T W O R K FI L E SY S T E M (NF S)\nCR U X : H O W TO BU I L D A D I S T R I B U T E D FI L E SY S T E M\nHow do you build a distributed \ufb01le system? What are the key asp ects\nto think about? What is easy to get wrong? What can we learn fro m\nexisting systems?\n48.1 A Basic Distributed File System\nW e now will study the architecture of a simpli\ufb01ed distribute d \ufb01le sys-\ntem. A simple client/server distributed \ufb01le system has more components\nthan the \ufb01le systems we have studied so far . On the client side , there are\nclient applications which access \ufb01les and directories thro ugh the client-\nside \ufb01le system . A client application issues system calls to the client-side\n\ufb01le system (such as open(), read(), write(), close(), mkdir(),\netc.) in order to access \ufb01les which are stored on the server . T hus, to client\napplications, the \ufb01le system does not appear to be any differ ent than a lo-\ncal (disk-based) \ufb01le system, except perhaps for performanc e; in this way ,\ndistributed \ufb01le systems provide transparent access to \ufb01les, an obvious\ngoal; after all, who would want to use a \ufb01le system that requir ed a differ-\nent set of APIs or otherwise was a pain to use?\nThe role of the client-side \ufb01le system is to execute the actio ns needed\nto service those system calls. For example, if the client iss ues a read()\nrequest, the client-side \ufb01le system may send a message to the server-side\n\ufb01le system (or , more commonly , the \ufb01le server ) to read a particular block;\nthe \ufb01le server will then read the block from disk (or its own in -memory\ncache), and send a message back to the client with the request ed data.\nThe client-side \ufb01le system will then copy the data into the us er buffer\nsupplied to the read() system call and thus the request will complete.\nNote that a subsequent read() of the same block on the client may be\ncached in client memory or on the client\u2019s disk even; in the best such case,\nno network traf\ufb01c need be generated.\nClient Application\nClient-side File System\nNetworking Layer\nFile Server\nNetworking Layer\nDisks\nFigure 48.2: Distributed File System Architecture\nFrom this simple overview , you should get a sense that there a re two\nimportant pieces of software in a client/server distribute d \ufb01le system: the\nclient-side \ufb01le system and the \ufb01le server . T ogether their be havior deter-\nmines the behavior of the distributed \ufb01le system. Now it\u2019s ti me to study\none particular system: Sun\u2019s Network File System (NFS).\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSU N \u2019 S NE T W O R K FI L E SY S T E M (NF S) 561\nAS I D E : WH Y SE RV E R S CR A S H\nBefore getting into the details of the NFSv2 protocol, you mi ght be\nwondering: why do servers crash? W ell, as you might guess, th ere are\nplenty of reasons. Servers may simply suffer from a power outage (tem-\nporarily); only when power is restored can the machines be re started.\nServers are often comprised of hundreds of thousands or even millions\nof lines of code; thus, they have bugs (even good software has a few\nbugs per hundred or thousand lines of code), and thus they eve ntually\nwill trigger a bug that will cause them to crash. They also hav e memory\nleaks; even a small memory leak will cause a system to run out o f mem-\nory and crash. And, \ufb01nally , in distributed systems, there is a network\nbetween the client and the server; if the network acts strang ely"
  },
  {
    "content": " have bugs (even good software has a few\nbugs per hundred or thousand lines of code), and thus they eve ntually\nwill trigger a bug that will cause them to crash. They also hav e memory\nleaks; even a small memory leak will cause a system to run out o f mem-\nory and crash. And, \ufb01nally , in distributed systems, there is a network\nbetween the client and the server; if the network acts strang ely (for ex-\nample, if it becomes partitioned and clients and servers are working but\ncannot communicate), it may appear as if a remote machine has crashed,\nbut in reality it is just not currently reachable through the network.\n48.2 On T o NFS\nOne of the earliest and quite successful distributed system s was devel-\noped by Sun Microsystems, and is known as the Sun Network File Sys-\ntem (or NFS) [S86]. In de\ufb01ning NFS, Sun took an unusual approa ch: in-\nstead of building a proprietary and closed system, Sun inste ad developed\nan open protocol which simply speci\ufb01ed the exact message formats that\nclients and servers would use to communicate. Different gro ups could\ndevelop their own NFS servers and thus compete in an NFS marke tplace\nwhile preserving interoperability . It worked: today there are many com-\npanies that sell NFS servers (including Oracle/Sun, NetApp [HLM94],\nEMC, IBM, and others), and the widespread success of NFS is li kely at-\ntributed to this \u201copen market\u201d approach.\n48.3 Focus: Simple and Fast Server Crash Recovery\nIn this chapter , we will discuss the classic NFS protocol (ve rsion 2,\na.k.a. NFSv2), which was the standard for many years; small c hanges\nwere made in moving to NFSv3, and larger-scale protocol chan ges were\nmade in moving to NFSv4. However , NFSv2 is both wonderful and frus-\ntrating and thus serves as our focus.\nIn NFSv2, the main goal in the design of the protocol was simple and\nfast server crash recovery . In a multiple-client, single-server environment,\nthis goal makes a great deal of sense; any minute that the serv er is down\n(or unavailable) makes all the client machines (and their users) unhappy\nand unproductive. Thus, as the server goes, so goes the entir e system.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n562 SU N \u2019 S NE T W O R K FI L E SY S T E M (NF S)\n48.4 Key T o Fast Crash Recovery: Statelessness\nThis simple goal is realized in NFSv2 by designing what we ref er to\nas a stateless protocol. The server , by design, does not keep track of any-\nthing about what is happening at each client. For example, th e server\ndoes not know which clients are caching which blocks, or whic h \ufb01les are\ncurrently open at each client, or the current \ufb01le pointer pos ition for a \ufb01le,\netc. Simply put, the server does not track anything about wha t clients are\ndoing; rather , the protocol is designed to deliver in each pr otocol request\nall the information that is needed in order to complete the request. If it\ndoesn\u2019t now , this stateless approach will make more sense as we discuss\nthe protocol in more detail below .\nFor an example of a stateful (not stateless) protocol, consider the open()\nsystem call. Given a pathname, open() returns a \ufb01le descriptor (an inte-\nger). This descriptor is used on subsequent read() or write() requests\nto access various \ufb01le blocks, as in this application code (no te that proper\nerror checking of the system calls is omitted for space reaso ns):\nchar buffer[MAX];\nint fd = open(\"foo\", O_RDONLY); // get descriptor \"fd\"\nread(fd, buffer, MAX); // read MAX bytes from foo (via fd)\nread(fd, buffer, MAX); // read MAX bytes from foo\n...\nread(fd, buffer, MAX); // read MAX bytes from foo\nclose(fd); // close file\nFigure 48.3: Client Code: Reading From A File\n"
  },
  {
    "content": "char buffer[MAX];\nint fd = open(\"foo\", O_RDONLY); // get descriptor \"fd\"\nread(fd, buffer, MAX); // read MAX bytes from foo (via fd)\nread(fd, buffer, MAX); // read MAX bytes from foo\n...\nread(fd, buffer, MAX); // read MAX bytes from foo\nclose(fd); // close file\nFigure 48.3: Client Code: Reading From A File\nNow imagine that the client-side \ufb01le system opens the \ufb01le by s ending\na protocol message to the server saying \u201copen the \ufb01le \u2019foo\u2019 an d give me\nback a descriptor \u201d. The \ufb01le server then opens the \ufb01le locally on its side\nand sends the descriptor back to the client. On subsequent re ads, the\nclient application uses that descriptor to call the read() system call; the\nclient-side \ufb01le system then passes the descriptor in a messa ge to the \ufb01le\nserver , saying \u201cread some bytes from the \ufb01le that is referred to by the\ndescriptor I am passing you here\u201d.\nIn this example, the \ufb01le descriptor is a piece of shared state between\nthe client and the server (Ousterhout calls this distributed state [O91]).\nShared state, as we hinted above, complicates crash recover y . Imagine\nthe server crashes after the \ufb01rst read completes, but before the client\nhas issued the second one. After the server is up and running a gain,\nthe client then issues the second read. Unfortunately , the s erver has no\nidea to which \ufb01le fd is referring; that information was ephemeral (i.e.,\nin memory) and thus lost when the server crashed. T o handle th is situa-\ntion, the client and server would have to engage in some kind o f recovery\nprotocol, where the client would make sure to keep enough information\naround in its memory to be able to tell the server what it needs to know\n(in this case, that \ufb01le descriptor fd refers to \ufb01le foo).\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSU N \u2019 S NE T W O R K FI L E SY S T E M (NF S) 563\nIt gets even worse when you consider the fact that a stateful s erver has\nto deal with client crashes. Imagine, for example, a client t hat opens a \ufb01le\nand then crashes. The open() uses up a \ufb01le descriptor on the server; how\ncan the server know it is OK to close a given \ufb01le? In normal oper ation, a\nclient would eventually call close() and thus inform the server that the\n\ufb01le should be closed. However , when a client crashes, the ser ver never\nreceives a close(), and thus has to notice the client has crashed in order\nto close the \ufb01le.\nFor these reasons, the designers of NFS decided to pursue a st ateless\napproach: each client operation contains all the informati on needed to\ncomplete the request. No fancy crash recovery is needed; the server just\nstarts running again, and a client, at worst, might have to re try a request.\n48.5 The NFSv2 Protocol\nW e thus arrive at the NFSv2 protocol de\ufb01nition. Our problem s tate-\nment is simple:\nTH E CR U X : H O W TO DE FI N E A S TAT E L E S S FI L E PR O TO C O L\nHow can we de\ufb01ne the network protocol to enable stateless ope ration?\nClearly , stateful calls like open() can\u2019t be a part of the discussion (as it\nwould require the server to track open \ufb01les); however , the cl ient appli-\ncation will want to call open(), read(), write(), close() and other\nstandard API calls to access \ufb01les and directories. Thus, as a re\ufb01ned ques-\ntion, how do we de\ufb01ne the protocol to both be stateless and support the\nPOSIX \ufb01le system API?\nOne key to understanding the design of the NFS protocol is und er-\nstanding the \ufb01le handle . File handles are used to uniquely"
  },
  {
    "content": " want to call open(), read(), write(), close() and other\nstandard API calls to access \ufb01les and directories. Thus, as a re\ufb01ned ques-\ntion, how do we de\ufb01ne the protocol to both be stateless and support the\nPOSIX \ufb01le system API?\nOne key to understanding the design of the NFS protocol is und er-\nstanding the \ufb01le handle . File handles are used to uniquely describe the\n\ufb01le or directory a particular operation is going to operate u pon; thus,\nmany of the protocol requests include a \ufb01le handle.\nY ou can think of a \ufb01le handle as having three important compon ents: a\nvolume identi\ufb01er , an inode number , and a generation number ; together , these\nthree items comprise a unique identi\ufb01er for a \ufb01le or director y that a client\nwishes to access. The volume identi\ufb01er informs the server wh ich \ufb01le sys-\ntem the request refers to (an NFS server can export more than o ne \ufb01le\nsystem); the inode number tells the server which \ufb01le within t hat partition\nthe request is accessing. Finally , the generation number is needed when\nreusing an inode number; by incrementing it whenever an inod e num-\nber is reused, the server ensures that a client with an old \ufb01le handle can\u2019t\naccidentally access the newly-allocated \ufb01le.\nHere is a summary of some of the important pieces of the protoc ol; the\nfull protocol is available elsewhere (see Callaghan\u2019s book for an excellent\nand detailed overview of NFS [C00]).\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n564 SU N \u2019 S NE T W O R K FI L E SY S T E M (NF S)\nNFSPROC_GETATTR\nexpects: file handle\nreturns: attributes\nNFSPROC_SETATTR\nexpects: file handle, attributes\nreturns: nothing\nNFSPROC_LOOKUP\nexpects: directory file handle, name of file/directory to look up\nreturns: file handle\nNFSPROC_READ\nexpects: file handle, offset, count\nreturns: data, attributes\nNFSPROC_WRITE\nexpects: file handle, offset, count, data\nreturns: attributes\nNFSPROC_CREATE\nexpects: directory file handle, name of file, attributes\nreturns: nothing\nNFSPROC_REMOVE\nexpects: directory file handle, name of file to be removed\nreturns: nothing\nNFSPROC_MKDIR\nexpects: directory file handle, name of directory, attributes\nreturns: file handle\nNFSPROC_RMDIR\nexpects: directory file handle, name of directory to be removed\nreturns: nothing\nNFSPROC_READDIR\nexpects: directory handle, count of bytes to read, cookie\nreturns: directory entries, cookie (to get more entries)\nFigure 48.4: The NFS Protocol: Examples\nW e brie\ufb02y highlight the important components of the protoco l. First,\nthe LOOKUP protocol message is used to obtain a \ufb01le handle, wh ich is\nthen subsequently used to access \ufb01le data. The client passes a directory\n\ufb01le handle and name of a \ufb01le to look up, and the handle to that \ufb01l e (or\ndirectory) plus its attributes are passed back to the client from the server .\nFor example, assume the client already has a directory \ufb01le ha ndle for\nthe root directory of a \ufb01le system ( /) (indeed, this would be obtained\nthrough the NFS mount protocol , which is how clients and servers \ufb01rst\nare connected together; we do not discuss the mount protocol here for\nsake of brevity). If an application running on the client ope ns the \ufb01le\n/foo.txt, the client-side \ufb01le system sends a lookup request to the ser ver ,\npassing it the root \ufb01le handle and the name foo.txt; if successful, the\n\ufb01le handle (and attributes) for foo.txt will be returned.\nIn case you are wondering,"
  },
  {
    "content": " not discuss the mount protocol here for\nsake of brevity). If an application running on the client ope ns the \ufb01le\n/foo.txt, the client-side \ufb01le system sends a lookup request to the ser ver ,\npassing it the root \ufb01le handle and the name foo.txt; if successful, the\n\ufb01le handle (and attributes) for foo.txt will be returned.\nIn case you are wondering, attributes are just the metadata t hat the \ufb01le\nsystem tracks about each \ufb01le, including \ufb01elds such as \ufb01le cre ation time,\nlast modi\ufb01cation time, size, ownership and permissions inf ormation, and\nso forth, i.e., the same type of information that you would ge t back if you\ncalled stat() on a \ufb01le.\nOnce a \ufb01le handle is available, the client can issue READ and W RITE\nprotocol messages on a \ufb01le to read or write the \ufb01le, respectiv ely . The\nREAD protocol message requires the protocol to pass along th e \ufb01le handle\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSU N \u2019 S NE T W O R K FI L E SY S T E M (NF S) 565\nof the \ufb01le along with the offset within the \ufb01le and number of by tes to read.\nThe server then will be able to issue the read (after all, the h andle tells the\nserver which volume and which inode to read from, and the offs et and\ncount tells it which bytes of the \ufb01le to read) and return the da ta to the\nclient (or an error if there was a failure). WRITE is handled s imilarly ,\nexcept the data is passed from the client to the server , and ju st a success\ncode is returned.\nOne last interesting protocol message is the GET A TTR reques t; given a\n\ufb01le handle, it simply fetches the attributes for that \ufb01le, in cluding the last\nmodi\ufb01ed time of the \ufb01le. W e will see why this protocol request is impor-\ntant in NFSv2 below when we discuss caching (can you guess why ?).\n48.6 From Protocol to Distributed File System\nHopefully you are now getting some sense of how this protocol is\nturned into a \ufb01le system across the client-side \ufb01le system an d the \ufb01le\nserver . The client-side \ufb01le system tracks open \ufb01les, and gen erally trans-\nlates application requests into the relevant set of protoco l messages. The\nserver simply responds to each protocol message, each of whi ch has all\nthe information needed to complete request.\nFor example, let us consider a simple application which read s a \ufb01le.\nIn the diagram (Figure 48.1), we show what system calls the application\nmakes, and what the client-side \ufb01le system and \ufb01le server do i n respond-\ning to such calls.\nA few comments about the \ufb01gure. First, notice how the client t racks all\nrelevant state for the \ufb01le access, including the mapping of the integer \ufb01le\ndescriptor to an NFS \ufb01le handle as well as the current \ufb01le poin ter . This\nenables the client to turn each read request (which you may ha ve noticed\ndo not specify the offset to read from explicitly) into a properly- formatted\nread protocol message which tells the server exactly which b ytes from\nthe \ufb01le to read. Upon a successful read, the client updates th e current\n\ufb01le position; subsequent reads are issued with the same \ufb01le h andle but a\ndifferent offset.\nSecond, you may notice where server interactions occur . Whe n the \ufb01le\nis opened for the \ufb01rst time, the client-side \ufb01le system sends a LOOKUP\nrequest message. Indeed, if a long pathname must be traverse d (e.g.,\n/home/remzi/foo.txt), the client would send three LOOKUPs: one\nto look up home in the directory /, one to look up remzi in home, and\n\ufb01nally one to"
  },
  {
    "content": " n the \ufb01le\nis opened for the \ufb01rst time, the client-side \ufb01le system sends a LOOKUP\nrequest message. Indeed, if a long pathname must be traverse d (e.g.,\n/home/remzi/foo.txt), the client would send three LOOKUPs: one\nto look up home in the directory /, one to look up remzi in home, and\n\ufb01nally one to look up foo.txt in remzi.\nThird, you may notice how each server request has all the info rmation\nneeded to complete the request in its entirety . This design p oint is critical\nto be able to gracefully recover from server failure, as we wi ll now discuss\nin more detail; it ensures that the server does not need state to be able to\nrespond to the request.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n566 SU N \u2019 S NE T W O R K FI L E SY S T E M (NF S)\nClient Server\nfd = open(\u201d/foo\u201d, ...);\nSend LOOKUP (rootdir FH, \u201dfoo\u201d)\nReceive LOOKUP request\nlook for \u201dfoo\u201d in root dir\nreturn foo\u2019s FH + attributes\nReceive LOOKUP reply\nallocate \ufb01le desc in open \ufb01le table\nstore foo\u2019s FH in table\nstore current \ufb01le position (0)\nreturn \ufb01le descriptor to application\nread(fd, buffer, MAX);\nIndex into open \ufb01le table with fd\nget NFS \ufb01le handle (FH)\nuse current \ufb01le position as offset\nSend READ (FH, offset=0, count=MAX)\nReceive READ request\nuse FH to get volume/inode num\nread inode from disk (or cache)\ncompute block location (using offset)\nread data from disk (or cache)\nreturn data to client\nReceive READ reply\nupdate \ufb01le position (+bytes read)\nset current \ufb01le position = MAX\nreturn data/error code to app\nread(fd, buffer, MAX);\nSame except offset=MAX and set current \ufb01le position = 2*MAX\nread(fd, buffer, MAX);\nSame except offset=2*MAX and set current \ufb01le position = 3*MA X\nclose(fd);\nJust need to clean up local structures\nFree descriptor \u201dfd\u201d in open \ufb01le table\n(No need to talk to server)\nT able 48.1: Reading A File: Client-side And File Server Actions\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSU N \u2019 S NE T W O R K FI L E SY S T E M (NF S) 567\nTI P : I D E M P O T E N C Y IS PO W E R F U L\nIdempotency is a useful property when building reliable systems. When\nan operation can be issued more than once, it is much easier to handle\nfailure of the operation; you can just retry it. If an operati on is not idem-\npotent, life becomes more dif\ufb01cult.\n48.7 Handling Server Failure with Idempotent Operations\nWhen a client sends a message to the server , it sometimes does not re-\nceive a reply . There are many possible reasons for this failu re to respond.\nIn some cases, the message may be dropped by the network; netw orks do\nlose messages, and thus either the request or the reply could be lost and\nthus the client would never receive a response.\nIt is also possible that the server has crashed, and thus is no t currently\nresponding to messages. After a bit, the server will be reboo ted and start\nrunning again, but in the meanwhile all requests have been lo st. In all of\nthese cases, clients are left with a question: what should th ey do when\nthe server does not reply in a timely manner?\nIn NFSv2, a client handles all of these failures in a single, u niform, and\nelegant way: it simply retries the request. Speci\ufb01cally , after sending the\nrequest, the client sets a timer to"
  },
  {
    "content": " again, but in the meanwhile all requests have been lo st. In all of\nthese cases, clients are left with a question: what should th ey do when\nthe server does not reply in a timely manner?\nIn NFSv2, a client handles all of these failures in a single, u niform, and\nelegant way: it simply retries the request. Speci\ufb01cally , after sending the\nrequest, the client sets a timer to go off after a speci\ufb01ed tim e period. If a\nreply is received before the timer goes off, the timer is canc eled and all is\nwell. If, however , the timer goes off before any reply is received, the client\nassumes the request has not been processed and resends it. If the server\nreplies, all is well and the client has neatly handled the pro blem.\nThe ability of the client to simply retry the request (regard less of what\ncaused the failure) is due to an important property of most NF S requests:\nthey are idempotent. An operation is called idempotent when the effect\nof performing the operation multiple times is equivalent to the effect of\nperforming the operating a single time. For example, if you s tore a value\nto a memory location three times, it is the same as doing so onc e; thus\n\u201cstore value to memory\u201d is an idempotent operation. If, howe ver , you in-\ncrement a counter three times, it results in a different amou nt than doing\nso just once; thus, \u201cincrement counter \u201d is not idempotent. M ore gener-\nally , any operation that just reads data is obviously idempo tent; an oper-\nation that updates data must be more carefully considered to determine\nif it has this property .\nThe heart of the design of crash recovery in NFS is the idempot ency\nof most common operations. LOOKUP and READ requests are triv ially\nidempotent, as they only read information from the \ufb01le serve r and do not\nupdate it. More interestingly , WRITE requests are also idem potent. If,\nfor example, a WRITE fails, the client can simply retry it. Th e WRITE\nmessage contains the data, the count, and (importantly) the exact offset\nto write the data to. Thus, it can be repeated with the knowled ge that the\noutcome of multiple writes is the same as the outcome of a sing le one.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n568 SU N \u2019 S NE T W O R K FI L E SY S T E M (NF S)\nCase 1: Request Lost\nClient\n[send request]\nServer\n(no mesg)\nCase 2: Server Down\nClient\n[send request]\nServer\n(down)\nCase 3: Reply lost on way back from Server\nClient\n[send request]\nServer\n[recv request]\n[handle request]\n[send reply]\nFigure 48.5: The Three T ypes of Loss\nIn this way , the client can handle all timeouts in a uni\ufb01ed way . If a\nWRITE request was simply lost (Case 1 above), the client will retry it, the\nserver will perform the write, and all will be well. The same w ill happen\nif the server happened to be down while the request was sent, b ut back\nup and running when the second request is sent, and again all w orks\nas desired (Case 2). Finally , the server may in fact receive t he WRITE\nrequest, issue the write to its disk, and send a reply . This re ply may get\nlost (Case 3), again causing the client to re-send the reques t. When the\nserver receives the request again, it will simply do the exac t same thing:\nwrite the data to disk and reply that it has done so. If the clie nt this time\nreceives the reply , all is again well, and thus the client has handled both\nmessage loss and server failure in a uniform manner . Neat!\nA small aside: some operations are hard to make idempotent. F or\nexample, when you try to make a directory that already exists , you are\ninformed that the mkdir request has failed. Thus, in NFS, if t he \ufb01le server\nreceives a MKDIR protocol message and executes it successfu lly"
  },
  {
    "content": " all is again well, and thus the client has handled both\nmessage loss and server failure in a uniform manner . Neat!\nA small aside: some operations are hard to make idempotent. F or\nexample, when you try to make a directory that already exists , you are\ninformed that the mkdir request has failed. Thus, in NFS, if t he \ufb01le server\nreceives a MKDIR protocol message and executes it successfu lly but the\nreply is lost, the client may repeat it and encounter that fai lure when in\nfact the operation at \ufb01rst succeeded and then only failed on t he retry .\nThus, life is not perfect.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSU N \u2019 S NE T W O R K FI L E SY S T E M (NF S) 569\nTI P : P E R F E C T IS TH E EN E M Y OF TH E GO O D (V O LTA I R E \u2019 S LAW )\nEven when you design a beautiful system, sometimes all the co rner cases\ndon\u2019t work out exactly as you might like. T ake the mkdir examp le above;\none could redesign mkdir to have different semantics, thus m aking it\nidempotent (think about how you might do so); however , why bo ther?\nThe NFS design philosophy covers most of the important cases , and over-\nall makes the system design clean and simple with regards to f ailure.\nThus, accepting that life isn\u2019t perfect and still building t he system is a sign\nof good engineering. Apparently , this wisdom is attributed to V oltaire,\nfor saying \u201c... a wise Italian says that the best is the enemy o f the good\u201d\n[V72], and thus we call it V oltaire\u2019s Law.\n48.8 Improving Performance: Client-side Caching\nDistributed \ufb01le systems are good for a number of reasons, but sending\nall read and write requests across the network can lead to a bi g perfor-\nmance problem: the network generally isn\u2019t that fast, espec ially as com-\npared to local memory or disk. Thus, another problem: how can we im-\nprove the performance of a distributed \ufb01le system?\nThe answer , as you might guess from reading the big bold words in\nthe sub-heading above, is client-side caching. The NFS client-side \ufb01le\nsystem caches \ufb01le data (and metadata) that it has read from th e server in\nclient memory . Thus, while the \ufb01rst access is expensive (i.e ., it requires\nnetwork communication), subsequent accesses are serviced quite quickly\nout of client memory .\nThe cache also serves as a temporary buffer for writes. When a client\napplication \ufb01rst writes to a \ufb01le, the client buffers the data in client mem-\nory (in the same cache as the data it read from the \ufb01le server) b efore writ-\ning the data out to the server . Such write buffering is useful because it de-\ncouples application write() latency from actual write performance, i.e.,\nthe application\u2019s call to write() succeeds immediately (and just puts\nthe data in the client-side \ufb01le system\u2019s cache); only later d oes the data get\nwritten out to the \ufb01le server .\nThus, NFS clients cache data and performance is usually grea t and\nwe are done, right? Unfortunately , not quite. Adding cachin g into any\nsort of system with multiple client caches introduces a big a nd interesting\nchallenge which we will refer to as the cache consistency problem .\n48.9 The Cache Consistency Problem\nThe cache consistency problem is best illustrated with two c lients and\na single server . Imagine client C1 reads a \ufb01le F , and keeps a co py of the\n\ufb01le in its local cache. Now imagine a different client, C2, ov erwrites the\n\ufb01le F , thus changing its contents; let\u2019s call the new version of the \ufb01le F\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n570 SU N \u2019 S"
  },
  {
    "content": " and keeps a co py of the\n\ufb01le in its local cache. Now imagine a different client, C2, ov erwrites the\n\ufb01le F , thus changing its contents; let\u2019s call the new version of the \ufb01le F\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n570 SU N \u2019 S NE T W O R K FI L E SY S T E M (NF S)\nC1\ncache: F[v1]\nC2\ncache: F[v2]\nC3\ncache: empty\nServer S\ndisk: F[v1] at first\n      F[v2] eventually\nFigure 48.6: The Cache Consistency Problem\n(version 2), or F[v2] and the old version F[v1] so we can keep t he two\ndistinct (but of course the \ufb01le has the same name, just differ ent contents).\nFinally , there is a third client, C3, which has not yet access ed the \ufb01le F .\nY ou can probably see the problem that is upcoming (Figure 48.6). In\nfact, there are two subproblems. The \ufb01rst subproblem is that the client C2\nmay buffer its writes in its cache for a time before propagati ng them to the\nserver; in this case, while F[v2] sits in C2\u2019s memory , any acc ess of F from\nanother client (say C3) will fetch the old version of the \ufb01le ( F[v1]). Thus,\nby buffering writes at the client, other clients may get stal e versions of the\n\ufb01le, which may be undesirable; indeed, imagine the case wher e you log\ninto machine C2, update F , and then log into C3 and try to read t he \ufb01le,\nonly to get the old copy! Certainly this could be frustrating . Thus, let us\ncall this aspect of the cache consistency problem update visibility ; when\ndo updates from one client become visible at other clients?\nThe second subproblem of cache consistency is a stale cache ; in this\ncase, C2 has \ufb01nally \ufb02ushed its writes to the \ufb01le server , and th us the server\nhas the latest version (F[v2]). However , C1 still has F[v1] i n its cache; if a\nprogram running on C1 reads \ufb01le F , it will get a stale version ( F[v1]) and\nnot the most recent copy (F[v2]), which is (often) undesirab le.\nNFSv2 implementations solve these cache consistency probl ems in two\nways. First, to address update visibility , clients impleme nt what is some-\ntimes called \ufb02ush-on-close (a.k.a., close-to-open) consistency semantics;\nspeci\ufb01cally , when a \ufb01le is written to and subsequently close d by a client\napplication, the client \ufb02ushes all updates (i.e., dirty pag es in the cache)\nto the server . With \ufb02ush-on-close consistency , NFS ensures that a subse-\nquent open from another node will see the latest \ufb01le version.\nSecond, to address the stale-cache problem, NFSv2 clients \ufb01 rst check\nto see whether a \ufb01le has changed before using its cached conte nts. Speci\ufb01-\ncally , when opening a \ufb01le, the client-side \ufb01le system will is sue a GET A TTR\nrequest to the server to fetch the \ufb01le\u2019s attributes. The attr ibutes, impor-\ntantly , include information as to when the \ufb01le was last modi\ufb01 ed on the\nserver; if the time-of-modi\ufb01cation is more recent than the t ime that the\n\ufb01le was fetched into the client cache, the client invalidates the \ufb01le, thus\nremoving it from the client cache and ensuring that subseque nt reads will\ngo to the server and retrieve the latest version of the \ufb01le. If , on the other\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W"
  },
  {
    "content": " recent than the t ime that the\n\ufb01le was fetched into the client cache, the client invalidates the \ufb01le, thus\nremoving it from the client cache and ensuring that subseque nt reads will\ngo to the server and retrieve the latest version of the \ufb01le. If , on the other\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSU N \u2019 S NE T W O R K FI L E SY S T E M (NF S) 571\nhand, the client sees that it has the latest version of the \ufb01le , it will go\nahead and use the cached contents, thus increasing performa nce.\nWhen the original team at Sun implemented this solution to th e stale-\ncache problem, they realized a new problem; suddenly , the NF S server\nwas \ufb02ooded with GET A TTR requests. A good engineering princi ple to\nfollow is to design for the common case , and to make it work well; here,\nalthough the common case was that a \ufb01le was accessed only from a sin-\ngle client (perhaps repeatedly), the client always had to se nd GET A TTR\nrequests to the server to make sure no one else had changed the \ufb01le. A\nclient thus bombards the server , constantly asking \u201chas any one changed\nthis \ufb01le?\u201d, when most of the time no one had.\nT o remedy this situation (somewhat), an attribute cache was added\nto each client. A client would still validate a \ufb01le before acc essing it, but\nmost often would just look in the attribute cache to fetch the attributes.\nThe attributes for a particular \ufb01le were placed in the cache w hen the \ufb01le\nwas \ufb01rst accessed, and then would timeout after a certain amo unt of time\n(say 3 seconds). Thus, during those three seconds, all \ufb01le ac cesses would\ndetermine that it was OK to use the cached \ufb01le and thus do so wit h no\nnetwork communication with the server .\n48.10 Assessing NFS Cache Consistency\nA few \ufb01nal words about NFS cache consistency . The \ufb02ush-on-cl ose be-\nhavior was added to \u201cmake sense\u201d, but introduced a certain pe rformance\nproblem. Speci\ufb01cally , if a temporary or short-lived \ufb01le was created on a\nclient and then soon deleted, it would still be forced to the s erver . A more\nideal implementation might keep such short-lived \ufb01les in me mory until\nthey are deleted and thus remove the server interaction enti rely , perhaps\nincreasing performance.\nMore importantly , the addition of an attribute cache into NF S made\nit very hard to understand or reason about exactly what versi on of a \ufb01le\none was getting. Sometimes you would get the latest version; sometimes\nyou would get an old version simply because your attribute ca che hadn\u2019t\nyet timed out and thus the client was happy to give you what was in\nclient memory . Although this was \ufb01ne most of the time, it woul d (and\nstill does!) occasionally lead to odd behavior .\nAnd thus we have described the oddity that is NFS client cachi ng.\nIt serves as an interesting example where details of an imple mentation\nserve to de\ufb01ne user-observable semantics, instead of the ot her way around.\n48.11 Implications on Server-Side W rite Buffering\nOur focus so far has been on client caching, and that is where m ost\nof the interesting issues arise. However , NFS servers tend t o be well-\nequipped machines with a lot of memory too, and thus they have caching\nconcerns as well. When data (and metadata) is read from disk, NFS\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n572 SU N \u2019 S NE T W O R K FI L E SY S T E M (NF S)\nservers will keep it in memory , and subsequent reads of said d ata (and\nmetadata) will not go to disk, a potential (small) boost in pe rformance.\nMore intriguing is the case of write buffering. NFS servers"
  },
  {
    "content": "D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n572 SU N \u2019 S NE T W O R K FI L E SY S T E M (NF S)\nservers will keep it in memory , and subsequent reads of said d ata (and\nmetadata) will not go to disk, a potential (small) boost in pe rformance.\nMore intriguing is the case of write buffering. NFS servers a bsolutely\nmay not return success on a WRITE protocol request until the write ha s\nbeen forced to stable storage (e.g., to disk or some other per sistent device).\nWhile they can place a copy of the data in server memory , retur ning suc-\ncess to the client on a WRITE protocol request could result in incorrect\nbehavior; can you \ufb01gure out why?\nThe answer lies in our assumptions about how clients handle s erver\nfailure. Imagine the following sequence of writes as issued by a client:\nwrite(fd, a_buffer, size); // fill first block with a\u2019s\nwrite(fd, b_buffer, size); // fill second block with b\u2019s\nwrite(fd, c_buffer, size); // fill third block with c\u2019s\nThese writes overwrite the three blocks of a \ufb01le with a block o f a\u2019s,\nthen b\u2019s, and then c\u2019s. Thus, if the \ufb01le initially looked like this:\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\nzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\nW e might expect the \ufb01nal result after these writes to be like t his, with the\nx\u2019s, y\u2019s, and z\u2019s, would be overwritten with a\u2019s, b\u2019s, and c\u2019s , respectively .\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\ncccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\nNow let\u2019s assume for the sake of the example that these three c lient\nwrites were issued to the server as three distinct WRITE prot ocol mes-\nsages. Assume the \ufb01rst WRITE message is received by the serve r and\nissued to the disk, and the client informed of its success. No w assume\nthe second write is just buffered in memory , and the server al so reports\nit success to the client before forcing it to disk; unfortunately , the server\ncrashes before writing it to disk. The server quickly restar ts and receives\nthe third write request, which also succeeds.\nThus, to the client, all the requests succeeded, but we are su rprised\nthat the \ufb01le contents look like this:\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy <--- oops\ncccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\nYikes! Because the server told the client that the second wri te was\nsuccessful before committing it to disk, an old chunk is left in the \ufb01le,\nwhich, depending on the application, might be catastrophic .\nT o avoid this problem, NFS servers must commit each write to stable\n(persistent) storage before informing the client of succes s; doing so en-\nables the client to detect server failure during a write, and thus retry until\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSU N \u2019 S NE T W O R K FI L E SY S T E M (NF S) 573\nit \ufb01nally succeeds. Doing so ensures we will never end up with \ufb01le con-\ntents intermingled as in the above example.\nThe problem that this requirement gives rise to in"
  },
  {
    "content": " M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nSU N \u2019 S NE T W O R K FI L E SY S T E M (NF S) 573\nit \ufb01nally succeeds. Doing so ensures we will never end up with \ufb01le con-\ntents intermingled as in the above example.\nThe problem that this requirement gives rise to in NFS server im-\nplementation is that write performance, without great care , can be the\nmajor performance bottleneck. Indeed, some companies (e.g ., Network\nAppliance) came into existence with the simple objective of building an\nNFS server that can perform writes quickly; one trick they us e is to \ufb01rst\nput writes in a battery-backed memory , thus enabling to quic kly reply\nto WRITE requests without fear of losing the data and without the cost\nof having to write to disk right away; the second trick is to us e a \ufb01le sys-\ntem design speci\ufb01cally designed to write to disk quickly whe n one \ufb01nally\nneeds to do so [HLM94, RO91].\n48.12 Summary\nW e have seen the introduction of the NFS distributed \ufb01le syst em. NFS\nis centered around the idea of simple and fast recovery in the face of\nserver failure, and achieves this end through careful proto col design. Idem-\npotency of operations is essential; because a client can saf ely replay a\nfailed operation, it is OK to do so whether or not the server ha s executed\nthe request.\nW e also have seen how the introduction of caching into a multi ple-\nclient, single-server system can complicate things. In par ticular , the sys-\ntem must resolve the cache consistency problem in order to be have rea-\nsonably; however , NFS does so in a slightly ad hoc fashion whi ch can\noccasionally result in observably weird behavior . Finally , we saw how\nserver caching can be tricky: writes to the server must be for ced to stable\nstorage before returning success (otherwise data can be los t).\nW e haven\u2019t talked about other issues which are certainly rel evant, no-\ntably security . Security in early NFS implementations was r emarkably\nlax; it was rather easy for any user on a client to masquerade a s other\nusers and thus gain access to virtually any \ufb01le. Subsequent i ntegration\nwith more serious authentication services (e.g., Kerberos [NT94]) have\naddressed these obvious de\ufb01ciencies.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n574 SU N \u2019 S NE T W O R K FI L E SY S T E M (NF S)\nReferences\n[S86] \u201cThe Sun Network File System: Design, Implementation and Experience\u201d\nRussel Sandberg\nUSENIX Summer 1986\nThe original NFS paper; though a bit of a challenging read, it is worthwhile to see the source of these\nwonderful ideas.\n[NT94] \u201cKerberos: An Authentication Service for Computer N etworks\u201d\nB. Clifford Neuman, Theodore T s\u2019o\nIEEE Communications, 32(9):33-38, September 1994\nKerberos is an early and hugely in\ufb02uential authentication s ervice. We probably should write a book\nchapter about it sometime...\n[P+94] \u201cNFS V ersion 3: Design and Implementation\u201d\nBrian Pawlowski, Chet Juszczak, Peter Staubach, Carl Smith , Diane Lebel, Dave Hitz\nUSENIX Summer 1994, pages 137-152\nThe small modi\ufb01cations that underlie NFS version 3.\n[P+00] \u201cThe NFS version 4 protocol\u201d\nBrian Pawlowski, David Noveck, David Robinson, Robert Thur low\n2nd International System Administration and Networking Co nference (SANE 2000)\nUndoubtedly the most literary paper on NFS ever written.\n[C00] \u201cNFS Illustrated\u201d\nBrent Callaghan\nAddison-W esley Professional Computing Series, 2000\nA great NFS reference; incredibly thorough and detailed per the protocol itself.\n[Sun89] \u201cNFS: Network File System Protocol Speci\ufffd"
  },
  {
    "content": ", David Robinson, Robert Thur low\n2nd International System Administration and Networking Co nference (SANE 2000)\nUndoubtedly the most literary paper on NFS ever written.\n[C00] \u201cNFS Illustrated\u201d\nBrent Callaghan\nAddison-W esley Professional Computing Series, 2000\nA great NFS reference; incredibly thorough and detailed per the protocol itself.\n[Sun89] \u201cNFS: Network File System Protocol Speci\ufb01cation\u201d\nSun Microsystems, Inc. Request for Comments: 1094, March 19 89\nA vailable: http://www .ietf.org/rfc/rfc1094.txt\nThe dreaded speci\ufb01cation; read it if you must, i.e., you are g etting paid to read it. Hopefully, paid a lot.\nCash money!\n[O91] \u201cThe Role of Distributed State\u201d\nJohn K. Ousterhout\nA vailable: ftp://ftp.cs.berkeley .edu/ucb/sprite/papers/state.ps\nA rarely referenced discussion of distributed state; a broa der perspective on the problems and challenges.\n[HLM94] \u201cFile System Design for an NFS File Server Appliance \u201d\nDave Hitz, James Lau, Michael Malcolm\nUSENIX Winter 1994. San Francisco, California, 1994\nHitz et al. were greatly in\ufb02uenced by previous work on log-st ructured \ufb01le systems.\n[RO91] \u201cThe Design and Implementation of the Log-structure d File System\u201d\nMendel Rosenblum, John Ousterhout\nSymposium on Operating Systems Principles (SOSP), 1991\nLFS again. No, you can never get enough LFS.\n[V72] \u201cLa Begueule\u201d\nFrancois-Marie Arouet a.k.a. V oltaire\nPublished in 1772\nV oltaire said a number of clever things, this being but one ex ample. For example, V oltaire also said \u201cIf\nyou have two religions in your land, the two will cut each othe rs throats; but if you have thirty religions,\nthey will dwell in peace.\u201d What do you say to that, Democrats a nd Republicans?\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\n49\nThe Andrew File System (AFS)\nThe Andrew File System was introduced by researchers at Carn egie-Mellon\nUniversity (CMU) in the 1980\u2019s [H+88]. Led by the well-known Profes-\nsor M. Satyanarayanan of Carnegie-Mellon University (\u201cSat ya\u201d for short),\nthe main goal of this project was simple: scale. Speci\ufb01cally , how can one\ndesign a distributed \ufb01le system such that a server can suppor t as many\nclients as possible?\nInterestingly , there are numerous aspects of design and imp lementa-\ntion that affect scalability . Most important is the design o f the protocol be-\ntween clients and servers. In NFS, for example, the protocol forces clients\nto check with the server periodically to determine if cached contents have\nchanged; because each check uses server resources (includi ng CPU and\nnetwork bandwidth), frequent checks like this will limit th e number of\nclients a server can respond to and thus limit scalability .\nAFS also differs from NFS in that from the beginning, reasona ble user-\nvisible behavior was a \ufb01rst-class concern. In NFS, cache con sistency is\nhard to describe because it depends directly on low-level im plementa-\ntion details, including client-side cache timeout interva ls. In AFS, cache\nconsistency is simple and readily understood: when the \ufb01le i s opened, a\nclient will generally receive the latest consistent copy fr om the server .\n49.1 AFS V ersion 1\nW e will discuss two versions of AFS [H+88, S+85]. The \ufb01rst ver sion\n(which we will call AFSv1, but actually the original system w as called\nthe ITC distributed \ufb01le system [S+85]) had some of the basic d esign in\nplace, but didn\u2019t scale as desired, which led to a re-"
  },
  {
    "content": " .\n49.1 AFS V ersion 1\nW e will discuss two versions of AFS [H+88, S+85]. The \ufb01rst ver sion\n(which we will call AFSv1, but actually the original system w as called\nthe ITC distributed \ufb01le system [S+85]) had some of the basic d esign in\nplace, but didn\u2019t scale as desired, which led to a re-design a nd the \ufb01nal\nprotocol (which we will call AFSv2, or just AFS) [H+88]. W e no w discuss\nthe \ufb01rst version.\nOne of the basic tenets of all versions of AFS is whole-\ufb01le caching on\nthe local disk of the client machine that is accessing a \ufb01le. When you\nopen() a \ufb01le, the entire \ufb01le (if it exists) is fetched from the server and\nstored in a \ufb01le on your local disk. Subsequent application read() and\nwrite() operations are redirected to the local \ufb01le system where the \ufb01 le is\n575\n576 TH E AN D R E W FI L E SY S T E M (AF S)\nTestAuth Test whether a file has changed\n(used to validate cached entries)\nGetFileStat Get the stat info for a file\nFetch Fetch the contents of file\nStore Store this file on the server\nSetFileStat Set the stat info for a file\nListDir List the contents of a directory\nFigure 49.1: AFSv1 Protocol Highlights\nstored; thus, these operations require no network communic ation and are\nfast. Finally , upon close(), the \ufb01le (if it has been modi\ufb01ed) is \ufb02ushed\nback to the server . Note the obvious contrasts with NFS, whic h caches\nblocks (not whole \ufb01les, although NFS could of course cache every blo ck of\nan entire \ufb01le) and does so in client memory (not local disk).\nLet\u2019s get into the details a bit more. When a client applicati on \ufb01rst calls\nopen(), the AFS client-side code (which the AFS designers call V enus)\nwould send a Fetch protocol message to the server . The Fetch p rotocol\nmessage would pass the entire pathname of the desired \ufb01le (fo r exam-\nple, /home/remzi/notes.txt) to the \ufb01le server (the group of which\nthey called Vice), which would then traverse the pathname, \ufb01nd the de-\nsired \ufb01le, and ship the entire \ufb01le back to the client. The clie nt-side code\nwould then cache the \ufb01le on the local disk of the client (by wri ting it to\nlocal disk). As we said above, subsequent read() and write() system\ncalls are strictly local in AFS (no communication with the server occurs);\nthey are just redirected to the local copy of the \ufb01le. Because the read()\nand write() calls act just like calls to a local \ufb01le system, once a block\nis accessed, it also may be cached in client memory . Thus, AFS also uses\nclient memory to cache copies of blocks that it has in its loca l disk. Fi-\nnally , when \ufb01nished, the AFS client checks if the \ufb01le has been modi\ufb01ed\n(i.e., that it has been opened for writing); if so, it \ufb02ushes t he new version\nback to the server with a Store protocol message, sending the entire \ufb01le\nand pathname to the server for permanent storage.\nThe next time the \ufb01le is accessed, AFSv1 does so much more ef\ufb01-\nciently . Speci\ufb01cally , the client-side code \ufb01rst contacts t he server (using\nthe T estAuth protocol message) in order to determine whethe r the \ufb01le\nhas changed. If not, the client would use the locally-cached copy , thus\nimproving performance by avoiding a network transfer . The \ufb01 gure above\nshows some of the protocol messages in AFSv1. Note that this e arly ver-\nsion of the protocol only cached \ufb01le contents; directories, for example,\nwere only kept at the server .\n"
  },
  {
    "content": " protocol message) in order to determine whethe r the \ufb01le\nhas changed. If not, the client would use the locally-cached copy , thus\nimproving performance by avoiding a network transfer . The \ufb01 gure above\nshows some of the protocol messages in AFSv1. Note that this e arly ver-\nsion of the protocol only cached \ufb01le contents; directories, for example,\nwere only kept at the server .\n49.2 Problems with V ersion 1\nA few key problems with this \ufb01rst version of AFS motivated the de-\nsigners to rethink their \ufb01le system. T o study the problems in detail, the\ndesigners of AFS spent a great deal of time measuring their ex isting pro-\ntotype to \ufb01nd what was wrong. Such experimentation is a good t hing;\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E AN D R E W FI L E SY S T E M (AF S) 577\nTI P : M E A S U R E TH E N BU I L D (PAT T E R S O N \u2019 S LAW )\nOne of our advisors, David Patterson (of RISC and RAID fame), used to\nalways encourage us to measure a system and demonstrate a pro blem\nbefore building a new system to \ufb01x said problem. By using experimen-\ntal evidence, rather than gut instinct, you can turn the proc ess of system\nbuilding into a more scienti\ufb01c endeavor . Doing so also has th e fringe ben-\ne\ufb01t of making you think about how exactly to measure the syste m before\nyour improved version is developed. When you do \ufb01nally get ar ound to\nbuilding the new system, two things are better as a result: \ufb01r st, you have\nevidence that shows you are solving a real problem; second, y ou now\nhave a way to measure your new system in place, to show that it a ctually\nimproves upon the state of the art. And thus we call this Patterson\u2019s Law .\nmeasurement is the key to understanding how systems work and how to\nimprove them. Hard data helps take intuition and make into a c oncrete\nscience of deconstructing systems. In their study , the auth ors found two\nmain problems with AFSv1:\n\u2022 Path-traversal costs are too high : When performing a Fetch or Store\nprotocol request, the client passes the entire pathname (e. g., /home/\nremzi/notes.txt) to the server . The server , in order to access the\n\ufb01le, must perform a full pathname traversal, \ufb01rst looking in the root\ndirectory to \ufb01nd home, then in home to \ufb01nd remzi, and so forth,\nall the way down the path until \ufb01nally the desired \ufb01le is locat ed.\nWith many clients accessing the server at once, the designer s of AFS\nfound that the server was spending much of its CPU time simply\nwalking down directory paths.\n\u2022 The client issues too many T estAuth protocol messages : Much\nlike NFS and its overabundance of GET A TTR protocol messages ,\nAFSv1 generated a large amount of traf\ufb01c to check whether a lo -\ncal \ufb01le (or its stat information) was valid with the T estAuth proto-\ncol message. Thus, servers spent much of their time telling c lients\nwhether it was OK to used their cached copies of a \ufb01le. Most of t he\ntime, the answer was that the \ufb01le had not changed.\nThere were actually two other problems with AFSv1: load was n ot\nbalanced across servers, and the server used a single distin ct process per\nclient thus inducing context switching and other overheads . The load\nimbalance problem was solved by introducing volumes, which an ad-\nministrator could move across servers to balance load; the c ontext-switch\nproblem was solved in AFSv2 by building the server with threa ds instead\nof processes. However , for the sake of space, we focus here on the main\ntwo protocol problems above that limited the scale of the sys tem.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E"
  },
  {
    "content": " by introducing volumes, which an ad-\nministrator could move across servers to balance load; the c ontext-switch\nproblem was solved in AFSv2 by building the server with threa ds instead\nof processes. However , for the sake of space, we focus here on the main\ntwo protocol problems above that limited the scale of the sys tem.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n578 TH E AN D R E W FI L E SY S T E M (AF S)\n49.3 Improving the Protocol\nThe two problems above limited the scalability of AFS; the se rver CPU\nbecame the bottleneck of the system, and each server could on ly ser-\nvice 20 clients without becoming overloaded. Servers were r eceiving too\nmany T estAuth messages, and when they received Fetch or Stor e mes-\nsages, were spending too much time traversing the directory hierarchy .\nThus, the AFS designers were faced with a problem:\nTH E CR U X : H O W TO DE S I G N A S C A L A B L E FI L E PR O TO C O L\nHow should one redesign the protocol to minimize the number o f\nserver interactions, i.e., how could they reduce the number of T estAuth\nmessages? Further , how could they design the protocol to mak e these\nserver interactions ef\ufb01cient? By attacking both of these is sues, a new pro-\ntocol would result in a much more scalable version AFS.\n49.4 AFS V ersion 2\nAFSv2 introduced the notion of a callback to reduce the number of\nclient/server interactions. A callback is simply a promise from the server\nto the client that the server will inform the client when a \ufb01le that the\nclient is caching has been modi\ufb01ed. By adding this state to the server , the\nclient no longer needs to contact the server to \ufb01nd out if a cac hed \ufb01le is\nstill valid. Rather , it assumes that the \ufb01le is valid until th e server tells it\notherwise; insert analogy to polling versus interrupts here.\nAFSv2 also introduced the notion of a \ufb01le identi\ufb01er (FID) (similar to\nthe NFS \ufb01le handle ) instead of pathnames to specify which \ufb01le a client\nwas interested in. An FID in AFS consists of a volume identi\ufb01e r , a \ufb01le\nidenti\ufb01er , and a \u201cuniqui\ufb01er \u201d (to enable reuse of the volume a nd \ufb01le IDs\nwhen a \ufb01le is deleted). Thus, instead of sending whole pathna mes to\nthe server and letting the server walk the pathname to \ufb01nd the desired\n\ufb01le, the client would walk the pathname, one piece at a time, c aching the\nresults and thus hopefully reducing the load on the server .\nFor example, if a client accessed the \ufb01le /home/remzi/notes.txt,\nand home was the AFS directory mounted onto / (i.e., / was the local root\ndirectory , but home and its children were in AFS), the client would \ufb01rst\nFetch the directory contents of home, put them in the local-disk cache,\nand setup a callback on home. Then, the client would Fetch the directory\nremzi, put it in the local-disk cache, and setup a callback on the se rver\non remzi. Finally , the client would Fetch notes.txt, cache this regular\n\ufb01le in the local disk, setup a callback, and \ufb01nally return a \ufb01l e descriptor\nto the calling application. See T able 49.1 for a summary .\nThe key difference, however , from NFS, is that with each fetc h of a\ndirectory or \ufb01le, the AFS client would establish a callback w ith the server ,\nthus ensuring that the server would notify the client of a cha nge in its\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E AN D R E W FI L E SY S T E M (AF S) 579\nClient (C 1) Server"
  },
  {
    "content": " AFS client would establish a callback w ith the server ,\nthus ensuring that the server would notify the client of a cha nge in its\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E AN D R E W FI L E SY S T E M (AF S) 579\nClient (C 1) Server\nfd = open(\u201c/home/remzi/notes.txt\u201d, ...);\nSend Fetch (home FID, \u201cremzi\u201d)\nReceive Fetch request\nlook for remzi in home dir\nestablish callback(C 1 ) on remzi\nreturn remzi\u2019s content and FID\nReceive Fetch reply\nwrite remzi to local disk cache\nrecord callback status of remzi\nSend Fetch (remzi FID, \u201cnotes.txt\u201d)\nReceive Fetch request\nlook for notes.txt in remzi dir\nestablish callback(C 1 ) on notes.txt\nreturn notes.txt\u2019s content and FID\nReceive Fetch reply\nwrite notes.txt to local disk cache\nrecord callback status of notes.txt\nlocal open() of cached notes.txt\nreturn \ufb01le descriptor to application\nread(fd, buffer, MAX);\nperform local read() on cached copy\nclose(fd);\ndo local close() on cached copy\nif \ufb01le has changed, \ufb02ush to server\nfd = open(\u201c/home/remzi/notes.txt\u201d, ...);\nForeach dir (home, remzi)\nif (callback(dir) == V ALID)\nuse local copy for lookup(dir)\nelse\nFetch (as above)\nif (callback(notes.txt) == V ALID)\nopen local cached copy\nreturn \ufb01le descriptor to it\nelse\nFetch (as above) then open and return fd\nT able 49.1: Reading A File: Client-side And File Server Actions\ncached state. The bene\ufb01t is obvious: although the \ufb01rst access to /home/\nremzi/notes.txt generates many client-server messages (as described\nabove), it also establishes callbacks for all the directori es as well as the\n\ufb01le notes.txt, and thus subsequent accesses are entirely lo cal and require\nno server interaction at all. Thus, in the common case where a \ufb01le is\ncached at the client, AFS behaves nearly identically to a loc al disk-based\n\ufb01le system. If one accesses a \ufb01le more than once, the second ac cess should\nbe just as fast as accessing a \ufb01le locally .\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n580 TH E AN D R E W FI L E SY S T E M (AF S)\nAS I D E : CA C H E CO N S I S T E N C Y IS NO T A P A N A C E A\nWhen discussing distributed \ufb01le systems, much is made of the cache con-\nsistency the \ufb01le systems provide. However , this baseline co nsistency does\nnot solve all problems with regards to \ufb01le access from multip le clients.\nFor example, if you are building a code repository , with mult iple clients\nperforming check-ins and check-outs of code, you can\u2019t simp ly rely on\nthe underlying \ufb01le system to do all of the work for you; rather , you have\nto use explicit \ufb01le-level locking in order to ensure that the \u201cright\u201d thing\nhappens when such concurrent accesses take place. Indeed, a ny applica-\ntion that truly cares about concurrent updates will add extr a machinery\nto handle con\ufb02icts. The baseline consistency described in t his chapter and\nthe previous one are useful primarily for casual usage, i.e. , when a user\nlogs into a different client, they expect some reasonable ve rsion of their\n\ufb01les to show up there. Expecting more from these protocols is setting\nyourself up for failure, disappointment, and tear-\ufb01lled fr ustration.\n49.5 Cache Consistency\nWhen we discussed NFS, there were two aspects of cache consis tency\nwe considered: update"
  },
  {
    "content": " are useful primarily for casual usage, i.e. , when a user\nlogs into a different client, they expect some reasonable ve rsion of their\n\ufb01les to show up there. Expecting more from these protocols is setting\nyourself up for failure, disappointment, and tear-\ufb01lled fr ustration.\n49.5 Cache Consistency\nWhen we discussed NFS, there were two aspects of cache consis tency\nwe considered: update visibility and cache staleness . With update visi-\nbility , the question is: when will the server be updated with a new version\nof a \ufb01le? With cache staleness, the question is: once the serv er has a new\nversion, how long before clients see the new version instead of an older\ncached copy?\nBecause of callbacks and whole-\ufb01le caching, the cache consi stency pro-\nvided by AFS is easy to describe and understand. There are two im-\nportant cases to consider: consistency between processes o n different ma-\nchines, and consistency between processes on the same machine.\nBetween different machines, AFS makes updates visible at th e server\nand invalidates cached copies at the exact same time, which i s when the\nupdated \ufb01le is closed. A client opens a \ufb01le, and then writes to it (perhaps\nrepeatedly). When it is \ufb01nally closed, the new \ufb01le is \ufb02ushed t o the server\n(and thus visibile); the server then breaks callbacks for an y clients with\ncached copies, thus ensuring that clients will no longer rea d stale copies\nof the \ufb01le; subsequent opens on those clients will require a r e-fetch of the\nnew version of the \ufb01le from the server .\nAFS makes an exception to this simple model between processe s on\nthe same machine. In this case, writes to a \ufb01le are immediatel y visible to\nother local processes (i.e., a process does not have to wait u ntil a \ufb01le is\nclosed to see its latest updates). This makes using a single m achine be-\nhave exactly as you would expect, as this behavior is based up on typical\nUN I X semantics. Only when switching to a different machine would you\nbe able to detect the more general AFS consistency mechanism .\nThere is one interesting cross-machine case that is worthy o f further\ndiscussion. Speci\ufb01cally , in the rare case that processes on different ma-\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E AN D R E W FI L E SY S T E M (AF S) 581\nClient1 Client2 Server Comments\nP1 P2 Cache P 3 Cache Disk\nopen(F) - - - File created\nwrite(A) A - -\nclose() A - A\nopen(F) A - A\nread() \u2192 A A - A\nclose() A - A\nopen(F) A - A\nwrite(B) B - A\nopen(F) B - A Local processes\nread() \u2192 B B - A see writes immediately\nclose() B - A\nB open(F) A A Remote processes\nB read() \u2192 A A A do not see writes...\nB close() A A\nclose() B \u0001A B ... until close()\nB open(F) B B has taken place\nB read() \u2192 B B B\nB close() B B\nB open(F) B B\nopen(F) B B B\nwrite(D) D B B\nD write(C) C B\nD close() C C\nclose() D \u0001C D\nD open(F) D D Unfortunately for P 3\nD read() \u2192 D D D the last writer wins\nD close() D D\nT able 49.2: Cache Consistency Timeline\nchines are modifying a \ufb01le at the same time, AFS naturally emp loys what\nis known as a last writer wins approach (which perhaps should be called\nlast closer wins ). Speci\ufb01cally , whichever client calls close() last will\nupdate the entire \ufb01le on the server last and thus will be the \u201cw inning\u201d\n\ufb01le, i.e., the \ufb01le that remains on the server for others to see . The result is\na \ufb01le"
  },
  {
    "content": " AFS naturally emp loys what\nis known as a last writer wins approach (which perhaps should be called\nlast closer wins ). Speci\ufb01cally , whichever client calls close() last will\nupdate the entire \ufb01le on the server last and thus will be the \u201cw inning\u201d\n\ufb01le, i.e., the \ufb01le that remains on the server for others to see . The result is\na \ufb01le that was generated in its entirety either by one client o r the other .\nNote the difference from a block-based protocol like NFS: in NFS, writes\nof individual blocks may be \ufb02ushed out to the server as each cl ient is up-\ndating the \ufb01le, and thus the \ufb01nal \ufb01le on the server could end up as a mix\nof updates from both clients. In many cases, such a mixed \ufb01le o utput\nwould not make much sense, i.e., imagine a JPEG image getting modi-\n\ufb01ed by two clients in pieces; the resulting mix of writes woul d not likely\nconstitute a valid JPEG.\nA timeline showing a few of these different scenarios can be s een in\nT able 49.2. The columns of the table show the behavior of two processes\n(P1 and P 2) on Client 1 and its cache state, one process (P 3) on Client 2 and\nits cache state, and the server (Server), all operating on a s ingle \ufb01le called,\nimaginatively , F. For the server , the table just shows the contents of the\n\ufb01le after the operation on the left has completed. Read throu gh it and see\nif you can understand why each read returns the results that i t does. A\ncommentary \ufb01eld on the right will help you if you get stuck.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n582 TH E AN D R E W FI L E SY S T E M (AF S)\n49.6 Crash Recovery\nFrom the description above, you might sense that crash recov ery is\nmore involved than with NFS. Y ou would be right. For example, imagine\nthere is a short period of time where a server (S) is not able to contact\na client (C1), for example, while the client C1 is rebooting. While C1\nis not available, S may have tried to send it one or more callba ck recall\nmessages; for example, imagine C1 had \ufb01le F cached on its loca l disk, and\nthen C2 (another client) updated F , thus causing S to send mes sages to all\nclients caching the \ufb01le to remove it from their local caches. Because C1\nmay miss those critical messages when it is rebooting, upon r ejoining the\nsystem, C1 should treat all of its cache contents as suspect. Thus, upon\nthe next access to \ufb01le F , C1 should \ufb01rst ask the server (with a T estAuth\nprotocol message) whether its cached copy of \ufb01le F is still va lid; if so, C1\ncan use it; if not, C1 should fetch the newer version from the s erver .\nServer recovery after a crash is also more complicated. The p roblem\nthat arises is that callbacks are kept in memory; thus, when a server re-\nboots, it has no idea which client machine has which \ufb01les. Thu s, upon\nserver restart, each client of the server must realize that t he server has\ncrashed and treat all of their cache contents as suspect, and (as above)\nreestablish the validity of a \ufb01le before using it. Thus, a ser ver crash is a\nbig event, as one must ensure that each client is aware of the c rash in a\ntimely manner , or risk a client accessing a stale \ufb01le. There a re many ways\nto implement such recovery; for example, by having the serve r send a\nmessage (saying \u201cdon\u2019t trust your cache contents!\u201d) to each client when\nit is up and running again, or by having clients check that the server is\nalive periodically (with a heartbeat message, as it is called). As you can\nsee, there is a cost to building a more scalable and sensible c aching model;\nwith NFS, clients hardly"
  },
  {
    "content": "\nto implement such recovery; for example, by having the serve r send a\nmessage (saying \u201cdon\u2019t trust your cache contents!\u201d) to each client when\nit is up and running again, or by having clients check that the server is\nalive periodically (with a heartbeat message, as it is called). As you can\nsee, there is a cost to building a more scalable and sensible c aching model;\nwith NFS, clients hardly noticed a server crash.\n49.7 Scale And Performance Of AFSv2\nWith the new protocol in place, AFSv2 was measured and found t o be\nmuch more scalable that the original version. Indeed, each s erver could\nsupport about 50 clients (instead of just 20). A further bene \ufb01t was that\nclient-side performance often came quite close to local per formance, be-\ncause in the common case, all \ufb01le accesses were local; \ufb01le rea ds usually\nwent to the local disk cache (and potentially , local memory) . Only when a\nclient created a new \ufb01le or wrote to an existing one was there n eed to send\na Store message to the server and thus update the \ufb01le with new c ontents.\nLet us also gain some perspective on AFS performance by compa ring\ncommon \ufb01le-system access scenarios with NFS. T able 49.3 shows the re-\nsults of our qualitative comparison.\nIn the table, we examine typical read and write patterns anal ytically ,\nfor \ufb01les of different sizes. Small \ufb01les have Ns blocks in them; medium\n\ufb01les have Nm blocks; large \ufb01les have NL blocks. W e assume that small\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E AN D R E W FI L E SY S T E M (AF S) 583\nW orkload NFS AFS AFS/NFS\n1. Small \ufb01le, sequential read Ns \u00b7Lnet Ns \u00b7Lnet 1\n2. Small \ufb01le, sequential re-read Ns \u00b7Lmem Ns \u00b7Lmem 1\n3. Medium \ufb01le, sequential read Nm \u00b7Lnet Nm \u00b7Lnet 1\n4. Medium \ufb01le, sequential re-read Nm \u00b7Lmem Nm \u00b7Lmem 1\n5. Large \ufb01le, sequential read NL \u00b7Lnet NL \u00b7Lnet 1\n6. Large \ufb01le, sequential re-read NL \u00b7Lnet NL \u00b7Ldisk\nLdisk\nLnet\n7. Large \ufb01le, single read Lnet NL \u00b7Lnet NL\n8. Small \ufb01le, sequential write Ns \u00b7Lnet Ns \u00b7Lnet 1\n9. Large \ufb01le, sequential write NL \u00b7Lnet NL \u00b7Lnet 1\n10. Large \ufb01le, sequential overwrite NL \u00b7Lnet 2 \u00b7NL \u00b7Lnet 2\n11. Large \ufb01le, single write Lnet 2 \u00b7NL \u00b7Lnet 2 \u00b7NL\nT able 49.3: Comparison: AFS vs. NFS\nand medium \ufb01les \ufb01t into the memory of a client; large \ufb01les \ufb01t on a local\ndisk but not in client memory .\nW e also assume, for the sake of analysis, that an access acros s the net-\nwork to the remote server for a \ufb01le block takes Lnet time units. Access\nto local memory takes Lmem , and access to local disk takes Ldisk . The\ngeneral assumption is that Lnet > L disk > L mem .\nFinally , we assume that the \ufb01rst access to a \ufb01le does not hit in any\ncaches. Subsequent \ufb01le accesses (i.e., \u201cre-reads\u201d) we assu me will hit in\ncaches, if the relevant cache has enough capacity to hold the \ufb01le.\nThe columns of the table show the time a particular operation (e.g., a\nsmall \ufb01le sequential read) roughly takes on either NFS or AFS . The right-\nmost column displays the ratio of AFS to NFS.\nW e make the following observations. First, in many cases, th e per-\nformance of each system is roughly equivalent. For example, when \ufb01rst\nreading a \ufffd"
  },
  {
    "content": " hold the \ufb01le.\nThe columns of the table show the time a particular operation (e.g., a\nsmall \ufb01le sequential read) roughly takes on either NFS or AFS . The right-\nmost column displays the ratio of AFS to NFS.\nW e make the following observations. First, in many cases, th e per-\nformance of each system is roughly equivalent. For example, when \ufb01rst\nreading a \ufb01le (e.g., W orkloads 1, 3, 5), the time to fetch the \ufb01 le from the re-\nmote server dominates, and is similar on both systems. Y ou mi ght think\nAFS would be slower in this case, as it has to write the \ufb01le to lo cal disk;\nhowever , those writes are buffered by the local (client-sid e) \ufb01le system\ncache and thus said costs are likely hidden. Similarly , you m ight think\nthat AFS reads from the local cached copy would be slower , aga in be-\ncause AFS stores the cached copy on disk. However , AFS again b ene\ufb01ts\nhere from local \ufb01le system caching; reads on AFS would likely hit in the\nclient-side memory cache, and performance would be similar to NFS.\nSecond, an interesting difference arises during a large-\ufb01l e sequential\nre-read (W orkload 6). Because AFS has a large local disk cach e, it will\naccess the \ufb01le from there when the \ufb01le is accessed again. NFS, in contrast,\nonly can cache blocks in client memory; as a result, if a large \ufb01le (i.e., a \ufb01le\nbigger than local memory) is re-read, the NFS client will hav e to re-fetch\nthe entire \ufb01le from the remote server . Thus, AFS is faster tha n NFS in this\ncase by a factor of Lnet\nLdisk\n, assuming that remote access is indeed slower\nthan local disk. W e also note that NFS in this case increases s erver load,\nwhich has an impact on scale as well.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n584 TH E AN D R E W FI L E SY S T E M (AF S)\nThird, we note that sequential writes (of new \ufb01les) should pe rform\nsimilarly on both systems (W orkloads 8, 9). AFS, in this case , will write\nthe \ufb01le to the local cached copy; when the \ufb01le is closed, the AF S client\nwill force the writes to the server , as per the protocol. NFS w ill buffer\nwrites in client memory , perhaps forcing some blocks to the s erver due\nto client-side memory pressure, but de\ufb01nitely writing them to the server\nwhen the \ufb01le is closed, to preserve NFS \ufb02ush-on-close consis tency . Y ou\nmight think AFS would be slower here, because it writes all da ta to local\ndisk. However , realize that it is writing to a local \ufb01le syste m; those writes\nare \ufb01rst committed to the page cache, and only later (in the ba ckground)\nto disk, and thus AFS reaps the bene\ufb01ts of the client-side OS m emory\ncaching infrastructure to improve performance.\nFourth, we note that AFS performs worse on a sequential \ufb01le ov er-\nwrite (W orkload 10). Thus far , we have assumed that the workl oads that\nwrite are also creating a new \ufb01le; in this case, the \ufb01le exists , and is then\nover-written. Overwrite can be a particularly bad case for A FS, because\nthe client \ufb01rst fetches the old \ufb01le in its entirety , only to su bsequently over-\nwrite it. NFS, in contrast, will simply overwrite blocks and thus avoid the\ninitial (useless) read 1.\nFinally , workloads that access a small subset of data within large \ufb01les\nperform much better on NFS than AFS (W orkloads 7, 11). In thes e cases,\nthe AFS protocol fetches the entire \ufb01le when the \ufffd"
  },
  {
    "content": "\ufffdle in its entirety , only to su bsequently over-\nwrite it. NFS, in contrast, will simply overwrite blocks and thus avoid the\ninitial (useless) read 1.\nFinally , workloads that access a small subset of data within large \ufb01les\nperform much better on NFS than AFS (W orkloads 7, 11). In thes e cases,\nthe AFS protocol fetches the entire \ufb01le when the \ufb01le is opened ; unfortu-\nnately , only a small read or write is performed. Even worse, i f the \ufb01le is\nmodi\ufb01ed, the entire \ufb01le is written back to the server , doubli ng the per-\nformance impact. NFS, as a block-based protocol, performs I /O that is\nproportional to the size of the read or write.\nOverall, we see that NFS and AFS make different assumptions a nd not\nsurprisingly realize different performance outcomes as a r esult. Whether\nthese differences matter is, as always, a question of worklo ad.\n49.8 AFS: Other Improvements\nLike we saw with the introduction of Berkeley FFS (which adde d sym-\nbolic links and a number of other features), the designers of AFS took the\nopportunity when building their system to add a number of fea tures that\nmade the system easier to use and manage. For example, AFS pro vides a\ntrue global namespace to clients, thus ensuring that all \ufb01le s were named\nthe same way on all client machines. NFS, in contrast, allows each client\nto mount NFS servers in any way that they please, and thus only by con-\nvention (and great administrative effort) would \ufb01les be nam ed similarly\nacross clients.\n1 W e assume here that NFS reads are block-sized and block-alig ned; if they were not, the\nNFS client would also have to read the block \ufb01rst. W e also assu me the \ufb01le was not opened\nwith the O TRUNC \ufb02ag; if it had been, the initial open in AFS would not fet ch the soon to be\ntruncated \ufb01le\u2019s contents.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E AN D R E W FI L E SY S T E M (AF S) 585\nAS I D E : TH E IM P O RTA N C E OF WO R K L O A D\nOne challenge of evaluating any system is the choice of workload. Be-\ncause computer systems are used in so many different ways, th ere are a\nlarge variety of workloads to choose from. How should the sto rage sys-\ntem designer decide which workloads are important, in order to make\nreasonable design decisions?\nThe designers of AFS, given their experience in measuring ho w \ufb01le sys-\ntems were used, made certain workload assumptions; in parti cular , they\nassumed that most \ufb01les were not frequently shared, and acces sed sequen-\ntially in their entirety . Given those assumptions, the AFS d esign makes\nperfect sense.\nHowever , these assumptions are not always correct. For exam ple, imag-\nine an application that appends information, periodically , to a log. These\nlittle log writes, which add small amounts of data to an exist ing large \ufb01le,\nare quite problematic for AFS. Many other dif\ufb01cult workload s exist as\nwell, e.g., random updates in a transaction database.\nOne place to get some information about what types of workloa ds are\ncommon are through various research studies that have been p erformed.\nSee any of these studies for good examples of workload analys is [B+91,\nH+11, R+00, V99], including the AFS retrospective [H+88].\nAFS also takes security seriously , and incorporates mechan isms to au-\nthenticate users and ensure that a set of \ufb01les could be kept pr ivate if a\nuser so desired. NFS, in contrast, had quite primitive suppo rt for security\nfor many years.\nAFS also includes facilities for \ufb02exible user-managed acce ss control.\nThus, when using AFS, a user has a great deal of control"
  },
  {
    "content": "\nAFS also takes security seriously , and incorporates mechan isms to au-\nthenticate users and ensure that a set of \ufb01les could be kept pr ivate if a\nuser so desired. NFS, in contrast, had quite primitive suppo rt for security\nfor many years.\nAFS also includes facilities for \ufb02exible user-managed acce ss control.\nThus, when using AFS, a user has a great deal of control over wh o exactly\ncan access which \ufb01les. NFS, like most U N I X \ufb01le systems, has much less\nsupport for this type of sharing.\nFinally , as mentioned before, AFS adds tools to enable simpl er man-\nagement of servers for the administrators of the system. In t hinking about\nsystem management, AFS was light years ahead of the \ufb01eld.\n49.9 Summary\nAFS shows us how distributed \ufb01le systems can be built quite di ffer-\nently than what we saw with NFS. The protocol design of AFS is p artic-\nularly important; by minimizing server interactions (thro ugh whole-\ufb01le\ncaching and callbacks), each server can support many client s and thus\nreduce the number of servers needed to manage a particular si te. Many\nother features, including the single namespace, security , and access-control\nlists, make AFS quite nice to use. The consistency model prov ided by AFS\nis simple to understand and reason about, and does not lead to the occa-\nsional weird behavior as one sometimes observes in NFS.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n586 TH E AN D R E W FI L E SY S T E M (AF S)\nPerhaps unfortunately , AFS is likely on the decline. Becaus e NFS be-\ncame an open standard, many different vendors supported it, and, along\nwith CIFS (the Windows-based distributed \ufb01le system protoc ol), NFS\ndominates the marketplace. Although one still sees AFS inst allations\nfrom time to time (such as in various educational institutio ns, including\nWisconsin), the only lasting in\ufb02uence will likely be from th e ideas of AFS\nrather than the actual system itself. Indeed, NFSv4 now adds server state\n(e.g., an \u201copen\u201d protocol message), and thus bears an increa sing similar-\nity to the basic AFS protocol.\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTH E AN D R E W FI L E SY S T E M (AF S) 587\nReferences\n[B+91] \u201cMeasurements of a Distributed File System\u201d\nMary Baker , John Hartman, Martin Kupfer , Ken Shirriff, John Ousterhout\nSOSP \u201991, Paci\ufb01c Grove, CA, October 1991\nAn early paper measuring how people use distributed \ufb01le syst ems. Matches much of the intuition found\nin AFS.\n[H+11] \u201cA File is Not a File: Understanding the I/O Behavior o f Apple Desktop Applications\u201d\nT yler Harter , Chris Dragga, Michael V aughn,\nAndrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau\nSOSP \u201911, New Y ork, NY , October 2011\nOur own paper studying the behavior of Apple Desktop workloa ds; turns out they are a bit different\nthan many of the server-based workloads the systems researc h community usually focuses upon. Also a\ngood recent reference which points to a lot of related work.\n[H+88] \u201cScale and Performance in a Distributed File System\u201d\nJohn H. Howard, Michael L. Kazar , Sherri G. Menees, David A. N ichols, M. Satyanarayanan,\nRobert N. Sidebotham, Michael J. W est\nACM T ransactions on Computing Systems (ACM TOCS), page 51-8 1, V olume 6, Number 1,\nFebruary 1988\nThe long journal version of the famous AFS system, still in us e in a number of places throughout the\nworld, and also"
  },
  {
    "content": " , Sherri G. Menees, David A. N ichols, M. Satyanarayanan,\nRobert N. Sidebotham, Michael J. W est\nACM T ransactions on Computing Systems (ACM TOCS), page 51-8 1, V olume 6, Number 1,\nFebruary 1988\nThe long journal version of the famous AFS system, still in us e in a number of places throughout the\nworld, and also probably the earliest clear thinking on how t o build distributed \ufb01le systems. A wonderful\ncombination of the science of measurement and principled en gineering.\n[R+00] \u201cA Comparison of File System W orkloads\u201d\nDrew Roselli, Jacob R. Lorch, Thomas E. Anderson\nUSENIX \u201900, San Diego, CA, June 2000\nA more recent set of traces as compared to the Baker paper [B+9 1], with some interesting twists.\n[S+85] \u201cThe ITC Distributed File System: Principles and Des ign\u201d\nM. Satyanarayanan, J.H. Howard, D.A. Nichols, R.N. Sidebot ham, A. Spector , M.J. W est\nSOSP \u201985. pages 35-50\nThe older paper about a distributed \ufb01le system. Much of the ba sic design of AFS is in place in this older\nsystem, but not the improvements for scale.\n[V99] \u201cFile system usage in Windows NT 4.0\u201d\nW erner V ogels\nSOSP \u201999, Kiawah Island Resort, SC, December 1999\nA cool study of Windows workloads, which are inherently diff erent than many of the UNIX -based studies\nthat had previously been done.\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n\n50\nSummary Dialogue on Distribution\nStudent: Well, that was quick. T oo quick, in my opinion!\nProfessor: Y es, distributed systems are complicated and cool and well w orth\nyour study; just not in this book (or course).\nStudent: That\u2019s too bad; I wanted to learn more! But I did learn a few thi ngs.\nProfessor: Like what?\nStudent: Well, everything can fail.\nProfessor: Good start.\nStudent: But by having lots of these things (whether disks, machines, or what-\never), you can hide much of the failure that arises.\nProfessor: Keep going!\nStudent: Some basic techniques like retrying are really useful.\nProfessor: That\u2019s true.\nStudent: And you have to think carefully about protocols: the exact bi ts that\nare exchanged between machines. Protocols can affect every thing, including how\nsystems respond to failure and how scalable they are.\nProfessor: Y ou really are getting better at this learning stuff.\nStudent: Thanks! And you\u2019re not a bad teacher yourself!\nProfessor: Well thank you very much too.\nStudent: So is this the end of the book?\nProfessor: I\u2019m not sure. They don\u2019t tell me anything.\nStudent: Me neither . Let\u2019s get out of here.\nProfessor: OK.\nStudent: Go ahead.\nProfessor: No, after you.\nStudent: Please, professors \ufb01rst.\n589\n590 SU M M A RY DI A L O G U E O N DI S T R I B U T I O N\nProfessor: No, please, after you.\nStudent: (exasperated) Fine!\nProfessor: (waiting) ... so why haven\u2019t you left?\nStudent: I don\u2019t know how. T urns out, the only thing I can do is particip ate in\nthese dialogues.\nProfessor: Me too. And now you\u2019ve learned our \ufb01nal lesson...\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nGeneral Index\nabsolute pathname, 442\nabstraction, iv, 112, 395\nabstractions, 13\naccess methods, 462\naccess path, 470\naccessed bit, 174\naccounting, 77\nack, 547\nacknowledgment, 547\nacquired, 291\nadditive parity, 432\naddress, 7\naddress space, 8, 26,"
  },
  {
    "content": ". 80] W W W.O S T E P.O R G\nGeneral Index\nabsolute pathname, 442\nabstraction, iv, 112, 395\nabstractions, 13\naccess methods, 462\naccess path, 470\naccessed bit, 174\naccounting, 77\nack, 547\nacknowledgment, 547\nacquired, 291\nadditive parity, 432\naddress, 7\naddress space, 8, 26, 108, 111, 132, 263,\n403\naddress space identi\ufb01er, 191\naddress translation, 130, 134, 137\naddress translations, 170\naddress-based ordering, 164\naddress-space identi\ufb01er, 190\naddress-translation cache, 183\nadmission control, 240\nadvice, 79, 80\nAIO control block, 378\nAIX, 17\nallocate, 472\nallocation structures, 463\nAMA T, 228\namortization, 66, 485\namortize, 65, 514\nanonymous, 125\nanticipatory disk scheduling, 415\nASID, 191\nAside, 16\nasides, iii\nasynchronous, 375\nasynchronous I/O, 377\nasynchronous read, 378\nasynchronously, 556\natomic, 274, 403, 448\natomic exchange, 296\natomically, 10, 271, 297, 429, 495\natomicity violation, 360\nattribute cache, 571\nautomatic, 119\nautomatic memory management, 122\navailable, 291\naverage memory access time, 228\naverage turnaround time, 61\navoidance, 368\navoids, 474\nB-tree, 470\nbaby proo\ufb01ng, 55\nback pointer, 508\nbackground, 224\nbackpointer-based consistency, 508\nbase, 133, 135, 204\nbase and bounds, 133\nbash, 42\nbatch, 14, 474\nBBC, 508\nBelady\u2019s Anomaly, 231\nBerkeley Systems Distribution, 17\nbest \ufb01t, 163\nbest-\ufb01t, 148\nbig endian, 554\nbig kernel lock, 322\nBill Joy, 17\nbinary buddy allocator, 166\nbinary semaphore, 344\nbitmap, 463\nBKL, 322\nblock corruption, 436, 527\nblock groups, 481\nBlocked, 29\nblocked, 67, 221\nblocks, 462\nboost, 76\nbound, 204\nbounded buffer, 329, 346\nbounded SA TF, 419\nbounded-buffer, 329\nbounds, 133, 135\n591\n592 D E P L O Y M E N T\nbreak, 125\nBSA TF, 419\nBSD, 17\nbtrfs, 523\nbuddy algorithm, 148\nbuffer, 447\nbuffer cache, 493\nbuffer over\ufb02ow, 123\nbugs, 561\nbus snooping, 96\nbyte ordering, 554\nC programming language, iv, 17\nC-SCAN, 413\ncache, 183, 227, 407\ncache af\ufb01nity, 97\ncache coherence, 96\ncache consistency problem, 569\ncache hits, 227\ncache misses, 227\ncache replacement, 192\ncached, 560\ncaches, 94\ncaching, 569\ncallback, 578\ncapability, 444\ncapacity, 423\ncapacity miss, 230\ncast, 121\ncentralized administration, 559\ncheckpoint, 498\ncheckpoint region (CR), 517\ncheckpointing, 498\nchecksum, 530, 546\nchild, 36\nchunk size, 424\ncigarette smoker \u2019s problem, 355\ncircular log, 502\nCircular SCAN, 413\nCISC, 187, 189\nclean, 239, 519\nclient stub, 551\nclient-side \ufb01le system, 560\nclient/server, 543\nclock algorithm, 238\nclock hand, 238\nclose-to-open, 570\ncluster, 223\nclustering, 240, 249\ncoalesce, 162\ncoalescing, 156, 393\ncoarse-grained, 147, 292\ncode, 111\ncode sharing, 146\ncold-start miss, 229, 230\ncollision, 532\ncommand, 391\ncommon case, 571\ncommunication, 544\ncommunication endpoint, 545\ncompact, 148, 520\ncompaction, 154\ncompare-and-exchange, 299\ncompare-and-swap, 299\nComplex Instruction Set Computing, 189\ncompulsory miss, 229, 230"
  },
  {
    "content": "ained, 147, 292\ncode, 111\ncode sharing, 146\ncold-start miss, 229, 230\ncollision, 532\ncommand, 391\ncommon case, 571\ncommunication, 544\ncommunication endpoint, 545\ncompact, 148, 520\ncompaction, 154\ncompare-and-exchange, 299\ncompare-and-swap, 299\nComplex Instruction Set Computing, 189\ncompulsory miss, 229, 230\ncomputed checksum, 533\nconcurrency, iii, 1, 8, 10, 13, 16, 37, 54, 261\nconcurrently, 311\ncondition, 325, 326, 344\ncondition variable, 285, 326, 344\ncondition variables, 262, 273, 362\ncon\ufb02ict miss, 230\nconsistent-update problem, 429, 495\nconsumer, 331\ncontext switch, 26, 30, 52, 63, 263\ncontinuation, 380\nconvention, 443\nconvoy effect, 61\ncooperative, 50\ncopy-on-write, 12, 251, 507, 522\ncorrectness, 299\ncorrupt, 528\ncovering condition, 338\nCOW, 251, 507\nCPU, 5\ncrash-consistency problem, 491, 495\nCRC, 532\ncritical section, 271, 272, 284\ncrux, iii\ncrux of the problem, iii\nCuller \u2019s Law, 194\ncycle, 363\ncyclic redundancy check, 532\ncylinder groups, 481\ndangling pointer, 124\ndangling reference, 455\ndata, 391\ndata bitmap, 463, 481, 492\ndata integrity, 527\ndata journaling, 498, 503\ndata protection, 527\ndata region, 462\ndata structures, 32, 461\ndatabase management system, 194\ndatagrams, 545\nDBMS, 194\ndeadlock, 354, 359, 363\nDEC, 245\ndecay-usage, 79\ndecodes, 3\ndemand paging, 240\ndemand zeroing, 250\ndeployability, 422\ndeployment, 422\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nE X P L I C I T 593\ndescheduled, 30\ndeserialization, 552\ndeterministic, 37, 268, 270, 272\ndevice driver, 12, 395\ndialogue, iii\nDigital Equipment Corporation, 245\ndimensional analysis, 408\ndining philosopher \u2019s problem, 352\ndirect I/O, 474\nDirect Memory Access (DMA), 394\ndirect pointers, 466\ndirectory, 442\ndirectory hierarchy, 442\ndirectory tree, 442\ndirty, 239, 447\ndirty bit, 174, 190, 239\ndisable interrupts, 55\ndisassemble, 176\ndisassembler ., 269\ndisciplines, 59\ndisk, 28\ndisk address, 218\ndisk arm, 404\ndisk head, 404\nDisk Operating System, 16\ndisk scheduler, 412\ndisk scrubbing, 535\ndisks, 389\ndistributed shared memory, 550\ndistributed state, 562\nDOS, 16\ndouble free, 124\ndouble indirect pointer, 467\ndrop, 545\nDSM, 550\ndtruss, 444\ndynamic relocation, 133, 134\neagerly, 28\nease of use, 108\neasy to use, 3, 111\nECC, 528\nEdsger Dijkstra, 341\nef\ufb01ciency, 110, 113\nef\ufb01cient, 113\nelevator, 413\nempty, 335\nencapsulation, 364\nend-to-end argument, 545, 555\nenergy-ef\ufb01ciency, 14\nerror correcting codes, 528\nevent handler, 374\nevent loop, 374\nevent-based concurrency, 373\nevict, 227\nexactly once, 548\nexecutable format, 28\nexecutes, 3\nexplicit, 144\nexponential back-off, 550\nextents, 467\neXternal Data Representation, 555\nexternal fragmentation, 148, 153, 154\nF-SCAN, 413\nfail-partial, 528\nfail-stop, 423, 527\nfailure, 543\nfair, 66\nfair-share, 83\nfairness, 60, 293, 299\nFast File System (FFS), 481\nF A T,468\nFC"
  },
  {
    "content": ", 144\nexponential back-off, 550\nextents, 467\neXternal Data Representation, 555\nexternal fragmentation, 148, 153, 154\nF-SCAN, 413\nfail-partial, 528\nfail-stop, 423, 527\nfailure, 543\nfair, 66\nfair-share, 83\nfairness, 60, 293, 299\nFast File System (FFS), 481\nF A T,468\nFCFS, 61\nfetch-and-add, 302\nfetches, 3\nFID, 578\nFIFO, 60, 230\n\ufb01le, 441\n\ufb01le allocation table, 468\n\ufb01le descriptor, 444\n\ufb01le descriptors, 29\n\ufb01le handle, 563, 578\n\ufb01le identi\ufb01er, 578\n\ufb01le offset, 446\n\ufb01le server, 560\n\ufb01le system, 11, 12, 15\n\ufb01le system checker, 492\n\ufb01le-level locking, 580\n\ufb01le-system inconsistency, 494\n\ufb01les, 11\n\ufb01ll, 335\n\ufb01nal, 31\n\ufb01ne-grained, 147, 292\n\ufb01rmware, 390\nFirst Come, First Served, 60\n\ufb01rst \ufb01t, 164\nFirst In, First Out, 60\n\ufb01rst-\ufb01t, 148\n\ufb01x-sized cache, 474\n\ufb02ash-based SSDs, 28\nFletcher checksum, 532\n\ufb02ush, 191\n\ufb02ush-on-close, 570\nfork(), 36\nfragmentation, 554\nfragmented, 480\nframe pointer, 27\nfree, 291\nfree list, 136, 154, 170, 463\nfree lists, 470\nfree space management, 469\nfree-space management, 153\nfrequency, 233\nfsck, 492, 495\nfull-stripe write, 432\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n594 L I N K C O U N T\nfully associative, 189\nfully-associative, 189, 230\nfunction pointer, 280\nfutex, 307, 308\ngame the scheduler, 76\ngarbage, 494, 518\ngarbage collection, 519\ngarbage collector, 122\ngraphics, 18\ngreedy, 419\ngroup, 223\ngrouping, 240\nhand-over-hand locking, 318\nhard disk drive, 217, 403, 441\nhard drive, 11\nhardware caches, 94\nhardware privilege level, 15\nhardware-based address translation, 130\nhardware-managed TLB, 183\nhardware-managed TLBs, 187\nhead crash, 528\nheader, 157\nheap, 29, 111, 119, 288\nheartbeat, 582\nheld, 291\nhigh watermark, 223\nHill\u2019s Law, 352\nhints, 80\nhit rate, 186, 192, 228\nHoare semantics, 333\nholds, 296\nholes, 520\nhomeworks, iv\nhot spare, 436\nHPUX, 17\nHUP, 379\nhybrid, 202, 205, 308, 393\nI/O, 11\nI/O bus, 389\nI/O instructions, 394\nI/O merging, 415\nIdempotency, 567\nidempotent, 567\nidle time, 224\nillusion, 130\nimmediate reporting, 407, 499\nimplicit, 145\ninconsistent, 429, 491\nindeterminate, 270, 272\nindex node, 464, 465\nindirect pointer, 466\ninitial, 31\ninode, 450, 463\u2013 465, 512\ninode bitmap, 463, 481, 492\ninode map (imap), 515\ninode number, 442\ninode table, 463\ninput/output, 11\ninput/output (I/O) device, 389\ninstruction pointer, 26\nINT, 379\ninteractivity, 110\ninterface, 390\ninternal, 202\ninternal fragmentation, 138, 154, 167, 202,\n480, 486\ninternal structure, 390\ninterposing, 129\ninterrupt, 378, 392\ninterrupt handler, 51, 392\ninterrupt service routine (IS"
  },
  {
    "content": ", 442\ninode table, 463\ninput/output, 11\ninput/output (I/O) device, 389\ninstruction pointer, 26\nINT, 379\ninteractivity, 110\ninterface, 390\ninternal, 202\ninternal fragmentation, 138, 154, 167, 202,\n480, 486\ninternal structure, 390\ninterposing, 129\ninterrupt, 378, 392\ninterrupt handler, 51, 392\ninterrupt service routine (ISR), 392\ninterrupts, 578\ninumber, 465\ninvalid, 173, 203\ninvalid frees, 124\ninvalidate, 96\ninvalidates, 570\ninvariant, 431\ninverted page table, 170\ninverted page tables, 212\nIP, 26\nIRIX, 17\nisolation, 13, 108, 113\nJain\u2019s Fairness Index, 60\njobs, 60\njournal superblock, 503\njournaling, 12, 492, 497\nkernel mode, 15, 47\nkernel stack, 48\nkernel virtual memory, 213\nkill, 379\nKnuth, 322\nlast closer wins, 581\nlast writer wins, 581\nlatent sector errors, 436\nlatent-sector errors, 527\nLauer \u2019s Law, 302\nlazily, 28\nlazy, 250\nLDE, 129\nLeast-Frequently-Used, 233\nLeast-Recently-Used, 233\nleast-recently-used, 192\nlevel of indirection, 207, 515, 516\nLFS, 512\nLFU, 233\nlimit, 133, 135, 204\nlimited direct execution, 45, 55, 105, 129\nlinear page table, 173, 183\nlink count, 454\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nM E R G E 595\nlinked list, 468\nLinus T orvalds, 18\nLinux, 18\nLinux ext2, 497\nLinux ext3, 497\nLinux ext4, 500\nlittle endian, 554\nlive, 519\nlivelock, 366, 393\nlmbench, 55\nload, 28\nload imbalance, 100\nload-linked, 300\nloader, 134\nloads, 39\nlocality, 95, 187\nlock, 291\nlock coupling, 318\nlock variable, 291\nlock-free, 96\nlocked, 291\nlocking, 55, 97, 98\nlocks, 262, 283\nlog, 522\nLog-structured File System, 512\nlogical logging, 498\nlong \ufb01le names, 487\nlookaside buffer, 195\nlost write, 535\nlottery scheduling, 83\nlow watermark, 223\nlow-level name, 441, 465\nLRU, 192, 233, 474\nLSEs, 527\nMac OS, 16\nmachine state, 26\nmalicious scheduler, 297\nman pages, 42\nmanage, 4\nmanage memory, 130\nmanual pages, 42\nmanual stack management, 380\nmarshaling, 552\nmaster control program, 4\nmeasurement, 577\nmechanisms, 6, 25, 59, 105, 114\nmemory bus, 389\nmemory hierarchy, 217\nmemory hogs, 249\nmemory leak, 124\nmemory management unit (MMU), 135\nmemory overlays, 217\nmemory pressure, 227\nmemory protection, 16\nmemory-management unit, 183\nmemory-mapped I/O, 395\nMenuMeters, 42\nmerge, 162, 415\nMesa semantics, 333, 337\nmetadata, 449, 463, 466, 512\nmetadata journaling, 503\nMFU, 234\nmice, 389\nmicrokernels, 33, 113\nMicrosoft, 16\nmigrating, 99\nmigration, 101\nminicomputer, 15\nminimize the overheads, 13\nmirrored, 422\nmisdirected write, 534\nmiss rate, 192, 228\nMMU, 183\nmobility, 14\nmodi\ufb01ed, 239\nmodi\ufb01ed bit, 239\nmodularity, 27\nmonitors, 312\nMost-Frequently-Used, 234\nMost-Recently-Used, 234\nmount point, 456\nmount protocol, 564\nMQMS, 99\nMRU, 234\nmulti-level feedback queue, 68\nMulti-level Feedback Queue (MLFQ), 71\nmulti-"
  },
  {
    "content": "U, 183\nmobility, 14\nmodi\ufb01ed, 239\nmodi\ufb01ed bit, 239\nmodularity, 27\nmonitors, 312\nMost-Frequently-Used, 234\nMost-Recently-Used, 234\nmount point, 456\nmount protocol, 564\nMQMS, 99\nMRU, 234\nmulti-level feedback queue, 68\nMulti-level Feedback Queue (MLFQ), 71\nmulti-level index, 467\nmulti-level page table, 187, 205\nmulti-queue multiprocessor scheduling, 99\nmulti-threaded, 9, 262, 263\nmulti-threaded programs, 37\nmulti-zoned, 407\nmulticore, 93\nMultics, 17\nmultiprocessor, 93\nmultiprocessor scheduling, 93, 94\nmultiprogramming, 15, 110\nmutex, 292\nmutual exclusion, 271, 272, 292, 293\nname, 443\nnaming, 553\nNBF, 412\nnearest-block-\ufb01rst, 412\nnetworking, 18\nnew, 122\nnext \ufb01t, 164\nNeXTStep, 18\nnode.js, 373\nnon-blocking data structures, 322\nnon-determinism, 37\nnon-preemptive, 63\nnon-work-conserving, 415\nnull-pointer, 248\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n596 Q U E U E S\nobject caches, 165\noffset, 171\nopen protocol, 561\nopen-source software, 17\noperating system, 4\nOperating Systems in Three Easy Pieces,\n1\noptimal, 62, 228\noptimistic crash consistency, 508\norder violation, 360, 361\nordered journaling, 503\nOS, 4\nOusterhout\u2019s Law, 79\nout-of-memory killer, 240\noverlap, 67, 68, 221, 377, 392\nowner, 292\npage, 169\npage cache, 493\npage daemon, 223\npage directory, 205, 209\npage directory entries, 206\npage fault, 219, 220, 224\npage frame, 170\npage frame number, 206\npage in, 221\npage miss, 220\npage out, 221\npage replacement, 174\npage selection, 240\npage table, 170, 176\npage table base register, 219\npage table entry (PTE), 172, 219\npage-directory index, 208\npage-fault handler, 220, 224\npage-replacement policy, 221\npage-table base register, 175, 187\npage-table index, 209\npaging, 28, 153, 169, 179, 381\npaging out, 227\nparallel, 93\nparameterization, 487\nparameterize, 78\nparent, 31, 36\nparity, 430\npartitioned, 561\npass, 88\nPatterson\u2019s Law, 577\nPC, 16, 26\nPCB, 32\nPCI, 389\nPDE, 206\nperfect scaling, 313\nperformance, 13, 60, 293, 299, 423, 544\nperipheral bus, 389\npersist, 387, 491\npersistence, iii, 1, 11, 12, 29, 387\npersistent storage, 441\npersistently, 11, 13\npersonal computer, 16\nphysical, 4, 23, 130\nphysical address, 134\nphysical ID, 534\nphysical identi\ufb01er, 534\nphysical logging, 498\nphysical memory, 7\nphysically-indexed cache, 194\nPID, 36, 191\npipe, 41, 329\npipes, 17\nplatter, 404\npolicies, 26, 59, 114\npolicy, 6\npoll, 378\npolling, 391, 578\npower loss, 491\npower outage, 561\npre-allocation, 470\npreempt, 63\npreemptive, 63\npreemptive scheduler, 298\nPreemptive Shortest Job First, 64\nprefetching, 240\npremature optimization, 322\npresent, 222\npresent bit, 174, 219, 224\nprinciple of locality, 233, 234\nprinciple of SJF (shortest job \ufb01rst), 412\npriority level, 72\nprivileged, 49, 137, 193, 395\nprocedure call, 15, 283\nprocess, 25, 26\nProcess Control Block, 32\nprocess control block,"
  },
  {
    "content": " Job First, 64\nprefetching, 240\npremature optimization, 322\npresent, 222\npresent bit, 174, 219, 224\nprinciple of locality, 233, 234\nprinciple of SJF (shortest job \ufb01rst), 412\npriority level, 72\nprivileged, 49, 137, 193, 395\nprocedure call, 15, 283\nprocess, 25, 26\nProcess Control Block, 32\nprocess control block, 137\nprocess control block (PCB), 263\nprocess identi\ufb01er, 36, 191\nprocess list, 30, 32\nprocess structure, 137\nproducer, 331\nproducer/consumer, 329, 346\nprogram counter, 26\nprogrammed I/O (PIO), 391\nprojects, iv\nprompt, 40\nproportional-share, 83\nprotect, 113\nprotection, 13, 108, 111, 113, 190\nprotection bits, 146, 173\nprotocol, 575\nprotocol compiler, 551\npseudocode, iv\nPSJF, 64\npurify, 125\nqueues, 72\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nR O TAT I O N S P E R M I N U T E 597\nrace condition, 270, 272\nRAID, 421\nRAID 0+1, 428\nRAID 1+0, 428\nRAID-01, 428\nRAID-10, 428\nRAID-DP, 530\nRAM, 194\nRAM isn\u2019t always RAM, 194\nrandom, 192, 409, 426, 446\nrandom-access memory, 194\nrandomness, 84\nraw disk, 475\nread-after-write, 535\nreader-writer lock, 350\nReady, 29\nready, 304\nreal code, iv\nreassembly, 554\nreboot the machine, 51\nrecency, 233\nreconstruct, 431, 530\nrecover, 501\nrecovery, 429\nrecovery protocol, 562\nrecursive update problem, 518\nredirected, 40\nredo logging, 501\nReduced Instruction Set Computing, 189\nredundancy, 421\nRedundant Array of Inexpensive Disks,\n421\nreference bit, 174, 238, 249\nreference count, 453\nregain control, 50\nregister context, 30\nreliability, 13, 423\nrelocate, 132\nremote method invocation, 551\nremote procedure call, 551\nreplace, 192, 221\nreplacement policy, 227\nreplayed, 501\nresident set size, 249\nresource, 4\nresource manager, 4, 6\nresources, 13\nresponse time, 64\nretry, 548\nreturn-from-trap, 15, 47\nrevoke, 506\nRISC, 188, 189\nRMI, 551\nroll forward, 522\nroot directory, 442, 471\nrotates, 434\nrotation delay, 405\nrotational delay, 405\nrotations per minute, 408\nrotations per minute (RPM), 404\nround robin, 99\nRound-Robin (RR), 65\nRPC, 551\nRPM, 408\nRSS, 249\nrun-time library, 551\nrun-time stack, 29\nRunning, 29\nrunning, 304\nrunning program, 25\nSA T A,389\nSA TF, 414\nscalability, 98\nscale, 575\nscaling, 167\nSCAN, 413\nscan resistance, 241\nschedule, 474\nscheduled, 30\nscheduler, 37, 52\nscheduler state, 344\nscheduling metric, 60\nscheduling policies, 59\nscheduling policy, 26\nscheduling quantum, 65\nSCSI, 389\nsecond-chance lists, 249\nsecurity, 14, 18, 544, 559\nseek, 406, 447\nsegment, 141, 512, 513\nsegment summary block, 520\nsegment table, 147\nsegmentation, 138, 141, 153, 155\nsegmentation fault, 122, 144\nsegmentation violation, 144\nsegmented FIFO, 249\nsegregated lists, 165\nSEGV, 379\nsemaphore, 341\nseparator, 442\nsequence counter, 549\nsequential, 409, 426, 446\nserialization, 552\nserver-side \ufb01le system, 560\nset, 298\nset-associ"
  },
  {
    "content": "ation, 138, 141, 153, 155\nsegmentation fault, 122, 144\nsegmentation violation, 144\nsegmented FIFO, 249\nsegregated lists, 165\nSEGV, 379\nsemaphore, 341\nseparator, 442\nsequence counter, 549\nsequential, 409, 426, 446\nserialization, 552\nserver-side \ufb01le system, 560\nset, 298\nset-associativity, 230\nsets, 296\nsettling time, 406\nshadow paging, 522\nshare, 11, 146\nshared state, 562\nsharing, 559\nshell, 17\nshortest access time \ufb01rst, 414\nShortest Job First (SJF), 62\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n598 T I M E S L I C E\nshortest positioning time \ufb01rst, 414\nShortest Time-to-Completion First, 64\nshortest-seek-\ufb01rst, 412\nshortest-seek-time-\ufb01rst, 412\nSIG, 379\nsignal handler, 379\nsignaling, 326\nsignals, 42, 378, 379\nSIGSEGV, 379\nsilent faults, 528\nsimulations, iv\nsingle-queue multiprocessor scheduling,\n97\nsingle-threaded, 263\nslab allocator, 165\nslabs, 165\nsleeping barber problem, 355\nsloppy counter, 314\nsmall-write problem, 433, 511\nsnapshots, 523\nsockets, 545\nsoft link, 454\nsoftware RAID, 436\nsoftware-managed TLB, 188\nsolid-state drives, 11\nsolid-state storage device, 441\nspace leak, 494\nspace sharing, 26\nsparse address spaces, 143\nspatial locality, 95, 186, 187, 234\nspin lock, 298\nspin-wait, 296\nspin-waiting, 297\nspindle, 404\nsplit, 159\nsplitting, 155\nSPTF, 414\nspurious wakeups, 337\nSQMS, 97\nSSDs, 11\nSSF, 412\nSSTF, 412\nstack, 29, 111, 119\nstack pointer, 27\nstack property, 231\nstale cache, 570\nstandard library, 4, 12\nstandard output, 40\nstarvation, 76, 413\nstarve, 76\nstate, 565\nstateful, 562\nstateless, 562\nstates, 29\nstatic relocation, 134\nstatus, 391\nSTCF, 64\nstore-conditional, 300\nstored checksum, 533\nstrace, 444\nstride, 88\nstride scheduling, 88\nstripe, 424\nstriping, 424\nstub generator, 551\nsub-blocks, 486\nsub-directories, 442\nsubtractive parity, 432\nSunOS, 17\nsuper block, 481\nsuperblock, 464\nsuperpages, 214\nsupervisor, 4\nsurface, 404\nswap, 213\nswap daemon, 223\nswap space, 125, 218\nswapping, 28\nswitches contexts, 53\nsymbolic link, 454, 488\nsynchronization primitives, 271\nsynchronous, 375, 552\nsynchronously, 555\nsystem call, 15, 47\nsystem calls, 4, 12, 50, 560\nsystem crash, 491\nsystems programming, iv\nTCP, 549\nTCP/IP, 549\ntcsh, 42\ntemporal locality, 95, 186, 187, 234\ntest, 298\ntest-and-set, 297\ntest-and-set instruction, 296\ntests, 296\nthe mapping problem, 425\nthe web, 42\nthrashing, 240\nthread, 262, 263\nthread control blocks (TCBs), 263\nthread pool, 553\nthread safe, 311\nthread-local, 264\nthreads, 9, 93, 112\nThree C\u2019s, 230\nticket, 85\nticket currency, 85\nticket in\ufb02ation, 85\nticket lock, 302\nticket transfer, 85\ntickets, 83\nTID, 498\nTime sharing, 26\ntime sharing, 25, 45, 46, 110\ntime slice, 65\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S"
  },
  {
    "content": " C\u2019s, 230\nticket, 85\nticket currency, 85\nticket in\ufb02ation, 85\nticket lock, 302\nticket transfer, 85\ntickets, 83\nTID, 498\nTime sharing, 26\ntime sharing, 25, 45, 46, 110\ntime slice, 65\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nVA L I D B I T 599\ntime-sharing, 26\ntime-slicing, 65\ntime-space trade-off, 207\ntime-space trade-offs, 207\ntimeout, 548\ntimeout/retry, 548\ntimer interrupt, 51, 52\ntips, iii\nTLB, 183\nTLB coverage, 194\nTLB hit, 184, 219\nTLB miss, 184, 219\ntorn write, 403\ntotal ordering, 365\ntrack, 404\ntrack buffer, 407, 487\ntrack skew, 406\ntrade-off, 66\ntransaction, 274\ntransaction checksum, 508\ntransaction identi\ufb01er, 498\ntransfer, 406\ntranslate, 174\ntranslated, 133\ntranslation lookaside buffer, 195\ntranslation-lookaside buffer, 183\ntransparency, 113, 131\ntransparent, 132, 560\ntransparently, 224, 422\ntrap, 15, 47, 51\ntrap handler, 15, 188\ntrap handlers, 48\ntrap table, 47, 48\ntraverse, 471\ntriple indirect pointer, 467\ntruss, 444\nT uring A ward, 71\nturnaround time, 60\ntwo-phase lock, 307\ntwo-phased, 393\ntype, 443\nUDP/IP, 545\nunfairness metric, 87\nuni\ufb01ed page cache, 474\nuninitialized read, 123\nunlocked, 291\nunmapped, 188\nunmarshaling, 552\nupdate, 7, 96\nupdate visibility, 570\nUSB, 389\nuse bit, 238\nuser mode, 15, 47\nutilization, 110\nvalgrind, 125\nvalid, 190, 222\nvalid bit, 173, 206\nV enus, 576\nversion number, 521\nversioning \ufb01le system, 519\nV ery Simple File System, 461\nVice, 576\nvirtual, 4, 23, 130\nvirtual address, 112, 114, 134\nvirtual address space, 8\nvirtual CPUs, 263\nvirtual machine, 4\nvirtual memory, 263\nvirtual page number (VPN), 171\nvirtual-to-physical address translations, 176\nvirtualization, iii, 1, 4, 8, 23\nvirtualized, 90, 269\nvirtualizes, 13\nvirtualizing, 25\nvirtualizing memory, 8, 112\nvirtualizing the CPU, 6\nvirtually-indexed cache, 194\nvoid pointer, 154, 280\nvolatile, 11\nV oltaire\u2019s Law, 569\nvolumes, 577\nV on Neumann, 3\nvoo-doo constants, 77\nvsfs, 461\nW AFL, 523, 530\nwait-free, 367\nwait-free synchronization, 300\nwaiting, 326\nwakeup/waiting race, 306\nwhole-\ufb01le caching, 575\nwired, 188\nwork stealing, 101\nwork-conserving, 415\nworking sets, 240\nworkload, 59, 492, 585\nworkloads, 234\nworst \ufb01t, 163\nworst-\ufb01t, 148\nwrite back, 407\nwrite barriers, 499\nwrite buffering, 474, 513, 569\nwrite through, 407\nwrite verify, 535\nwrite-ahead log, 429\nwrite-ahead logging, 492, 497\nx86, 177\nXDR, 555\nXOR, 430\nyield, 51\nZemaphores, 355\nc\u20dd 2014, A R PA C I-D U S S E A U\nTH R E E\nEA S Y\nPI E C E S\n600 Z O M B I E\nZettabyte File System, 535\nZFS, 523, 535\nzombie, 31\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nAsides\nUN I X Signals, 379\nAdvanced Chapters, 93\nAnd Then Came"
  },
  {
    "content": " S Y\nPI E C E S\n600 Z O M B I E\nZettabyte File System, 535\nZFS, 523, 535\nzombie, 31\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nAsides\nUN I X Signals, 379\nAdvanced Chapters, 93\nAnd Then Came Linux, 18\nBelady\u2019s Anomaly, 231\nBlocking vs. Non-blocking Interfaces, 375\nCache Consistency Is Not A Panacea, 580\nCalling lseek() Does Not Perform A Disk Seek, 447\nComputing The \u201cA verage\u201d Seek, 411\nData Structure \u2013 The Free List, 136\nData Structure \u2013 The Inode, 465\nData Structure \u2013 The Page T able, 176\nData Structure \u2013 The Process List, 32\nDekker \u2019s and Peterson\u2019s Algorithms, 295\nDimensional Analysis, 408\nEmulating Reference Bits, 250\nEvery Address Y ou See Is Virtual, 114\nFFS File Creation, 482\nForcing W rites T o Disk, 499\nFree Space Management, 470\nGreat Engineers Are Really Great, 166\nHow Long Context Switches T ake, 55\nInterludes, 35\nKey Concurrency T erms, 272\n601\n602 W H Y SY S T E M CA L L S LO O K LI K E PR O C E D U R E CA L L S\nLinked-based Approaches, 468\nMeasurement Homeworks, 58\nMental Models Of File Systems, 462\nMultiple Page Sizes, 202\nOptimizing Log W rites, 500\nPreemptive Schedulers, 63\nReads Don\u2019t Access Allocation Structures, 472\nRISC vs. CISC, 189\nRTFM \u2013 Read The Man Pages, 42\nSimulation Homeworks, 70\nSoftware-based Relocation, 134\nStorage T echnologies, 218\nSwapping T erminology And Other Things, 220\nThe creat() System Call, 444\nThe End-to-End Argument, 555\nThe Importance of U N I X, 17\nThe Importance Of W orkload, 585\nThe RAID Consistent-Update Problem, 429\nThe RAID Mapping Problem, 425\nThe Segmentation Fault, 144\nThread API Guidelines, 288\nTLB V alid Bit \u0338= Page T able V alid Bit, 190\nT ypes of Cache Misses, 230\nT ypes of Locality, 234\nWhy Hardware Doesn\u2019t Handle Page Faults, 221\nWhy Null Pointer Accesses Cause Seg Faults, 248\nWhy Servers Crash, 561\nWhy System Calls Look Like Procedure Calls, 48\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nTips\nAlways Hold The Lock While Signaling, 329\nAmortization Can Reduce Costs, 66\nA void Premature Optimization (Knuth\u2019s Law), 322\nA void V oo-doo Constants (Ousterhout\u2019s Law), 79\nBe Careful Setting The Timeout V alue, 550\nBe Careful With Generalization, 356\nBe Lazy, 251\nBe W ary of Complexity, 208\nBe W ary Of Locks and Control Flow, 319\nBe W ary Of Powerful Commands, 451\nCommunication Is Inherently Unreliable, 544\nComparing Against Optimal is Useful, 229\nConsider Extent-based Approaches, 467\nDealing With Application Misbehavior, 51\nDetails Matter, 513\nDo W ork In The Background, 224\nDon\u2019t Always Do It Perfectly (T om W est\u2019s Law), 370\nDon\u2019t Block In Event-based Servers, 377\nGetting It Right (Lampson\u2019s Law), 40\nHardware-based Dynamic Relocation, 135\nIdempotency Is Powerful, 567\nIf 1000 Solutions Exist, No Great One Does, 149\nInterposition Is Powerful, 131\nInterrupts Not Always Better Than PIO, 393\nIt Always Depends (Livny\u2019s Law), 415\nIt Compiled or It Ran \u0338= It Is Correct, 123\nKnow And Use Y our T ools, 269\n603\n604 WH E N IN DO U B T, T RY IT OU T\nLearn From History,"
  },
  {
    "content": "67\nIf 1000 Solutions Exist, No Great One Does, 149\nInterposition Is Powerful, 131\nInterrupts Not Always Better Than PIO, 393\nIt Always Depends (Livny\u2019s Law), 415\nIt Compiled or It Ran \u0338= It Is Correct, 123\nKnow And Use Y our T ools, 269\n603\n604 WH E N IN DO U B T, T RY IT OU T\nLearn From History, 72\nLess Code Is Better Code (Lauer \u2019s Law), 302\nMake The System Usable, 488\nMeasure Then Build (Patterson\u2019s Law), 577\nMore Concurrency Isn\u2019t Necessarily Faster, 319\nOverlap Enables Higher Utilization, 68\nPerfect Is The Enemy Of The Good (V oltaire\u2019s Law), 569\nRAM Isn\u2019t Always RAM (Culler \u2019s Law), 194\nReboot Is Useful, 56\nSeparate Policy And Mechanism, 27\nSimple And Dumb Can Be Better (Hill\u2019s Law), 352\nThe Principle of Isolation, 113\nThe Principle of SJF, 62\nThere\u2019s No Free Lunch, 531\nThink About Concurrency As Malicious Scheduler, 297\nThink Carefully About Naming, 443\nT ransparency Enables Deployment, 422\nT urn Flaws Into Virtues, 523\nUnderstand Time-Space T rade-offs, 207\nUse strace (And Similar T ools), 445\nUse A Level Of Indirection, 516\nUse Advice Where Possible, 80\nUse Atomic Operations, 274\nUse Caching When Possible, 187\nUse Checksums For Integrity, 547\nUse Disks Sequentially, 410\nUse Hybrids, 205\nUse Protected Control T ransfer, 47\nUse Randomness, 84\nUse The Timer Interrupt T o Regain Control, 52\nUse Tickets T o Represent Shares, 85\nUse Time Sharing (and Space Sharing), 26\nUse While (Not If) For Conditions, 337\nWhen In Doubt, T ry It Out, 121\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nCruces\nHow T o Account For Disk Rotation Costs, 413\nHow T o Add Locks T o Data Structures, 311\nHow T o Allocate And Manage Memory, 119\nHow T o A void Spinning, 304\nHow T o A void The Costs Of Polling, 392\nHow T o A void The Curse Of Generality, 245\nHow T o Build A Device-neutral OS, 395\nHow T o Build A Distributed File System, 560\nHow T o Build A Lock, 293\nHow T o Build Concurrent Servers Without Threads, 373\nHow T o Build Correct Concurrent Programs, 10\nHow T o Build Systems That W ork When Components Fail, 543\nHow T o Communicate With Devices, 394\nHow T o Create And Control Processes, 35\nHow T o Create And Control Threads, 279\nHow T o Deal With Deadlock, 363\nHow T o Deal With Load Imbalance, 101\nHow T o Decide Which Page T o Evict, 227\nHow T o De\ufb01ne A Stateless File Protocol, 563\nHow T o Design A Scalable File Protocol, 578\nHow T o Design TLB Replacement Policy, 192\nHow T o Develop Scheduling Policy, 59\nHow T o Ef\ufb01ciently And Flexibly Virtualize Memory, 129\nHow T o Ef\ufb01ciently Virtualize The CPU With Control, 45\nHow T o Ensure Data Integrity, 527\nHow T o Gain Control Without Cooperation, 51\nHow T o Go Beyond Physical Memory, 217\nHow T o Handle Common Concurrency Bugs, 359\nHow T o Handle Disk Starvation, 413\nHow T o Handle Latent Sector Errors, 529\nHow T o Handle Lost W rites, 535\nHow T o Handle Misdirected W rites, 534\nHow T o Implement A Simple File System, 461\n605\n606 HO W TO WA I T FO R A C O N D I T I O N\nHow T o Implement An LRU Replacement Policy, 238\nHow T o Integrate I/O Into Systems, 389\nHow T o Lower PIO Overheads, 394\nHow T o Make A Large, Fast, Reliable Disk, 421\nHow T o Make All W rites Sequential W rites, 512\nHow T o Make Page T"
  },
  {
    "content": " File System, 461\n605\n606 HO W TO WA I T FO R A C O N D I T I O N\nHow T o Implement An LRU Replacement Policy, 238\nHow T o Integrate I/O Into Systems, 389\nHow T o Lower PIO Overheads, 394\nHow T o Make A Large, Fast, Reliable Disk, 421\nHow T o Make All W rites Sequential W rites, 512\nHow T o Make Page T ables Smaller, 201\nHow T o Manage A Persistent Device, 441\nHow T o Manage Free Space, 154\nHow T o Manage TLB Contents On A Context Switch, 191\nHow T o Organize On-disk Data T o Improve Performance, 480\nHow T o Perform Restricted Operations, 46\nHow T o Preserve Data Integrity Despite Corruption, 530\nHow T o Provide Support For Synchronization, 272\nHow T o Provide The Illusion Of Many CPUs, 25\nHow T o Reduce File System I/O Costs, 473\nHow T o Regain Control Of The CPU, 50\nHow T o Schedule Jobs On Multiple CPUs, 94\nHow T o Schedule Without Perfect Knowledge, 71\nHow T o Share The CPU Proportionally, 83\nHow T o Speed Up Address T ranslation, 183\nHow T o Store And Access Data On Disk, 403\nHow T o Store Data Persistently, 12\nHow T o Support A Large Address Space, 141\nHow T o Update The Disk Despite Crashes, 491\nHow T o Use Semaphores, 341\nHow T o Virtualize Memory, 112\nHow T o Virtualize Memory Without Segments, 169\nHow T o Virtualize Resources, 4\nHow T o W ait For A Condition, 326\nOP E R AT I N G\nSY S T E M S\n[V E R S I O N 0. 80] W W W.O S T E P.O R G\nThis book was typeset using the amazing L ATEX typesetting system and\nthe wonderful memoir book-making package. A heartfelt thank you to\nthe legions of programmers who have contributed to this powe rful tool\nover the many years of its development.\nAll of the graphs and \ufb01gures in the book were generated using a Python-\nbased version of zplot, a simple and useful tool developed by R. Arpaci-\nDusseau to generate graphs in PostScript. The zplot tool arose after\nmany years of frustration with existing graphing tools such as gnuplot\n(which was limited) and ploticus (which was overly complex though\nadmittedly quite awesome). As a result, R. A-D \ufb01nally put his years of\nstudy of PostScript to good use and developed zplot."
  }
]